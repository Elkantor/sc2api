// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "s2clientprotocol/common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SC2APIProtocol {

namespace {

const ::google::protobuf::Descriptor* AvailableAbility_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AvailableAbility_reflection_ = NULL;
const ::google::protobuf::Descriptor* ImageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ImageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointI_reflection_ = NULL;
const ::google::protobuf::Descriptor* RectangleI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RectangleI_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point2D_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Size2DI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Size2DI_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Race_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_s2clientprotocol_2fcommon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_s2clientprotocol_2fcommon_2eproto() {
  protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "s2clientprotocol/common.proto");
  GOOGLE_CHECK(file != NULL);
  AvailableAbility_descriptor_ = file->message_type(0);
  static const int AvailableAbility_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvailableAbility, ability_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvailableAbility, requires_point_),
  };
  AvailableAbility_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AvailableAbility_descriptor_,
      AvailableAbility::default_instance_,
      AvailableAbility_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvailableAbility, _has_bits_[0]),
      -1,
      -1,
      sizeof(AvailableAbility),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AvailableAbility, _internal_metadata_),
      -1);
  ImageData_descriptor_ = file->message_type(1);
  static const int ImageData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageData, bits_per_pixel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageData, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageData, data_),
  };
  ImageData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ImageData_descriptor_,
      ImageData::default_instance_,
      ImageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageData, _has_bits_[0]),
      -1,
      -1,
      sizeof(ImageData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ImageData, _internal_metadata_),
      -1);
  PointI_descriptor_ = file->message_type(2);
  static const int PointI_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointI, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointI, y_),
  };
  PointI_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PointI_descriptor_,
      PointI::default_instance_,
      PointI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointI, _has_bits_[0]),
      -1,
      -1,
      sizeof(PointI),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointI, _internal_metadata_),
      -1);
  RectangleI_descriptor_ = file->message_type(3);
  static const int RectangleI_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectangleI, p0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectangleI, p1_),
  };
  RectangleI_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RectangleI_descriptor_,
      RectangleI::default_instance_,
      RectangleI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectangleI, _has_bits_[0]),
      -1,
      -1,
      sizeof(RectangleI),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RectangleI, _internal_metadata_),
      -1);
  Point2D_descriptor_ = file->message_type(4);
  static const int Point2D_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2D, y_),
  };
  Point2D_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point2D_descriptor_,
      Point2D::default_instance_,
      Point2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2D, _has_bits_[0]),
      -1,
      -1,
      sizeof(Point2D),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point2D, _internal_metadata_),
      -1);
  Point_descriptor_ = file->message_type(5);
  static const int Point_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, z_),
  };
  Point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      -1,
      -1,
      sizeof(Point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
      -1);
  Size2DI_descriptor_ = file->message_type(6);
  static const int Size2DI_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2DI, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2DI, y_),
  };
  Size2DI_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Size2DI_descriptor_,
      Size2DI::default_instance_,
      Size2DI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2DI, _has_bits_[0]),
      -1,
      -1,
      sizeof(Size2DI),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Size2DI, _internal_metadata_),
      -1);
  Race_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_s2clientprotocol_2fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AvailableAbility_descriptor_, &AvailableAbility::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ImageData_descriptor_, &ImageData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PointI_descriptor_, &PointI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RectangleI_descriptor_, &RectangleI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point2D_descriptor_, &Point2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Size2DI_descriptor_, &Size2DI::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_s2clientprotocol_2fcommon_2eproto() {
  delete AvailableAbility::default_instance_;
  delete AvailableAbility_reflection_;
  delete ImageData::default_instance_;
  delete ImageData_reflection_;
  delete PointI::default_instance_;
  delete PointI_reflection_;
  delete RectangleI::default_instance_;
  delete RectangleI_reflection_;
  delete Point2D::default_instance_;
  delete Point2D_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete Size2DI::default_instance_;
  delete Size2DI_reflection_;
}

void protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035s2clientprotocol/common.proto\022\016SC2APIP"
    "rotocol\">\n\020AvailableAbility\022\022\n\nability_i"
    "d\030\001 \001(\005\022\026\n\016requires_point\030\002 \001(\010\"X\n\tImage"
    "Data\022\026\n\016bits_per_pixel\030\001 \001(\005\022%\n\004size\030\002 \001"
    "(\0132\027.SC2APIProtocol.Size2DI\022\014\n\004data\030\003 \001("
    "\014\"\036\n\006PointI\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"T\n\nRec"
    "tangleI\022\"\n\002p0\030\001 \001(\0132\026.SC2APIProtocol.Poi"
    "ntI\022\"\n\002p1\030\002 \001(\0132\026.SC2APIProtocol.PointI\""
    "\037\n\007Point2D\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"(\n\005Poin"
    "t\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"\037\n\007Si"
    "ze2DI\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005*A\n\004Race\022\n\n\006N"
    "oRace\020\000\022\n\n\006Terran\020\001\022\010\n\004Zerg\020\002\022\013\n\007Protoss"
    "\020\003\022\n\n\006Random\020\004", 494);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "s2clientprotocol/common.proto", &protobuf_RegisterTypes);
  AvailableAbility::default_instance_ = new AvailableAbility();
  ImageData::default_instance_ = new ImageData();
  PointI::default_instance_ = new PointI();
  RectangleI::default_instance_ = new RectangleI();
  Point2D::default_instance_ = new Point2D();
  Point::default_instance_ = new Point();
  Size2DI::default_instance_ = new Size2DI();
  AvailableAbility::default_instance_->InitAsDefaultInstance();
  ImageData::default_instance_->InitAsDefaultInstance();
  PointI::default_instance_->InitAsDefaultInstance();
  RectangleI::default_instance_->InitAsDefaultInstance();
  Point2D::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  Size2DI::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_s2clientprotocol_2fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_s2clientprotocol_2fcommon_2eproto {
  StaticDescriptorInitializer_s2clientprotocol_2fcommon_2eproto() {
    protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  }
} static_descriptor_initializer_s2clientprotocol_2fcommon_2eproto_;
const ::google::protobuf::EnumDescriptor* Race_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Race_descriptor_;
}
bool Race_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AvailableAbility::kAbilityIdFieldNumber;
const int AvailableAbility::kRequiresPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AvailableAbility::AvailableAbility()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.AvailableAbility)
}

void AvailableAbility::InitAsDefaultInstance() {
}

AvailableAbility::AvailableAbility(const AvailableAbility& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.AvailableAbility)
}

void AvailableAbility::SharedCtor() {
  _cached_size_ = 0;
  ability_id_ = 0;
  requires_point_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AvailableAbility::~AvailableAbility() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.AvailableAbility)
  SharedDtor();
}

void AvailableAbility::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AvailableAbility::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AvailableAbility::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AvailableAbility_descriptor_;
}

const AvailableAbility& AvailableAbility::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  return *default_instance_;
}

AvailableAbility* AvailableAbility::default_instance_ = NULL;

AvailableAbility* AvailableAbility::New(::google::protobuf::Arena* arena) const {
  AvailableAbility* n = new AvailableAbility;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AvailableAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.AvailableAbility)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AvailableAbility, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AvailableAbility*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ability_id_, requires_point_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AvailableAbility::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.AvailableAbility)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ability_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_id_)));
          set_has_ability_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_requires_point;
        break;
      }

      // optional bool requires_point = 2;
      case 2: {
        if (tag == 16) {
         parse_requires_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_point_)));
          set_has_requires_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.AvailableAbility)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.AvailableAbility)
  return false;
#undef DO_
}

void AvailableAbility::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.AvailableAbility)
  // optional int32 ability_id = 1;
  if (has_ability_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ability_id(), output);
  }

  // optional bool requires_point = 2;
  if (has_requires_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->requires_point(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.AvailableAbility)
}

::google::protobuf::uint8* AvailableAbility::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.AvailableAbility)
  // optional int32 ability_id = 1;
  if (has_ability_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ability_id(), target);
  }

  // optional bool requires_point = 2;
  if (has_requires_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->requires_point(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.AvailableAbility)
  return target;
}

int AvailableAbility::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.AvailableAbility)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 ability_id = 1;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ability_id());
    }

    // optional bool requires_point = 2;
    if (has_requires_point()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AvailableAbility::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.AvailableAbility)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AvailableAbility* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AvailableAbility>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.AvailableAbility)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.AvailableAbility)
    MergeFrom(*source);
  }
}

void AvailableAbility::MergeFrom(const AvailableAbility& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.AvailableAbility)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ability_id()) {
      set_ability_id(from.ability_id());
    }
    if (from.has_requires_point()) {
      set_requires_point(from.requires_point());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AvailableAbility::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.AvailableAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AvailableAbility::CopyFrom(const AvailableAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.AvailableAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvailableAbility::IsInitialized() const {

  return true;
}

void AvailableAbility::Swap(AvailableAbility* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AvailableAbility::InternalSwap(AvailableAbility* other) {
  std::swap(ability_id_, other->ability_id_);
  std::swap(requires_point_, other->requires_point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AvailableAbility::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AvailableAbility_descriptor_;
  metadata.reflection = AvailableAbility_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AvailableAbility

// optional int32 ability_id = 1;
bool AvailableAbility::has_ability_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AvailableAbility::set_has_ability_id() {
  _has_bits_[0] |= 0x00000001u;
}
void AvailableAbility::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void AvailableAbility::clear_ability_id() {
  ability_id_ = 0;
  clear_has_ability_id();
}
 ::google::protobuf::int32 AvailableAbility::ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AvailableAbility.ability_id)
  return ability_id_;
}
 void AvailableAbility::set_ability_id(::google::protobuf::int32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AvailableAbility.ability_id)
}

// optional bool requires_point = 2;
bool AvailableAbility::has_requires_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AvailableAbility::set_has_requires_point() {
  _has_bits_[0] |= 0x00000002u;
}
void AvailableAbility::clear_has_requires_point() {
  _has_bits_[0] &= ~0x00000002u;
}
void AvailableAbility::clear_requires_point() {
  requires_point_ = false;
  clear_has_requires_point();
}
 bool AvailableAbility::requires_point() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AvailableAbility.requires_point)
  return requires_point_;
}
 void AvailableAbility::set_requires_point(bool value) {
  set_has_requires_point();
  requires_point_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AvailableAbility.requires_point)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageData::kBitsPerPixelFieldNumber;
const int ImageData::kSizeFieldNumber;
const int ImageData::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageData::ImageData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ImageData)
}

void ImageData::InitAsDefaultInstance() {
  size_ = const_cast< ::SC2APIProtocol::Size2DI*>(&::SC2APIProtocol::Size2DI::default_instance());
}

ImageData::ImageData(const ImageData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ImageData)
}

void ImageData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bits_per_pixel_ = 0;
  size_ = NULL;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageData::~ImageData() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ImageData)
  SharedDtor();
}

void ImageData::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete size_;
  }
}

void ImageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ImageData_descriptor_;
}

const ImageData& ImageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  return *default_instance_;
}

ImageData* ImageData::default_instance_ = NULL;

ImageData* ImageData::New(::google::protobuf::Arena* arena) const {
  ImageData* n = new ImageData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageData::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ImageData)
  if (_has_bits_[0 / 32] & 7u) {
    bits_per_pixel_ = 0;
    if (has_size()) {
      if (size_ != NULL) size_->::SC2APIProtocol::Size2DI::Clear();
    }
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ImageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ImageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bits_per_pixel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bits_per_pixel_)));
          set_has_bits_per_pixel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_size;
        break;
      }

      // optional .SC2APIProtocol.Size2DI size = 2;
      case 2: {
        if (tag == 18) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ImageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ImageData)
  return false;
#undef DO_
}

void ImageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ImageData)
  // optional int32 bits_per_pixel = 1;
  if (has_bits_per_pixel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bits_per_pixel(), output);
  }

  // optional .SC2APIProtocol.Size2DI size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->size_, output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ImageData)
}

::google::protobuf::uint8* ImageData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ImageData)
  // optional int32 bits_per_pixel = 1;
  if (has_bits_per_pixel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bits_per_pixel(), target);
  }

  // optional .SC2APIProtocol.Size2DI size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->size_, false, target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ImageData)
  return target;
}

int ImageData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ImageData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 bits_per_pixel = 1;
    if (has_bits_per_pixel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bits_per_pixel());
    }

    // optional .SC2APIProtocol.Size2DI size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->size_);
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ImageData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ImageData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ImageData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ImageData)
    MergeFrom(*source);
  }
}

void ImageData::MergeFrom(const ImageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ImageData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bits_per_pixel()) {
      set_bits_per_pixel(from.bits_per_pixel());
    }
    if (from.has_size()) {
      mutable_size()->::SC2APIProtocol::Size2DI::MergeFrom(from.size());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ImageData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageData::CopyFrom(const ImageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ImageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageData::IsInitialized() const {

  return true;
}

void ImageData::Swap(ImageData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageData::InternalSwap(ImageData* other) {
  std::swap(bits_per_pixel_, other->bits_per_pixel_);
  std::swap(size_, other->size_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ImageData_descriptor_;
  metadata.reflection = ImageData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ImageData

// optional int32 bits_per_pixel = 1;
bool ImageData::has_bits_per_pixel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ImageData::set_has_bits_per_pixel() {
  _has_bits_[0] |= 0x00000001u;
}
void ImageData::clear_has_bits_per_pixel() {
  _has_bits_[0] &= ~0x00000001u;
}
void ImageData::clear_bits_per_pixel() {
  bits_per_pixel_ = 0;
  clear_has_bits_per_pixel();
}
 ::google::protobuf::int32 ImageData::bits_per_pixel() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ImageData.bits_per_pixel)
  return bits_per_pixel_;
}
 void ImageData::set_bits_per_pixel(::google::protobuf::int32 value) {
  set_has_bits_per_pixel();
  bits_per_pixel_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ImageData.bits_per_pixel)
}

// optional .SC2APIProtocol.Size2DI size = 2;
bool ImageData::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ImageData::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
void ImageData::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
void ImageData::clear_size() {
  if (size_ != NULL) size_->::SC2APIProtocol::Size2DI::Clear();
  clear_has_size();
}
const ::SC2APIProtocol::Size2DI& ImageData::size() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ImageData.size)
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
::SC2APIProtocol::Size2DI* ImageData::mutable_size() {
  set_has_size();
  if (size_ == NULL) {
    size_ = new ::SC2APIProtocol::Size2DI;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ImageData.size)
  return size_;
}
::SC2APIProtocol::Size2DI* ImageData::release_size() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ImageData.size)
  clear_has_size();
  ::SC2APIProtocol::Size2DI* temp = size_;
  size_ = NULL;
  return temp;
}
void ImageData::set_allocated_size(::SC2APIProtocol::Size2DI* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ImageData.size)
}

// optional bytes data = 3;
bool ImageData::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ImageData::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
void ImageData::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void ImageData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& ImageData::data() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ImageData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ImageData.data)
}
 void ImageData::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ImageData.data)
}
 void ImageData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ImageData.data)
}
 ::std::string* ImageData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ImageData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ImageData::release_data() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ImageData.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ImageData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ImageData.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointI::kXFieldNumber;
const int PointI::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointI::PointI()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.PointI)
}

void PointI::InitAsDefaultInstance() {
}

PointI::PointI(const PointI& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PointI)
}

void PointI::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointI::~PointI() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PointI)
  SharedDtor();
}

void PointI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointI_descriptor_;
}

const PointI& PointI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  return *default_instance_;
}

PointI* PointI::default_instance_ = NULL;

PointI* PointI::New(::google::protobuf::Arena* arena) const {
  PointI* n = new PointI;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointI::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PointI)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PointI, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PointI*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PointI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.PointI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.PointI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.PointI)
  return false;
#undef DO_
}

void PointI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.PointI)
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.PointI)
}

::google::protobuf::uint8* PointI::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PointI)
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PointI)
  return target;
}

int PointI::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PointI)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.PointI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PointI* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PointI>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.PointI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.PointI)
    MergeFrom(*source);
  }
}

void PointI::MergeFrom(const PointI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PointI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PointI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.PointI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointI::CopyFrom(const PointI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PointI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointI::IsInitialized() const {

  return true;
}

void PointI::Swap(PointI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointI::InternalSwap(PointI* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PointI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointI_descriptor_;
  metadata.reflection = PointI_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointI

// optional int32 x = 1;
bool PointI::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PointI::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void PointI::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void PointI::clear_x() {
  x_ = 0;
  clear_has_x();
}
 ::google::protobuf::int32 PointI::x() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PointI.x)
  return x_;
}
 void PointI::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PointI.x)
}

// optional int32 y = 2;
bool PointI::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PointI::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void PointI::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void PointI::clear_y() {
  y_ = 0;
  clear_has_y();
}
 ::google::protobuf::int32 PointI::y() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PointI.y)
  return y_;
}
 void PointI::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PointI.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RectangleI::kP0FieldNumber;
const int RectangleI::kP1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RectangleI::RectangleI()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RectangleI)
}

void RectangleI::InitAsDefaultInstance() {
  p0_ = const_cast< ::SC2APIProtocol::PointI*>(&::SC2APIProtocol::PointI::default_instance());
  p1_ = const_cast< ::SC2APIProtocol::PointI*>(&::SC2APIProtocol::PointI::default_instance());
}

RectangleI::RectangleI(const RectangleI& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RectangleI)
}

void RectangleI::SharedCtor() {
  _cached_size_ = 0;
  p0_ = NULL;
  p1_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RectangleI::~RectangleI() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RectangleI)
  SharedDtor();
}

void RectangleI::SharedDtor() {
  if (this != default_instance_) {
    delete p0_;
    delete p1_;
  }
}

void RectangleI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RectangleI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RectangleI_descriptor_;
}

const RectangleI& RectangleI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  return *default_instance_;
}

RectangleI* RectangleI::default_instance_ = NULL;

RectangleI* RectangleI::New(::google::protobuf::Arena* arena) const {
  RectangleI* n = new RectangleI;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RectangleI::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RectangleI)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_p0()) {
      if (p0_ != NULL) p0_->::SC2APIProtocol::PointI::Clear();
    }
    if (has_p1()) {
      if (p1_ != NULL) p1_->::SC2APIProtocol::PointI::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RectangleI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RectangleI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.PointI p0 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p0()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_p1;
        break;
      }

      // optional .SC2APIProtocol.PointI p1 = 2;
      case 2: {
        if (tag == 18) {
         parse_p1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RectangleI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RectangleI)
  return false;
#undef DO_
}

void RectangleI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RectangleI)
  // optional .SC2APIProtocol.PointI p0 = 1;
  if (has_p0()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->p0_, output);
  }

  // optional .SC2APIProtocol.PointI p1 = 2;
  if (has_p1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->p1_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RectangleI)
}

::google::protobuf::uint8* RectangleI::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RectangleI)
  // optional .SC2APIProtocol.PointI p0 = 1;
  if (has_p0()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->p0_, false, target);
  }

  // optional .SC2APIProtocol.PointI p1 = 2;
  if (has_p1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->p1_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RectangleI)
  return target;
}

int RectangleI::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RectangleI)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .SC2APIProtocol.PointI p0 = 1;
    if (has_p0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->p0_);
    }

    // optional .SC2APIProtocol.PointI p1 = 2;
    if (has_p1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->p1_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RectangleI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RectangleI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RectangleI* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RectangleI>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RectangleI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RectangleI)
    MergeFrom(*source);
  }
}

void RectangleI::MergeFrom(const RectangleI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RectangleI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_p0()) {
      mutable_p0()->::SC2APIProtocol::PointI::MergeFrom(from.p0());
    }
    if (from.has_p1()) {
      mutable_p1()->::SC2APIProtocol::PointI::MergeFrom(from.p1());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RectangleI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RectangleI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RectangleI::CopyFrom(const RectangleI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RectangleI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectangleI::IsInitialized() const {

  return true;
}

void RectangleI::Swap(RectangleI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RectangleI::InternalSwap(RectangleI* other) {
  std::swap(p0_, other->p0_);
  std::swap(p1_, other->p1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RectangleI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RectangleI_descriptor_;
  metadata.reflection = RectangleI_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RectangleI

// optional .SC2APIProtocol.PointI p0 = 1;
bool RectangleI::has_p0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RectangleI::set_has_p0() {
  _has_bits_[0] |= 0x00000001u;
}
void RectangleI::clear_has_p0() {
  _has_bits_[0] &= ~0x00000001u;
}
void RectangleI::clear_p0() {
  if (p0_ != NULL) p0_->::SC2APIProtocol::PointI::Clear();
  clear_has_p0();
}
const ::SC2APIProtocol::PointI& RectangleI::p0() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RectangleI.p0)
  return p0_ != NULL ? *p0_ : *default_instance_->p0_;
}
::SC2APIProtocol::PointI* RectangleI::mutable_p0() {
  set_has_p0();
  if (p0_ == NULL) {
    p0_ = new ::SC2APIProtocol::PointI;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RectangleI.p0)
  return p0_;
}
::SC2APIProtocol::PointI* RectangleI::release_p0() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RectangleI.p0)
  clear_has_p0();
  ::SC2APIProtocol::PointI* temp = p0_;
  p0_ = NULL;
  return temp;
}
void RectangleI::set_allocated_p0(::SC2APIProtocol::PointI* p0) {
  delete p0_;
  p0_ = p0;
  if (p0) {
    set_has_p0();
  } else {
    clear_has_p0();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RectangleI.p0)
}

// optional .SC2APIProtocol.PointI p1 = 2;
bool RectangleI::has_p1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RectangleI::set_has_p1() {
  _has_bits_[0] |= 0x00000002u;
}
void RectangleI::clear_has_p1() {
  _has_bits_[0] &= ~0x00000002u;
}
void RectangleI::clear_p1() {
  if (p1_ != NULL) p1_->::SC2APIProtocol::PointI::Clear();
  clear_has_p1();
}
const ::SC2APIProtocol::PointI& RectangleI::p1() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RectangleI.p1)
  return p1_ != NULL ? *p1_ : *default_instance_->p1_;
}
::SC2APIProtocol::PointI* RectangleI::mutable_p1() {
  set_has_p1();
  if (p1_ == NULL) {
    p1_ = new ::SC2APIProtocol::PointI;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RectangleI.p1)
  return p1_;
}
::SC2APIProtocol::PointI* RectangleI::release_p1() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RectangleI.p1)
  clear_has_p1();
  ::SC2APIProtocol::PointI* temp = p1_;
  p1_ = NULL;
  return temp;
}
void RectangleI::set_allocated_p1(::SC2APIProtocol::PointI* p1) {
  delete p1_;
  p1_ = p1;
  if (p1) {
    set_has_p1();
  } else {
    clear_has_p1();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RectangleI.p1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point2D::kXFieldNumber;
const int Point2D::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point2D::Point2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.Point2D)
}

void Point2D::InitAsDefaultInstance() {
}

Point2D::Point2D(const Point2D& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Point2D)
}

void Point2D::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point2D::~Point2D() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Point2D)
  SharedDtor();
}

void Point2D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point2D_descriptor_;
}

const Point2D& Point2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  return *default_instance_;
}

Point2D* Point2D::default_instance_ = NULL;

Point2D* Point2D::New(::google::protobuf::Arena* arena) const {
  Point2D* n = new Point2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point2D::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Point2D)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Point2D, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point2D*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Point2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.Point2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.Point2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.Point2D)
  return false;
#undef DO_
}

void Point2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.Point2D)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.Point2D)
}

::google::protobuf::uint8* Point2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Point2D)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Point2D)
  return target;
}

int Point2D::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Point2D)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.Point2D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Point2D* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Point2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.Point2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.Point2D)
    MergeFrom(*source);
  }
}

void Point2D::MergeFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Point2D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Point2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2D::CopyFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2D::IsInitialized() const {

  return true;
}

void Point2D::Swap(Point2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point2D::InternalSwap(Point2D* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point2D_descriptor_;
  metadata.reflection = Point2D_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point2D

// optional float x = 1;
bool Point2D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point2D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point2D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point2D::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Point2D::x() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Point2D.x)
  return x_;
}
 void Point2D::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Point2D.x)
}

// optional float y = 2;
bool Point2D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point2D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point2D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point2D::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Point2D::y() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Point2D.y)
  return y_;
}
 void Point2D::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Point2D.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Point)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Point, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.Point)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Point)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Point)
  return target;
}

int Point::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Point)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Point* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional float x = 1;
bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Point::x() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Point.x)
  return x_;
}
 void Point::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Point.x)
}

// optional float y = 2;
bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Point::y() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Point.y)
  return y_;
}
 void Point::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Point.y)
}

// optional float z = 3;
bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float Point::z() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Point.z)
  return z_;
}
 void Point::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Point.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Size2DI::kXFieldNumber;
const int Size2DI::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Size2DI::Size2DI()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.Size2DI)
}

void Size2DI::InitAsDefaultInstance() {
}

Size2DI::Size2DI(const Size2DI& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Size2DI)
}

void Size2DI::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Size2DI::~Size2DI() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Size2DI)
  SharedDtor();
}

void Size2DI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Size2DI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Size2DI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Size2DI_descriptor_;
}

const Size2DI& Size2DI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  return *default_instance_;
}

Size2DI* Size2DI::default_instance_ = NULL;

Size2DI* Size2DI::New(::google::protobuf::Arena* arena) const {
  Size2DI* n = new Size2DI;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Size2DI::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Size2DI)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Size2DI, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Size2DI*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Size2DI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.Size2DI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional int32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.Size2DI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.Size2DI)
  return false;
#undef DO_
}

void Size2DI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.Size2DI)
  // optional int32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.Size2DI)
}

::google::protobuf::uint8* Size2DI::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Size2DI)
  // optional int32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Size2DI)
  return target;
}

int Size2DI::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Size2DI)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Size2DI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.Size2DI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Size2DI* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Size2DI>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.Size2DI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.Size2DI)
    MergeFrom(*source);
  }
}

void Size2DI::MergeFrom(const Size2DI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Size2DI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Size2DI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.Size2DI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Size2DI::CopyFrom(const Size2DI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Size2DI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size2DI::IsInitialized() const {

  return true;
}

void Size2DI::Swap(Size2DI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Size2DI::InternalSwap(Size2DI* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Size2DI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Size2DI_descriptor_;
  metadata.reflection = Size2DI_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Size2DI

// optional int32 x = 1;
bool Size2DI::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Size2DI::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Size2DI::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Size2DI::clear_x() {
  x_ = 0;
  clear_has_x();
}
 ::google::protobuf::int32 Size2DI::x() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Size2DI.x)
  return x_;
}
 void Size2DI::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Size2DI.x)
}

// optional int32 y = 2;
bool Size2DI::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Size2DI::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Size2DI::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Size2DI::clear_y() {
  y_ = 0;
  clear_has_y();
}
 ::google::protobuf::int32 Size2DI::y() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Size2DI.y)
  return y_;
}
 void Size2DI::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Size2DI.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SC2APIProtocol

// @@protoc_insertion_point(global_scope)
