// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/score.proto

#ifndef PROTOBUF_s2clientprotocol_2fscore_2eproto__INCLUDED
#define PROTOBUF_s2clientprotocol_2fscore_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SC2APIProtocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_s2clientprotocol_2fscore_2eproto();
void protobuf_AssignDesc_s2clientprotocol_2fscore_2eproto();
void protobuf_ShutdownFile_s2clientprotocol_2fscore_2eproto();

class CategoryScoreDetails;
class Score;
class ScoreDetails;
class VitalScoreDetails;

enum Score_ScoreType {
  Score_ScoreType_Curriculum = 1,
  Score_ScoreType_Melee = 2
};
bool Score_ScoreType_IsValid(int value);
const Score_ScoreType Score_ScoreType_ScoreType_MIN = Score_ScoreType_Curriculum;
const Score_ScoreType Score_ScoreType_ScoreType_MAX = Score_ScoreType_Melee;
const int Score_ScoreType_ScoreType_ARRAYSIZE = Score_ScoreType_ScoreType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Score_ScoreType_descriptor();
inline const ::std::string& Score_ScoreType_Name(Score_ScoreType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Score_ScoreType_descriptor(), value);
}
inline bool Score_ScoreType_Parse(
    const ::std::string& name, Score_ScoreType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Score_ScoreType>(
    Score_ScoreType_descriptor(), name, value);
}
// ===================================================================

class Score : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.Score) */ {
 public:
  Score();
  virtual ~Score();

  Score(const Score& from);

  inline Score& operator=(const Score& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Score& default_instance();

  void Swap(Score* other);

  // implements Message ----------------------------------------------

  inline Score* New() const { return New(NULL); }

  Score* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Score& from);
  void MergeFrom(const Score& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Score* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Score_ScoreType ScoreType;
  static const ScoreType Curriculum =
    Score_ScoreType_Curriculum;
  static const ScoreType Melee =
    Score_ScoreType_Melee;
  static inline bool ScoreType_IsValid(int value) {
    return Score_ScoreType_IsValid(value);
  }
  static const ScoreType ScoreType_MIN =
    Score_ScoreType_ScoreType_MIN;
  static const ScoreType ScoreType_MAX =
    Score_ScoreType_ScoreType_MAX;
  static const int ScoreType_ARRAYSIZE =
    Score_ScoreType_ScoreType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ScoreType_descriptor() {
    return Score_ScoreType_descriptor();
  }
  static inline const ::std::string& ScoreType_Name(ScoreType value) {
    return Score_ScoreType_Name(value);
  }
  static inline bool ScoreType_Parse(const ::std::string& name,
      ScoreType* value) {
    return Score_ScoreType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SC2APIProtocol.Score.ScoreType score_type = 6;
  bool has_score_type() const;
  void clear_score_type();
  static const int kScoreTypeFieldNumber = 6;
  ::SC2APIProtocol::Score_ScoreType score_type() const;
  void set_score_type(::SC2APIProtocol::Score_ScoreType value);

  // optional int32 score = 7;
  bool has_score() const;
  void clear_score();
  static const int kScoreFieldNumber = 7;
  ::google::protobuf::int32 score() const;
  void set_score(::google::protobuf::int32 value);

  // optional .SC2APIProtocol.ScoreDetails score_details = 8;
  bool has_score_details() const;
  void clear_score_details();
  static const int kScoreDetailsFieldNumber = 8;
  const ::SC2APIProtocol::ScoreDetails& score_details() const;
  ::SC2APIProtocol::ScoreDetails* mutable_score_details();
  ::SC2APIProtocol::ScoreDetails* release_score_details();
  void set_allocated_score_details(::SC2APIProtocol::ScoreDetails* score_details);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.Score)
 private:
  inline void set_has_score_type();
  inline void clear_has_score_type();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_score_details();
  inline void clear_has_score_details();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int score_type_;
  ::google::protobuf::int32 score_;
  ::SC2APIProtocol::ScoreDetails* score_details_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fscore_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fscore_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fscore_2eproto();

  void InitAsDefaultInstance();
  static Score* default_instance_;
};
// -------------------------------------------------------------------

class CategoryScoreDetails : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.CategoryScoreDetails) */ {
 public:
  CategoryScoreDetails();
  virtual ~CategoryScoreDetails();

  CategoryScoreDetails(const CategoryScoreDetails& from);

  inline CategoryScoreDetails& operator=(const CategoryScoreDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CategoryScoreDetails& default_instance();

  void Swap(CategoryScoreDetails* other);

  // implements Message ----------------------------------------------

  inline CategoryScoreDetails* New() const { return New(NULL); }

  CategoryScoreDetails* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CategoryScoreDetails& from);
  void MergeFrom(const CategoryScoreDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CategoryScoreDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float none = 1;
  bool has_none() const;
  void clear_none();
  static const int kNoneFieldNumber = 1;
  float none() const;
  void set_none(float value);

  // optional float army = 2;
  bool has_army() const;
  void clear_army();
  static const int kArmyFieldNumber = 2;
  float army() const;
  void set_army(float value);

  // optional float economy = 3;
  bool has_economy() const;
  void clear_economy();
  static const int kEconomyFieldNumber = 3;
  float economy() const;
  void set_economy(float value);

  // optional float technology = 4;
  bool has_technology() const;
  void clear_technology();
  static const int kTechnologyFieldNumber = 4;
  float technology() const;
  void set_technology(float value);

  // optional float upgrade = 5;
  bool has_upgrade() const;
  void clear_upgrade();
  static const int kUpgradeFieldNumber = 5;
  float upgrade() const;
  void set_upgrade(float value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.CategoryScoreDetails)
 private:
  inline void set_has_none();
  inline void clear_has_none();
  inline void set_has_army();
  inline void clear_has_army();
  inline void set_has_economy();
  inline void clear_has_economy();
  inline void set_has_technology();
  inline void clear_has_technology();
  inline void set_has_upgrade();
  inline void clear_has_upgrade();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float none_;
  float army_;
  float economy_;
  float technology_;
  float upgrade_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fscore_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fscore_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fscore_2eproto();

  void InitAsDefaultInstance();
  static CategoryScoreDetails* default_instance_;
};
// -------------------------------------------------------------------

class VitalScoreDetails : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.VitalScoreDetails) */ {
 public:
  VitalScoreDetails();
  virtual ~VitalScoreDetails();

  VitalScoreDetails(const VitalScoreDetails& from);

  inline VitalScoreDetails& operator=(const VitalScoreDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VitalScoreDetails& default_instance();

  void Swap(VitalScoreDetails* other);

  // implements Message ----------------------------------------------

  inline VitalScoreDetails* New() const { return New(NULL); }

  VitalScoreDetails* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VitalScoreDetails& from);
  void MergeFrom(const VitalScoreDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VitalScoreDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float life = 1;
  bool has_life() const;
  void clear_life();
  static const int kLifeFieldNumber = 1;
  float life() const;
  void set_life(float value);

  // optional float shields = 2;
  bool has_shields() const;
  void clear_shields();
  static const int kShieldsFieldNumber = 2;
  float shields() const;
  void set_shields(float value);

  // optional float energy = 3;
  bool has_energy() const;
  void clear_energy();
  static const int kEnergyFieldNumber = 3;
  float energy() const;
  void set_energy(float value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.VitalScoreDetails)
 private:
  inline void set_has_life();
  inline void clear_has_life();
  inline void set_has_shields();
  inline void clear_has_shields();
  inline void set_has_energy();
  inline void clear_has_energy();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float life_;
  float shields_;
  float energy_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fscore_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fscore_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fscore_2eproto();

  void InitAsDefaultInstance();
  static VitalScoreDetails* default_instance_;
};
// -------------------------------------------------------------------

class ScoreDetails : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ScoreDetails) */ {
 public:
  ScoreDetails();
  virtual ~ScoreDetails();

  ScoreDetails(const ScoreDetails& from);

  inline ScoreDetails& operator=(const ScoreDetails& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScoreDetails& default_instance();

  void Swap(ScoreDetails* other);

  // implements Message ----------------------------------------------

  inline ScoreDetails* New() const { return New(NULL); }

  ScoreDetails* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScoreDetails& from);
  void MergeFrom(const ScoreDetails& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScoreDetails* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float idle_production_time = 1;
  bool has_idle_production_time() const;
  void clear_idle_production_time();
  static const int kIdleProductionTimeFieldNumber = 1;
  float idle_production_time() const;
  void set_idle_production_time(float value);

  // optional float idle_worker_time = 2;
  bool has_idle_worker_time() const;
  void clear_idle_worker_time();
  static const int kIdleWorkerTimeFieldNumber = 2;
  float idle_worker_time() const;
  void set_idle_worker_time(float value);

  // optional float total_value_units = 3;
  bool has_total_value_units() const;
  void clear_total_value_units();
  static const int kTotalValueUnitsFieldNumber = 3;
  float total_value_units() const;
  void set_total_value_units(float value);

  // optional float total_value_structures = 4;
  bool has_total_value_structures() const;
  void clear_total_value_structures();
  static const int kTotalValueStructuresFieldNumber = 4;
  float total_value_structures() const;
  void set_total_value_structures(float value);

  // optional float killed_value_units = 5;
  bool has_killed_value_units() const;
  void clear_killed_value_units();
  static const int kKilledValueUnitsFieldNumber = 5;
  float killed_value_units() const;
  void set_killed_value_units(float value);

  // optional float killed_value_structures = 6;
  bool has_killed_value_structures() const;
  void clear_killed_value_structures();
  static const int kKilledValueStructuresFieldNumber = 6;
  float killed_value_structures() const;
  void set_killed_value_structures(float value);

  // optional float collected_minerals = 7;
  bool has_collected_minerals() const;
  void clear_collected_minerals();
  static const int kCollectedMineralsFieldNumber = 7;
  float collected_minerals() const;
  void set_collected_minerals(float value);

  // optional float collected_vespene = 8;
  bool has_collected_vespene() const;
  void clear_collected_vespene();
  static const int kCollectedVespeneFieldNumber = 8;
  float collected_vespene() const;
  void set_collected_vespene(float value);

  // optional float collection_rate_minerals = 9;
  bool has_collection_rate_minerals() const;
  void clear_collection_rate_minerals();
  static const int kCollectionRateMineralsFieldNumber = 9;
  float collection_rate_minerals() const;
  void set_collection_rate_minerals(float value);

  // optional float collection_rate_vespene = 10;
  bool has_collection_rate_vespene() const;
  void clear_collection_rate_vespene();
  static const int kCollectionRateVespeneFieldNumber = 10;
  float collection_rate_vespene() const;
  void set_collection_rate_vespene(float value);

  // optional float spent_minerals = 11;
  bool has_spent_minerals() const;
  void clear_spent_minerals();
  static const int kSpentMineralsFieldNumber = 11;
  float spent_minerals() const;
  void set_spent_minerals(float value);

  // optional float spent_vespene = 12;
  bool has_spent_vespene() const;
  void clear_spent_vespene();
  static const int kSpentVespeneFieldNumber = 12;
  float spent_vespene() const;
  void set_spent_vespene(float value);

  // optional .SC2APIProtocol.CategoryScoreDetails food_used = 13;
  bool has_food_used() const;
  void clear_food_used();
  static const int kFoodUsedFieldNumber = 13;
  const ::SC2APIProtocol::CategoryScoreDetails& food_used() const;
  ::SC2APIProtocol::CategoryScoreDetails* mutable_food_used();
  ::SC2APIProtocol::CategoryScoreDetails* release_food_used();
  void set_allocated_food_used(::SC2APIProtocol::CategoryScoreDetails* food_used);

  // optional .SC2APIProtocol.CategoryScoreDetails killed_minerals = 14;
  bool has_killed_minerals() const;
  void clear_killed_minerals();
  static const int kKilledMineralsFieldNumber = 14;
  const ::SC2APIProtocol::CategoryScoreDetails& killed_minerals() const;
  ::SC2APIProtocol::CategoryScoreDetails* mutable_killed_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* release_killed_minerals();
  void set_allocated_killed_minerals(::SC2APIProtocol::CategoryScoreDetails* killed_minerals);

  // optional .SC2APIProtocol.CategoryScoreDetails killed_vespene = 15;
  bool has_killed_vespene() const;
  void clear_killed_vespene();
  static const int kKilledVespeneFieldNumber = 15;
  const ::SC2APIProtocol::CategoryScoreDetails& killed_vespene() const;
  ::SC2APIProtocol::CategoryScoreDetails* mutable_killed_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* release_killed_vespene();
  void set_allocated_killed_vespene(::SC2APIProtocol::CategoryScoreDetails* killed_vespene);

  // optional .SC2APIProtocol.CategoryScoreDetails lost_minerals = 16;
  bool has_lost_minerals() const;
  void clear_lost_minerals();
  static const int kLostMineralsFieldNumber = 16;
  const ::SC2APIProtocol::CategoryScoreDetails& lost_minerals() const;
  ::SC2APIProtocol::CategoryScoreDetails* mutable_lost_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* release_lost_minerals();
  void set_allocated_lost_minerals(::SC2APIProtocol::CategoryScoreDetails* lost_minerals);

  // optional .SC2APIProtocol.CategoryScoreDetails lost_vespene = 17;
  bool has_lost_vespene() const;
  void clear_lost_vespene();
  static const int kLostVespeneFieldNumber = 17;
  const ::SC2APIProtocol::CategoryScoreDetails& lost_vespene() const;
  ::SC2APIProtocol::CategoryScoreDetails* mutable_lost_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* release_lost_vespene();
  void set_allocated_lost_vespene(::SC2APIProtocol::CategoryScoreDetails* lost_vespene);

  // optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_minerals = 18;
  bool has_friendly_fire_minerals() const;
  void clear_friendly_fire_minerals();
  static const int kFriendlyFireMineralsFieldNumber = 18;
  const ::SC2APIProtocol::CategoryScoreDetails& friendly_fire_minerals() const;
  ::SC2APIProtocol::CategoryScoreDetails* mutable_friendly_fire_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* release_friendly_fire_minerals();
  void set_allocated_friendly_fire_minerals(::SC2APIProtocol::CategoryScoreDetails* friendly_fire_minerals);

  // optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_vespene = 19;
  bool has_friendly_fire_vespene() const;
  void clear_friendly_fire_vespene();
  static const int kFriendlyFireVespeneFieldNumber = 19;
  const ::SC2APIProtocol::CategoryScoreDetails& friendly_fire_vespene() const;
  ::SC2APIProtocol::CategoryScoreDetails* mutable_friendly_fire_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* release_friendly_fire_vespene();
  void set_allocated_friendly_fire_vespene(::SC2APIProtocol::CategoryScoreDetails* friendly_fire_vespene);

  // optional .SC2APIProtocol.CategoryScoreDetails used_minerals = 20;
  bool has_used_minerals() const;
  void clear_used_minerals();
  static const int kUsedMineralsFieldNumber = 20;
  const ::SC2APIProtocol::CategoryScoreDetails& used_minerals() const;
  ::SC2APIProtocol::CategoryScoreDetails* mutable_used_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* release_used_minerals();
  void set_allocated_used_minerals(::SC2APIProtocol::CategoryScoreDetails* used_minerals);

  // optional .SC2APIProtocol.CategoryScoreDetails used_vespene = 21;
  bool has_used_vespene() const;
  void clear_used_vespene();
  static const int kUsedVespeneFieldNumber = 21;
  const ::SC2APIProtocol::CategoryScoreDetails& used_vespene() const;
  ::SC2APIProtocol::CategoryScoreDetails* mutable_used_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* release_used_vespene();
  void set_allocated_used_vespene(::SC2APIProtocol::CategoryScoreDetails* used_vespene);

  // optional .SC2APIProtocol.CategoryScoreDetails total_used_minerals = 22;
  bool has_total_used_minerals() const;
  void clear_total_used_minerals();
  static const int kTotalUsedMineralsFieldNumber = 22;
  const ::SC2APIProtocol::CategoryScoreDetails& total_used_minerals() const;
  ::SC2APIProtocol::CategoryScoreDetails* mutable_total_used_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* release_total_used_minerals();
  void set_allocated_total_used_minerals(::SC2APIProtocol::CategoryScoreDetails* total_used_minerals);

  // optional .SC2APIProtocol.CategoryScoreDetails total_used_vespene = 23;
  bool has_total_used_vespene() const;
  void clear_total_used_vespene();
  static const int kTotalUsedVespeneFieldNumber = 23;
  const ::SC2APIProtocol::CategoryScoreDetails& total_used_vespene() const;
  ::SC2APIProtocol::CategoryScoreDetails* mutable_total_used_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* release_total_used_vespene();
  void set_allocated_total_used_vespene(::SC2APIProtocol::CategoryScoreDetails* total_used_vespene);

  // optional .SC2APIProtocol.VitalScoreDetails total_damage_dealt = 24;
  bool has_total_damage_dealt() const;
  void clear_total_damage_dealt();
  static const int kTotalDamageDealtFieldNumber = 24;
  const ::SC2APIProtocol::VitalScoreDetails& total_damage_dealt() const;
  ::SC2APIProtocol::VitalScoreDetails* mutable_total_damage_dealt();
  ::SC2APIProtocol::VitalScoreDetails* release_total_damage_dealt();
  void set_allocated_total_damage_dealt(::SC2APIProtocol::VitalScoreDetails* total_damage_dealt);

  // optional .SC2APIProtocol.VitalScoreDetails total_damage_taken = 25;
  bool has_total_damage_taken() const;
  void clear_total_damage_taken();
  static const int kTotalDamageTakenFieldNumber = 25;
  const ::SC2APIProtocol::VitalScoreDetails& total_damage_taken() const;
  ::SC2APIProtocol::VitalScoreDetails* mutable_total_damage_taken();
  ::SC2APIProtocol::VitalScoreDetails* release_total_damage_taken();
  void set_allocated_total_damage_taken(::SC2APIProtocol::VitalScoreDetails* total_damage_taken);

  // optional .SC2APIProtocol.VitalScoreDetails total_healed = 26;
  bool has_total_healed() const;
  void clear_total_healed();
  static const int kTotalHealedFieldNumber = 26;
  const ::SC2APIProtocol::VitalScoreDetails& total_healed() const;
  ::SC2APIProtocol::VitalScoreDetails* mutable_total_healed();
  ::SC2APIProtocol::VitalScoreDetails* release_total_healed();
  void set_allocated_total_healed(::SC2APIProtocol::VitalScoreDetails* total_healed);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ScoreDetails)
 private:
  inline void set_has_idle_production_time();
  inline void clear_has_idle_production_time();
  inline void set_has_idle_worker_time();
  inline void clear_has_idle_worker_time();
  inline void set_has_total_value_units();
  inline void clear_has_total_value_units();
  inline void set_has_total_value_structures();
  inline void clear_has_total_value_structures();
  inline void set_has_killed_value_units();
  inline void clear_has_killed_value_units();
  inline void set_has_killed_value_structures();
  inline void clear_has_killed_value_structures();
  inline void set_has_collected_minerals();
  inline void clear_has_collected_minerals();
  inline void set_has_collected_vespene();
  inline void clear_has_collected_vespene();
  inline void set_has_collection_rate_minerals();
  inline void clear_has_collection_rate_minerals();
  inline void set_has_collection_rate_vespene();
  inline void clear_has_collection_rate_vespene();
  inline void set_has_spent_minerals();
  inline void clear_has_spent_minerals();
  inline void set_has_spent_vespene();
  inline void clear_has_spent_vespene();
  inline void set_has_food_used();
  inline void clear_has_food_used();
  inline void set_has_killed_minerals();
  inline void clear_has_killed_minerals();
  inline void set_has_killed_vespene();
  inline void clear_has_killed_vespene();
  inline void set_has_lost_minerals();
  inline void clear_has_lost_minerals();
  inline void set_has_lost_vespene();
  inline void clear_has_lost_vespene();
  inline void set_has_friendly_fire_minerals();
  inline void clear_has_friendly_fire_minerals();
  inline void set_has_friendly_fire_vespene();
  inline void clear_has_friendly_fire_vespene();
  inline void set_has_used_minerals();
  inline void clear_has_used_minerals();
  inline void set_has_used_vespene();
  inline void clear_has_used_vespene();
  inline void set_has_total_used_minerals();
  inline void clear_has_total_used_minerals();
  inline void set_has_total_used_vespene();
  inline void clear_has_total_used_vespene();
  inline void set_has_total_damage_dealt();
  inline void clear_has_total_damage_dealt();
  inline void set_has_total_damage_taken();
  inline void clear_has_total_damage_taken();
  inline void set_has_total_healed();
  inline void clear_has_total_healed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float idle_production_time_;
  float idle_worker_time_;
  float total_value_units_;
  float total_value_structures_;
  float killed_value_units_;
  float killed_value_structures_;
  float collected_minerals_;
  float collected_vespene_;
  float collection_rate_minerals_;
  float collection_rate_vespene_;
  float spent_minerals_;
  float spent_vespene_;
  ::SC2APIProtocol::CategoryScoreDetails* food_used_;
  ::SC2APIProtocol::CategoryScoreDetails* killed_minerals_;
  ::SC2APIProtocol::CategoryScoreDetails* killed_vespene_;
  ::SC2APIProtocol::CategoryScoreDetails* lost_minerals_;
  ::SC2APIProtocol::CategoryScoreDetails* lost_vespene_;
  ::SC2APIProtocol::CategoryScoreDetails* friendly_fire_minerals_;
  ::SC2APIProtocol::CategoryScoreDetails* friendly_fire_vespene_;
  ::SC2APIProtocol::CategoryScoreDetails* used_minerals_;
  ::SC2APIProtocol::CategoryScoreDetails* used_vespene_;
  ::SC2APIProtocol::CategoryScoreDetails* total_used_minerals_;
  ::SC2APIProtocol::CategoryScoreDetails* total_used_vespene_;
  ::SC2APIProtocol::VitalScoreDetails* total_damage_dealt_;
  ::SC2APIProtocol::VitalScoreDetails* total_damage_taken_;
  ::SC2APIProtocol::VitalScoreDetails* total_healed_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fscore_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fscore_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fscore_2eproto();

  void InitAsDefaultInstance();
  static ScoreDetails* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Score

// optional .SC2APIProtocol.Score.ScoreType score_type = 6;
inline bool Score::has_score_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Score::set_has_score_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Score::clear_has_score_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Score::clear_score_type() {
  score_type_ = 1;
  clear_has_score_type();
}
inline ::SC2APIProtocol::Score_ScoreType Score::score_type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Score.score_type)
  return static_cast< ::SC2APIProtocol::Score_ScoreType >(score_type_);
}
inline void Score::set_score_type(::SC2APIProtocol::Score_ScoreType value) {
  assert(::SC2APIProtocol::Score_ScoreType_IsValid(value));
  set_has_score_type();
  score_type_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Score.score_type)
}

// optional int32 score = 7;
inline bool Score::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Score::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Score::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Score::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 Score::score() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Score.score)
  return score_;
}
inline void Score::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Score.score)
}

// optional .SC2APIProtocol.ScoreDetails score_details = 8;
inline bool Score::has_score_details() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Score::set_has_score_details() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Score::clear_has_score_details() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Score::clear_score_details() {
  if (score_details_ != NULL) score_details_->::SC2APIProtocol::ScoreDetails::Clear();
  clear_has_score_details();
}
inline const ::SC2APIProtocol::ScoreDetails& Score::score_details() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Score.score_details)
  return score_details_ != NULL ? *score_details_ : *default_instance_->score_details_;
}
inline ::SC2APIProtocol::ScoreDetails* Score::mutable_score_details() {
  set_has_score_details();
  if (score_details_ == NULL) {
    score_details_ = new ::SC2APIProtocol::ScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Score.score_details)
  return score_details_;
}
inline ::SC2APIProtocol::ScoreDetails* Score::release_score_details() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Score.score_details)
  clear_has_score_details();
  ::SC2APIProtocol::ScoreDetails* temp = score_details_;
  score_details_ = NULL;
  return temp;
}
inline void Score::set_allocated_score_details(::SC2APIProtocol::ScoreDetails* score_details) {
  delete score_details_;
  score_details_ = score_details;
  if (score_details) {
    set_has_score_details();
  } else {
    clear_has_score_details();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Score.score_details)
}

// -------------------------------------------------------------------

// CategoryScoreDetails

// optional float none = 1;
inline bool CategoryScoreDetails::has_none() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CategoryScoreDetails::set_has_none() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CategoryScoreDetails::clear_has_none() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CategoryScoreDetails::clear_none() {
  none_ = 0;
  clear_has_none();
}
inline float CategoryScoreDetails::none() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CategoryScoreDetails.none)
  return none_;
}
inline void CategoryScoreDetails::set_none(float value) {
  set_has_none();
  none_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.CategoryScoreDetails.none)
}

// optional float army = 2;
inline bool CategoryScoreDetails::has_army() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CategoryScoreDetails::set_has_army() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CategoryScoreDetails::clear_has_army() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CategoryScoreDetails::clear_army() {
  army_ = 0;
  clear_has_army();
}
inline float CategoryScoreDetails::army() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CategoryScoreDetails.army)
  return army_;
}
inline void CategoryScoreDetails::set_army(float value) {
  set_has_army();
  army_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.CategoryScoreDetails.army)
}

// optional float economy = 3;
inline bool CategoryScoreDetails::has_economy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CategoryScoreDetails::set_has_economy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CategoryScoreDetails::clear_has_economy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CategoryScoreDetails::clear_economy() {
  economy_ = 0;
  clear_has_economy();
}
inline float CategoryScoreDetails::economy() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CategoryScoreDetails.economy)
  return economy_;
}
inline void CategoryScoreDetails::set_economy(float value) {
  set_has_economy();
  economy_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.CategoryScoreDetails.economy)
}

// optional float technology = 4;
inline bool CategoryScoreDetails::has_technology() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CategoryScoreDetails::set_has_technology() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CategoryScoreDetails::clear_has_technology() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CategoryScoreDetails::clear_technology() {
  technology_ = 0;
  clear_has_technology();
}
inline float CategoryScoreDetails::technology() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CategoryScoreDetails.technology)
  return technology_;
}
inline void CategoryScoreDetails::set_technology(float value) {
  set_has_technology();
  technology_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.CategoryScoreDetails.technology)
}

// optional float upgrade = 5;
inline bool CategoryScoreDetails::has_upgrade() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CategoryScoreDetails::set_has_upgrade() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CategoryScoreDetails::clear_has_upgrade() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CategoryScoreDetails::clear_upgrade() {
  upgrade_ = 0;
  clear_has_upgrade();
}
inline float CategoryScoreDetails::upgrade() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CategoryScoreDetails.upgrade)
  return upgrade_;
}
inline void CategoryScoreDetails::set_upgrade(float value) {
  set_has_upgrade();
  upgrade_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.CategoryScoreDetails.upgrade)
}

// -------------------------------------------------------------------

// VitalScoreDetails

// optional float life = 1;
inline bool VitalScoreDetails::has_life() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VitalScoreDetails::set_has_life() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VitalScoreDetails::clear_has_life() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VitalScoreDetails::clear_life() {
  life_ = 0;
  clear_has_life();
}
inline float VitalScoreDetails::life() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.VitalScoreDetails.life)
  return life_;
}
inline void VitalScoreDetails::set_life(float value) {
  set_has_life();
  life_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.VitalScoreDetails.life)
}

// optional float shields = 2;
inline bool VitalScoreDetails::has_shields() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VitalScoreDetails::set_has_shields() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VitalScoreDetails::clear_has_shields() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VitalScoreDetails::clear_shields() {
  shields_ = 0;
  clear_has_shields();
}
inline float VitalScoreDetails::shields() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.VitalScoreDetails.shields)
  return shields_;
}
inline void VitalScoreDetails::set_shields(float value) {
  set_has_shields();
  shields_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.VitalScoreDetails.shields)
}

// optional float energy = 3;
inline bool VitalScoreDetails::has_energy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VitalScoreDetails::set_has_energy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VitalScoreDetails::clear_has_energy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VitalScoreDetails::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
inline float VitalScoreDetails::energy() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.VitalScoreDetails.energy)
  return energy_;
}
inline void VitalScoreDetails::set_energy(float value) {
  set_has_energy();
  energy_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.VitalScoreDetails.energy)
}

// -------------------------------------------------------------------

// ScoreDetails

// optional float idle_production_time = 1;
inline bool ScoreDetails::has_idle_production_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScoreDetails::set_has_idle_production_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScoreDetails::clear_has_idle_production_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScoreDetails::clear_idle_production_time() {
  idle_production_time_ = 0;
  clear_has_idle_production_time();
}
inline float ScoreDetails::idle_production_time() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.idle_production_time)
  return idle_production_time_;
}
inline void ScoreDetails::set_idle_production_time(float value) {
  set_has_idle_production_time();
  idle_production_time_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.idle_production_time)
}

// optional float idle_worker_time = 2;
inline bool ScoreDetails::has_idle_worker_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScoreDetails::set_has_idle_worker_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScoreDetails::clear_has_idle_worker_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScoreDetails::clear_idle_worker_time() {
  idle_worker_time_ = 0;
  clear_has_idle_worker_time();
}
inline float ScoreDetails::idle_worker_time() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.idle_worker_time)
  return idle_worker_time_;
}
inline void ScoreDetails::set_idle_worker_time(float value) {
  set_has_idle_worker_time();
  idle_worker_time_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.idle_worker_time)
}

// optional float total_value_units = 3;
inline bool ScoreDetails::has_total_value_units() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScoreDetails::set_has_total_value_units() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScoreDetails::clear_has_total_value_units() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScoreDetails::clear_total_value_units() {
  total_value_units_ = 0;
  clear_has_total_value_units();
}
inline float ScoreDetails::total_value_units() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_value_units)
  return total_value_units_;
}
inline void ScoreDetails::set_total_value_units(float value) {
  set_has_total_value_units();
  total_value_units_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.total_value_units)
}

// optional float total_value_structures = 4;
inline bool ScoreDetails::has_total_value_structures() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ScoreDetails::set_has_total_value_structures() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ScoreDetails::clear_has_total_value_structures() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ScoreDetails::clear_total_value_structures() {
  total_value_structures_ = 0;
  clear_has_total_value_structures();
}
inline float ScoreDetails::total_value_structures() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_value_structures)
  return total_value_structures_;
}
inline void ScoreDetails::set_total_value_structures(float value) {
  set_has_total_value_structures();
  total_value_structures_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.total_value_structures)
}

// optional float killed_value_units = 5;
inline bool ScoreDetails::has_killed_value_units() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ScoreDetails::set_has_killed_value_units() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ScoreDetails::clear_has_killed_value_units() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ScoreDetails::clear_killed_value_units() {
  killed_value_units_ = 0;
  clear_has_killed_value_units();
}
inline float ScoreDetails::killed_value_units() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.killed_value_units)
  return killed_value_units_;
}
inline void ScoreDetails::set_killed_value_units(float value) {
  set_has_killed_value_units();
  killed_value_units_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.killed_value_units)
}

// optional float killed_value_structures = 6;
inline bool ScoreDetails::has_killed_value_structures() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ScoreDetails::set_has_killed_value_structures() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ScoreDetails::clear_has_killed_value_structures() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ScoreDetails::clear_killed_value_structures() {
  killed_value_structures_ = 0;
  clear_has_killed_value_structures();
}
inline float ScoreDetails::killed_value_structures() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.killed_value_structures)
  return killed_value_structures_;
}
inline void ScoreDetails::set_killed_value_structures(float value) {
  set_has_killed_value_structures();
  killed_value_structures_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.killed_value_structures)
}

// optional float collected_minerals = 7;
inline bool ScoreDetails::has_collected_minerals() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ScoreDetails::set_has_collected_minerals() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ScoreDetails::clear_has_collected_minerals() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ScoreDetails::clear_collected_minerals() {
  collected_minerals_ = 0;
  clear_has_collected_minerals();
}
inline float ScoreDetails::collected_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.collected_minerals)
  return collected_minerals_;
}
inline void ScoreDetails::set_collected_minerals(float value) {
  set_has_collected_minerals();
  collected_minerals_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.collected_minerals)
}

// optional float collected_vespene = 8;
inline bool ScoreDetails::has_collected_vespene() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ScoreDetails::set_has_collected_vespene() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ScoreDetails::clear_has_collected_vespene() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ScoreDetails::clear_collected_vespene() {
  collected_vespene_ = 0;
  clear_has_collected_vespene();
}
inline float ScoreDetails::collected_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.collected_vespene)
  return collected_vespene_;
}
inline void ScoreDetails::set_collected_vespene(float value) {
  set_has_collected_vespene();
  collected_vespene_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.collected_vespene)
}

// optional float collection_rate_minerals = 9;
inline bool ScoreDetails::has_collection_rate_minerals() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ScoreDetails::set_has_collection_rate_minerals() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ScoreDetails::clear_has_collection_rate_minerals() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ScoreDetails::clear_collection_rate_minerals() {
  collection_rate_minerals_ = 0;
  clear_has_collection_rate_minerals();
}
inline float ScoreDetails::collection_rate_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.collection_rate_minerals)
  return collection_rate_minerals_;
}
inline void ScoreDetails::set_collection_rate_minerals(float value) {
  set_has_collection_rate_minerals();
  collection_rate_minerals_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.collection_rate_minerals)
}

// optional float collection_rate_vespene = 10;
inline bool ScoreDetails::has_collection_rate_vespene() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ScoreDetails::set_has_collection_rate_vespene() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ScoreDetails::clear_has_collection_rate_vespene() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ScoreDetails::clear_collection_rate_vespene() {
  collection_rate_vespene_ = 0;
  clear_has_collection_rate_vespene();
}
inline float ScoreDetails::collection_rate_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.collection_rate_vespene)
  return collection_rate_vespene_;
}
inline void ScoreDetails::set_collection_rate_vespene(float value) {
  set_has_collection_rate_vespene();
  collection_rate_vespene_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.collection_rate_vespene)
}

// optional float spent_minerals = 11;
inline bool ScoreDetails::has_spent_minerals() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ScoreDetails::set_has_spent_minerals() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ScoreDetails::clear_has_spent_minerals() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ScoreDetails::clear_spent_minerals() {
  spent_minerals_ = 0;
  clear_has_spent_minerals();
}
inline float ScoreDetails::spent_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.spent_minerals)
  return spent_minerals_;
}
inline void ScoreDetails::set_spent_minerals(float value) {
  set_has_spent_minerals();
  spent_minerals_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.spent_minerals)
}

// optional float spent_vespene = 12;
inline bool ScoreDetails::has_spent_vespene() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ScoreDetails::set_has_spent_vespene() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ScoreDetails::clear_has_spent_vespene() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ScoreDetails::clear_spent_vespene() {
  spent_vespene_ = 0;
  clear_has_spent_vespene();
}
inline float ScoreDetails::spent_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.spent_vespene)
  return spent_vespene_;
}
inline void ScoreDetails::set_spent_vespene(float value) {
  set_has_spent_vespene();
  spent_vespene_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.spent_vespene)
}

// optional .SC2APIProtocol.CategoryScoreDetails food_used = 13;
inline bool ScoreDetails::has_food_used() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ScoreDetails::set_has_food_used() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ScoreDetails::clear_has_food_used() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ScoreDetails::clear_food_used() {
  if (food_used_ != NULL) food_used_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_food_used();
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::food_used() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.food_used)
  return food_used_ != NULL ? *food_used_ : *default_instance_->food_used_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_food_used() {
  set_has_food_used();
  if (food_used_ == NULL) {
    food_used_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.food_used)
  return food_used_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_food_used() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.food_used)
  clear_has_food_used();
  ::SC2APIProtocol::CategoryScoreDetails* temp = food_used_;
  food_used_ = NULL;
  return temp;
}
inline void ScoreDetails::set_allocated_food_used(::SC2APIProtocol::CategoryScoreDetails* food_used) {
  delete food_used_;
  food_used_ = food_used;
  if (food_used) {
    set_has_food_used();
  } else {
    clear_has_food_used();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.food_used)
}

// optional .SC2APIProtocol.CategoryScoreDetails killed_minerals = 14;
inline bool ScoreDetails::has_killed_minerals() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ScoreDetails::set_has_killed_minerals() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ScoreDetails::clear_has_killed_minerals() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ScoreDetails::clear_killed_minerals() {
  if (killed_minerals_ != NULL) killed_minerals_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_killed_minerals();
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::killed_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.killed_minerals)
  return killed_minerals_ != NULL ? *killed_minerals_ : *default_instance_->killed_minerals_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_killed_minerals() {
  set_has_killed_minerals();
  if (killed_minerals_ == NULL) {
    killed_minerals_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.killed_minerals)
  return killed_minerals_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_killed_minerals() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.killed_minerals)
  clear_has_killed_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* temp = killed_minerals_;
  killed_minerals_ = NULL;
  return temp;
}
inline void ScoreDetails::set_allocated_killed_minerals(::SC2APIProtocol::CategoryScoreDetails* killed_minerals) {
  delete killed_minerals_;
  killed_minerals_ = killed_minerals;
  if (killed_minerals) {
    set_has_killed_minerals();
  } else {
    clear_has_killed_minerals();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.killed_minerals)
}

// optional .SC2APIProtocol.CategoryScoreDetails killed_vespene = 15;
inline bool ScoreDetails::has_killed_vespene() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ScoreDetails::set_has_killed_vespene() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ScoreDetails::clear_has_killed_vespene() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ScoreDetails::clear_killed_vespene() {
  if (killed_vespene_ != NULL) killed_vespene_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_killed_vespene();
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::killed_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.killed_vespene)
  return killed_vespene_ != NULL ? *killed_vespene_ : *default_instance_->killed_vespene_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_killed_vespene() {
  set_has_killed_vespene();
  if (killed_vespene_ == NULL) {
    killed_vespene_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.killed_vespene)
  return killed_vespene_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_killed_vespene() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.killed_vespene)
  clear_has_killed_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* temp = killed_vespene_;
  killed_vespene_ = NULL;
  return temp;
}
inline void ScoreDetails::set_allocated_killed_vespene(::SC2APIProtocol::CategoryScoreDetails* killed_vespene) {
  delete killed_vespene_;
  killed_vespene_ = killed_vespene;
  if (killed_vespene) {
    set_has_killed_vespene();
  } else {
    clear_has_killed_vespene();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.killed_vespene)
}

// optional .SC2APIProtocol.CategoryScoreDetails lost_minerals = 16;
inline bool ScoreDetails::has_lost_minerals() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ScoreDetails::set_has_lost_minerals() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ScoreDetails::clear_has_lost_minerals() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ScoreDetails::clear_lost_minerals() {
  if (lost_minerals_ != NULL) lost_minerals_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_lost_minerals();
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::lost_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.lost_minerals)
  return lost_minerals_ != NULL ? *lost_minerals_ : *default_instance_->lost_minerals_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_lost_minerals() {
  set_has_lost_minerals();
  if (lost_minerals_ == NULL) {
    lost_minerals_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.lost_minerals)
  return lost_minerals_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_lost_minerals() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.lost_minerals)
  clear_has_lost_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* temp = lost_minerals_;
  lost_minerals_ = NULL;
  return temp;
}
inline void ScoreDetails::set_allocated_lost_minerals(::SC2APIProtocol::CategoryScoreDetails* lost_minerals) {
  delete lost_minerals_;
  lost_minerals_ = lost_minerals;
  if (lost_minerals) {
    set_has_lost_minerals();
  } else {
    clear_has_lost_minerals();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.lost_minerals)
}

// optional .SC2APIProtocol.CategoryScoreDetails lost_vespene = 17;
inline bool ScoreDetails::has_lost_vespene() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ScoreDetails::set_has_lost_vespene() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ScoreDetails::clear_has_lost_vespene() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ScoreDetails::clear_lost_vespene() {
  if (lost_vespene_ != NULL) lost_vespene_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_lost_vespene();
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::lost_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.lost_vespene)
  return lost_vespene_ != NULL ? *lost_vespene_ : *default_instance_->lost_vespene_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_lost_vespene() {
  set_has_lost_vespene();
  if (lost_vespene_ == NULL) {
    lost_vespene_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.lost_vespene)
  return lost_vespene_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_lost_vespene() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.lost_vespene)
  clear_has_lost_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* temp = lost_vespene_;
  lost_vespene_ = NULL;
  return temp;
}
inline void ScoreDetails::set_allocated_lost_vespene(::SC2APIProtocol::CategoryScoreDetails* lost_vespene) {
  delete lost_vespene_;
  lost_vespene_ = lost_vespene;
  if (lost_vespene) {
    set_has_lost_vespene();
  } else {
    clear_has_lost_vespene();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.lost_vespene)
}

// optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_minerals = 18;
inline bool ScoreDetails::has_friendly_fire_minerals() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ScoreDetails::set_has_friendly_fire_minerals() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ScoreDetails::clear_has_friendly_fire_minerals() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ScoreDetails::clear_friendly_fire_minerals() {
  if (friendly_fire_minerals_ != NULL) friendly_fire_minerals_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_friendly_fire_minerals();
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::friendly_fire_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.friendly_fire_minerals)
  return friendly_fire_minerals_ != NULL ? *friendly_fire_minerals_ : *default_instance_->friendly_fire_minerals_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_friendly_fire_minerals() {
  set_has_friendly_fire_minerals();
  if (friendly_fire_minerals_ == NULL) {
    friendly_fire_minerals_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.friendly_fire_minerals)
  return friendly_fire_minerals_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_friendly_fire_minerals() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.friendly_fire_minerals)
  clear_has_friendly_fire_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* temp = friendly_fire_minerals_;
  friendly_fire_minerals_ = NULL;
  return temp;
}
inline void ScoreDetails::set_allocated_friendly_fire_minerals(::SC2APIProtocol::CategoryScoreDetails* friendly_fire_minerals) {
  delete friendly_fire_minerals_;
  friendly_fire_minerals_ = friendly_fire_minerals;
  if (friendly_fire_minerals) {
    set_has_friendly_fire_minerals();
  } else {
    clear_has_friendly_fire_minerals();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.friendly_fire_minerals)
}

// optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_vespene = 19;
inline bool ScoreDetails::has_friendly_fire_vespene() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ScoreDetails::set_has_friendly_fire_vespene() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ScoreDetails::clear_has_friendly_fire_vespene() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ScoreDetails::clear_friendly_fire_vespene() {
  if (friendly_fire_vespene_ != NULL) friendly_fire_vespene_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_friendly_fire_vespene();
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::friendly_fire_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.friendly_fire_vespene)
  return friendly_fire_vespene_ != NULL ? *friendly_fire_vespene_ : *default_instance_->friendly_fire_vespene_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_friendly_fire_vespene() {
  set_has_friendly_fire_vespene();
  if (friendly_fire_vespene_ == NULL) {
    friendly_fire_vespene_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.friendly_fire_vespene)
  return friendly_fire_vespene_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_friendly_fire_vespene() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.friendly_fire_vespene)
  clear_has_friendly_fire_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* temp = friendly_fire_vespene_;
  friendly_fire_vespene_ = NULL;
  return temp;
}
inline void ScoreDetails::set_allocated_friendly_fire_vespene(::SC2APIProtocol::CategoryScoreDetails* friendly_fire_vespene) {
  delete friendly_fire_vespene_;
  friendly_fire_vespene_ = friendly_fire_vespene;
  if (friendly_fire_vespene) {
    set_has_friendly_fire_vespene();
  } else {
    clear_has_friendly_fire_vespene();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.friendly_fire_vespene)
}

// optional .SC2APIProtocol.CategoryScoreDetails used_minerals = 20;
inline bool ScoreDetails::has_used_minerals() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ScoreDetails::set_has_used_minerals() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ScoreDetails::clear_has_used_minerals() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ScoreDetails::clear_used_minerals() {
  if (used_minerals_ != NULL) used_minerals_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_used_minerals();
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::used_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.used_minerals)
  return used_minerals_ != NULL ? *used_minerals_ : *default_instance_->used_minerals_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_used_minerals() {
  set_has_used_minerals();
  if (used_minerals_ == NULL) {
    used_minerals_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.used_minerals)
  return used_minerals_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_used_minerals() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.used_minerals)
  clear_has_used_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* temp = used_minerals_;
  used_minerals_ = NULL;
  return temp;
}
inline void ScoreDetails::set_allocated_used_minerals(::SC2APIProtocol::CategoryScoreDetails* used_minerals) {
  delete used_minerals_;
  used_minerals_ = used_minerals;
  if (used_minerals) {
    set_has_used_minerals();
  } else {
    clear_has_used_minerals();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.used_minerals)
}

// optional .SC2APIProtocol.CategoryScoreDetails used_vespene = 21;
inline bool ScoreDetails::has_used_vespene() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ScoreDetails::set_has_used_vespene() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ScoreDetails::clear_has_used_vespene() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ScoreDetails::clear_used_vespene() {
  if (used_vespene_ != NULL) used_vespene_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_used_vespene();
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::used_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.used_vespene)
  return used_vespene_ != NULL ? *used_vespene_ : *default_instance_->used_vespene_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_used_vespene() {
  set_has_used_vespene();
  if (used_vespene_ == NULL) {
    used_vespene_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.used_vespene)
  return used_vespene_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_used_vespene() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.used_vespene)
  clear_has_used_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* temp = used_vespene_;
  used_vespene_ = NULL;
  return temp;
}
inline void ScoreDetails::set_allocated_used_vespene(::SC2APIProtocol::CategoryScoreDetails* used_vespene) {
  delete used_vespene_;
  used_vespene_ = used_vespene;
  if (used_vespene) {
    set_has_used_vespene();
  } else {
    clear_has_used_vespene();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.used_vespene)
}

// optional .SC2APIProtocol.CategoryScoreDetails total_used_minerals = 22;
inline bool ScoreDetails::has_total_used_minerals() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ScoreDetails::set_has_total_used_minerals() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ScoreDetails::clear_has_total_used_minerals() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ScoreDetails::clear_total_used_minerals() {
  if (total_used_minerals_ != NULL) total_used_minerals_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_total_used_minerals();
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::total_used_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_used_minerals)
  return total_used_minerals_ != NULL ? *total_used_minerals_ : *default_instance_->total_used_minerals_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_total_used_minerals() {
  set_has_total_used_minerals();
  if (total_used_minerals_ == NULL) {
    total_used_minerals_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.total_used_minerals)
  return total_used_minerals_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_total_used_minerals() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.total_used_minerals)
  clear_has_total_used_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* temp = total_used_minerals_;
  total_used_minerals_ = NULL;
  return temp;
}
inline void ScoreDetails::set_allocated_total_used_minerals(::SC2APIProtocol::CategoryScoreDetails* total_used_minerals) {
  delete total_used_minerals_;
  total_used_minerals_ = total_used_minerals;
  if (total_used_minerals) {
    set_has_total_used_minerals();
  } else {
    clear_has_total_used_minerals();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.total_used_minerals)
}

// optional .SC2APIProtocol.CategoryScoreDetails total_used_vespene = 23;
inline bool ScoreDetails::has_total_used_vespene() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ScoreDetails::set_has_total_used_vespene() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ScoreDetails::clear_has_total_used_vespene() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ScoreDetails::clear_total_used_vespene() {
  if (total_used_vespene_ != NULL) total_used_vespene_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_total_used_vespene();
}
inline const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::total_used_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_used_vespene)
  return total_used_vespene_ != NULL ? *total_used_vespene_ : *default_instance_->total_used_vespene_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_total_used_vespene() {
  set_has_total_used_vespene();
  if (total_used_vespene_ == NULL) {
    total_used_vespene_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.total_used_vespene)
  return total_used_vespene_;
}
inline ::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_total_used_vespene() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.total_used_vespene)
  clear_has_total_used_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* temp = total_used_vespene_;
  total_used_vespene_ = NULL;
  return temp;
}
inline void ScoreDetails::set_allocated_total_used_vespene(::SC2APIProtocol::CategoryScoreDetails* total_used_vespene) {
  delete total_used_vespene_;
  total_used_vespene_ = total_used_vespene;
  if (total_used_vespene) {
    set_has_total_used_vespene();
  } else {
    clear_has_total_used_vespene();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.total_used_vespene)
}

// optional .SC2APIProtocol.VitalScoreDetails total_damage_dealt = 24;
inline bool ScoreDetails::has_total_damage_dealt() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ScoreDetails::set_has_total_damage_dealt() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ScoreDetails::clear_has_total_damage_dealt() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ScoreDetails::clear_total_damage_dealt() {
  if (total_damage_dealt_ != NULL) total_damage_dealt_->::SC2APIProtocol::VitalScoreDetails::Clear();
  clear_has_total_damage_dealt();
}
inline const ::SC2APIProtocol::VitalScoreDetails& ScoreDetails::total_damage_dealt() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_damage_dealt)
  return total_damage_dealt_ != NULL ? *total_damage_dealt_ : *default_instance_->total_damage_dealt_;
}
inline ::SC2APIProtocol::VitalScoreDetails* ScoreDetails::mutable_total_damage_dealt() {
  set_has_total_damage_dealt();
  if (total_damage_dealt_ == NULL) {
    total_damage_dealt_ = new ::SC2APIProtocol::VitalScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.total_damage_dealt)
  return total_damage_dealt_;
}
inline ::SC2APIProtocol::VitalScoreDetails* ScoreDetails::release_total_damage_dealt() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.total_damage_dealt)
  clear_has_total_damage_dealt();
  ::SC2APIProtocol::VitalScoreDetails* temp = total_damage_dealt_;
  total_damage_dealt_ = NULL;
  return temp;
}
inline void ScoreDetails::set_allocated_total_damage_dealt(::SC2APIProtocol::VitalScoreDetails* total_damage_dealt) {
  delete total_damage_dealt_;
  total_damage_dealt_ = total_damage_dealt;
  if (total_damage_dealt) {
    set_has_total_damage_dealt();
  } else {
    clear_has_total_damage_dealt();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.total_damage_dealt)
}

// optional .SC2APIProtocol.VitalScoreDetails total_damage_taken = 25;
inline bool ScoreDetails::has_total_damage_taken() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ScoreDetails::set_has_total_damage_taken() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ScoreDetails::clear_has_total_damage_taken() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ScoreDetails::clear_total_damage_taken() {
  if (total_damage_taken_ != NULL) total_damage_taken_->::SC2APIProtocol::VitalScoreDetails::Clear();
  clear_has_total_damage_taken();
}
inline const ::SC2APIProtocol::VitalScoreDetails& ScoreDetails::total_damage_taken() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_damage_taken)
  return total_damage_taken_ != NULL ? *total_damage_taken_ : *default_instance_->total_damage_taken_;
}
inline ::SC2APIProtocol::VitalScoreDetails* ScoreDetails::mutable_total_damage_taken() {
  set_has_total_damage_taken();
  if (total_damage_taken_ == NULL) {
    total_damage_taken_ = new ::SC2APIProtocol::VitalScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.total_damage_taken)
  return total_damage_taken_;
}
inline ::SC2APIProtocol::VitalScoreDetails* ScoreDetails::release_total_damage_taken() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.total_damage_taken)
  clear_has_total_damage_taken();
  ::SC2APIProtocol::VitalScoreDetails* temp = total_damage_taken_;
  total_damage_taken_ = NULL;
  return temp;
}
inline void ScoreDetails::set_allocated_total_damage_taken(::SC2APIProtocol::VitalScoreDetails* total_damage_taken) {
  delete total_damage_taken_;
  total_damage_taken_ = total_damage_taken;
  if (total_damage_taken) {
    set_has_total_damage_taken();
  } else {
    clear_has_total_damage_taken();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.total_damage_taken)
}

// optional .SC2APIProtocol.VitalScoreDetails total_healed = 26;
inline bool ScoreDetails::has_total_healed() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ScoreDetails::set_has_total_healed() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ScoreDetails::clear_has_total_healed() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ScoreDetails::clear_total_healed() {
  if (total_healed_ != NULL) total_healed_->::SC2APIProtocol::VitalScoreDetails::Clear();
  clear_has_total_healed();
}
inline const ::SC2APIProtocol::VitalScoreDetails& ScoreDetails::total_healed() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_healed)
  return total_healed_ != NULL ? *total_healed_ : *default_instance_->total_healed_;
}
inline ::SC2APIProtocol::VitalScoreDetails* ScoreDetails::mutable_total_healed() {
  set_has_total_healed();
  if (total_healed_ == NULL) {
    total_healed_ = new ::SC2APIProtocol::VitalScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.total_healed)
  return total_healed_;
}
inline ::SC2APIProtocol::VitalScoreDetails* ScoreDetails::release_total_healed() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.total_healed)
  clear_has_total_healed();
  ::SC2APIProtocol::VitalScoreDetails* temp = total_healed_;
  total_healed_ = NULL;
  return temp;
}
inline void ScoreDetails::set_allocated_total_healed(::SC2APIProtocol::VitalScoreDetails* total_healed) {
  delete total_healed_;
  total_healed_ = total_healed;
  if (total_healed) {
    set_has_total_healed();
  } else {
    clear_has_total_healed();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.total_healed)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SC2APIProtocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SC2APIProtocol::Score_ScoreType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC2APIProtocol::Score_ScoreType>() {
  return ::SC2APIProtocol::Score_ScoreType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_s2clientprotocol_2fscore_2eproto__INCLUDED
