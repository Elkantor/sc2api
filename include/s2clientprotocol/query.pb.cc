// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/query.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "s2clientprotocol/query.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SC2APIProtocol {

namespace {

const ::google::protobuf::Descriptor* RequestQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseQuery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseQuery_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestQueryPathing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestQueryPathing_reflection_ = NULL;
struct RequestQueryPathingOneofInstance {
  const ::SC2APIProtocol::Point2D* start_pos_;
  ::google::protobuf::uint64 unit_tag_;
}* RequestQueryPathing_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ResponseQueryPathing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseQueryPathing_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestQueryAvailableAbilities_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestQueryAvailableAbilities_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseQueryAvailableAbilities_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseQueryAvailableAbilities_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestQueryBuildingPlacement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestQueryBuildingPlacement_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseQueryBuildingPlacement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseQueryBuildingPlacement_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_s2clientprotocol_2fquery_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_s2clientprotocol_2fquery_2eproto() {
  protobuf_AddDesc_s2clientprotocol_2fquery_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "s2clientprotocol/query.proto");
  GOOGLE_CHECK(file != NULL);
  RequestQuery_descriptor_ = file->message_type(0);
  static const int RequestQuery_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuery, pathing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuery, abilities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuery, placements_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuery, ignore_resource_requirements_),
  };
  RequestQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestQuery_descriptor_,
      RequestQuery::default_instance_,
      RequestQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuery, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuery, _internal_metadata_),
      -1);
  ResponseQuery_descriptor_ = file->message_type(1);
  static const int ResponseQuery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, pathing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, abilities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, placements_),
  };
  ResponseQuery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseQuery_descriptor_,
      ResponseQuery::default_instance_,
      ResponseQuery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseQuery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuery, _internal_metadata_),
      -1);
  RequestQueryPathing_descriptor_ = file->message_type(2);
  static const int RequestQueryPathing_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RequestQueryPathing_default_oneof_instance_, start_pos_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RequestQueryPathing_default_oneof_instance_, unit_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQueryPathing, end_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQueryPathing, start_),
  };
  RequestQueryPathing_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestQueryPathing_descriptor_,
      RequestQueryPathing::default_instance_,
      RequestQueryPathing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQueryPathing, _has_bits_[0]),
      -1,
      -1,
      RequestQueryPathing_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQueryPathing, _oneof_case_[0]),
      sizeof(RequestQueryPathing),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQueryPathing, _internal_metadata_),
      -1);
  ResponseQueryPathing_descriptor_ = file->message_type(3);
  static const int ResponseQueryPathing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQueryPathing, distance_),
  };
  ResponseQueryPathing_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseQueryPathing_descriptor_,
      ResponseQueryPathing::default_instance_,
      ResponseQueryPathing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQueryPathing, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseQueryPathing),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQueryPathing, _internal_metadata_),
      -1);
  RequestQueryAvailableAbilities_descriptor_ = file->message_type(4);
  static const int RequestQueryAvailableAbilities_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQueryAvailableAbilities, unit_tag_),
  };
  RequestQueryAvailableAbilities_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestQueryAvailableAbilities_descriptor_,
      RequestQueryAvailableAbilities::default_instance_,
      RequestQueryAvailableAbilities_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQueryAvailableAbilities, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestQueryAvailableAbilities),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQueryAvailableAbilities, _internal_metadata_),
      -1);
  ResponseQueryAvailableAbilities_descriptor_ = file->message_type(5);
  static const int ResponseQueryAvailableAbilities_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQueryAvailableAbilities, abilities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQueryAvailableAbilities, unit_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQueryAvailableAbilities, unit_type_id_),
  };
  ResponseQueryAvailableAbilities_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseQueryAvailableAbilities_descriptor_,
      ResponseQueryAvailableAbilities::default_instance_,
      ResponseQueryAvailableAbilities_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQueryAvailableAbilities, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseQueryAvailableAbilities),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQueryAvailableAbilities, _internal_metadata_),
      -1);
  RequestQueryBuildingPlacement_descriptor_ = file->message_type(6);
  static const int RequestQueryBuildingPlacement_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQueryBuildingPlacement, ability_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQueryBuildingPlacement, target_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQueryBuildingPlacement, placing_unit_tag_),
  };
  RequestQueryBuildingPlacement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestQueryBuildingPlacement_descriptor_,
      RequestQueryBuildingPlacement::default_instance_,
      RequestQueryBuildingPlacement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQueryBuildingPlacement, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestQueryBuildingPlacement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQueryBuildingPlacement, _internal_metadata_),
      -1);
  ResponseQueryBuildingPlacement_descriptor_ = file->message_type(7);
  static const int ResponseQueryBuildingPlacement_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQueryBuildingPlacement, result_),
  };
  ResponseQueryBuildingPlacement_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseQueryBuildingPlacement_descriptor_,
      ResponseQueryBuildingPlacement::default_instance_,
      ResponseQueryBuildingPlacement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQueryBuildingPlacement, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseQueryBuildingPlacement),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQueryBuildingPlacement, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_s2clientprotocol_2fquery_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestQuery_descriptor_, &RequestQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseQuery_descriptor_, &ResponseQuery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestQueryPathing_descriptor_, &RequestQueryPathing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseQueryPathing_descriptor_, &ResponseQueryPathing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestQueryAvailableAbilities_descriptor_, &RequestQueryAvailableAbilities::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseQueryAvailableAbilities_descriptor_, &ResponseQueryAvailableAbilities::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestQueryBuildingPlacement_descriptor_, &RequestQueryBuildingPlacement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseQueryBuildingPlacement_descriptor_, &ResponseQueryBuildingPlacement::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_s2clientprotocol_2fquery_2eproto() {
  delete RequestQuery::default_instance_;
  delete RequestQuery_reflection_;
  delete ResponseQuery::default_instance_;
  delete ResponseQuery_reflection_;
  delete RequestQueryPathing::default_instance_;
  delete RequestQueryPathing_default_oneof_instance_;
  delete RequestQueryPathing_reflection_;
  delete ResponseQueryPathing::default_instance_;
  delete ResponseQueryPathing_reflection_;
  delete RequestQueryAvailableAbilities::default_instance_;
  delete RequestQueryAvailableAbilities_reflection_;
  delete ResponseQueryAvailableAbilities::default_instance_;
  delete ResponseQueryAvailableAbilities_reflection_;
  delete RequestQueryBuildingPlacement::default_instance_;
  delete RequestQueryBuildingPlacement_reflection_;
  delete ResponseQueryBuildingPlacement::default_instance_;
  delete ResponseQueryBuildingPlacement_reflection_;
}

void protobuf_AddDesc_s2clientprotocol_2fquery_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_s2clientprotocol_2fquery_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SC2APIProtocol::protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  ::SC2APIProtocol::protobuf_AddDesc_s2clientprotocol_2ferror_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034s2clientprotocol/query.proto\022\016SC2APIPr"
    "otocol\032\035s2clientprotocol/common.proto\032\034s"
    "2clientprotocol/error.proto\"\360\001\n\014RequestQ"
    "uery\0224\n\007pathing\030\001 \003(\0132#.SC2APIProtocol.R"
    "equestQueryPathing\022A\n\tabilities\030\002 \003(\0132.."
    "SC2APIProtocol.RequestQueryAvailableAbil"
    "ities\022A\n\nplacements\030\003 \003(\0132-.SC2APIProtoc"
    "ol.RequestQueryBuildingPlacement\022$\n\034igno"
    "re_resource_requirements\030\004 \001(\010\"\316\001\n\rRespo"
    "nseQuery\0225\n\007pathing\030\001 \003(\0132$.SC2APIProtoc"
    "ol.ResponseQueryPathing\022B\n\tabilities\030\002 \003"
    "(\0132/.SC2APIProtocol.ResponseQueryAvailab"
    "leAbilities\022B\n\nplacements\030\003 \003(\0132..SC2API"
    "Protocol.ResponseQueryBuildingPlacement\""
    "\212\001\n\023RequestQueryPathing\022,\n\tstart_pos\030\001 \001"
    "(\0132\027.SC2APIProtocol.Point2DH\000\022\022\n\010unit_ta"
    "g\030\002 \001(\004H\000\022(\n\007end_pos\030\003 \001(\0132\027.SC2APIProto"
    "col.Point2DB\007\n\005start\"(\n\024ResponseQueryPat"
    "hing\022\020\n\010distance\030\001 \001(\002\"2\n\036RequestQueryAv"
    "ailableAbilities\022\020\n\010unit_tag\030\001 \001(\004\"~\n\037Re"
    "sponseQueryAvailableAbilities\0223\n\tabiliti"
    "es\030\001 \003(\0132 .SC2APIProtocol.AvailableAbili"
    "ty\022\020\n\010unit_tag\030\002 \001(\004\022\024\n\014unit_type_id\030\003 \001"
    "(\r\"z\n\035RequestQueryBuildingPlacement\022\022\n\na"
    "bility_id\030\001 \001(\005\022+\n\ntarget_pos\030\002 \001(\0132\027.SC"
    "2APIProtocol.Point2D\022\030\n\020placing_unit_tag"
    "\030\003 \001(\004\"N\n\036ResponseQueryBuildingPlacement"
    "\022,\n\006result\030\001 \001(\0162\034.SC2APIProtocol.Action"
    "Result", 1126);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "s2clientprotocol/query.proto", &protobuf_RegisterTypes);
  RequestQuery::default_instance_ = new RequestQuery();
  ResponseQuery::default_instance_ = new ResponseQuery();
  RequestQueryPathing::default_instance_ = new RequestQueryPathing();
  RequestQueryPathing_default_oneof_instance_ = new RequestQueryPathingOneofInstance();
  ResponseQueryPathing::default_instance_ = new ResponseQueryPathing();
  RequestQueryAvailableAbilities::default_instance_ = new RequestQueryAvailableAbilities();
  ResponseQueryAvailableAbilities::default_instance_ = new ResponseQueryAvailableAbilities();
  RequestQueryBuildingPlacement::default_instance_ = new RequestQueryBuildingPlacement();
  ResponseQueryBuildingPlacement::default_instance_ = new ResponseQueryBuildingPlacement();
  RequestQuery::default_instance_->InitAsDefaultInstance();
  ResponseQuery::default_instance_->InitAsDefaultInstance();
  RequestQueryPathing::default_instance_->InitAsDefaultInstance();
  ResponseQueryPathing::default_instance_->InitAsDefaultInstance();
  RequestQueryAvailableAbilities::default_instance_->InitAsDefaultInstance();
  ResponseQueryAvailableAbilities::default_instance_->InitAsDefaultInstance();
  RequestQueryBuildingPlacement::default_instance_->InitAsDefaultInstance();
  ResponseQueryBuildingPlacement::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_s2clientprotocol_2fquery_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_s2clientprotocol_2fquery_2eproto {
  StaticDescriptorInitializer_s2clientprotocol_2fquery_2eproto() {
    protobuf_AddDesc_s2clientprotocol_2fquery_2eproto();
  }
} static_descriptor_initializer_s2clientprotocol_2fquery_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestQuery::kPathingFieldNumber;
const int RequestQuery::kAbilitiesFieldNumber;
const int RequestQuery::kPlacementsFieldNumber;
const int RequestQuery::kIgnoreResourceRequirementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestQuery::RequestQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestQuery)
}

void RequestQuery::InitAsDefaultInstance() {
}

RequestQuery::RequestQuery(const RequestQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestQuery)
}

void RequestQuery::SharedCtor() {
  _cached_size_ = 0;
  ignore_resource_requirements_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestQuery::~RequestQuery() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestQuery)
  SharedDtor();
}

void RequestQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestQuery_descriptor_;
}

const RequestQuery& RequestQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fquery_2eproto();
  return *default_instance_;
}

RequestQuery* RequestQuery::default_instance_ = NULL;

RequestQuery* RequestQuery::New(::google::protobuf::Arena* arena) const {
  RequestQuery* n = new RequestQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestQuery)
  ignore_resource_requirements_ = false;
  pathing_.Clear();
  abilities_.Clear();
  placements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC2APIProtocol.RequestQueryPathing pathing = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pathing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pathing()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_pathing;
        if (input->ExpectTag(18)) goto parse_loop_abilities;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .SC2APIProtocol.RequestQueryAvailableAbilities abilities = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_abilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_abilities;
        if (input->ExpectTag(26)) goto parse_loop_placements;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .SC2APIProtocol.RequestQueryBuildingPlacement placements = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_placements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_placements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_placements;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_ignore_resource_requirements;
        break;
      }

      // optional bool ignore_resource_requirements = 4;
      case 4: {
        if (tag == 32) {
         parse_ignore_resource_requirements:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_resource_requirements_)));
          set_has_ignore_resource_requirements();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestQuery)
  return false;
#undef DO_
}

void RequestQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestQuery)
  // repeated .SC2APIProtocol.RequestQueryPathing pathing = 1;
  for (unsigned int i = 0, n = this->pathing_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pathing(i), output);
  }

  // repeated .SC2APIProtocol.RequestQueryAvailableAbilities abilities = 2;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->abilities(i), output);
  }

  // repeated .SC2APIProtocol.RequestQueryBuildingPlacement placements = 3;
  for (unsigned int i = 0, n = this->placements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->placements(i), output);
  }

  // optional bool ignore_resource_requirements = 4;
  if (has_ignore_resource_requirements()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ignore_resource_requirements(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestQuery)
}

::google::protobuf::uint8* RequestQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestQuery)
  // repeated .SC2APIProtocol.RequestQueryPathing pathing = 1;
  for (unsigned int i = 0, n = this->pathing_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pathing(i), false, target);
  }

  // repeated .SC2APIProtocol.RequestQueryAvailableAbilities abilities = 2;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->abilities(i), false, target);
  }

  // repeated .SC2APIProtocol.RequestQueryBuildingPlacement placements = 3;
  for (unsigned int i = 0, n = this->placements_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->placements(i), false, target);
  }

  // optional bool ignore_resource_requirements = 4;
  if (has_ignore_resource_requirements()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ignore_resource_requirements(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestQuery)
  return target;
}

int RequestQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestQuery)
  int total_size = 0;

  // optional bool ignore_resource_requirements = 4;
  if (has_ignore_resource_requirements()) {
    total_size += 1 + 1;
  }

  // repeated .SC2APIProtocol.RequestQueryPathing pathing = 1;
  total_size += 1 * this->pathing_size();
  for (int i = 0; i < this->pathing_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pathing(i));
  }

  // repeated .SC2APIProtocol.RequestQueryAvailableAbilities abilities = 2;
  total_size += 1 * this->abilities_size();
  for (int i = 0; i < this->abilities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->abilities(i));
  }

  // repeated .SC2APIProtocol.RequestQueryBuildingPlacement placements = 3;
  total_size += 1 * this->placements_size();
  for (int i = 0; i < this->placements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->placements(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestQuery)
    MergeFrom(*source);
  }
}

void RequestQuery::MergeFrom(const RequestQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pathing_.MergeFrom(from.pathing_);
  abilities_.MergeFrom(from.abilities_);
  placements_.MergeFrom(from.placements_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_ignore_resource_requirements()) {
      set_ignore_resource_requirements(from.ignore_resource_requirements());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestQuery::CopyFrom(const RequestQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQuery::IsInitialized() const {

  return true;
}

void RequestQuery::Swap(RequestQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestQuery::InternalSwap(RequestQuery* other) {
  pathing_.UnsafeArenaSwap(&other->pathing_);
  abilities_.UnsafeArenaSwap(&other->abilities_);
  placements_.UnsafeArenaSwap(&other->placements_);
  std::swap(ignore_resource_requirements_, other->ignore_resource_requirements_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestQuery_descriptor_;
  metadata.reflection = RequestQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestQuery

// repeated .SC2APIProtocol.RequestQueryPathing pathing = 1;
int RequestQuery::pathing_size() const {
  return pathing_.size();
}
void RequestQuery::clear_pathing() {
  pathing_.Clear();
}
const ::SC2APIProtocol::RequestQueryPathing& RequestQuery::pathing(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQuery.pathing)
  return pathing_.Get(index);
}
::SC2APIProtocol::RequestQueryPathing* RequestQuery::mutable_pathing(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestQuery.pathing)
  return pathing_.Mutable(index);
}
::SC2APIProtocol::RequestQueryPathing* RequestQuery::add_pathing() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.RequestQuery.pathing)
  return pathing_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::RequestQueryPathing >*
RequestQuery::mutable_pathing() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.RequestQuery.pathing)
  return &pathing_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::RequestQueryPathing >&
RequestQuery::pathing() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.RequestQuery.pathing)
  return pathing_;
}

// repeated .SC2APIProtocol.RequestQueryAvailableAbilities abilities = 2;
int RequestQuery::abilities_size() const {
  return abilities_.size();
}
void RequestQuery::clear_abilities() {
  abilities_.Clear();
}
const ::SC2APIProtocol::RequestQueryAvailableAbilities& RequestQuery::abilities(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQuery.abilities)
  return abilities_.Get(index);
}
::SC2APIProtocol::RequestQueryAvailableAbilities* RequestQuery::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestQuery.abilities)
  return abilities_.Mutable(index);
}
::SC2APIProtocol::RequestQueryAvailableAbilities* RequestQuery::add_abilities() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.RequestQuery.abilities)
  return abilities_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::RequestQueryAvailableAbilities >*
RequestQuery::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.RequestQuery.abilities)
  return &abilities_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::RequestQueryAvailableAbilities >&
RequestQuery::abilities() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.RequestQuery.abilities)
  return abilities_;
}

// repeated .SC2APIProtocol.RequestQueryBuildingPlacement placements = 3;
int RequestQuery::placements_size() const {
  return placements_.size();
}
void RequestQuery::clear_placements() {
  placements_.Clear();
}
const ::SC2APIProtocol::RequestQueryBuildingPlacement& RequestQuery::placements(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQuery.placements)
  return placements_.Get(index);
}
::SC2APIProtocol::RequestQueryBuildingPlacement* RequestQuery::mutable_placements(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestQuery.placements)
  return placements_.Mutable(index);
}
::SC2APIProtocol::RequestQueryBuildingPlacement* RequestQuery::add_placements() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.RequestQuery.placements)
  return placements_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::RequestQueryBuildingPlacement >*
RequestQuery::mutable_placements() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.RequestQuery.placements)
  return &placements_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::RequestQueryBuildingPlacement >&
RequestQuery::placements() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.RequestQuery.placements)
  return placements_;
}

// optional bool ignore_resource_requirements = 4;
bool RequestQuery::has_ignore_resource_requirements() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RequestQuery::set_has_ignore_resource_requirements() {
  _has_bits_[0] |= 0x00000008u;
}
void RequestQuery::clear_has_ignore_resource_requirements() {
  _has_bits_[0] &= ~0x00000008u;
}
void RequestQuery::clear_ignore_resource_requirements() {
  ignore_resource_requirements_ = false;
  clear_has_ignore_resource_requirements();
}
 bool RequestQuery::ignore_resource_requirements() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQuery.ignore_resource_requirements)
  return ignore_resource_requirements_;
}
 void RequestQuery::set_ignore_resource_requirements(bool value) {
  set_has_ignore_resource_requirements();
  ignore_resource_requirements_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestQuery.ignore_resource_requirements)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseQuery::kPathingFieldNumber;
const int ResponseQuery::kAbilitiesFieldNumber;
const int ResponseQuery::kPlacementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQuery::ResponseQuery()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseQuery)
}

void ResponseQuery::InitAsDefaultInstance() {
}

ResponseQuery::ResponseQuery(const ResponseQuery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseQuery)
}

void ResponseQuery::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseQuery::~ResponseQuery() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseQuery)
  SharedDtor();
}

void ResponseQuery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseQuery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseQuery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseQuery_descriptor_;
}

const ResponseQuery& ResponseQuery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fquery_2eproto();
  return *default_instance_;
}

ResponseQuery* ResponseQuery::default_instance_ = NULL;

ResponseQuery* ResponseQuery::New(::google::protobuf::Arena* arena) const {
  ResponseQuery* n = new ResponseQuery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseQuery)
  pathing_.Clear();
  abilities_.Clear();
  placements_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseQuery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseQuery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC2APIProtocol.ResponseQueryPathing pathing = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_pathing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_pathing()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_pathing;
        if (input->ExpectTag(18)) goto parse_loop_abilities;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .SC2APIProtocol.ResponseQueryAvailableAbilities abilities = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_abilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_abilities;
        if (input->ExpectTag(26)) goto parse_loop_placements;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .SC2APIProtocol.ResponseQueryBuildingPlacement placements = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_placements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_placements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_placements;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseQuery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseQuery)
  return false;
#undef DO_
}

void ResponseQuery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseQuery)
  // repeated .SC2APIProtocol.ResponseQueryPathing pathing = 1;
  for (unsigned int i = 0, n = this->pathing_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pathing(i), output);
  }

  // repeated .SC2APIProtocol.ResponseQueryAvailableAbilities abilities = 2;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->abilities(i), output);
  }

  // repeated .SC2APIProtocol.ResponseQueryBuildingPlacement placements = 3;
  for (unsigned int i = 0, n = this->placements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->placements(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseQuery)
}

::google::protobuf::uint8* ResponseQuery::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseQuery)
  // repeated .SC2APIProtocol.ResponseQueryPathing pathing = 1;
  for (unsigned int i = 0, n = this->pathing_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->pathing(i), false, target);
  }

  // repeated .SC2APIProtocol.ResponseQueryAvailableAbilities abilities = 2;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->abilities(i), false, target);
  }

  // repeated .SC2APIProtocol.ResponseQueryBuildingPlacement placements = 3;
  for (unsigned int i = 0, n = this->placements_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->placements(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseQuery)
  return target;
}

int ResponseQuery::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseQuery)
  int total_size = 0;

  // repeated .SC2APIProtocol.ResponseQueryPathing pathing = 1;
  total_size += 1 * this->pathing_size();
  for (int i = 0; i < this->pathing_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pathing(i));
  }

  // repeated .SC2APIProtocol.ResponseQueryAvailableAbilities abilities = 2;
  total_size += 1 * this->abilities_size();
  for (int i = 0; i < this->abilities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->abilities(i));
  }

  // repeated .SC2APIProtocol.ResponseQueryBuildingPlacement placements = 3;
  total_size += 1 * this->placements_size();
  for (int i = 0; i < this->placements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->placements(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseQuery::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseQuery* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseQuery>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseQuery)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseQuery)
    MergeFrom(*source);
  }
}

void ResponseQuery::MergeFrom(const ResponseQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseQuery)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  pathing_.MergeFrom(from.pathing_);
  abilities_.MergeFrom(from.abilities_);
  placements_.MergeFrom(from.placements_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseQuery::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQuery::CopyFrom(const ResponseQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQuery::IsInitialized() const {

  return true;
}

void ResponseQuery::Swap(ResponseQuery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQuery::InternalSwap(ResponseQuery* other) {
  pathing_.UnsafeArenaSwap(&other->pathing_);
  abilities_.UnsafeArenaSwap(&other->abilities_);
  placements_.UnsafeArenaSwap(&other->placements_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseQuery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseQuery_descriptor_;
  metadata.reflection = ResponseQuery_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseQuery

// repeated .SC2APIProtocol.ResponseQueryPathing pathing = 1;
int ResponseQuery::pathing_size() const {
  return pathing_.size();
}
void ResponseQuery::clear_pathing() {
  pathing_.Clear();
}
const ::SC2APIProtocol::ResponseQueryPathing& ResponseQuery::pathing(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseQuery.pathing)
  return pathing_.Get(index);
}
::SC2APIProtocol::ResponseQueryPathing* ResponseQuery::mutable_pathing(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseQuery.pathing)
  return pathing_.Mutable(index);
}
::SC2APIProtocol::ResponseQueryPathing* ResponseQuery::add_pathing() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseQuery.pathing)
  return pathing_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryPathing >*
ResponseQuery::mutable_pathing() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseQuery.pathing)
  return &pathing_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryPathing >&
ResponseQuery::pathing() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseQuery.pathing)
  return pathing_;
}

// repeated .SC2APIProtocol.ResponseQueryAvailableAbilities abilities = 2;
int ResponseQuery::abilities_size() const {
  return abilities_.size();
}
void ResponseQuery::clear_abilities() {
  abilities_.Clear();
}
const ::SC2APIProtocol::ResponseQueryAvailableAbilities& ResponseQuery::abilities(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseQuery.abilities)
  return abilities_.Get(index);
}
::SC2APIProtocol::ResponseQueryAvailableAbilities* ResponseQuery::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseQuery.abilities)
  return abilities_.Mutable(index);
}
::SC2APIProtocol::ResponseQueryAvailableAbilities* ResponseQuery::add_abilities() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseQuery.abilities)
  return abilities_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryAvailableAbilities >*
ResponseQuery::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseQuery.abilities)
  return &abilities_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryAvailableAbilities >&
ResponseQuery::abilities() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseQuery.abilities)
  return abilities_;
}

// repeated .SC2APIProtocol.ResponseQueryBuildingPlacement placements = 3;
int ResponseQuery::placements_size() const {
  return placements_.size();
}
void ResponseQuery::clear_placements() {
  placements_.Clear();
}
const ::SC2APIProtocol::ResponseQueryBuildingPlacement& ResponseQuery::placements(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseQuery.placements)
  return placements_.Get(index);
}
::SC2APIProtocol::ResponseQueryBuildingPlacement* ResponseQuery::mutable_placements(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseQuery.placements)
  return placements_.Mutable(index);
}
::SC2APIProtocol::ResponseQueryBuildingPlacement* ResponseQuery::add_placements() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseQuery.placements)
  return placements_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryBuildingPlacement >*
ResponseQuery::mutable_placements() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseQuery.placements)
  return &placements_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::ResponseQueryBuildingPlacement >&
ResponseQuery::placements() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseQuery.placements)
  return placements_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestQueryPathing::kStartPosFieldNumber;
const int RequestQueryPathing::kUnitTagFieldNumber;
const int RequestQueryPathing::kEndPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestQueryPathing::RequestQueryPathing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestQueryPathing)
}

void RequestQueryPathing::InitAsDefaultInstance() {
  RequestQueryPathing_default_oneof_instance_->start_pos_ = const_cast< ::SC2APIProtocol::Point2D*>(&::SC2APIProtocol::Point2D::default_instance());
  RequestQueryPathing_default_oneof_instance_->unit_tag_ = GOOGLE_ULONGLONG(0);
  end_pos_ = const_cast< ::SC2APIProtocol::Point2D*>(&::SC2APIProtocol::Point2D::default_instance());
}

RequestQueryPathing::RequestQueryPathing(const RequestQueryPathing& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestQueryPathing)
}

void RequestQueryPathing::SharedCtor() {
  _cached_size_ = 0;
  end_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_start();
}

RequestQueryPathing::~RequestQueryPathing() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestQueryPathing)
  SharedDtor();
}

void RequestQueryPathing::SharedDtor() {
  if (has_start()) {
    clear_start();
  }
  if (this != default_instance_) {
    delete end_pos_;
  }
}

void RequestQueryPathing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestQueryPathing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestQueryPathing_descriptor_;
}

const RequestQueryPathing& RequestQueryPathing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fquery_2eproto();
  return *default_instance_;
}

RequestQueryPathing* RequestQueryPathing::default_instance_ = NULL;

RequestQueryPathing* RequestQueryPathing::New(::google::protobuf::Arena* arena) const {
  RequestQueryPathing* n = new RequestQueryPathing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestQueryPathing::clear_start() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.RequestQueryPathing)
  switch(start_case()) {
    case kStartPos: {
      delete start_.start_pos_;
      break;
    }
    case kUnitTag: {
      // No need to clear
      break;
    }
    case START_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = START_NOT_SET;
}


void RequestQueryPathing::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestQueryPathing)
  if (has_end_pos()) {
    if (end_pos_ != NULL) end_pos_->::SC2APIProtocol::Point2D::Clear();
  }
  clear_start();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestQueryPathing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestQueryPathing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.Point2D start_pos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unit_tag;
        break;
      }

      // optional uint64 unit_tag = 2;
      case 2: {
        if (tag == 16) {
         parse_unit_tag:
          clear_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_.unit_tag_)));
          set_has_unit_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end_pos;
        break;
      }

      // optional .SC2APIProtocol.Point2D end_pos = 3;
      case 3: {
        if (tag == 26) {
         parse_end_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestQueryPathing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestQueryPathing)
  return false;
#undef DO_
}

void RequestQueryPathing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestQueryPathing)
  // optional .SC2APIProtocol.Point2D start_pos = 1;
  if (has_start_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *start_.start_pos_, output);
  }

  // optional uint64 unit_tag = 2;
  if (has_unit_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->unit_tag(), output);
  }

  // optional .SC2APIProtocol.Point2D end_pos = 3;
  if (has_end_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->end_pos_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestQueryPathing)
}

::google::protobuf::uint8* RequestQueryPathing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestQueryPathing)
  // optional .SC2APIProtocol.Point2D start_pos = 1;
  if (has_start_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *start_.start_pos_, false, target);
  }

  // optional uint64 unit_tag = 2;
  if (has_unit_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->unit_tag(), target);
  }

  // optional .SC2APIProtocol.Point2D end_pos = 3;
  if (has_end_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->end_pos_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestQueryPathing)
  return target;
}

int RequestQueryPathing::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestQueryPathing)
  int total_size = 0;

  // optional .SC2APIProtocol.Point2D end_pos = 3;
  if (has_end_pos()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->end_pos_);
  }

  switch (start_case()) {
    // optional .SC2APIProtocol.Point2D start_pos = 1;
    case kStartPos: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *start_.start_pos_);
      break;
    }
    // optional uint64 unit_tag = 2;
    case kUnitTag: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unit_tag());
      break;
    }
    case START_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestQueryPathing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestQueryPathing)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestQueryPathing* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestQueryPathing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestQueryPathing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestQueryPathing)
    MergeFrom(*source);
  }
}

void RequestQueryPathing::MergeFrom(const RequestQueryPathing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestQueryPathing)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.start_case()) {
    case kStartPos: {
      mutable_start_pos()->::SC2APIProtocol::Point2D::MergeFrom(from.start_pos());
      break;
    }
    case kUnitTag: {
      set_unit_tag(from.unit_tag());
      break;
    }
    case START_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_end_pos()) {
      mutable_end_pos()->::SC2APIProtocol::Point2D::MergeFrom(from.end_pos());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestQueryPathing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestQueryPathing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestQueryPathing::CopyFrom(const RequestQueryPathing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestQueryPathing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQueryPathing::IsInitialized() const {

  return true;
}

void RequestQueryPathing::Swap(RequestQueryPathing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestQueryPathing::InternalSwap(RequestQueryPathing* other) {
  std::swap(end_pos_, other->end_pos_);
  std::swap(start_, other->start_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestQueryPathing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestQueryPathing_descriptor_;
  metadata.reflection = RequestQueryPathing_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestQueryPathing

// optional .SC2APIProtocol.Point2D start_pos = 1;
bool RequestQueryPathing::has_start_pos() const {
  return start_case() == kStartPos;
}
void RequestQueryPathing::set_has_start_pos() {
  _oneof_case_[0] = kStartPos;
}
void RequestQueryPathing::clear_start_pos() {
  if (has_start_pos()) {
    delete start_.start_pos_;
    clear_has_start();
  }
}
 const ::SC2APIProtocol::Point2D& RequestQueryPathing::start_pos() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQueryPathing.start_pos)
  return has_start_pos()
      ? *start_.start_pos_
      : ::SC2APIProtocol::Point2D::default_instance();
}
::SC2APIProtocol::Point2D* RequestQueryPathing::mutable_start_pos() {
  if (!has_start_pos()) {
    clear_start();
    set_has_start_pos();
    start_.start_pos_ = new ::SC2APIProtocol::Point2D;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestQueryPathing.start_pos)
  return start_.start_pos_;
}
::SC2APIProtocol::Point2D* RequestQueryPathing::release_start_pos() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RequestQueryPathing.start_pos)
  if (has_start_pos()) {
    clear_has_start();
    ::SC2APIProtocol::Point2D* temp = start_.start_pos_;
    start_.start_pos_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RequestQueryPathing::set_allocated_start_pos(::SC2APIProtocol::Point2D* start_pos) {
  clear_start();
  if (start_pos) {
    set_has_start_pos();
    start_.start_pos_ = start_pos;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestQueryPathing.start_pos)
}

// optional uint64 unit_tag = 2;
bool RequestQueryPathing::has_unit_tag() const {
  return start_case() == kUnitTag;
}
void RequestQueryPathing::set_has_unit_tag() {
  _oneof_case_[0] = kUnitTag;
}
void RequestQueryPathing::clear_unit_tag() {
  if (has_unit_tag()) {
    start_.unit_tag_ = GOOGLE_ULONGLONG(0);
    clear_has_start();
  }
}
 ::google::protobuf::uint64 RequestQueryPathing::unit_tag() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQueryPathing.unit_tag)
  if (has_unit_tag()) {
    return start_.unit_tag_;
  }
  return GOOGLE_ULONGLONG(0);
}
 void RequestQueryPathing::set_unit_tag(::google::protobuf::uint64 value) {
  if (!has_unit_tag()) {
    clear_start();
    set_has_unit_tag();
  }
  start_.unit_tag_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestQueryPathing.unit_tag)
}

// optional .SC2APIProtocol.Point2D end_pos = 3;
bool RequestQueryPathing::has_end_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RequestQueryPathing::set_has_end_pos() {
  _has_bits_[0] |= 0x00000004u;
}
void RequestQueryPathing::clear_has_end_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
void RequestQueryPathing::clear_end_pos() {
  if (end_pos_ != NULL) end_pos_->::SC2APIProtocol::Point2D::Clear();
  clear_has_end_pos();
}
const ::SC2APIProtocol::Point2D& RequestQueryPathing::end_pos() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQueryPathing.end_pos)
  return end_pos_ != NULL ? *end_pos_ : *default_instance_->end_pos_;
}
::SC2APIProtocol::Point2D* RequestQueryPathing::mutable_end_pos() {
  set_has_end_pos();
  if (end_pos_ == NULL) {
    end_pos_ = new ::SC2APIProtocol::Point2D;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestQueryPathing.end_pos)
  return end_pos_;
}
::SC2APIProtocol::Point2D* RequestQueryPathing::release_end_pos() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RequestQueryPathing.end_pos)
  clear_has_end_pos();
  ::SC2APIProtocol::Point2D* temp = end_pos_;
  end_pos_ = NULL;
  return temp;
}
void RequestQueryPathing::set_allocated_end_pos(::SC2APIProtocol::Point2D* end_pos) {
  delete end_pos_;
  end_pos_ = end_pos;
  if (end_pos) {
    set_has_end_pos();
  } else {
    clear_has_end_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestQueryPathing.end_pos)
}

bool RequestQueryPathing::has_start() const {
  return start_case() != START_NOT_SET;
}
void RequestQueryPathing::clear_has_start() {
  _oneof_case_[0] = START_NOT_SET;
}
RequestQueryPathing::StartCase RequestQueryPathing::start_case() const {
  return RequestQueryPathing::StartCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseQueryPathing::kDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQueryPathing::ResponseQueryPathing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseQueryPathing)
}

void ResponseQueryPathing::InitAsDefaultInstance() {
}

ResponseQueryPathing::ResponseQueryPathing(const ResponseQueryPathing& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseQueryPathing)
}

void ResponseQueryPathing::SharedCtor() {
  _cached_size_ = 0;
  distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseQueryPathing::~ResponseQueryPathing() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseQueryPathing)
  SharedDtor();
}

void ResponseQueryPathing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseQueryPathing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseQueryPathing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseQueryPathing_descriptor_;
}

const ResponseQueryPathing& ResponseQueryPathing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fquery_2eproto();
  return *default_instance_;
}

ResponseQueryPathing* ResponseQueryPathing::default_instance_ = NULL;

ResponseQueryPathing* ResponseQueryPathing::New(::google::protobuf::Arena* arena) const {
  ResponseQueryPathing* n = new ResponseQueryPathing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseQueryPathing::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseQueryPathing)
  distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseQueryPathing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseQueryPathing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float distance = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseQueryPathing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseQueryPathing)
  return false;
#undef DO_
}

void ResponseQueryPathing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseQueryPathing)
  // optional float distance = 1;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseQueryPathing)
}

::google::protobuf::uint8* ResponseQueryPathing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseQueryPathing)
  // optional float distance = 1;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseQueryPathing)
  return target;
}

int ResponseQueryPathing::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseQueryPathing)
  int total_size = 0;

  // optional float distance = 1;
  if (has_distance()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseQueryPathing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseQueryPathing)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseQueryPathing* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseQueryPathing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseQueryPathing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseQueryPathing)
    MergeFrom(*source);
  }
}

void ResponseQueryPathing::MergeFrom(const ResponseQueryPathing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseQueryPathing)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_distance()) {
      set_distance(from.distance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseQueryPathing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseQueryPathing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQueryPathing::CopyFrom(const ResponseQueryPathing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseQueryPathing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQueryPathing::IsInitialized() const {

  return true;
}

void ResponseQueryPathing::Swap(ResponseQueryPathing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQueryPathing::InternalSwap(ResponseQueryPathing* other) {
  std::swap(distance_, other->distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseQueryPathing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseQueryPathing_descriptor_;
  metadata.reflection = ResponseQueryPathing_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseQueryPathing

// optional float distance = 1;
bool ResponseQueryPathing::has_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseQueryPathing::set_has_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseQueryPathing::clear_has_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseQueryPathing::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
 float ResponseQueryPathing::distance() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseQueryPathing.distance)
  return distance_;
}
 void ResponseQueryPathing::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseQueryPathing.distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestQueryAvailableAbilities::kUnitTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestQueryAvailableAbilities::RequestQueryAvailableAbilities()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestQueryAvailableAbilities)
}

void RequestQueryAvailableAbilities::InitAsDefaultInstance() {
}

RequestQueryAvailableAbilities::RequestQueryAvailableAbilities(const RequestQueryAvailableAbilities& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestQueryAvailableAbilities)
}

void RequestQueryAvailableAbilities::SharedCtor() {
  _cached_size_ = 0;
  unit_tag_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestQueryAvailableAbilities::~RequestQueryAvailableAbilities() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestQueryAvailableAbilities)
  SharedDtor();
}

void RequestQueryAvailableAbilities::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestQueryAvailableAbilities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestQueryAvailableAbilities::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestQueryAvailableAbilities_descriptor_;
}

const RequestQueryAvailableAbilities& RequestQueryAvailableAbilities::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fquery_2eproto();
  return *default_instance_;
}

RequestQueryAvailableAbilities* RequestQueryAvailableAbilities::default_instance_ = NULL;

RequestQueryAvailableAbilities* RequestQueryAvailableAbilities::New(::google::protobuf::Arena* arena) const {
  RequestQueryAvailableAbilities* n = new RequestQueryAvailableAbilities;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestQueryAvailableAbilities::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestQueryAvailableAbilities)
  unit_tag_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestQueryAvailableAbilities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestQueryAvailableAbilities)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 unit_tag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unit_tag_)));
          set_has_unit_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestQueryAvailableAbilities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestQueryAvailableAbilities)
  return false;
#undef DO_
}

void RequestQueryAvailableAbilities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestQueryAvailableAbilities)
  // optional uint64 unit_tag = 1;
  if (has_unit_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->unit_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestQueryAvailableAbilities)
}

::google::protobuf::uint8* RequestQueryAvailableAbilities::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestQueryAvailableAbilities)
  // optional uint64 unit_tag = 1;
  if (has_unit_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->unit_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestQueryAvailableAbilities)
  return target;
}

int RequestQueryAvailableAbilities::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestQueryAvailableAbilities)
  int total_size = 0;

  // optional uint64 unit_tag = 1;
  if (has_unit_tag()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->unit_tag());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestQueryAvailableAbilities::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestQueryAvailableAbilities)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestQueryAvailableAbilities* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestQueryAvailableAbilities>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestQueryAvailableAbilities)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestQueryAvailableAbilities)
    MergeFrom(*source);
  }
}

void RequestQueryAvailableAbilities::MergeFrom(const RequestQueryAvailableAbilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestQueryAvailableAbilities)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit_tag()) {
      set_unit_tag(from.unit_tag());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestQueryAvailableAbilities::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestQueryAvailableAbilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestQueryAvailableAbilities::CopyFrom(const RequestQueryAvailableAbilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestQueryAvailableAbilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQueryAvailableAbilities::IsInitialized() const {

  return true;
}

void RequestQueryAvailableAbilities::Swap(RequestQueryAvailableAbilities* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestQueryAvailableAbilities::InternalSwap(RequestQueryAvailableAbilities* other) {
  std::swap(unit_tag_, other->unit_tag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestQueryAvailableAbilities::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestQueryAvailableAbilities_descriptor_;
  metadata.reflection = RequestQueryAvailableAbilities_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestQueryAvailableAbilities

// optional uint64 unit_tag = 1;
bool RequestQueryAvailableAbilities::has_unit_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestQueryAvailableAbilities::set_has_unit_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestQueryAvailableAbilities::clear_has_unit_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestQueryAvailableAbilities::clear_unit_tag() {
  unit_tag_ = GOOGLE_ULONGLONG(0);
  clear_has_unit_tag();
}
 ::google::protobuf::uint64 RequestQueryAvailableAbilities::unit_tag() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQueryAvailableAbilities.unit_tag)
  return unit_tag_;
}
 void RequestQueryAvailableAbilities::set_unit_tag(::google::protobuf::uint64 value) {
  set_has_unit_tag();
  unit_tag_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestQueryAvailableAbilities.unit_tag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseQueryAvailableAbilities::kAbilitiesFieldNumber;
const int ResponseQueryAvailableAbilities::kUnitTagFieldNumber;
const int ResponseQueryAvailableAbilities::kUnitTypeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQueryAvailableAbilities::ResponseQueryAvailableAbilities()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseQueryAvailableAbilities)
}

void ResponseQueryAvailableAbilities::InitAsDefaultInstance() {
}

ResponseQueryAvailableAbilities::ResponseQueryAvailableAbilities(const ResponseQueryAvailableAbilities& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseQueryAvailableAbilities)
}

void ResponseQueryAvailableAbilities::SharedCtor() {
  _cached_size_ = 0;
  unit_tag_ = GOOGLE_ULONGLONG(0);
  unit_type_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseQueryAvailableAbilities::~ResponseQueryAvailableAbilities() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseQueryAvailableAbilities)
  SharedDtor();
}

void ResponseQueryAvailableAbilities::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseQueryAvailableAbilities::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseQueryAvailableAbilities::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseQueryAvailableAbilities_descriptor_;
}

const ResponseQueryAvailableAbilities& ResponseQueryAvailableAbilities::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fquery_2eproto();
  return *default_instance_;
}

ResponseQueryAvailableAbilities* ResponseQueryAvailableAbilities::default_instance_ = NULL;

ResponseQueryAvailableAbilities* ResponseQueryAvailableAbilities::New(::google::protobuf::Arena* arena) const {
  ResponseQueryAvailableAbilities* n = new ResponseQueryAvailableAbilities;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseQueryAvailableAbilities::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseQueryAvailableAbilities)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResponseQueryAvailableAbilities, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResponseQueryAvailableAbilities*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(unit_tag_, unit_type_id_);

#undef ZR_HELPER_
#undef ZR_

  abilities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseQueryAvailableAbilities::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseQueryAvailableAbilities)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC2APIProtocol.AvailableAbility abilities = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_abilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_abilities;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_unit_tag;
        break;
      }

      // optional uint64 unit_tag = 2;
      case 2: {
        if (tag == 16) {
         parse_unit_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unit_tag_)));
          set_has_unit_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unit_type_id;
        break;
      }

      // optional uint32 unit_type_id = 3;
      case 3: {
        if (tag == 24) {
         parse_unit_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_type_id_)));
          set_has_unit_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseQueryAvailableAbilities)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseQueryAvailableAbilities)
  return false;
#undef DO_
}

void ResponseQueryAvailableAbilities::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseQueryAvailableAbilities)
  // repeated .SC2APIProtocol.AvailableAbility abilities = 1;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->abilities(i), output);
  }

  // optional uint64 unit_tag = 2;
  if (has_unit_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->unit_tag(), output);
  }

  // optional uint32 unit_type_id = 3;
  if (has_unit_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unit_type_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseQueryAvailableAbilities)
}

::google::protobuf::uint8* ResponseQueryAvailableAbilities::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseQueryAvailableAbilities)
  // repeated .SC2APIProtocol.AvailableAbility abilities = 1;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->abilities(i), false, target);
  }

  // optional uint64 unit_tag = 2;
  if (has_unit_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->unit_tag(), target);
  }

  // optional uint32 unit_type_id = 3;
  if (has_unit_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->unit_type_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseQueryAvailableAbilities)
  return target;
}

int ResponseQueryAvailableAbilities::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseQueryAvailableAbilities)
  int total_size = 0;

  if (_has_bits_[1 / 32] & 6u) {
    // optional uint64 unit_tag = 2;
    if (has_unit_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unit_tag());
    }

    // optional uint32 unit_type_id = 3;
    if (has_unit_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit_type_id());
    }

  }
  // repeated .SC2APIProtocol.AvailableAbility abilities = 1;
  total_size += 1 * this->abilities_size();
  for (int i = 0; i < this->abilities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->abilities(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseQueryAvailableAbilities::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseQueryAvailableAbilities)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseQueryAvailableAbilities* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseQueryAvailableAbilities>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseQueryAvailableAbilities)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseQueryAvailableAbilities)
    MergeFrom(*source);
  }
}

void ResponseQueryAvailableAbilities::MergeFrom(const ResponseQueryAvailableAbilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseQueryAvailableAbilities)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  abilities_.MergeFrom(from.abilities_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_unit_tag()) {
      set_unit_tag(from.unit_tag());
    }
    if (from.has_unit_type_id()) {
      set_unit_type_id(from.unit_type_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseQueryAvailableAbilities::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseQueryAvailableAbilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQueryAvailableAbilities::CopyFrom(const ResponseQueryAvailableAbilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseQueryAvailableAbilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQueryAvailableAbilities::IsInitialized() const {

  return true;
}

void ResponseQueryAvailableAbilities::Swap(ResponseQueryAvailableAbilities* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQueryAvailableAbilities::InternalSwap(ResponseQueryAvailableAbilities* other) {
  abilities_.UnsafeArenaSwap(&other->abilities_);
  std::swap(unit_tag_, other->unit_tag_);
  std::swap(unit_type_id_, other->unit_type_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseQueryAvailableAbilities::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseQueryAvailableAbilities_descriptor_;
  metadata.reflection = ResponseQueryAvailableAbilities_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseQueryAvailableAbilities

// repeated .SC2APIProtocol.AvailableAbility abilities = 1;
int ResponseQueryAvailableAbilities::abilities_size() const {
  return abilities_.size();
}
void ResponseQueryAvailableAbilities::clear_abilities() {
  abilities_.Clear();
}
const ::SC2APIProtocol::AvailableAbility& ResponseQueryAvailableAbilities::abilities(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseQueryAvailableAbilities.abilities)
  return abilities_.Get(index);
}
::SC2APIProtocol::AvailableAbility* ResponseQueryAvailableAbilities::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseQueryAvailableAbilities.abilities)
  return abilities_.Mutable(index);
}
::SC2APIProtocol::AvailableAbility* ResponseQueryAvailableAbilities::add_abilities() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseQueryAvailableAbilities.abilities)
  return abilities_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::AvailableAbility >*
ResponseQueryAvailableAbilities::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseQueryAvailableAbilities.abilities)
  return &abilities_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::AvailableAbility >&
ResponseQueryAvailableAbilities::abilities() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseQueryAvailableAbilities.abilities)
  return abilities_;
}

// optional uint64 unit_tag = 2;
bool ResponseQueryAvailableAbilities::has_unit_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResponseQueryAvailableAbilities::set_has_unit_tag() {
  _has_bits_[0] |= 0x00000002u;
}
void ResponseQueryAvailableAbilities::clear_has_unit_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResponseQueryAvailableAbilities::clear_unit_tag() {
  unit_tag_ = GOOGLE_ULONGLONG(0);
  clear_has_unit_tag();
}
 ::google::protobuf::uint64 ResponseQueryAvailableAbilities::unit_tag() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseQueryAvailableAbilities.unit_tag)
  return unit_tag_;
}
 void ResponseQueryAvailableAbilities::set_unit_tag(::google::protobuf::uint64 value) {
  set_has_unit_tag();
  unit_tag_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseQueryAvailableAbilities.unit_tag)
}

// optional uint32 unit_type_id = 3;
bool ResponseQueryAvailableAbilities::has_unit_type_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResponseQueryAvailableAbilities::set_has_unit_type_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ResponseQueryAvailableAbilities::clear_has_unit_type_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResponseQueryAvailableAbilities::clear_unit_type_id() {
  unit_type_id_ = 0u;
  clear_has_unit_type_id();
}
 ::google::protobuf::uint32 ResponseQueryAvailableAbilities::unit_type_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseQueryAvailableAbilities.unit_type_id)
  return unit_type_id_;
}
 void ResponseQueryAvailableAbilities::set_unit_type_id(::google::protobuf::uint32 value) {
  set_has_unit_type_id();
  unit_type_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseQueryAvailableAbilities.unit_type_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestQueryBuildingPlacement::kAbilityIdFieldNumber;
const int RequestQueryBuildingPlacement::kTargetPosFieldNumber;
const int RequestQueryBuildingPlacement::kPlacingUnitTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestQueryBuildingPlacement::RequestQueryBuildingPlacement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestQueryBuildingPlacement)
}

void RequestQueryBuildingPlacement::InitAsDefaultInstance() {
  target_pos_ = const_cast< ::SC2APIProtocol::Point2D*>(&::SC2APIProtocol::Point2D::default_instance());
}

RequestQueryBuildingPlacement::RequestQueryBuildingPlacement(const RequestQueryBuildingPlacement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestQueryBuildingPlacement)
}

void RequestQueryBuildingPlacement::SharedCtor() {
  _cached_size_ = 0;
  ability_id_ = 0;
  target_pos_ = NULL;
  placing_unit_tag_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestQueryBuildingPlacement::~RequestQueryBuildingPlacement() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestQueryBuildingPlacement)
  SharedDtor();
}

void RequestQueryBuildingPlacement::SharedDtor() {
  if (this != default_instance_) {
    delete target_pos_;
  }
}

void RequestQueryBuildingPlacement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestQueryBuildingPlacement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestQueryBuildingPlacement_descriptor_;
}

const RequestQueryBuildingPlacement& RequestQueryBuildingPlacement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fquery_2eproto();
  return *default_instance_;
}

RequestQueryBuildingPlacement* RequestQueryBuildingPlacement::default_instance_ = NULL;

RequestQueryBuildingPlacement* RequestQueryBuildingPlacement::New(::google::protobuf::Arena* arena) const {
  RequestQueryBuildingPlacement* n = new RequestQueryBuildingPlacement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestQueryBuildingPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestQueryBuildingPlacement)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RequestQueryBuildingPlacement, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RequestQueryBuildingPlacement*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(placing_unit_tag_, ability_id_);
    if (has_target_pos()) {
      if (target_pos_ != NULL) target_pos_->::SC2APIProtocol::Point2D::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestQueryBuildingPlacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestQueryBuildingPlacement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ability_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_id_)));
          set_has_ability_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_target_pos;
        break;
      }

      // optional .SC2APIProtocol.Point2D target_pos = 2;
      case 2: {
        if (tag == 18) {
         parse_target_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_placing_unit_tag;
        break;
      }

      // optional uint64 placing_unit_tag = 3;
      case 3: {
        if (tag == 24) {
         parse_placing_unit_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &placing_unit_tag_)));
          set_has_placing_unit_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestQueryBuildingPlacement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestQueryBuildingPlacement)
  return false;
#undef DO_
}

void RequestQueryBuildingPlacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestQueryBuildingPlacement)
  // optional int32 ability_id = 1;
  if (has_ability_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ability_id(), output);
  }

  // optional .SC2APIProtocol.Point2D target_pos = 2;
  if (has_target_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->target_pos_, output);
  }

  // optional uint64 placing_unit_tag = 3;
  if (has_placing_unit_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->placing_unit_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestQueryBuildingPlacement)
}

::google::protobuf::uint8* RequestQueryBuildingPlacement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestQueryBuildingPlacement)
  // optional int32 ability_id = 1;
  if (has_ability_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ability_id(), target);
  }

  // optional .SC2APIProtocol.Point2D target_pos = 2;
  if (has_target_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->target_pos_, false, target);
  }

  // optional uint64 placing_unit_tag = 3;
  if (has_placing_unit_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->placing_unit_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestQueryBuildingPlacement)
  return target;
}

int RequestQueryBuildingPlacement::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestQueryBuildingPlacement)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 ability_id = 1;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ability_id());
    }

    // optional .SC2APIProtocol.Point2D target_pos = 2;
    if (has_target_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->target_pos_);
    }

    // optional uint64 placing_unit_tag = 3;
    if (has_placing_unit_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->placing_unit_tag());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestQueryBuildingPlacement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestQueryBuildingPlacement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestQueryBuildingPlacement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestQueryBuildingPlacement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestQueryBuildingPlacement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestQueryBuildingPlacement)
    MergeFrom(*source);
  }
}

void RequestQueryBuildingPlacement::MergeFrom(const RequestQueryBuildingPlacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestQueryBuildingPlacement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ability_id()) {
      set_ability_id(from.ability_id());
    }
    if (from.has_target_pos()) {
      mutable_target_pos()->::SC2APIProtocol::Point2D::MergeFrom(from.target_pos());
    }
    if (from.has_placing_unit_tag()) {
      set_placing_unit_tag(from.placing_unit_tag());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestQueryBuildingPlacement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestQueryBuildingPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestQueryBuildingPlacement::CopyFrom(const RequestQueryBuildingPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestQueryBuildingPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQueryBuildingPlacement::IsInitialized() const {

  return true;
}

void RequestQueryBuildingPlacement::Swap(RequestQueryBuildingPlacement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestQueryBuildingPlacement::InternalSwap(RequestQueryBuildingPlacement* other) {
  std::swap(ability_id_, other->ability_id_);
  std::swap(target_pos_, other->target_pos_);
  std::swap(placing_unit_tag_, other->placing_unit_tag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestQueryBuildingPlacement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestQueryBuildingPlacement_descriptor_;
  metadata.reflection = RequestQueryBuildingPlacement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestQueryBuildingPlacement

// optional int32 ability_id = 1;
bool RequestQueryBuildingPlacement::has_ability_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestQueryBuildingPlacement::set_has_ability_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestQueryBuildingPlacement::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestQueryBuildingPlacement::clear_ability_id() {
  ability_id_ = 0;
  clear_has_ability_id();
}
 ::google::protobuf::int32 RequestQueryBuildingPlacement::ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQueryBuildingPlacement.ability_id)
  return ability_id_;
}
 void RequestQueryBuildingPlacement::set_ability_id(::google::protobuf::int32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestQueryBuildingPlacement.ability_id)
}

// optional .SC2APIProtocol.Point2D target_pos = 2;
bool RequestQueryBuildingPlacement::has_target_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RequestQueryBuildingPlacement::set_has_target_pos() {
  _has_bits_[0] |= 0x00000002u;
}
void RequestQueryBuildingPlacement::clear_has_target_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
void RequestQueryBuildingPlacement::clear_target_pos() {
  if (target_pos_ != NULL) target_pos_->::SC2APIProtocol::Point2D::Clear();
  clear_has_target_pos();
}
const ::SC2APIProtocol::Point2D& RequestQueryBuildingPlacement::target_pos() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQueryBuildingPlacement.target_pos)
  return target_pos_ != NULL ? *target_pos_ : *default_instance_->target_pos_;
}
::SC2APIProtocol::Point2D* RequestQueryBuildingPlacement::mutable_target_pos() {
  set_has_target_pos();
  if (target_pos_ == NULL) {
    target_pos_ = new ::SC2APIProtocol::Point2D;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestQueryBuildingPlacement.target_pos)
  return target_pos_;
}
::SC2APIProtocol::Point2D* RequestQueryBuildingPlacement::release_target_pos() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RequestQueryBuildingPlacement.target_pos)
  clear_has_target_pos();
  ::SC2APIProtocol::Point2D* temp = target_pos_;
  target_pos_ = NULL;
  return temp;
}
void RequestQueryBuildingPlacement::set_allocated_target_pos(::SC2APIProtocol::Point2D* target_pos) {
  delete target_pos_;
  target_pos_ = target_pos;
  if (target_pos) {
    set_has_target_pos();
  } else {
    clear_has_target_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestQueryBuildingPlacement.target_pos)
}

// optional uint64 placing_unit_tag = 3;
bool RequestQueryBuildingPlacement::has_placing_unit_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RequestQueryBuildingPlacement::set_has_placing_unit_tag() {
  _has_bits_[0] |= 0x00000004u;
}
void RequestQueryBuildingPlacement::clear_has_placing_unit_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
void RequestQueryBuildingPlacement::clear_placing_unit_tag() {
  placing_unit_tag_ = GOOGLE_ULONGLONG(0);
  clear_has_placing_unit_tag();
}
 ::google::protobuf::uint64 RequestQueryBuildingPlacement::placing_unit_tag() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestQueryBuildingPlacement.placing_unit_tag)
  return placing_unit_tag_;
}
 void RequestQueryBuildingPlacement::set_placing_unit_tag(::google::protobuf::uint64 value) {
  set_has_placing_unit_tag();
  placing_unit_tag_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestQueryBuildingPlacement.placing_unit_tag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseQueryBuildingPlacement::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQueryBuildingPlacement::ResponseQueryBuildingPlacement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseQueryBuildingPlacement)
}

void ResponseQueryBuildingPlacement::InitAsDefaultInstance() {
}

ResponseQueryBuildingPlacement::ResponseQueryBuildingPlacement(const ResponseQueryBuildingPlacement& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseQueryBuildingPlacement)
}

void ResponseQueryBuildingPlacement::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseQueryBuildingPlacement::~ResponseQueryBuildingPlacement() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseQueryBuildingPlacement)
  SharedDtor();
}

void ResponseQueryBuildingPlacement::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseQueryBuildingPlacement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseQueryBuildingPlacement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseQueryBuildingPlacement_descriptor_;
}

const ResponseQueryBuildingPlacement& ResponseQueryBuildingPlacement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fquery_2eproto();
  return *default_instance_;
}

ResponseQueryBuildingPlacement* ResponseQueryBuildingPlacement::default_instance_ = NULL;

ResponseQueryBuildingPlacement* ResponseQueryBuildingPlacement::New(::google::protobuf::Arena* arena) const {
  ResponseQueryBuildingPlacement* n = new ResponseQueryBuildingPlacement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseQueryBuildingPlacement::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseQueryBuildingPlacement)
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseQueryBuildingPlacement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseQueryBuildingPlacement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ActionResult result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ActionResult_IsValid(value)) {
            set_result(static_cast< ::SC2APIProtocol::ActionResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseQueryBuildingPlacement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseQueryBuildingPlacement)
  return false;
#undef DO_
}

void ResponseQueryBuildingPlacement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseQueryBuildingPlacement)
  // optional .SC2APIProtocol.ActionResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseQueryBuildingPlacement)
}

::google::protobuf::uint8* ResponseQueryBuildingPlacement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseQueryBuildingPlacement)
  // optional .SC2APIProtocol.ActionResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseQueryBuildingPlacement)
  return target;
}

int ResponseQueryBuildingPlacement::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseQueryBuildingPlacement)
  int total_size = 0;

  // optional .SC2APIProtocol.ActionResult result = 1;
  if (has_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseQueryBuildingPlacement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseQueryBuildingPlacement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseQueryBuildingPlacement* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseQueryBuildingPlacement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseQueryBuildingPlacement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseQueryBuildingPlacement)
    MergeFrom(*source);
  }
}

void ResponseQueryBuildingPlacement::MergeFrom(const ResponseQueryBuildingPlacement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseQueryBuildingPlacement)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseQueryBuildingPlacement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseQueryBuildingPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQueryBuildingPlacement::CopyFrom(const ResponseQueryBuildingPlacement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseQueryBuildingPlacement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQueryBuildingPlacement::IsInitialized() const {

  return true;
}

void ResponseQueryBuildingPlacement::Swap(ResponseQueryBuildingPlacement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQueryBuildingPlacement::InternalSwap(ResponseQueryBuildingPlacement* other) {
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseQueryBuildingPlacement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseQueryBuildingPlacement_descriptor_;
  metadata.reflection = ResponseQueryBuildingPlacement_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseQueryBuildingPlacement

// optional .SC2APIProtocol.ActionResult result = 1;
bool ResponseQueryBuildingPlacement::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseQueryBuildingPlacement::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseQueryBuildingPlacement::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseQueryBuildingPlacement::clear_result() {
  result_ = 1;
  clear_has_result();
}
 ::SC2APIProtocol::ActionResult ResponseQueryBuildingPlacement::result() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseQueryBuildingPlacement.result)
  return static_cast< ::SC2APIProtocol::ActionResult >(result_);
}
 void ResponseQueryBuildingPlacement::set_result(::SC2APIProtocol::ActionResult value) {
  assert(::SC2APIProtocol::ActionResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseQueryBuildingPlacement.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SC2APIProtocol

// @@protoc_insertion_point(global_scope)
