// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/score.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "s2clientprotocol/score.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SC2APIProtocol {

namespace {

const ::google::protobuf::Descriptor* Score_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Score_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Score_ScoreType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CategoryScoreDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CategoryScoreDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* VitalScoreDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VitalScoreDetails_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreDetails_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreDetails_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_s2clientprotocol_2fscore_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_s2clientprotocol_2fscore_2eproto() {
  protobuf_AddDesc_s2clientprotocol_2fscore_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "s2clientprotocol/score.proto");
  GOOGLE_CHECK(file != NULL);
  Score_descriptor_ = file->message_type(0);
  static const int Score_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, score_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, score_details_),
  };
  Score_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Score_descriptor_,
      Score::default_instance_,
      Score_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, _has_bits_[0]),
      -1,
      -1,
      sizeof(Score),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Score, _internal_metadata_),
      -1);
  Score_ScoreType_descriptor_ = Score_descriptor_->enum_type(0);
  CategoryScoreDetails_descriptor_ = file->message_type(1);
  static const int CategoryScoreDetails_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryScoreDetails, none_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryScoreDetails, army_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryScoreDetails, economy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryScoreDetails, technology_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryScoreDetails, upgrade_),
  };
  CategoryScoreDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CategoryScoreDetails_descriptor_,
      CategoryScoreDetails::default_instance_,
      CategoryScoreDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryScoreDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(CategoryScoreDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CategoryScoreDetails, _internal_metadata_),
      -1);
  VitalScoreDetails_descriptor_ = file->message_type(2);
  static const int VitalScoreDetails_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VitalScoreDetails, life_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VitalScoreDetails, shields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VitalScoreDetails, energy_),
  };
  VitalScoreDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VitalScoreDetails_descriptor_,
      VitalScoreDetails::default_instance_,
      VitalScoreDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VitalScoreDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(VitalScoreDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VitalScoreDetails, _internal_metadata_),
      -1);
  ScoreDetails_descriptor_ = file->message_type(3);
  static const int ScoreDetails_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, idle_production_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, idle_worker_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, total_value_units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, total_value_structures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, killed_value_units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, killed_value_structures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, collected_minerals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, collected_vespene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, collection_rate_minerals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, collection_rate_vespene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, spent_minerals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, spent_vespene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, food_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, killed_minerals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, killed_vespene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, lost_minerals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, lost_vespene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, friendly_fire_minerals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, friendly_fire_vespene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, used_minerals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, used_vespene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, total_used_minerals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, total_used_vespene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, total_damage_dealt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, total_damage_taken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, total_healed_),
  };
  ScoreDetails_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ScoreDetails_descriptor_,
      ScoreDetails::default_instance_,
      ScoreDetails_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, _has_bits_[0]),
      -1,
      -1,
      sizeof(ScoreDetails),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreDetails, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_s2clientprotocol_2fscore_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Score_descriptor_, &Score::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CategoryScoreDetails_descriptor_, &CategoryScoreDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VitalScoreDetails_descriptor_, &VitalScoreDetails::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ScoreDetails_descriptor_, &ScoreDetails::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_s2clientprotocol_2fscore_2eproto() {
  delete Score::default_instance_;
  delete Score_reflection_;
  delete CategoryScoreDetails::default_instance_;
  delete CategoryScoreDetails_reflection_;
  delete VitalScoreDetails::default_instance_;
  delete VitalScoreDetails_reflection_;
  delete ScoreDetails::default_instance_;
  delete ScoreDetails_reflection_;
}

void protobuf_AddDesc_s2clientprotocol_2fscore_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_s2clientprotocol_2fscore_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034s2clientprotocol/score.proto\022\016SC2APIPr"
    "otocol\"\250\001\n\005Score\0223\n\nscore_type\030\006 \001(\0162\037.S"
    "C2APIProtocol.Score.ScoreType\022\r\n\005score\030\007"
    " \001(\005\0223\n\rscore_details\030\010 \001(\0132\034.SC2APIProt"
    "ocol.ScoreDetails\"&\n\tScoreType\022\016\n\nCurric"
    "ulum\020\001\022\t\n\005Melee\020\002\"h\n\024CategoryScoreDetail"
    "s\022\014\n\004none\030\001 \001(\002\022\014\n\004army\030\002 \001(\002\022\017\n\007economy"
    "\030\003 \001(\002\022\022\n\ntechnology\030\004 \001(\002\022\017\n\007upgrade\030\005 "
    "\001(\002\"B\n\021VitalScoreDetails\022\014\n\004life\030\001 \001(\002\022\017"
    "\n\007shields\030\002 \001(\002\022\016\n\006energy\030\003 \001(\002\"\326\t\n\014Scor"
    "eDetails\022\034\n\024idle_production_time\030\001 \001(\002\022\030"
    "\n\020idle_worker_time\030\002 \001(\002\022\031\n\021total_value_"
    "units\030\003 \001(\002\022\036\n\026total_value_structures\030\004 "
    "\001(\002\022\032\n\022killed_value_units\030\005 \001(\002\022\037\n\027kille"
    "d_value_structures\030\006 \001(\002\022\032\n\022collected_mi"
    "nerals\030\007 \001(\002\022\031\n\021collected_vespene\030\010 \001(\002\022"
    " \n\030collection_rate_minerals\030\t \001(\002\022\037\n\027col"
    "lection_rate_vespene\030\n \001(\002\022\026\n\016spent_mine"
    "rals\030\013 \001(\002\022\025\n\rspent_vespene\030\014 \001(\002\0227\n\tfoo"
    "d_used\030\r \001(\0132$.SC2APIProtocol.CategorySc"
    "oreDetails\022=\n\017killed_minerals\030\016 \001(\0132$.SC"
    "2APIProtocol.CategoryScoreDetails\022<\n\016kil"
    "led_vespene\030\017 \001(\0132$.SC2APIProtocol.Categ"
    "oryScoreDetails\022;\n\rlost_minerals\030\020 \001(\0132$"
    ".SC2APIProtocol.CategoryScoreDetails\022:\n\014"
    "lost_vespene\030\021 \001(\0132$.SC2APIProtocol.Cate"
    "goryScoreDetails\022D\n\026friendly_fire_minera"
    "ls\030\022 \001(\0132$.SC2APIProtocol.CategoryScoreD"
    "etails\022C\n\025friendly_fire_vespene\030\023 \001(\0132$."
    "SC2APIProtocol.CategoryScoreDetails\022;\n\ru"
    "sed_minerals\030\024 \001(\0132$.SC2APIProtocol.Cate"
    "goryScoreDetails\022:\n\014used_vespene\030\025 \001(\0132$"
    ".SC2APIProtocol.CategoryScoreDetails\022A\n\023"
    "total_used_minerals\030\026 \001(\0132$.SC2APIProtoc"
    "ol.CategoryScoreDetails\022@\n\022total_used_ve"
    "spene\030\027 \001(\0132$.SC2APIProtocol.CategorySco"
    "reDetails\022=\n\022total_damage_dealt\030\030 \001(\0132!."
    "SC2APIProtocol.VitalScoreDetails\022=\n\022tota"
    "l_damage_taken\030\031 \001(\0132!.SC2APIProtocol.Vi"
    "talScoreDetails\0227\n\014total_healed\030\032 \001(\0132!."
    "SC2APIProtocol.VitalScoreDetails", 1632);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "s2clientprotocol/score.proto", &protobuf_RegisterTypes);
  Score::default_instance_ = new Score();
  CategoryScoreDetails::default_instance_ = new CategoryScoreDetails();
  VitalScoreDetails::default_instance_ = new VitalScoreDetails();
  ScoreDetails::default_instance_ = new ScoreDetails();
  Score::default_instance_->InitAsDefaultInstance();
  CategoryScoreDetails::default_instance_->InitAsDefaultInstance();
  VitalScoreDetails::default_instance_->InitAsDefaultInstance();
  ScoreDetails::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_s2clientprotocol_2fscore_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_s2clientprotocol_2fscore_2eproto {
  StaticDescriptorInitializer_s2clientprotocol_2fscore_2eproto() {
    protobuf_AddDesc_s2clientprotocol_2fscore_2eproto();
  }
} static_descriptor_initializer_s2clientprotocol_2fscore_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Score_ScoreType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Score_ScoreType_descriptor_;
}
bool Score_ScoreType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Score_ScoreType Score::Curriculum;
const Score_ScoreType Score::Melee;
const Score_ScoreType Score::ScoreType_MIN;
const Score_ScoreType Score::ScoreType_MAX;
const int Score::ScoreType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Score::kScoreTypeFieldNumber;
const int Score::kScoreFieldNumber;
const int Score::kScoreDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Score::Score()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.Score)
}

void Score::InitAsDefaultInstance() {
  score_details_ = const_cast< ::SC2APIProtocol::ScoreDetails*>(&::SC2APIProtocol::ScoreDetails::default_instance());
}

Score::Score(const Score& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Score)
}

void Score::SharedCtor() {
  _cached_size_ = 0;
  score_type_ = 1;
  score_ = 0;
  score_details_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Score::~Score() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Score)
  SharedDtor();
}

void Score::SharedDtor() {
  if (this != default_instance_) {
    delete score_details_;
  }
}

void Score::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Score::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Score_descriptor_;
}

const Score& Score::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fscore_2eproto();
  return *default_instance_;
}

Score* Score::default_instance_ = NULL;

Score* Score::New(::google::protobuf::Arena* arena) const {
  Score* n = new Score;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Score::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Score)
  if (_has_bits_[0 / 32] & 7u) {
    score_type_ = 1;
    score_ = 0;
    if (has_score_details()) {
      if (score_details_ != NULL) score_details_->::SC2APIProtocol::ScoreDetails::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Score::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.Score)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.Score.ScoreType score_type = 6;
      case 6: {
        if (tag == 48) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Score_ScoreType_IsValid(value)) {
            set_score_type(static_cast< ::SC2APIProtocol::Score_ScoreType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_score;
        break;
      }

      // optional int32 score = 7;
      case 7: {
        if (tag == 56) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_score_details;
        break;
      }

      // optional .SC2APIProtocol.ScoreDetails score_details = 8;
      case 8: {
        if (tag == 66) {
         parse_score_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_score_details()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.Score)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.Score)
  return false;
#undef DO_
}

void Score::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.Score)
  // optional .SC2APIProtocol.Score.ScoreType score_type = 6;
  if (has_score_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->score_type(), output);
  }

  // optional int32 score = 7;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->score(), output);
  }

  // optional .SC2APIProtocol.ScoreDetails score_details = 8;
  if (has_score_details()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->score_details_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.Score)
}

::google::protobuf::uint8* Score::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Score)
  // optional .SC2APIProtocol.Score.ScoreType score_type = 6;
  if (has_score_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->score_type(), target);
  }

  // optional int32 score = 7;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->score(), target);
  }

  // optional .SC2APIProtocol.ScoreDetails score_details = 8;
  if (has_score_details()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->score_details_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Score)
  return target;
}

int Score::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Score)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .SC2APIProtocol.Score.ScoreType score_type = 6;
    if (has_score_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->score_type());
    }

    // optional int32 score = 7;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional .SC2APIProtocol.ScoreDetails score_details = 8;
    if (has_score_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->score_details_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Score::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.Score)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Score* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Score>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.Score)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.Score)
    MergeFrom(*source);
  }
}

void Score::MergeFrom(const Score& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Score)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score_type()) {
      set_score_type(from.score_type());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_score_details()) {
      mutable_score_details()->::SC2APIProtocol::ScoreDetails::MergeFrom(from.score_details());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Score::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.Score)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Score::CopyFrom(const Score& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Score)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Score::IsInitialized() const {

  return true;
}

void Score::Swap(Score* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Score::InternalSwap(Score* other) {
  std::swap(score_type_, other->score_type_);
  std::swap(score_, other->score_);
  std::swap(score_details_, other->score_details_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Score::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Score_descriptor_;
  metadata.reflection = Score_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Score

// optional .SC2APIProtocol.Score.ScoreType score_type = 6;
bool Score::has_score_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Score::set_has_score_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Score::clear_has_score_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Score::clear_score_type() {
  score_type_ = 1;
  clear_has_score_type();
}
 ::SC2APIProtocol::Score_ScoreType Score::score_type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Score.score_type)
  return static_cast< ::SC2APIProtocol::Score_ScoreType >(score_type_);
}
 void Score::set_score_type(::SC2APIProtocol::Score_ScoreType value) {
  assert(::SC2APIProtocol::Score_ScoreType_IsValid(value));
  set_has_score_type();
  score_type_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Score.score_type)
}

// optional int32 score = 7;
bool Score::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Score::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void Score::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void Score::clear_score() {
  score_ = 0;
  clear_has_score();
}
 ::google::protobuf::int32 Score::score() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Score.score)
  return score_;
}
 void Score::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Score.score)
}

// optional .SC2APIProtocol.ScoreDetails score_details = 8;
bool Score::has_score_details() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Score::set_has_score_details() {
  _has_bits_[0] |= 0x00000004u;
}
void Score::clear_has_score_details() {
  _has_bits_[0] &= ~0x00000004u;
}
void Score::clear_score_details() {
  if (score_details_ != NULL) score_details_->::SC2APIProtocol::ScoreDetails::Clear();
  clear_has_score_details();
}
const ::SC2APIProtocol::ScoreDetails& Score::score_details() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Score.score_details)
  return score_details_ != NULL ? *score_details_ : *default_instance_->score_details_;
}
::SC2APIProtocol::ScoreDetails* Score::mutable_score_details() {
  set_has_score_details();
  if (score_details_ == NULL) {
    score_details_ = new ::SC2APIProtocol::ScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Score.score_details)
  return score_details_;
}
::SC2APIProtocol::ScoreDetails* Score::release_score_details() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Score.score_details)
  clear_has_score_details();
  ::SC2APIProtocol::ScoreDetails* temp = score_details_;
  score_details_ = NULL;
  return temp;
}
void Score::set_allocated_score_details(::SC2APIProtocol::ScoreDetails* score_details) {
  delete score_details_;
  score_details_ = score_details;
  if (score_details) {
    set_has_score_details();
  } else {
    clear_has_score_details();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Score.score_details)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CategoryScoreDetails::kNoneFieldNumber;
const int CategoryScoreDetails::kArmyFieldNumber;
const int CategoryScoreDetails::kEconomyFieldNumber;
const int CategoryScoreDetails::kTechnologyFieldNumber;
const int CategoryScoreDetails::kUpgradeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CategoryScoreDetails::CategoryScoreDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.CategoryScoreDetails)
}

void CategoryScoreDetails::InitAsDefaultInstance() {
}

CategoryScoreDetails::CategoryScoreDetails(const CategoryScoreDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.CategoryScoreDetails)
}

void CategoryScoreDetails::SharedCtor() {
  _cached_size_ = 0;
  none_ = 0;
  army_ = 0;
  economy_ = 0;
  technology_ = 0;
  upgrade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CategoryScoreDetails::~CategoryScoreDetails() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.CategoryScoreDetails)
  SharedDtor();
}

void CategoryScoreDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CategoryScoreDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CategoryScoreDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CategoryScoreDetails_descriptor_;
}

const CategoryScoreDetails& CategoryScoreDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fscore_2eproto();
  return *default_instance_;
}

CategoryScoreDetails* CategoryScoreDetails::default_instance_ = NULL;

CategoryScoreDetails* CategoryScoreDetails::New(::google::protobuf::Arena* arena) const {
  CategoryScoreDetails* n = new CategoryScoreDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CategoryScoreDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.CategoryScoreDetails)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CategoryScoreDetails, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CategoryScoreDetails*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(none_, upgrade_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CategoryScoreDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.CategoryScoreDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float none = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &none_)));
          set_has_none();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_army;
        break;
      }

      // optional float army = 2;
      case 2: {
        if (tag == 21) {
         parse_army:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &army_)));
          set_has_army();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_economy;
        break;
      }

      // optional float economy = 3;
      case 3: {
        if (tag == 29) {
         parse_economy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &economy_)));
          set_has_economy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_technology;
        break;
      }

      // optional float technology = 4;
      case 4: {
        if (tag == 37) {
         parse_technology:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &technology_)));
          set_has_technology();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_upgrade;
        break;
      }

      // optional float upgrade = 5;
      case 5: {
        if (tag == 45) {
         parse_upgrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &upgrade_)));
          set_has_upgrade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.CategoryScoreDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.CategoryScoreDetails)
  return false;
#undef DO_
}

void CategoryScoreDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.CategoryScoreDetails)
  // optional float none = 1;
  if (has_none()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->none(), output);
  }

  // optional float army = 2;
  if (has_army()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->army(), output);
  }

  // optional float economy = 3;
  if (has_economy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->economy(), output);
  }

  // optional float technology = 4;
  if (has_technology()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->technology(), output);
  }

  // optional float upgrade = 5;
  if (has_upgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->upgrade(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.CategoryScoreDetails)
}

::google::protobuf::uint8* CategoryScoreDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.CategoryScoreDetails)
  // optional float none = 1;
  if (has_none()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->none(), target);
  }

  // optional float army = 2;
  if (has_army()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->army(), target);
  }

  // optional float economy = 3;
  if (has_economy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->economy(), target);
  }

  // optional float technology = 4;
  if (has_technology()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->technology(), target);
  }

  // optional float upgrade = 5;
  if (has_upgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->upgrade(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.CategoryScoreDetails)
  return target;
}

int CategoryScoreDetails::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.CategoryScoreDetails)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional float none = 1;
    if (has_none()) {
      total_size += 1 + 4;
    }

    // optional float army = 2;
    if (has_army()) {
      total_size += 1 + 4;
    }

    // optional float economy = 3;
    if (has_economy()) {
      total_size += 1 + 4;
    }

    // optional float technology = 4;
    if (has_technology()) {
      total_size += 1 + 4;
    }

    // optional float upgrade = 5;
    if (has_upgrade()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CategoryScoreDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.CategoryScoreDetails)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CategoryScoreDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CategoryScoreDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.CategoryScoreDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.CategoryScoreDetails)
    MergeFrom(*source);
  }
}

void CategoryScoreDetails::MergeFrom(const CategoryScoreDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.CategoryScoreDetails)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_none()) {
      set_none(from.none());
    }
    if (from.has_army()) {
      set_army(from.army());
    }
    if (from.has_economy()) {
      set_economy(from.economy());
    }
    if (from.has_technology()) {
      set_technology(from.technology());
    }
    if (from.has_upgrade()) {
      set_upgrade(from.upgrade());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CategoryScoreDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.CategoryScoreDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CategoryScoreDetails::CopyFrom(const CategoryScoreDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.CategoryScoreDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryScoreDetails::IsInitialized() const {

  return true;
}

void CategoryScoreDetails::Swap(CategoryScoreDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CategoryScoreDetails::InternalSwap(CategoryScoreDetails* other) {
  std::swap(none_, other->none_);
  std::swap(army_, other->army_);
  std::swap(economy_, other->economy_);
  std::swap(technology_, other->technology_);
  std::swap(upgrade_, other->upgrade_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CategoryScoreDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CategoryScoreDetails_descriptor_;
  metadata.reflection = CategoryScoreDetails_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CategoryScoreDetails

// optional float none = 1;
bool CategoryScoreDetails::has_none() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CategoryScoreDetails::set_has_none() {
  _has_bits_[0] |= 0x00000001u;
}
void CategoryScoreDetails::clear_has_none() {
  _has_bits_[0] &= ~0x00000001u;
}
void CategoryScoreDetails::clear_none() {
  none_ = 0;
  clear_has_none();
}
 float CategoryScoreDetails::none() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CategoryScoreDetails.none)
  return none_;
}
 void CategoryScoreDetails::set_none(float value) {
  set_has_none();
  none_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.CategoryScoreDetails.none)
}

// optional float army = 2;
bool CategoryScoreDetails::has_army() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CategoryScoreDetails::set_has_army() {
  _has_bits_[0] |= 0x00000002u;
}
void CategoryScoreDetails::clear_has_army() {
  _has_bits_[0] &= ~0x00000002u;
}
void CategoryScoreDetails::clear_army() {
  army_ = 0;
  clear_has_army();
}
 float CategoryScoreDetails::army() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CategoryScoreDetails.army)
  return army_;
}
 void CategoryScoreDetails::set_army(float value) {
  set_has_army();
  army_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.CategoryScoreDetails.army)
}

// optional float economy = 3;
bool CategoryScoreDetails::has_economy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CategoryScoreDetails::set_has_economy() {
  _has_bits_[0] |= 0x00000004u;
}
void CategoryScoreDetails::clear_has_economy() {
  _has_bits_[0] &= ~0x00000004u;
}
void CategoryScoreDetails::clear_economy() {
  economy_ = 0;
  clear_has_economy();
}
 float CategoryScoreDetails::economy() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CategoryScoreDetails.economy)
  return economy_;
}
 void CategoryScoreDetails::set_economy(float value) {
  set_has_economy();
  economy_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.CategoryScoreDetails.economy)
}

// optional float technology = 4;
bool CategoryScoreDetails::has_technology() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CategoryScoreDetails::set_has_technology() {
  _has_bits_[0] |= 0x00000008u;
}
void CategoryScoreDetails::clear_has_technology() {
  _has_bits_[0] &= ~0x00000008u;
}
void CategoryScoreDetails::clear_technology() {
  technology_ = 0;
  clear_has_technology();
}
 float CategoryScoreDetails::technology() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CategoryScoreDetails.technology)
  return technology_;
}
 void CategoryScoreDetails::set_technology(float value) {
  set_has_technology();
  technology_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.CategoryScoreDetails.technology)
}

// optional float upgrade = 5;
bool CategoryScoreDetails::has_upgrade() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CategoryScoreDetails::set_has_upgrade() {
  _has_bits_[0] |= 0x00000010u;
}
void CategoryScoreDetails::clear_has_upgrade() {
  _has_bits_[0] &= ~0x00000010u;
}
void CategoryScoreDetails::clear_upgrade() {
  upgrade_ = 0;
  clear_has_upgrade();
}
 float CategoryScoreDetails::upgrade() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CategoryScoreDetails.upgrade)
  return upgrade_;
}
 void CategoryScoreDetails::set_upgrade(float value) {
  set_has_upgrade();
  upgrade_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.CategoryScoreDetails.upgrade)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VitalScoreDetails::kLifeFieldNumber;
const int VitalScoreDetails::kShieldsFieldNumber;
const int VitalScoreDetails::kEnergyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VitalScoreDetails::VitalScoreDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.VitalScoreDetails)
}

void VitalScoreDetails::InitAsDefaultInstance() {
}

VitalScoreDetails::VitalScoreDetails(const VitalScoreDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.VitalScoreDetails)
}

void VitalScoreDetails::SharedCtor() {
  _cached_size_ = 0;
  life_ = 0;
  shields_ = 0;
  energy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VitalScoreDetails::~VitalScoreDetails() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.VitalScoreDetails)
  SharedDtor();
}

void VitalScoreDetails::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VitalScoreDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VitalScoreDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VitalScoreDetails_descriptor_;
}

const VitalScoreDetails& VitalScoreDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fscore_2eproto();
  return *default_instance_;
}

VitalScoreDetails* VitalScoreDetails::default_instance_ = NULL;

VitalScoreDetails* VitalScoreDetails::New(::google::protobuf::Arena* arena) const {
  VitalScoreDetails* n = new VitalScoreDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VitalScoreDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.VitalScoreDetails)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VitalScoreDetails, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VitalScoreDetails*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(life_, energy_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VitalScoreDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.VitalScoreDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float life = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &life_)));
          set_has_life();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_shields;
        break;
      }

      // optional float shields = 2;
      case 2: {
        if (tag == 21) {
         parse_shields:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shields_)));
          set_has_shields();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_energy;
        break;
      }

      // optional float energy = 3;
      case 3: {
        if (tag == 29) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.VitalScoreDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.VitalScoreDetails)
  return false;
#undef DO_
}

void VitalScoreDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.VitalScoreDetails)
  // optional float life = 1;
  if (has_life()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->life(), output);
  }

  // optional float shields = 2;
  if (has_shields()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->shields(), output);
  }

  // optional float energy = 3;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->energy(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.VitalScoreDetails)
}

::google::protobuf::uint8* VitalScoreDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.VitalScoreDetails)
  // optional float life = 1;
  if (has_life()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->life(), target);
  }

  // optional float shields = 2;
  if (has_shields()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->shields(), target);
  }

  // optional float energy = 3;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->energy(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.VitalScoreDetails)
  return target;
}

int VitalScoreDetails::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.VitalScoreDetails)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float life = 1;
    if (has_life()) {
      total_size += 1 + 4;
    }

    // optional float shields = 2;
    if (has_shields()) {
      total_size += 1 + 4;
    }

    // optional float energy = 3;
    if (has_energy()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VitalScoreDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.VitalScoreDetails)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VitalScoreDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VitalScoreDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.VitalScoreDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.VitalScoreDetails)
    MergeFrom(*source);
  }
}

void VitalScoreDetails::MergeFrom(const VitalScoreDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.VitalScoreDetails)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_life()) {
      set_life(from.life());
    }
    if (from.has_shields()) {
      set_shields(from.shields());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VitalScoreDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.VitalScoreDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VitalScoreDetails::CopyFrom(const VitalScoreDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.VitalScoreDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VitalScoreDetails::IsInitialized() const {

  return true;
}

void VitalScoreDetails::Swap(VitalScoreDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VitalScoreDetails::InternalSwap(VitalScoreDetails* other) {
  std::swap(life_, other->life_);
  std::swap(shields_, other->shields_);
  std::swap(energy_, other->energy_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VitalScoreDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VitalScoreDetails_descriptor_;
  metadata.reflection = VitalScoreDetails_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VitalScoreDetails

// optional float life = 1;
bool VitalScoreDetails::has_life() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VitalScoreDetails::set_has_life() {
  _has_bits_[0] |= 0x00000001u;
}
void VitalScoreDetails::clear_has_life() {
  _has_bits_[0] &= ~0x00000001u;
}
void VitalScoreDetails::clear_life() {
  life_ = 0;
  clear_has_life();
}
 float VitalScoreDetails::life() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.VitalScoreDetails.life)
  return life_;
}
 void VitalScoreDetails::set_life(float value) {
  set_has_life();
  life_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.VitalScoreDetails.life)
}

// optional float shields = 2;
bool VitalScoreDetails::has_shields() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VitalScoreDetails::set_has_shields() {
  _has_bits_[0] |= 0x00000002u;
}
void VitalScoreDetails::clear_has_shields() {
  _has_bits_[0] &= ~0x00000002u;
}
void VitalScoreDetails::clear_shields() {
  shields_ = 0;
  clear_has_shields();
}
 float VitalScoreDetails::shields() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.VitalScoreDetails.shields)
  return shields_;
}
 void VitalScoreDetails::set_shields(float value) {
  set_has_shields();
  shields_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.VitalScoreDetails.shields)
}

// optional float energy = 3;
bool VitalScoreDetails::has_energy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VitalScoreDetails::set_has_energy() {
  _has_bits_[0] |= 0x00000004u;
}
void VitalScoreDetails::clear_has_energy() {
  _has_bits_[0] &= ~0x00000004u;
}
void VitalScoreDetails::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
 float VitalScoreDetails::energy() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.VitalScoreDetails.energy)
  return energy_;
}
 void VitalScoreDetails::set_energy(float value) {
  set_has_energy();
  energy_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.VitalScoreDetails.energy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScoreDetails::kIdleProductionTimeFieldNumber;
const int ScoreDetails::kIdleWorkerTimeFieldNumber;
const int ScoreDetails::kTotalValueUnitsFieldNumber;
const int ScoreDetails::kTotalValueStructuresFieldNumber;
const int ScoreDetails::kKilledValueUnitsFieldNumber;
const int ScoreDetails::kKilledValueStructuresFieldNumber;
const int ScoreDetails::kCollectedMineralsFieldNumber;
const int ScoreDetails::kCollectedVespeneFieldNumber;
const int ScoreDetails::kCollectionRateMineralsFieldNumber;
const int ScoreDetails::kCollectionRateVespeneFieldNumber;
const int ScoreDetails::kSpentMineralsFieldNumber;
const int ScoreDetails::kSpentVespeneFieldNumber;
const int ScoreDetails::kFoodUsedFieldNumber;
const int ScoreDetails::kKilledMineralsFieldNumber;
const int ScoreDetails::kKilledVespeneFieldNumber;
const int ScoreDetails::kLostMineralsFieldNumber;
const int ScoreDetails::kLostVespeneFieldNumber;
const int ScoreDetails::kFriendlyFireMineralsFieldNumber;
const int ScoreDetails::kFriendlyFireVespeneFieldNumber;
const int ScoreDetails::kUsedMineralsFieldNumber;
const int ScoreDetails::kUsedVespeneFieldNumber;
const int ScoreDetails::kTotalUsedMineralsFieldNumber;
const int ScoreDetails::kTotalUsedVespeneFieldNumber;
const int ScoreDetails::kTotalDamageDealtFieldNumber;
const int ScoreDetails::kTotalDamageTakenFieldNumber;
const int ScoreDetails::kTotalHealedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScoreDetails::ScoreDetails()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ScoreDetails)
}

void ScoreDetails::InitAsDefaultInstance() {
  food_used_ = const_cast< ::SC2APIProtocol::CategoryScoreDetails*>(&::SC2APIProtocol::CategoryScoreDetails::default_instance());
  killed_minerals_ = const_cast< ::SC2APIProtocol::CategoryScoreDetails*>(&::SC2APIProtocol::CategoryScoreDetails::default_instance());
  killed_vespene_ = const_cast< ::SC2APIProtocol::CategoryScoreDetails*>(&::SC2APIProtocol::CategoryScoreDetails::default_instance());
  lost_minerals_ = const_cast< ::SC2APIProtocol::CategoryScoreDetails*>(&::SC2APIProtocol::CategoryScoreDetails::default_instance());
  lost_vespene_ = const_cast< ::SC2APIProtocol::CategoryScoreDetails*>(&::SC2APIProtocol::CategoryScoreDetails::default_instance());
  friendly_fire_minerals_ = const_cast< ::SC2APIProtocol::CategoryScoreDetails*>(&::SC2APIProtocol::CategoryScoreDetails::default_instance());
  friendly_fire_vespene_ = const_cast< ::SC2APIProtocol::CategoryScoreDetails*>(&::SC2APIProtocol::CategoryScoreDetails::default_instance());
  used_minerals_ = const_cast< ::SC2APIProtocol::CategoryScoreDetails*>(&::SC2APIProtocol::CategoryScoreDetails::default_instance());
  used_vespene_ = const_cast< ::SC2APIProtocol::CategoryScoreDetails*>(&::SC2APIProtocol::CategoryScoreDetails::default_instance());
  total_used_minerals_ = const_cast< ::SC2APIProtocol::CategoryScoreDetails*>(&::SC2APIProtocol::CategoryScoreDetails::default_instance());
  total_used_vespene_ = const_cast< ::SC2APIProtocol::CategoryScoreDetails*>(&::SC2APIProtocol::CategoryScoreDetails::default_instance());
  total_damage_dealt_ = const_cast< ::SC2APIProtocol::VitalScoreDetails*>(&::SC2APIProtocol::VitalScoreDetails::default_instance());
  total_damage_taken_ = const_cast< ::SC2APIProtocol::VitalScoreDetails*>(&::SC2APIProtocol::VitalScoreDetails::default_instance());
  total_healed_ = const_cast< ::SC2APIProtocol::VitalScoreDetails*>(&::SC2APIProtocol::VitalScoreDetails::default_instance());
}

ScoreDetails::ScoreDetails(const ScoreDetails& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ScoreDetails)
}

void ScoreDetails::SharedCtor() {
  _cached_size_ = 0;
  idle_production_time_ = 0;
  idle_worker_time_ = 0;
  total_value_units_ = 0;
  total_value_structures_ = 0;
  killed_value_units_ = 0;
  killed_value_structures_ = 0;
  collected_minerals_ = 0;
  collected_vespene_ = 0;
  collection_rate_minerals_ = 0;
  collection_rate_vespene_ = 0;
  spent_minerals_ = 0;
  spent_vespene_ = 0;
  food_used_ = NULL;
  killed_minerals_ = NULL;
  killed_vespene_ = NULL;
  lost_minerals_ = NULL;
  lost_vespene_ = NULL;
  friendly_fire_minerals_ = NULL;
  friendly_fire_vespene_ = NULL;
  used_minerals_ = NULL;
  used_vespene_ = NULL;
  total_used_minerals_ = NULL;
  total_used_vespene_ = NULL;
  total_damage_dealt_ = NULL;
  total_damage_taken_ = NULL;
  total_healed_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreDetails::~ScoreDetails() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ScoreDetails)
  SharedDtor();
}

void ScoreDetails::SharedDtor() {
  if (this != default_instance_) {
    delete food_used_;
    delete killed_minerals_;
    delete killed_vespene_;
    delete lost_minerals_;
    delete lost_vespene_;
    delete friendly_fire_minerals_;
    delete friendly_fire_vespene_;
    delete used_minerals_;
    delete used_vespene_;
    delete total_used_minerals_;
    delete total_used_vespene_;
    delete total_damage_dealt_;
    delete total_damage_taken_;
    delete total_healed_;
  }
}

void ScoreDetails::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreDetails::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreDetails_descriptor_;
}

const ScoreDetails& ScoreDetails::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fscore_2eproto();
  return *default_instance_;
}

ScoreDetails* ScoreDetails::default_instance_ = NULL;

ScoreDetails* ScoreDetails::New(::google::protobuf::Arena* arena) const {
  ScoreDetails* n = new ScoreDetails;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScoreDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ScoreDetails)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ScoreDetails, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ScoreDetails*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(idle_production_time_, collected_vespene_);
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(collection_rate_minerals_, spent_vespene_);
    if (has_food_used()) {
      if (food_used_ != NULL) food_used_->::SC2APIProtocol::CategoryScoreDetails::Clear();
    }
    if (has_killed_minerals()) {
      if (killed_minerals_ != NULL) killed_minerals_->::SC2APIProtocol::CategoryScoreDetails::Clear();
    }
    if (has_killed_vespene()) {
      if (killed_vespene_ != NULL) killed_vespene_->::SC2APIProtocol::CategoryScoreDetails::Clear();
    }
    if (has_lost_minerals()) {
      if (lost_minerals_ != NULL) lost_minerals_->::SC2APIProtocol::CategoryScoreDetails::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    if (has_lost_vespene()) {
      if (lost_vespene_ != NULL) lost_vespene_->::SC2APIProtocol::CategoryScoreDetails::Clear();
    }
    if (has_friendly_fire_minerals()) {
      if (friendly_fire_minerals_ != NULL) friendly_fire_minerals_->::SC2APIProtocol::CategoryScoreDetails::Clear();
    }
    if (has_friendly_fire_vespene()) {
      if (friendly_fire_vespene_ != NULL) friendly_fire_vespene_->::SC2APIProtocol::CategoryScoreDetails::Clear();
    }
    if (has_used_minerals()) {
      if (used_minerals_ != NULL) used_minerals_->::SC2APIProtocol::CategoryScoreDetails::Clear();
    }
    if (has_used_vespene()) {
      if (used_vespene_ != NULL) used_vespene_->::SC2APIProtocol::CategoryScoreDetails::Clear();
    }
    if (has_total_used_minerals()) {
      if (total_used_minerals_ != NULL) total_used_minerals_->::SC2APIProtocol::CategoryScoreDetails::Clear();
    }
    if (has_total_used_vespene()) {
      if (total_used_vespene_ != NULL) total_used_vespene_->::SC2APIProtocol::CategoryScoreDetails::Clear();
    }
    if (has_total_damage_dealt()) {
      if (total_damage_dealt_ != NULL) total_damage_dealt_->::SC2APIProtocol::VitalScoreDetails::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 50331648u) {
    if (has_total_damage_taken()) {
      if (total_damage_taken_ != NULL) total_damage_taken_->::SC2APIProtocol::VitalScoreDetails::Clear();
    }
    if (has_total_healed()) {
      if (total_healed_ != NULL) total_healed_->::SC2APIProtocol::VitalScoreDetails::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ScoreDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ScoreDetails)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float idle_production_time = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &idle_production_time_)));
          set_has_idle_production_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_idle_worker_time;
        break;
      }

      // optional float idle_worker_time = 2;
      case 2: {
        if (tag == 21) {
         parse_idle_worker_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &idle_worker_time_)));
          set_has_idle_worker_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_total_value_units;
        break;
      }

      // optional float total_value_units = 3;
      case 3: {
        if (tag == 29) {
         parse_total_value_units:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_value_units_)));
          set_has_total_value_units();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_total_value_structures;
        break;
      }

      // optional float total_value_structures = 4;
      case 4: {
        if (tag == 37) {
         parse_total_value_structures:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_value_structures_)));
          set_has_total_value_structures();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_killed_value_units;
        break;
      }

      // optional float killed_value_units = 5;
      case 5: {
        if (tag == 45) {
         parse_killed_value_units:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &killed_value_units_)));
          set_has_killed_value_units();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_killed_value_structures;
        break;
      }

      // optional float killed_value_structures = 6;
      case 6: {
        if (tag == 53) {
         parse_killed_value_structures:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &killed_value_structures_)));
          set_has_killed_value_structures();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_collected_minerals;
        break;
      }

      // optional float collected_minerals = 7;
      case 7: {
        if (tag == 61) {
         parse_collected_minerals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collected_minerals_)));
          set_has_collected_minerals();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_collected_vespene;
        break;
      }

      // optional float collected_vespene = 8;
      case 8: {
        if (tag == 69) {
         parse_collected_vespene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collected_vespene_)));
          set_has_collected_vespene();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_collection_rate_minerals;
        break;
      }

      // optional float collection_rate_minerals = 9;
      case 9: {
        if (tag == 77) {
         parse_collection_rate_minerals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collection_rate_minerals_)));
          set_has_collection_rate_minerals();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_collection_rate_vespene;
        break;
      }

      // optional float collection_rate_vespene = 10;
      case 10: {
        if (tag == 85) {
         parse_collection_rate_vespene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collection_rate_vespene_)));
          set_has_collection_rate_vespene();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_spent_minerals;
        break;
      }

      // optional float spent_minerals = 11;
      case 11: {
        if (tag == 93) {
         parse_spent_minerals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spent_minerals_)));
          set_has_spent_minerals();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_spent_vespene;
        break;
      }

      // optional float spent_vespene = 12;
      case 12: {
        if (tag == 101) {
         parse_spent_vespene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &spent_vespene_)));
          set_has_spent_vespene();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_food_used;
        break;
      }

      // optional .SC2APIProtocol.CategoryScoreDetails food_used = 13;
      case 13: {
        if (tag == 106) {
         parse_food_used:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_food_used()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_killed_minerals;
        break;
      }

      // optional .SC2APIProtocol.CategoryScoreDetails killed_minerals = 14;
      case 14: {
        if (tag == 114) {
         parse_killed_minerals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_killed_minerals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_killed_vespene;
        break;
      }

      // optional .SC2APIProtocol.CategoryScoreDetails killed_vespene = 15;
      case 15: {
        if (tag == 122) {
         parse_killed_vespene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_killed_vespene()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_lost_minerals;
        break;
      }

      // optional .SC2APIProtocol.CategoryScoreDetails lost_minerals = 16;
      case 16: {
        if (tag == 130) {
         parse_lost_minerals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lost_minerals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_lost_vespene;
        break;
      }

      // optional .SC2APIProtocol.CategoryScoreDetails lost_vespene = 17;
      case 17: {
        if (tag == 138) {
         parse_lost_vespene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lost_vespene()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_friendly_fire_minerals;
        break;
      }

      // optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_minerals = 18;
      case 18: {
        if (tag == 146) {
         parse_friendly_fire_minerals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendly_fire_minerals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_friendly_fire_vespene;
        break;
      }

      // optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_vespene = 19;
      case 19: {
        if (tag == 154) {
         parse_friendly_fire_vespene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendly_fire_vespene()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_used_minerals;
        break;
      }

      // optional .SC2APIProtocol.CategoryScoreDetails used_minerals = 20;
      case 20: {
        if (tag == 162) {
         parse_used_minerals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_used_minerals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_used_vespene;
        break;
      }

      // optional .SC2APIProtocol.CategoryScoreDetails used_vespene = 21;
      case 21: {
        if (tag == 170) {
         parse_used_vespene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_used_vespene()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_total_used_minerals;
        break;
      }

      // optional .SC2APIProtocol.CategoryScoreDetails total_used_minerals = 22;
      case 22: {
        if (tag == 178) {
         parse_total_used_minerals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_used_minerals()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_total_used_vespene;
        break;
      }

      // optional .SC2APIProtocol.CategoryScoreDetails total_used_vespene = 23;
      case 23: {
        if (tag == 186) {
         parse_total_used_vespene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_used_vespene()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_total_damage_dealt;
        break;
      }

      // optional .SC2APIProtocol.VitalScoreDetails total_damage_dealt = 24;
      case 24: {
        if (tag == 194) {
         parse_total_damage_dealt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_damage_dealt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_total_damage_taken;
        break;
      }

      // optional .SC2APIProtocol.VitalScoreDetails total_damage_taken = 25;
      case 25: {
        if (tag == 202) {
         parse_total_damage_taken:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_damage_taken()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_total_healed;
        break;
      }

      // optional .SC2APIProtocol.VitalScoreDetails total_healed = 26;
      case 26: {
        if (tag == 210) {
         parse_total_healed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_healed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ScoreDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ScoreDetails)
  return false;
#undef DO_
}

void ScoreDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ScoreDetails)
  // optional float idle_production_time = 1;
  if (has_idle_production_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->idle_production_time(), output);
  }

  // optional float idle_worker_time = 2;
  if (has_idle_worker_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->idle_worker_time(), output);
  }

  // optional float total_value_units = 3;
  if (has_total_value_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->total_value_units(), output);
  }

  // optional float total_value_structures = 4;
  if (has_total_value_structures()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->total_value_structures(), output);
  }

  // optional float killed_value_units = 5;
  if (has_killed_value_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->killed_value_units(), output);
  }

  // optional float killed_value_structures = 6;
  if (has_killed_value_structures()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->killed_value_structures(), output);
  }

  // optional float collected_minerals = 7;
  if (has_collected_minerals()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->collected_minerals(), output);
  }

  // optional float collected_vespene = 8;
  if (has_collected_vespene()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->collected_vespene(), output);
  }

  // optional float collection_rate_minerals = 9;
  if (has_collection_rate_minerals()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->collection_rate_minerals(), output);
  }

  // optional float collection_rate_vespene = 10;
  if (has_collection_rate_vespene()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->collection_rate_vespene(), output);
  }

  // optional float spent_minerals = 11;
  if (has_spent_minerals()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->spent_minerals(), output);
  }

  // optional float spent_vespene = 12;
  if (has_spent_vespene()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->spent_vespene(), output);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails food_used = 13;
  if (has_food_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->food_used_, output);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails killed_minerals = 14;
  if (has_killed_minerals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->killed_minerals_, output);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails killed_vespene = 15;
  if (has_killed_vespene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->killed_vespene_, output);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails lost_minerals = 16;
  if (has_lost_minerals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->lost_minerals_, output);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails lost_vespene = 17;
  if (has_lost_vespene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->lost_vespene_, output);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_minerals = 18;
  if (has_friendly_fire_minerals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->friendly_fire_minerals_, output);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_vespene = 19;
  if (has_friendly_fire_vespene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->friendly_fire_vespene_, output);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails used_minerals = 20;
  if (has_used_minerals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->used_minerals_, output);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails used_vespene = 21;
  if (has_used_vespene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->used_vespene_, output);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails total_used_minerals = 22;
  if (has_total_used_minerals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *this->total_used_minerals_, output);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails total_used_vespene = 23;
  if (has_total_used_vespene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, *this->total_used_vespene_, output);
  }

  // optional .SC2APIProtocol.VitalScoreDetails total_damage_dealt = 24;
  if (has_total_damage_dealt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, *this->total_damage_dealt_, output);
  }

  // optional .SC2APIProtocol.VitalScoreDetails total_damage_taken = 25;
  if (has_total_damage_taken()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *this->total_damage_taken_, output);
  }

  // optional .SC2APIProtocol.VitalScoreDetails total_healed = 26;
  if (has_total_healed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *this->total_healed_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ScoreDetails)
}

::google::protobuf::uint8* ScoreDetails::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ScoreDetails)
  // optional float idle_production_time = 1;
  if (has_idle_production_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->idle_production_time(), target);
  }

  // optional float idle_worker_time = 2;
  if (has_idle_worker_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->idle_worker_time(), target);
  }

  // optional float total_value_units = 3;
  if (has_total_value_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->total_value_units(), target);
  }

  // optional float total_value_structures = 4;
  if (has_total_value_structures()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->total_value_structures(), target);
  }

  // optional float killed_value_units = 5;
  if (has_killed_value_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->killed_value_units(), target);
  }

  // optional float killed_value_structures = 6;
  if (has_killed_value_structures()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->killed_value_structures(), target);
  }

  // optional float collected_minerals = 7;
  if (has_collected_minerals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->collected_minerals(), target);
  }

  // optional float collected_vespene = 8;
  if (has_collected_vespene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->collected_vespene(), target);
  }

  // optional float collection_rate_minerals = 9;
  if (has_collection_rate_minerals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->collection_rate_minerals(), target);
  }

  // optional float collection_rate_vespene = 10;
  if (has_collection_rate_vespene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->collection_rate_vespene(), target);
  }

  // optional float spent_minerals = 11;
  if (has_spent_minerals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->spent_minerals(), target);
  }

  // optional float spent_vespene = 12;
  if (has_spent_vespene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->spent_vespene(), target);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails food_used = 13;
  if (has_food_used()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->food_used_, false, target);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails killed_minerals = 14;
  if (has_killed_minerals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->killed_minerals_, false, target);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails killed_vespene = 15;
  if (has_killed_vespene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->killed_vespene_, false, target);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails lost_minerals = 16;
  if (has_lost_minerals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->lost_minerals_, false, target);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails lost_vespene = 17;
  if (has_lost_vespene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->lost_vespene_, false, target);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_minerals = 18;
  if (has_friendly_fire_minerals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->friendly_fire_minerals_, false, target);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_vespene = 19;
  if (has_friendly_fire_vespene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->friendly_fire_vespene_, false, target);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails used_minerals = 20;
  if (has_used_minerals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->used_minerals_, false, target);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails used_vespene = 21;
  if (has_used_vespene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->used_vespene_, false, target);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails total_used_minerals = 22;
  if (has_total_used_minerals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *this->total_used_minerals_, false, target);
  }

  // optional .SC2APIProtocol.CategoryScoreDetails total_used_vespene = 23;
  if (has_total_used_vespene()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, *this->total_used_vespene_, false, target);
  }

  // optional .SC2APIProtocol.VitalScoreDetails total_damage_dealt = 24;
  if (has_total_damage_dealt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        24, *this->total_damage_dealt_, false, target);
  }

  // optional .SC2APIProtocol.VitalScoreDetails total_damage_taken = 25;
  if (has_total_damage_taken()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *this->total_damage_taken_, false, target);
  }

  // optional .SC2APIProtocol.VitalScoreDetails total_healed = 26;
  if (has_total_healed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *this->total_healed_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ScoreDetails)
  return target;
}

int ScoreDetails::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ScoreDetails)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional float idle_production_time = 1;
    if (has_idle_production_time()) {
      total_size += 1 + 4;
    }

    // optional float idle_worker_time = 2;
    if (has_idle_worker_time()) {
      total_size += 1 + 4;
    }

    // optional float total_value_units = 3;
    if (has_total_value_units()) {
      total_size += 1 + 4;
    }

    // optional float total_value_structures = 4;
    if (has_total_value_structures()) {
      total_size += 1 + 4;
    }

    // optional float killed_value_units = 5;
    if (has_killed_value_units()) {
      total_size += 1 + 4;
    }

    // optional float killed_value_structures = 6;
    if (has_killed_value_structures()) {
      total_size += 1 + 4;
    }

    // optional float collected_minerals = 7;
    if (has_collected_minerals()) {
      total_size += 1 + 4;
    }

    // optional float collected_vespene = 8;
    if (has_collected_vespene()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float collection_rate_minerals = 9;
    if (has_collection_rate_minerals()) {
      total_size += 1 + 4;
    }

    // optional float collection_rate_vespene = 10;
    if (has_collection_rate_vespene()) {
      total_size += 1 + 4;
    }

    // optional float spent_minerals = 11;
    if (has_spent_minerals()) {
      total_size += 1 + 4;
    }

    // optional float spent_vespene = 12;
    if (has_spent_vespene()) {
      total_size += 1 + 4;
    }

    // optional .SC2APIProtocol.CategoryScoreDetails food_used = 13;
    if (has_food_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->food_used_);
    }

    // optional .SC2APIProtocol.CategoryScoreDetails killed_minerals = 14;
    if (has_killed_minerals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->killed_minerals_);
    }

    // optional .SC2APIProtocol.CategoryScoreDetails killed_vespene = 15;
    if (has_killed_vespene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->killed_vespene_);
    }

    // optional .SC2APIProtocol.CategoryScoreDetails lost_minerals = 16;
    if (has_lost_minerals()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lost_minerals_);
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional .SC2APIProtocol.CategoryScoreDetails lost_vespene = 17;
    if (has_lost_vespene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lost_vespene_);
    }

    // optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_minerals = 18;
    if (has_friendly_fire_minerals()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->friendly_fire_minerals_);
    }

    // optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_vespene = 19;
    if (has_friendly_fire_vespene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->friendly_fire_vespene_);
    }

    // optional .SC2APIProtocol.CategoryScoreDetails used_minerals = 20;
    if (has_used_minerals()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->used_minerals_);
    }

    // optional .SC2APIProtocol.CategoryScoreDetails used_vespene = 21;
    if (has_used_vespene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->used_vespene_);
    }

    // optional .SC2APIProtocol.CategoryScoreDetails total_used_minerals = 22;
    if (has_total_used_minerals()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->total_used_minerals_);
    }

    // optional .SC2APIProtocol.CategoryScoreDetails total_used_vespene = 23;
    if (has_total_used_vespene()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->total_used_vespene_);
    }

    // optional .SC2APIProtocol.VitalScoreDetails total_damage_dealt = 24;
    if (has_total_damage_dealt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->total_damage_dealt_);
    }

  }
  if (_has_bits_[24 / 32] & 50331648u) {
    // optional .SC2APIProtocol.VitalScoreDetails total_damage_taken = 25;
    if (has_total_damage_taken()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->total_damage_taken_);
    }

    // optional .SC2APIProtocol.VitalScoreDetails total_healed = 26;
    if (has_total_healed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->total_healed_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ScoreDetails)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ScoreDetails* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ScoreDetails>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ScoreDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ScoreDetails)
    MergeFrom(*source);
  }
}

void ScoreDetails::MergeFrom(const ScoreDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ScoreDetails)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idle_production_time()) {
      set_idle_production_time(from.idle_production_time());
    }
    if (from.has_idle_worker_time()) {
      set_idle_worker_time(from.idle_worker_time());
    }
    if (from.has_total_value_units()) {
      set_total_value_units(from.total_value_units());
    }
    if (from.has_total_value_structures()) {
      set_total_value_structures(from.total_value_structures());
    }
    if (from.has_killed_value_units()) {
      set_killed_value_units(from.killed_value_units());
    }
    if (from.has_killed_value_structures()) {
      set_killed_value_structures(from.killed_value_structures());
    }
    if (from.has_collected_minerals()) {
      set_collected_minerals(from.collected_minerals());
    }
    if (from.has_collected_vespene()) {
      set_collected_vespene(from.collected_vespene());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_collection_rate_minerals()) {
      set_collection_rate_minerals(from.collection_rate_minerals());
    }
    if (from.has_collection_rate_vespene()) {
      set_collection_rate_vespene(from.collection_rate_vespene());
    }
    if (from.has_spent_minerals()) {
      set_spent_minerals(from.spent_minerals());
    }
    if (from.has_spent_vespene()) {
      set_spent_vespene(from.spent_vespene());
    }
    if (from.has_food_used()) {
      mutable_food_used()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(from.food_used());
    }
    if (from.has_killed_minerals()) {
      mutable_killed_minerals()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(from.killed_minerals());
    }
    if (from.has_killed_vespene()) {
      mutable_killed_vespene()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(from.killed_vespene());
    }
    if (from.has_lost_minerals()) {
      mutable_lost_minerals()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(from.lost_minerals());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lost_vespene()) {
      mutable_lost_vespene()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(from.lost_vespene());
    }
    if (from.has_friendly_fire_minerals()) {
      mutable_friendly_fire_minerals()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(from.friendly_fire_minerals());
    }
    if (from.has_friendly_fire_vespene()) {
      mutable_friendly_fire_vespene()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(from.friendly_fire_vespene());
    }
    if (from.has_used_minerals()) {
      mutable_used_minerals()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(from.used_minerals());
    }
    if (from.has_used_vespene()) {
      mutable_used_vespene()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(from.used_vespene());
    }
    if (from.has_total_used_minerals()) {
      mutable_total_used_minerals()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(from.total_used_minerals());
    }
    if (from.has_total_used_vespene()) {
      mutable_total_used_vespene()->::SC2APIProtocol::CategoryScoreDetails::MergeFrom(from.total_used_vespene());
    }
    if (from.has_total_damage_dealt()) {
      mutable_total_damage_dealt()->::SC2APIProtocol::VitalScoreDetails::MergeFrom(from.total_damage_dealt());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_total_damage_taken()) {
      mutable_total_damage_taken()->::SC2APIProtocol::VitalScoreDetails::MergeFrom(from.total_damage_taken());
    }
    if (from.has_total_healed()) {
      mutable_total_healed()->::SC2APIProtocol::VitalScoreDetails::MergeFrom(from.total_healed());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ScoreDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ScoreDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreDetails::CopyFrom(const ScoreDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ScoreDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreDetails::IsInitialized() const {

  return true;
}

void ScoreDetails::Swap(ScoreDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScoreDetails::InternalSwap(ScoreDetails* other) {
  std::swap(idle_production_time_, other->idle_production_time_);
  std::swap(idle_worker_time_, other->idle_worker_time_);
  std::swap(total_value_units_, other->total_value_units_);
  std::swap(total_value_structures_, other->total_value_structures_);
  std::swap(killed_value_units_, other->killed_value_units_);
  std::swap(killed_value_structures_, other->killed_value_structures_);
  std::swap(collected_minerals_, other->collected_minerals_);
  std::swap(collected_vespene_, other->collected_vespene_);
  std::swap(collection_rate_minerals_, other->collection_rate_minerals_);
  std::swap(collection_rate_vespene_, other->collection_rate_vespene_);
  std::swap(spent_minerals_, other->spent_minerals_);
  std::swap(spent_vespene_, other->spent_vespene_);
  std::swap(food_used_, other->food_used_);
  std::swap(killed_minerals_, other->killed_minerals_);
  std::swap(killed_vespene_, other->killed_vespene_);
  std::swap(lost_minerals_, other->lost_minerals_);
  std::swap(lost_vespene_, other->lost_vespene_);
  std::swap(friendly_fire_minerals_, other->friendly_fire_minerals_);
  std::swap(friendly_fire_vespene_, other->friendly_fire_vespene_);
  std::swap(used_minerals_, other->used_minerals_);
  std::swap(used_vespene_, other->used_vespene_);
  std::swap(total_used_minerals_, other->total_used_minerals_);
  std::swap(total_used_vespene_, other->total_used_vespene_);
  std::swap(total_damage_dealt_, other->total_damage_dealt_);
  std::swap(total_damage_taken_, other->total_damage_taken_);
  std::swap(total_healed_, other->total_healed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ScoreDetails::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreDetails_descriptor_;
  metadata.reflection = ScoreDetails_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScoreDetails

// optional float idle_production_time = 1;
bool ScoreDetails::has_idle_production_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ScoreDetails::set_has_idle_production_time() {
  _has_bits_[0] |= 0x00000001u;
}
void ScoreDetails::clear_has_idle_production_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void ScoreDetails::clear_idle_production_time() {
  idle_production_time_ = 0;
  clear_has_idle_production_time();
}
 float ScoreDetails::idle_production_time() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.idle_production_time)
  return idle_production_time_;
}
 void ScoreDetails::set_idle_production_time(float value) {
  set_has_idle_production_time();
  idle_production_time_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.idle_production_time)
}

// optional float idle_worker_time = 2;
bool ScoreDetails::has_idle_worker_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ScoreDetails::set_has_idle_worker_time() {
  _has_bits_[0] |= 0x00000002u;
}
void ScoreDetails::clear_has_idle_worker_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void ScoreDetails::clear_idle_worker_time() {
  idle_worker_time_ = 0;
  clear_has_idle_worker_time();
}
 float ScoreDetails::idle_worker_time() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.idle_worker_time)
  return idle_worker_time_;
}
 void ScoreDetails::set_idle_worker_time(float value) {
  set_has_idle_worker_time();
  idle_worker_time_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.idle_worker_time)
}

// optional float total_value_units = 3;
bool ScoreDetails::has_total_value_units() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ScoreDetails::set_has_total_value_units() {
  _has_bits_[0] |= 0x00000004u;
}
void ScoreDetails::clear_has_total_value_units() {
  _has_bits_[0] &= ~0x00000004u;
}
void ScoreDetails::clear_total_value_units() {
  total_value_units_ = 0;
  clear_has_total_value_units();
}
 float ScoreDetails::total_value_units() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_value_units)
  return total_value_units_;
}
 void ScoreDetails::set_total_value_units(float value) {
  set_has_total_value_units();
  total_value_units_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.total_value_units)
}

// optional float total_value_structures = 4;
bool ScoreDetails::has_total_value_structures() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ScoreDetails::set_has_total_value_structures() {
  _has_bits_[0] |= 0x00000008u;
}
void ScoreDetails::clear_has_total_value_structures() {
  _has_bits_[0] &= ~0x00000008u;
}
void ScoreDetails::clear_total_value_structures() {
  total_value_structures_ = 0;
  clear_has_total_value_structures();
}
 float ScoreDetails::total_value_structures() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_value_structures)
  return total_value_structures_;
}
 void ScoreDetails::set_total_value_structures(float value) {
  set_has_total_value_structures();
  total_value_structures_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.total_value_structures)
}

// optional float killed_value_units = 5;
bool ScoreDetails::has_killed_value_units() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ScoreDetails::set_has_killed_value_units() {
  _has_bits_[0] |= 0x00000010u;
}
void ScoreDetails::clear_has_killed_value_units() {
  _has_bits_[0] &= ~0x00000010u;
}
void ScoreDetails::clear_killed_value_units() {
  killed_value_units_ = 0;
  clear_has_killed_value_units();
}
 float ScoreDetails::killed_value_units() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.killed_value_units)
  return killed_value_units_;
}
 void ScoreDetails::set_killed_value_units(float value) {
  set_has_killed_value_units();
  killed_value_units_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.killed_value_units)
}

// optional float killed_value_structures = 6;
bool ScoreDetails::has_killed_value_structures() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ScoreDetails::set_has_killed_value_structures() {
  _has_bits_[0] |= 0x00000020u;
}
void ScoreDetails::clear_has_killed_value_structures() {
  _has_bits_[0] &= ~0x00000020u;
}
void ScoreDetails::clear_killed_value_structures() {
  killed_value_structures_ = 0;
  clear_has_killed_value_structures();
}
 float ScoreDetails::killed_value_structures() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.killed_value_structures)
  return killed_value_structures_;
}
 void ScoreDetails::set_killed_value_structures(float value) {
  set_has_killed_value_structures();
  killed_value_structures_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.killed_value_structures)
}

// optional float collected_minerals = 7;
bool ScoreDetails::has_collected_minerals() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ScoreDetails::set_has_collected_minerals() {
  _has_bits_[0] |= 0x00000040u;
}
void ScoreDetails::clear_has_collected_minerals() {
  _has_bits_[0] &= ~0x00000040u;
}
void ScoreDetails::clear_collected_minerals() {
  collected_minerals_ = 0;
  clear_has_collected_minerals();
}
 float ScoreDetails::collected_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.collected_minerals)
  return collected_minerals_;
}
 void ScoreDetails::set_collected_minerals(float value) {
  set_has_collected_minerals();
  collected_minerals_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.collected_minerals)
}

// optional float collected_vespene = 8;
bool ScoreDetails::has_collected_vespene() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ScoreDetails::set_has_collected_vespene() {
  _has_bits_[0] |= 0x00000080u;
}
void ScoreDetails::clear_has_collected_vespene() {
  _has_bits_[0] &= ~0x00000080u;
}
void ScoreDetails::clear_collected_vespene() {
  collected_vespene_ = 0;
  clear_has_collected_vespene();
}
 float ScoreDetails::collected_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.collected_vespene)
  return collected_vespene_;
}
 void ScoreDetails::set_collected_vespene(float value) {
  set_has_collected_vespene();
  collected_vespene_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.collected_vespene)
}

// optional float collection_rate_minerals = 9;
bool ScoreDetails::has_collection_rate_minerals() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ScoreDetails::set_has_collection_rate_minerals() {
  _has_bits_[0] |= 0x00000100u;
}
void ScoreDetails::clear_has_collection_rate_minerals() {
  _has_bits_[0] &= ~0x00000100u;
}
void ScoreDetails::clear_collection_rate_minerals() {
  collection_rate_minerals_ = 0;
  clear_has_collection_rate_minerals();
}
 float ScoreDetails::collection_rate_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.collection_rate_minerals)
  return collection_rate_minerals_;
}
 void ScoreDetails::set_collection_rate_minerals(float value) {
  set_has_collection_rate_minerals();
  collection_rate_minerals_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.collection_rate_minerals)
}

// optional float collection_rate_vespene = 10;
bool ScoreDetails::has_collection_rate_vespene() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ScoreDetails::set_has_collection_rate_vespene() {
  _has_bits_[0] |= 0x00000200u;
}
void ScoreDetails::clear_has_collection_rate_vespene() {
  _has_bits_[0] &= ~0x00000200u;
}
void ScoreDetails::clear_collection_rate_vespene() {
  collection_rate_vespene_ = 0;
  clear_has_collection_rate_vespene();
}
 float ScoreDetails::collection_rate_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.collection_rate_vespene)
  return collection_rate_vespene_;
}
 void ScoreDetails::set_collection_rate_vespene(float value) {
  set_has_collection_rate_vespene();
  collection_rate_vespene_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.collection_rate_vespene)
}

// optional float spent_minerals = 11;
bool ScoreDetails::has_spent_minerals() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ScoreDetails::set_has_spent_minerals() {
  _has_bits_[0] |= 0x00000400u;
}
void ScoreDetails::clear_has_spent_minerals() {
  _has_bits_[0] &= ~0x00000400u;
}
void ScoreDetails::clear_spent_minerals() {
  spent_minerals_ = 0;
  clear_has_spent_minerals();
}
 float ScoreDetails::spent_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.spent_minerals)
  return spent_minerals_;
}
 void ScoreDetails::set_spent_minerals(float value) {
  set_has_spent_minerals();
  spent_minerals_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.spent_minerals)
}

// optional float spent_vespene = 12;
bool ScoreDetails::has_spent_vespene() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ScoreDetails::set_has_spent_vespene() {
  _has_bits_[0] |= 0x00000800u;
}
void ScoreDetails::clear_has_spent_vespene() {
  _has_bits_[0] &= ~0x00000800u;
}
void ScoreDetails::clear_spent_vespene() {
  spent_vespene_ = 0;
  clear_has_spent_vespene();
}
 float ScoreDetails::spent_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.spent_vespene)
  return spent_vespene_;
}
 void ScoreDetails::set_spent_vespene(float value) {
  set_has_spent_vespene();
  spent_vespene_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ScoreDetails.spent_vespene)
}

// optional .SC2APIProtocol.CategoryScoreDetails food_used = 13;
bool ScoreDetails::has_food_used() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ScoreDetails::set_has_food_used() {
  _has_bits_[0] |= 0x00001000u;
}
void ScoreDetails::clear_has_food_used() {
  _has_bits_[0] &= ~0x00001000u;
}
void ScoreDetails::clear_food_used() {
  if (food_used_ != NULL) food_used_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_food_used();
}
const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::food_used() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.food_used)
  return food_used_ != NULL ? *food_used_ : *default_instance_->food_used_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_food_used() {
  set_has_food_used();
  if (food_used_ == NULL) {
    food_used_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.food_used)
  return food_used_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_food_used() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.food_used)
  clear_has_food_used();
  ::SC2APIProtocol::CategoryScoreDetails* temp = food_used_;
  food_used_ = NULL;
  return temp;
}
void ScoreDetails::set_allocated_food_used(::SC2APIProtocol::CategoryScoreDetails* food_used) {
  delete food_used_;
  food_used_ = food_used;
  if (food_used) {
    set_has_food_used();
  } else {
    clear_has_food_used();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.food_used)
}

// optional .SC2APIProtocol.CategoryScoreDetails killed_minerals = 14;
bool ScoreDetails::has_killed_minerals() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ScoreDetails::set_has_killed_minerals() {
  _has_bits_[0] |= 0x00002000u;
}
void ScoreDetails::clear_has_killed_minerals() {
  _has_bits_[0] &= ~0x00002000u;
}
void ScoreDetails::clear_killed_minerals() {
  if (killed_minerals_ != NULL) killed_minerals_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_killed_minerals();
}
const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::killed_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.killed_minerals)
  return killed_minerals_ != NULL ? *killed_minerals_ : *default_instance_->killed_minerals_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_killed_minerals() {
  set_has_killed_minerals();
  if (killed_minerals_ == NULL) {
    killed_minerals_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.killed_minerals)
  return killed_minerals_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_killed_minerals() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.killed_minerals)
  clear_has_killed_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* temp = killed_minerals_;
  killed_minerals_ = NULL;
  return temp;
}
void ScoreDetails::set_allocated_killed_minerals(::SC2APIProtocol::CategoryScoreDetails* killed_minerals) {
  delete killed_minerals_;
  killed_minerals_ = killed_minerals;
  if (killed_minerals) {
    set_has_killed_minerals();
  } else {
    clear_has_killed_minerals();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.killed_minerals)
}

// optional .SC2APIProtocol.CategoryScoreDetails killed_vespene = 15;
bool ScoreDetails::has_killed_vespene() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ScoreDetails::set_has_killed_vespene() {
  _has_bits_[0] |= 0x00004000u;
}
void ScoreDetails::clear_has_killed_vespene() {
  _has_bits_[0] &= ~0x00004000u;
}
void ScoreDetails::clear_killed_vespene() {
  if (killed_vespene_ != NULL) killed_vespene_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_killed_vespene();
}
const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::killed_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.killed_vespene)
  return killed_vespene_ != NULL ? *killed_vespene_ : *default_instance_->killed_vespene_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_killed_vespene() {
  set_has_killed_vespene();
  if (killed_vespene_ == NULL) {
    killed_vespene_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.killed_vespene)
  return killed_vespene_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_killed_vespene() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.killed_vespene)
  clear_has_killed_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* temp = killed_vespene_;
  killed_vespene_ = NULL;
  return temp;
}
void ScoreDetails::set_allocated_killed_vespene(::SC2APIProtocol::CategoryScoreDetails* killed_vespene) {
  delete killed_vespene_;
  killed_vespene_ = killed_vespene;
  if (killed_vespene) {
    set_has_killed_vespene();
  } else {
    clear_has_killed_vespene();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.killed_vespene)
}

// optional .SC2APIProtocol.CategoryScoreDetails lost_minerals = 16;
bool ScoreDetails::has_lost_minerals() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ScoreDetails::set_has_lost_minerals() {
  _has_bits_[0] |= 0x00008000u;
}
void ScoreDetails::clear_has_lost_minerals() {
  _has_bits_[0] &= ~0x00008000u;
}
void ScoreDetails::clear_lost_minerals() {
  if (lost_minerals_ != NULL) lost_minerals_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_lost_minerals();
}
const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::lost_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.lost_minerals)
  return lost_minerals_ != NULL ? *lost_minerals_ : *default_instance_->lost_minerals_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_lost_minerals() {
  set_has_lost_minerals();
  if (lost_minerals_ == NULL) {
    lost_minerals_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.lost_minerals)
  return lost_minerals_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_lost_minerals() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.lost_minerals)
  clear_has_lost_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* temp = lost_minerals_;
  lost_minerals_ = NULL;
  return temp;
}
void ScoreDetails::set_allocated_lost_minerals(::SC2APIProtocol::CategoryScoreDetails* lost_minerals) {
  delete lost_minerals_;
  lost_minerals_ = lost_minerals;
  if (lost_minerals) {
    set_has_lost_minerals();
  } else {
    clear_has_lost_minerals();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.lost_minerals)
}

// optional .SC2APIProtocol.CategoryScoreDetails lost_vespene = 17;
bool ScoreDetails::has_lost_vespene() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ScoreDetails::set_has_lost_vespene() {
  _has_bits_[0] |= 0x00010000u;
}
void ScoreDetails::clear_has_lost_vespene() {
  _has_bits_[0] &= ~0x00010000u;
}
void ScoreDetails::clear_lost_vespene() {
  if (lost_vespene_ != NULL) lost_vespene_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_lost_vespene();
}
const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::lost_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.lost_vespene)
  return lost_vespene_ != NULL ? *lost_vespene_ : *default_instance_->lost_vespene_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_lost_vespene() {
  set_has_lost_vespene();
  if (lost_vespene_ == NULL) {
    lost_vespene_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.lost_vespene)
  return lost_vespene_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_lost_vespene() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.lost_vespene)
  clear_has_lost_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* temp = lost_vespene_;
  lost_vespene_ = NULL;
  return temp;
}
void ScoreDetails::set_allocated_lost_vespene(::SC2APIProtocol::CategoryScoreDetails* lost_vespene) {
  delete lost_vespene_;
  lost_vespene_ = lost_vespene;
  if (lost_vespene) {
    set_has_lost_vespene();
  } else {
    clear_has_lost_vespene();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.lost_vespene)
}

// optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_minerals = 18;
bool ScoreDetails::has_friendly_fire_minerals() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ScoreDetails::set_has_friendly_fire_minerals() {
  _has_bits_[0] |= 0x00020000u;
}
void ScoreDetails::clear_has_friendly_fire_minerals() {
  _has_bits_[0] &= ~0x00020000u;
}
void ScoreDetails::clear_friendly_fire_minerals() {
  if (friendly_fire_minerals_ != NULL) friendly_fire_minerals_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_friendly_fire_minerals();
}
const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::friendly_fire_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.friendly_fire_minerals)
  return friendly_fire_minerals_ != NULL ? *friendly_fire_minerals_ : *default_instance_->friendly_fire_minerals_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_friendly_fire_minerals() {
  set_has_friendly_fire_minerals();
  if (friendly_fire_minerals_ == NULL) {
    friendly_fire_minerals_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.friendly_fire_minerals)
  return friendly_fire_minerals_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_friendly_fire_minerals() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.friendly_fire_minerals)
  clear_has_friendly_fire_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* temp = friendly_fire_minerals_;
  friendly_fire_minerals_ = NULL;
  return temp;
}
void ScoreDetails::set_allocated_friendly_fire_minerals(::SC2APIProtocol::CategoryScoreDetails* friendly_fire_minerals) {
  delete friendly_fire_minerals_;
  friendly_fire_minerals_ = friendly_fire_minerals;
  if (friendly_fire_minerals) {
    set_has_friendly_fire_minerals();
  } else {
    clear_has_friendly_fire_minerals();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.friendly_fire_minerals)
}

// optional .SC2APIProtocol.CategoryScoreDetails friendly_fire_vespene = 19;
bool ScoreDetails::has_friendly_fire_vespene() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ScoreDetails::set_has_friendly_fire_vespene() {
  _has_bits_[0] |= 0x00040000u;
}
void ScoreDetails::clear_has_friendly_fire_vespene() {
  _has_bits_[0] &= ~0x00040000u;
}
void ScoreDetails::clear_friendly_fire_vespene() {
  if (friendly_fire_vespene_ != NULL) friendly_fire_vespene_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_friendly_fire_vespene();
}
const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::friendly_fire_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.friendly_fire_vespene)
  return friendly_fire_vespene_ != NULL ? *friendly_fire_vespene_ : *default_instance_->friendly_fire_vespene_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_friendly_fire_vespene() {
  set_has_friendly_fire_vespene();
  if (friendly_fire_vespene_ == NULL) {
    friendly_fire_vespene_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.friendly_fire_vespene)
  return friendly_fire_vespene_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_friendly_fire_vespene() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.friendly_fire_vespene)
  clear_has_friendly_fire_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* temp = friendly_fire_vespene_;
  friendly_fire_vespene_ = NULL;
  return temp;
}
void ScoreDetails::set_allocated_friendly_fire_vespene(::SC2APIProtocol::CategoryScoreDetails* friendly_fire_vespene) {
  delete friendly_fire_vespene_;
  friendly_fire_vespene_ = friendly_fire_vespene;
  if (friendly_fire_vespene) {
    set_has_friendly_fire_vespene();
  } else {
    clear_has_friendly_fire_vespene();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.friendly_fire_vespene)
}

// optional .SC2APIProtocol.CategoryScoreDetails used_minerals = 20;
bool ScoreDetails::has_used_minerals() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ScoreDetails::set_has_used_minerals() {
  _has_bits_[0] |= 0x00080000u;
}
void ScoreDetails::clear_has_used_minerals() {
  _has_bits_[0] &= ~0x00080000u;
}
void ScoreDetails::clear_used_minerals() {
  if (used_minerals_ != NULL) used_minerals_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_used_minerals();
}
const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::used_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.used_minerals)
  return used_minerals_ != NULL ? *used_minerals_ : *default_instance_->used_minerals_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_used_minerals() {
  set_has_used_minerals();
  if (used_minerals_ == NULL) {
    used_minerals_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.used_minerals)
  return used_minerals_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_used_minerals() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.used_minerals)
  clear_has_used_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* temp = used_minerals_;
  used_minerals_ = NULL;
  return temp;
}
void ScoreDetails::set_allocated_used_minerals(::SC2APIProtocol::CategoryScoreDetails* used_minerals) {
  delete used_minerals_;
  used_minerals_ = used_minerals;
  if (used_minerals) {
    set_has_used_minerals();
  } else {
    clear_has_used_minerals();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.used_minerals)
}

// optional .SC2APIProtocol.CategoryScoreDetails used_vespene = 21;
bool ScoreDetails::has_used_vespene() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ScoreDetails::set_has_used_vespene() {
  _has_bits_[0] |= 0x00100000u;
}
void ScoreDetails::clear_has_used_vespene() {
  _has_bits_[0] &= ~0x00100000u;
}
void ScoreDetails::clear_used_vespene() {
  if (used_vespene_ != NULL) used_vespene_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_used_vespene();
}
const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::used_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.used_vespene)
  return used_vespene_ != NULL ? *used_vespene_ : *default_instance_->used_vespene_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_used_vespene() {
  set_has_used_vespene();
  if (used_vespene_ == NULL) {
    used_vespene_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.used_vespene)
  return used_vespene_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_used_vespene() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.used_vespene)
  clear_has_used_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* temp = used_vespene_;
  used_vespene_ = NULL;
  return temp;
}
void ScoreDetails::set_allocated_used_vespene(::SC2APIProtocol::CategoryScoreDetails* used_vespene) {
  delete used_vespene_;
  used_vespene_ = used_vespene;
  if (used_vespene) {
    set_has_used_vespene();
  } else {
    clear_has_used_vespene();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.used_vespene)
}

// optional .SC2APIProtocol.CategoryScoreDetails total_used_minerals = 22;
bool ScoreDetails::has_total_used_minerals() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ScoreDetails::set_has_total_used_minerals() {
  _has_bits_[0] |= 0x00200000u;
}
void ScoreDetails::clear_has_total_used_minerals() {
  _has_bits_[0] &= ~0x00200000u;
}
void ScoreDetails::clear_total_used_minerals() {
  if (total_used_minerals_ != NULL) total_used_minerals_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_total_used_minerals();
}
const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::total_used_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_used_minerals)
  return total_used_minerals_ != NULL ? *total_used_minerals_ : *default_instance_->total_used_minerals_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_total_used_minerals() {
  set_has_total_used_minerals();
  if (total_used_minerals_ == NULL) {
    total_used_minerals_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.total_used_minerals)
  return total_used_minerals_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_total_used_minerals() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.total_used_minerals)
  clear_has_total_used_minerals();
  ::SC2APIProtocol::CategoryScoreDetails* temp = total_used_minerals_;
  total_used_minerals_ = NULL;
  return temp;
}
void ScoreDetails::set_allocated_total_used_minerals(::SC2APIProtocol::CategoryScoreDetails* total_used_minerals) {
  delete total_used_minerals_;
  total_used_minerals_ = total_used_minerals;
  if (total_used_minerals) {
    set_has_total_used_minerals();
  } else {
    clear_has_total_used_minerals();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.total_used_minerals)
}

// optional .SC2APIProtocol.CategoryScoreDetails total_used_vespene = 23;
bool ScoreDetails::has_total_used_vespene() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void ScoreDetails::set_has_total_used_vespene() {
  _has_bits_[0] |= 0x00400000u;
}
void ScoreDetails::clear_has_total_used_vespene() {
  _has_bits_[0] &= ~0x00400000u;
}
void ScoreDetails::clear_total_used_vespene() {
  if (total_used_vespene_ != NULL) total_used_vespene_->::SC2APIProtocol::CategoryScoreDetails::Clear();
  clear_has_total_used_vespene();
}
const ::SC2APIProtocol::CategoryScoreDetails& ScoreDetails::total_used_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_used_vespene)
  return total_used_vespene_ != NULL ? *total_used_vespene_ : *default_instance_->total_used_vespene_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::mutable_total_used_vespene() {
  set_has_total_used_vespene();
  if (total_used_vespene_ == NULL) {
    total_used_vespene_ = new ::SC2APIProtocol::CategoryScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.total_used_vespene)
  return total_used_vespene_;
}
::SC2APIProtocol::CategoryScoreDetails* ScoreDetails::release_total_used_vespene() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.total_used_vespene)
  clear_has_total_used_vespene();
  ::SC2APIProtocol::CategoryScoreDetails* temp = total_used_vespene_;
  total_used_vespene_ = NULL;
  return temp;
}
void ScoreDetails::set_allocated_total_used_vespene(::SC2APIProtocol::CategoryScoreDetails* total_used_vespene) {
  delete total_used_vespene_;
  total_used_vespene_ = total_used_vespene;
  if (total_used_vespene) {
    set_has_total_used_vespene();
  } else {
    clear_has_total_used_vespene();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.total_used_vespene)
}

// optional .SC2APIProtocol.VitalScoreDetails total_damage_dealt = 24;
bool ScoreDetails::has_total_damage_dealt() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void ScoreDetails::set_has_total_damage_dealt() {
  _has_bits_[0] |= 0x00800000u;
}
void ScoreDetails::clear_has_total_damage_dealt() {
  _has_bits_[0] &= ~0x00800000u;
}
void ScoreDetails::clear_total_damage_dealt() {
  if (total_damage_dealt_ != NULL) total_damage_dealt_->::SC2APIProtocol::VitalScoreDetails::Clear();
  clear_has_total_damage_dealt();
}
const ::SC2APIProtocol::VitalScoreDetails& ScoreDetails::total_damage_dealt() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_damage_dealt)
  return total_damage_dealt_ != NULL ? *total_damage_dealt_ : *default_instance_->total_damage_dealt_;
}
::SC2APIProtocol::VitalScoreDetails* ScoreDetails::mutable_total_damage_dealt() {
  set_has_total_damage_dealt();
  if (total_damage_dealt_ == NULL) {
    total_damage_dealt_ = new ::SC2APIProtocol::VitalScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.total_damage_dealt)
  return total_damage_dealt_;
}
::SC2APIProtocol::VitalScoreDetails* ScoreDetails::release_total_damage_dealt() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.total_damage_dealt)
  clear_has_total_damage_dealt();
  ::SC2APIProtocol::VitalScoreDetails* temp = total_damage_dealt_;
  total_damage_dealt_ = NULL;
  return temp;
}
void ScoreDetails::set_allocated_total_damage_dealt(::SC2APIProtocol::VitalScoreDetails* total_damage_dealt) {
  delete total_damage_dealt_;
  total_damage_dealt_ = total_damage_dealt;
  if (total_damage_dealt) {
    set_has_total_damage_dealt();
  } else {
    clear_has_total_damage_dealt();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.total_damage_dealt)
}

// optional .SC2APIProtocol.VitalScoreDetails total_damage_taken = 25;
bool ScoreDetails::has_total_damage_taken() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void ScoreDetails::set_has_total_damage_taken() {
  _has_bits_[0] |= 0x01000000u;
}
void ScoreDetails::clear_has_total_damage_taken() {
  _has_bits_[0] &= ~0x01000000u;
}
void ScoreDetails::clear_total_damage_taken() {
  if (total_damage_taken_ != NULL) total_damage_taken_->::SC2APIProtocol::VitalScoreDetails::Clear();
  clear_has_total_damage_taken();
}
const ::SC2APIProtocol::VitalScoreDetails& ScoreDetails::total_damage_taken() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_damage_taken)
  return total_damage_taken_ != NULL ? *total_damage_taken_ : *default_instance_->total_damage_taken_;
}
::SC2APIProtocol::VitalScoreDetails* ScoreDetails::mutable_total_damage_taken() {
  set_has_total_damage_taken();
  if (total_damage_taken_ == NULL) {
    total_damage_taken_ = new ::SC2APIProtocol::VitalScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.total_damage_taken)
  return total_damage_taken_;
}
::SC2APIProtocol::VitalScoreDetails* ScoreDetails::release_total_damage_taken() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.total_damage_taken)
  clear_has_total_damage_taken();
  ::SC2APIProtocol::VitalScoreDetails* temp = total_damage_taken_;
  total_damage_taken_ = NULL;
  return temp;
}
void ScoreDetails::set_allocated_total_damage_taken(::SC2APIProtocol::VitalScoreDetails* total_damage_taken) {
  delete total_damage_taken_;
  total_damage_taken_ = total_damage_taken;
  if (total_damage_taken) {
    set_has_total_damage_taken();
  } else {
    clear_has_total_damage_taken();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.total_damage_taken)
}

// optional .SC2APIProtocol.VitalScoreDetails total_healed = 26;
bool ScoreDetails::has_total_healed() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void ScoreDetails::set_has_total_healed() {
  _has_bits_[0] |= 0x02000000u;
}
void ScoreDetails::clear_has_total_healed() {
  _has_bits_[0] &= ~0x02000000u;
}
void ScoreDetails::clear_total_healed() {
  if (total_healed_ != NULL) total_healed_->::SC2APIProtocol::VitalScoreDetails::Clear();
  clear_has_total_healed();
}
const ::SC2APIProtocol::VitalScoreDetails& ScoreDetails::total_healed() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ScoreDetails.total_healed)
  return total_healed_ != NULL ? *total_healed_ : *default_instance_->total_healed_;
}
::SC2APIProtocol::VitalScoreDetails* ScoreDetails::mutable_total_healed() {
  set_has_total_healed();
  if (total_healed_ == NULL) {
    total_healed_ = new ::SC2APIProtocol::VitalScoreDetails;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ScoreDetails.total_healed)
  return total_healed_;
}
::SC2APIProtocol::VitalScoreDetails* ScoreDetails::release_total_healed() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ScoreDetails.total_healed)
  clear_has_total_healed();
  ::SC2APIProtocol::VitalScoreDetails* temp = total_healed_;
  total_healed_ = NULL;
  return temp;
}
void ScoreDetails::set_allocated_total_healed(::SC2APIProtocol::VitalScoreDetails* total_healed) {
  delete total_healed_;
  total_healed_ = total_healed;
  if (total_healed) {
    set_has_total_healed();
  } else {
    clear_has_total_healed();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ScoreDetails.total_healed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SC2APIProtocol

// @@protoc_insertion_point(global_scope)
