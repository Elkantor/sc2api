// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/ui.proto

#ifndef PROTOBUF_s2clientprotocol_2fui_2eproto__INCLUDED
#define PROTOBUF_s2clientprotocol_2fui_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SC2APIProtocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto();
void protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto();

class ActionCargoPanelUnload;
class ActionControlGroup;
class ActionMultiPanel;
class ActionProductionPanelRemoveFromQueue;
class ActionSelectArmy;
class ActionSelectIdleWorker;
class ActionSelectLarva;
class ActionSelectWarpGates;
class ActionToggleAutocast;
class ActionUI;
class CargoPanel;
class ControlGroup;
class MultiPanel;
class ObservationUI;
class ProductionPanel;
class SinglePanel;
class UnitInfo;

enum ActionControlGroup_ControlGroupAction {
  ActionControlGroup_ControlGroupAction_Recall = 1,
  ActionControlGroup_ControlGroupAction_Set = 2,
  ActionControlGroup_ControlGroupAction_Append = 3,
  ActionControlGroup_ControlGroupAction_SetAndSteal = 4,
  ActionControlGroup_ControlGroupAction_AppendAndSteal = 5
};
bool ActionControlGroup_ControlGroupAction_IsValid(int value);
const ActionControlGroup_ControlGroupAction ActionControlGroup_ControlGroupAction_ControlGroupAction_MIN = ActionControlGroup_ControlGroupAction_Recall;
const ActionControlGroup_ControlGroupAction ActionControlGroup_ControlGroupAction_ControlGroupAction_MAX = ActionControlGroup_ControlGroupAction_AppendAndSteal;
const int ActionControlGroup_ControlGroupAction_ControlGroupAction_ARRAYSIZE = ActionControlGroup_ControlGroupAction_ControlGroupAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionControlGroup_ControlGroupAction_descriptor();
inline const ::std::string& ActionControlGroup_ControlGroupAction_Name(ActionControlGroup_ControlGroupAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionControlGroup_ControlGroupAction_descriptor(), value);
}
inline bool ActionControlGroup_ControlGroupAction_Parse(
    const ::std::string& name, ActionControlGroup_ControlGroupAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionControlGroup_ControlGroupAction>(
    ActionControlGroup_ControlGroupAction_descriptor(), name, value);
}
enum ActionSelectIdleWorker_Type {
  ActionSelectIdleWorker_Type_Set = 1,
  ActionSelectIdleWorker_Type_Add = 2,
  ActionSelectIdleWorker_Type_All = 3,
  ActionSelectIdleWorker_Type_AddAll = 4
};
bool ActionSelectIdleWorker_Type_IsValid(int value);
const ActionSelectIdleWorker_Type ActionSelectIdleWorker_Type_Type_MIN = ActionSelectIdleWorker_Type_Set;
const ActionSelectIdleWorker_Type ActionSelectIdleWorker_Type_Type_MAX = ActionSelectIdleWorker_Type_AddAll;
const int ActionSelectIdleWorker_Type_Type_ARRAYSIZE = ActionSelectIdleWorker_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionSelectIdleWorker_Type_descriptor();
inline const ::std::string& ActionSelectIdleWorker_Type_Name(ActionSelectIdleWorker_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionSelectIdleWorker_Type_descriptor(), value);
}
inline bool ActionSelectIdleWorker_Type_Parse(
    const ::std::string& name, ActionSelectIdleWorker_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionSelectIdleWorker_Type>(
    ActionSelectIdleWorker_Type_descriptor(), name, value);
}
enum ActionMultiPanel_Type {
  ActionMultiPanel_Type_SingleSelect = 1,
  ActionMultiPanel_Type_DeselectUnit = 2,
  ActionMultiPanel_Type_SelectAllOfType = 3,
  ActionMultiPanel_Type_DeselectAllOfType = 4
};
bool ActionMultiPanel_Type_IsValid(int value);
const ActionMultiPanel_Type ActionMultiPanel_Type_Type_MIN = ActionMultiPanel_Type_SingleSelect;
const ActionMultiPanel_Type ActionMultiPanel_Type_Type_MAX = ActionMultiPanel_Type_DeselectAllOfType;
const int ActionMultiPanel_Type_Type_ARRAYSIZE = ActionMultiPanel_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ActionMultiPanel_Type_descriptor();
inline const ::std::string& ActionMultiPanel_Type_Name(ActionMultiPanel_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ActionMultiPanel_Type_descriptor(), value);
}
inline bool ActionMultiPanel_Type_Parse(
    const ::std::string& name, ActionMultiPanel_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActionMultiPanel_Type>(
    ActionMultiPanel_Type_descriptor(), name, value);
}
// ===================================================================

class ObservationUI : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ObservationUI) */ {
 public:
  ObservationUI();
  virtual ~ObservationUI();

  ObservationUI(const ObservationUI& from);

  inline ObservationUI& operator=(const ObservationUI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObservationUI& default_instance();

  enum PanelCase {
    kSingle = 2,
    kMulti = 3,
    kCargo = 4,
    kProduction = 5,
    PANEL_NOT_SET = 0,
  };

  void Swap(ObservationUI* other);

  // implements Message ----------------------------------------------

  inline ObservationUI* New() const { return New(NULL); }

  ObservationUI* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObservationUI& from);
  void MergeFrom(const ObservationUI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObservationUI* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SC2APIProtocol.ControlGroup groups = 1;
  int groups_size() const;
  void clear_groups();
  static const int kGroupsFieldNumber = 1;
  const ::SC2APIProtocol::ControlGroup& groups(int index) const;
  ::SC2APIProtocol::ControlGroup* mutable_groups(int index);
  ::SC2APIProtocol::ControlGroup* add_groups();
  ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::ControlGroup >*
      mutable_groups();
  const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::ControlGroup >&
      groups() const;

  // optional .SC2APIProtocol.SinglePanel single = 2;
  bool has_single() const;
  void clear_single();
  static const int kSingleFieldNumber = 2;
  const ::SC2APIProtocol::SinglePanel& single() const;
  ::SC2APIProtocol::SinglePanel* mutable_single();
  ::SC2APIProtocol::SinglePanel* release_single();
  void set_allocated_single(::SC2APIProtocol::SinglePanel* single);

  // optional .SC2APIProtocol.MultiPanel multi = 3;
  bool has_multi() const;
  void clear_multi();
  static const int kMultiFieldNumber = 3;
  const ::SC2APIProtocol::MultiPanel& multi() const;
  ::SC2APIProtocol::MultiPanel* mutable_multi();
  ::SC2APIProtocol::MultiPanel* release_multi();
  void set_allocated_multi(::SC2APIProtocol::MultiPanel* multi);

  // optional .SC2APIProtocol.CargoPanel cargo = 4;
  bool has_cargo() const;
  void clear_cargo();
  static const int kCargoFieldNumber = 4;
  const ::SC2APIProtocol::CargoPanel& cargo() const;
  ::SC2APIProtocol::CargoPanel* mutable_cargo();
  ::SC2APIProtocol::CargoPanel* release_cargo();
  void set_allocated_cargo(::SC2APIProtocol::CargoPanel* cargo);

  // optional .SC2APIProtocol.ProductionPanel production = 5;
  bool has_production() const;
  void clear_production();
  static const int kProductionFieldNumber = 5;
  const ::SC2APIProtocol::ProductionPanel& production() const;
  ::SC2APIProtocol::ProductionPanel* mutable_production();
  ::SC2APIProtocol::ProductionPanel* release_production();
  void set_allocated_production(::SC2APIProtocol::ProductionPanel* production);

  PanelCase panel_case() const;
  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ObservationUI)
 private:
  inline void set_has_single();
  inline void set_has_multi();
  inline void set_has_cargo();
  inline void set_has_production();

  inline bool has_panel() const;
  void clear_panel();
  inline void clear_has_panel();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::ControlGroup > groups_;
  union PanelUnion {
    PanelUnion() {}
    ::SC2APIProtocol::SinglePanel* single_;
    ::SC2APIProtocol::MultiPanel* multi_;
    ::SC2APIProtocol::CargoPanel* cargo_;
    ::SC2APIProtocol::ProductionPanel* production_;
  } panel_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto();

  void InitAsDefaultInstance();
  static ObservationUI* default_instance_;
};
// -------------------------------------------------------------------

class ControlGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ControlGroup) */ {
 public:
  ControlGroup();
  virtual ~ControlGroup();

  ControlGroup(const ControlGroup& from);

  inline ControlGroup& operator=(const ControlGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ControlGroup& default_instance();

  void Swap(ControlGroup* other);

  // implements Message ----------------------------------------------

  inline ControlGroup* New() const { return New(NULL); }

  ControlGroup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ControlGroup& from);
  void MergeFrom(const ControlGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ControlGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 control_group_index = 1;
  bool has_control_group_index() const;
  void clear_control_group_index();
  static const int kControlGroupIndexFieldNumber = 1;
  ::google::protobuf::uint32 control_group_index() const;
  void set_control_group_index(::google::protobuf::uint32 value);

  // optional uint32 leader_unit_type = 2;
  bool has_leader_unit_type() const;
  void clear_leader_unit_type();
  static const int kLeaderUnitTypeFieldNumber = 2;
  ::google::protobuf::uint32 leader_unit_type() const;
  void set_leader_unit_type(::google::protobuf::uint32 value);

  // optional uint32 count = 3;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 3;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ControlGroup)
 private:
  inline void set_has_control_group_index();
  inline void clear_has_control_group_index();
  inline void set_has_leader_unit_type();
  inline void clear_has_leader_unit_type();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 control_group_index_;
  ::google::protobuf::uint32 leader_unit_type_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto();

  void InitAsDefaultInstance();
  static ControlGroup* default_instance_;
};
// -------------------------------------------------------------------

class UnitInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.UnitInfo) */ {
 public:
  UnitInfo();
  virtual ~UnitInfo();

  UnitInfo(const UnitInfo& from);

  inline UnitInfo& operator=(const UnitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnitInfo& default_instance();

  void Swap(UnitInfo* other);

  // implements Message ----------------------------------------------

  inline UnitInfo* New() const { return New(NULL); }

  UnitInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnitInfo& from);
  void MergeFrom(const UnitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnitInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 unit_type = 1;
  bool has_unit_type() const;
  void clear_unit_type();
  static const int kUnitTypeFieldNumber = 1;
  ::google::protobuf::uint32 unit_type() const;
  void set_unit_type(::google::protobuf::uint32 value);

  // optional uint32 player_relative = 2;
  bool has_player_relative() const;
  void clear_player_relative();
  static const int kPlayerRelativeFieldNumber = 2;
  ::google::protobuf::uint32 player_relative() const;
  void set_player_relative(::google::protobuf::uint32 value);

  // optional int32 health = 3;
  bool has_health() const;
  void clear_health();
  static const int kHealthFieldNumber = 3;
  ::google::protobuf::int32 health() const;
  void set_health(::google::protobuf::int32 value);

  // optional int32 shields = 4;
  bool has_shields() const;
  void clear_shields();
  static const int kShieldsFieldNumber = 4;
  ::google::protobuf::int32 shields() const;
  void set_shields(::google::protobuf::int32 value);

  // optional int32 energy = 5;
  bool has_energy() const;
  void clear_energy();
  static const int kEnergyFieldNumber = 5;
  ::google::protobuf::int32 energy() const;
  void set_energy(::google::protobuf::int32 value);

  // optional int32 transport_slots_taken = 6;
  bool has_transport_slots_taken() const;
  void clear_transport_slots_taken();
  static const int kTransportSlotsTakenFieldNumber = 6;
  ::google::protobuf::int32 transport_slots_taken() const;
  void set_transport_slots_taken(::google::protobuf::int32 value);

  // optional float build_progress = 7;
  bool has_build_progress() const;
  void clear_build_progress();
  static const int kBuildProgressFieldNumber = 7;
  float build_progress() const;
  void set_build_progress(float value);

  // optional .SC2APIProtocol.UnitInfo add_on = 8;
  bool has_add_on() const;
  void clear_add_on();
  static const int kAddOnFieldNumber = 8;
  const ::SC2APIProtocol::UnitInfo& add_on() const;
  ::SC2APIProtocol::UnitInfo* mutable_add_on();
  ::SC2APIProtocol::UnitInfo* release_add_on();
  void set_allocated_add_on(::SC2APIProtocol::UnitInfo* add_on);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.UnitInfo)
 private:
  inline void set_has_unit_type();
  inline void clear_has_unit_type();
  inline void set_has_player_relative();
  inline void clear_has_player_relative();
  inline void set_has_health();
  inline void clear_has_health();
  inline void set_has_shields();
  inline void clear_has_shields();
  inline void set_has_energy();
  inline void clear_has_energy();
  inline void set_has_transport_slots_taken();
  inline void clear_has_transport_slots_taken();
  inline void set_has_build_progress();
  inline void clear_has_build_progress();
  inline void set_has_add_on();
  inline void clear_has_add_on();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 unit_type_;
  ::google::protobuf::uint32 player_relative_;
  ::google::protobuf::int32 health_;
  ::google::protobuf::int32 shields_;
  ::google::protobuf::int32 energy_;
  ::google::protobuf::int32 transport_slots_taken_;
  ::SC2APIProtocol::UnitInfo* add_on_;
  float build_progress_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto();

  void InitAsDefaultInstance();
  static UnitInfo* default_instance_;
};
// -------------------------------------------------------------------

class SinglePanel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.SinglePanel) */ {
 public:
  SinglePanel();
  virtual ~SinglePanel();

  SinglePanel(const SinglePanel& from);

  inline SinglePanel& operator=(const SinglePanel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SinglePanel& default_instance();

  void Swap(SinglePanel* other);

  // implements Message ----------------------------------------------

  inline SinglePanel* New() const { return New(NULL); }

  SinglePanel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SinglePanel& from);
  void MergeFrom(const SinglePanel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SinglePanel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SC2APIProtocol.UnitInfo unit = 1;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 1;
  const ::SC2APIProtocol::UnitInfo& unit() const;
  ::SC2APIProtocol::UnitInfo* mutable_unit();
  ::SC2APIProtocol::UnitInfo* release_unit();
  void set_allocated_unit(::SC2APIProtocol::UnitInfo* unit);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.SinglePanel)
 private:
  inline void set_has_unit();
  inline void clear_has_unit();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SC2APIProtocol::UnitInfo* unit_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto();

  void InitAsDefaultInstance();
  static SinglePanel* default_instance_;
};
// -------------------------------------------------------------------

class MultiPanel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.MultiPanel) */ {
 public:
  MultiPanel();
  virtual ~MultiPanel();

  MultiPanel(const MultiPanel& from);

  inline MultiPanel& operator=(const MultiPanel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiPanel& default_instance();

  void Swap(MultiPanel* other);

  // implements Message ----------------------------------------------

  inline MultiPanel* New() const { return New(NULL); }

  MultiPanel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MultiPanel& from);
  void MergeFrom(const MultiPanel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiPanel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SC2APIProtocol.UnitInfo units = 1;
  int units_size() const;
  void clear_units();
  static const int kUnitsFieldNumber = 1;
  const ::SC2APIProtocol::UnitInfo& units(int index) const;
  ::SC2APIProtocol::UnitInfo* mutable_units(int index);
  ::SC2APIProtocol::UnitInfo* add_units();
  ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo >*
      mutable_units();
  const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo >&
      units() const;

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.MultiPanel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo > units_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto();

  void InitAsDefaultInstance();
  static MultiPanel* default_instance_;
};
// -------------------------------------------------------------------

class CargoPanel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.CargoPanel) */ {
 public:
  CargoPanel();
  virtual ~CargoPanel();

  CargoPanel(const CargoPanel& from);

  inline CargoPanel& operator=(const CargoPanel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CargoPanel& default_instance();

  void Swap(CargoPanel* other);

  // implements Message ----------------------------------------------

  inline CargoPanel* New() const { return New(NULL); }

  CargoPanel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CargoPanel& from);
  void MergeFrom(const CargoPanel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CargoPanel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SC2APIProtocol.UnitInfo unit = 1;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 1;
  const ::SC2APIProtocol::UnitInfo& unit() const;
  ::SC2APIProtocol::UnitInfo* mutable_unit();
  ::SC2APIProtocol::UnitInfo* release_unit();
  void set_allocated_unit(::SC2APIProtocol::UnitInfo* unit);

  // repeated .SC2APIProtocol.UnitInfo passengers = 2;
  int passengers_size() const;
  void clear_passengers();
  static const int kPassengersFieldNumber = 2;
  const ::SC2APIProtocol::UnitInfo& passengers(int index) const;
  ::SC2APIProtocol::UnitInfo* mutable_passengers(int index);
  ::SC2APIProtocol::UnitInfo* add_passengers();
  ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo >*
      mutable_passengers();
  const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo >&
      passengers() const;

  // optional int32 slots_available = 3;
  bool has_slots_available() const;
  void clear_slots_available();
  static const int kSlotsAvailableFieldNumber = 3;
  ::google::protobuf::int32 slots_available() const;
  void set_slots_available(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.CargoPanel)
 private:
  inline void set_has_unit();
  inline void clear_has_unit();
  inline void set_has_slots_available();
  inline void clear_has_slots_available();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SC2APIProtocol::UnitInfo* unit_;
  ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo > passengers_;
  ::google::protobuf::int32 slots_available_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto();

  void InitAsDefaultInstance();
  static CargoPanel* default_instance_;
};
// -------------------------------------------------------------------

class ProductionPanel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ProductionPanel) */ {
 public:
  ProductionPanel();
  virtual ~ProductionPanel();

  ProductionPanel(const ProductionPanel& from);

  inline ProductionPanel& operator=(const ProductionPanel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductionPanel& default_instance();

  void Swap(ProductionPanel* other);

  // implements Message ----------------------------------------------

  inline ProductionPanel* New() const { return New(NULL); }

  ProductionPanel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProductionPanel& from);
  void MergeFrom(const ProductionPanel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProductionPanel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SC2APIProtocol.UnitInfo unit = 1;
  bool has_unit() const;
  void clear_unit();
  static const int kUnitFieldNumber = 1;
  const ::SC2APIProtocol::UnitInfo& unit() const;
  ::SC2APIProtocol::UnitInfo* mutable_unit();
  ::SC2APIProtocol::UnitInfo* release_unit();
  void set_allocated_unit(::SC2APIProtocol::UnitInfo* unit);

  // repeated .SC2APIProtocol.UnitInfo build_queue = 2;
  int build_queue_size() const;
  void clear_build_queue();
  static const int kBuildQueueFieldNumber = 2;
  const ::SC2APIProtocol::UnitInfo& build_queue(int index) const;
  ::SC2APIProtocol::UnitInfo* mutable_build_queue(int index);
  ::SC2APIProtocol::UnitInfo* add_build_queue();
  ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo >*
      mutable_build_queue();
  const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo >&
      build_queue() const;

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ProductionPanel)
 private:
  inline void set_has_unit();
  inline void clear_has_unit();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SC2APIProtocol::UnitInfo* unit_;
  ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo > build_queue_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto();

  void InitAsDefaultInstance();
  static ProductionPanel* default_instance_;
};
// -------------------------------------------------------------------

class ActionUI : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ActionUI) */ {
 public:
  ActionUI();
  virtual ~ActionUI();

  ActionUI(const ActionUI& from);

  inline ActionUI& operator=(const ActionUI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionUI& default_instance();

  enum ActionCase {
    kControlGroup = 1,
    kSelectArmy = 2,
    kSelectWarpGates = 3,
    kSelectLarva = 4,
    kSelectIdleWorker = 5,
    kMultiPanel = 6,
    kCargoPanel = 7,
    kProductionPanel = 8,
    kToggleAutocast = 9,
    ACTION_NOT_SET = 0,
  };

  void Swap(ActionUI* other);

  // implements Message ----------------------------------------------

  inline ActionUI* New() const { return New(NULL); }

  ActionUI* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionUI& from);
  void MergeFrom(const ActionUI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionUI* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SC2APIProtocol.ActionControlGroup control_group = 1;
  bool has_control_group() const;
  void clear_control_group();
  static const int kControlGroupFieldNumber = 1;
  const ::SC2APIProtocol::ActionControlGroup& control_group() const;
  ::SC2APIProtocol::ActionControlGroup* mutable_control_group();
  ::SC2APIProtocol::ActionControlGroup* release_control_group();
  void set_allocated_control_group(::SC2APIProtocol::ActionControlGroup* control_group);

  // optional .SC2APIProtocol.ActionSelectArmy select_army = 2;
  bool has_select_army() const;
  void clear_select_army();
  static const int kSelectArmyFieldNumber = 2;
  const ::SC2APIProtocol::ActionSelectArmy& select_army() const;
  ::SC2APIProtocol::ActionSelectArmy* mutable_select_army();
  ::SC2APIProtocol::ActionSelectArmy* release_select_army();
  void set_allocated_select_army(::SC2APIProtocol::ActionSelectArmy* select_army);

  // optional .SC2APIProtocol.ActionSelectWarpGates select_warp_gates = 3;
  bool has_select_warp_gates() const;
  void clear_select_warp_gates();
  static const int kSelectWarpGatesFieldNumber = 3;
  const ::SC2APIProtocol::ActionSelectWarpGates& select_warp_gates() const;
  ::SC2APIProtocol::ActionSelectWarpGates* mutable_select_warp_gates();
  ::SC2APIProtocol::ActionSelectWarpGates* release_select_warp_gates();
  void set_allocated_select_warp_gates(::SC2APIProtocol::ActionSelectWarpGates* select_warp_gates);

  // optional .SC2APIProtocol.ActionSelectLarva select_larva = 4;
  bool has_select_larva() const;
  void clear_select_larva();
  static const int kSelectLarvaFieldNumber = 4;
  const ::SC2APIProtocol::ActionSelectLarva& select_larva() const;
  ::SC2APIProtocol::ActionSelectLarva* mutable_select_larva();
  ::SC2APIProtocol::ActionSelectLarva* release_select_larva();
  void set_allocated_select_larva(::SC2APIProtocol::ActionSelectLarva* select_larva);

  // optional .SC2APIProtocol.ActionSelectIdleWorker select_idle_worker = 5;
  bool has_select_idle_worker() const;
  void clear_select_idle_worker();
  static const int kSelectIdleWorkerFieldNumber = 5;
  const ::SC2APIProtocol::ActionSelectIdleWorker& select_idle_worker() const;
  ::SC2APIProtocol::ActionSelectIdleWorker* mutable_select_idle_worker();
  ::SC2APIProtocol::ActionSelectIdleWorker* release_select_idle_worker();
  void set_allocated_select_idle_worker(::SC2APIProtocol::ActionSelectIdleWorker* select_idle_worker);

  // optional .SC2APIProtocol.ActionMultiPanel multi_panel = 6;
  bool has_multi_panel() const;
  void clear_multi_panel();
  static const int kMultiPanelFieldNumber = 6;
  const ::SC2APIProtocol::ActionMultiPanel& multi_panel() const;
  ::SC2APIProtocol::ActionMultiPanel* mutable_multi_panel();
  ::SC2APIProtocol::ActionMultiPanel* release_multi_panel();
  void set_allocated_multi_panel(::SC2APIProtocol::ActionMultiPanel* multi_panel);

  // optional .SC2APIProtocol.ActionCargoPanelUnload cargo_panel = 7;
  bool has_cargo_panel() const;
  void clear_cargo_panel();
  static const int kCargoPanelFieldNumber = 7;
  const ::SC2APIProtocol::ActionCargoPanelUnload& cargo_panel() const;
  ::SC2APIProtocol::ActionCargoPanelUnload* mutable_cargo_panel();
  ::SC2APIProtocol::ActionCargoPanelUnload* release_cargo_panel();
  void set_allocated_cargo_panel(::SC2APIProtocol::ActionCargoPanelUnload* cargo_panel);

  // optional .SC2APIProtocol.ActionProductionPanelRemoveFromQueue production_panel = 8;
  bool has_production_panel() const;
  void clear_production_panel();
  static const int kProductionPanelFieldNumber = 8;
  const ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue& production_panel() const;
  ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue* mutable_production_panel();
  ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue* release_production_panel();
  void set_allocated_production_panel(::SC2APIProtocol::ActionProductionPanelRemoveFromQueue* production_panel);

  // optional .SC2APIProtocol.ActionToggleAutocast toggle_autocast = 9;
  bool has_toggle_autocast() const;
  void clear_toggle_autocast();
  static const int kToggleAutocastFieldNumber = 9;
  const ::SC2APIProtocol::ActionToggleAutocast& toggle_autocast() const;
  ::SC2APIProtocol::ActionToggleAutocast* mutable_toggle_autocast();
  ::SC2APIProtocol::ActionToggleAutocast* release_toggle_autocast();
  void set_allocated_toggle_autocast(::SC2APIProtocol::ActionToggleAutocast* toggle_autocast);

  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ActionUI)
 private:
  inline void set_has_control_group();
  inline void set_has_select_army();
  inline void set_has_select_warp_gates();
  inline void set_has_select_larva();
  inline void set_has_select_idle_worker();
  inline void set_has_multi_panel();
  inline void set_has_cargo_panel();
  inline void set_has_production_panel();
  inline void set_has_toggle_autocast();

  inline bool has_action() const;
  void clear_action();
  inline void clear_has_action();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union ActionUnion {
    ActionUnion() {}
    ::SC2APIProtocol::ActionControlGroup* control_group_;
    ::SC2APIProtocol::ActionSelectArmy* select_army_;
    ::SC2APIProtocol::ActionSelectWarpGates* select_warp_gates_;
    ::SC2APIProtocol::ActionSelectLarva* select_larva_;
    ::SC2APIProtocol::ActionSelectIdleWorker* select_idle_worker_;
    ::SC2APIProtocol::ActionMultiPanel* multi_panel_;
    ::SC2APIProtocol::ActionCargoPanelUnload* cargo_panel_;
    ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue* production_panel_;
    ::SC2APIProtocol::ActionToggleAutocast* toggle_autocast_;
  } action_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto();

  void InitAsDefaultInstance();
  static ActionUI* default_instance_;
};
// -------------------------------------------------------------------

class ActionControlGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ActionControlGroup) */ {
 public:
  ActionControlGroup();
  virtual ~ActionControlGroup();

  ActionControlGroup(const ActionControlGroup& from);

  inline ActionControlGroup& operator=(const ActionControlGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionControlGroup& default_instance();

  void Swap(ActionControlGroup* other);

  // implements Message ----------------------------------------------

  inline ActionControlGroup* New() const { return New(NULL); }

  ActionControlGroup* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionControlGroup& from);
  void MergeFrom(const ActionControlGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionControlGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ActionControlGroup_ControlGroupAction ControlGroupAction;
  static const ControlGroupAction Recall =
    ActionControlGroup_ControlGroupAction_Recall;
  static const ControlGroupAction Set =
    ActionControlGroup_ControlGroupAction_Set;
  static const ControlGroupAction Append =
    ActionControlGroup_ControlGroupAction_Append;
  static const ControlGroupAction SetAndSteal =
    ActionControlGroup_ControlGroupAction_SetAndSteal;
  static const ControlGroupAction AppendAndSteal =
    ActionControlGroup_ControlGroupAction_AppendAndSteal;
  static inline bool ControlGroupAction_IsValid(int value) {
    return ActionControlGroup_ControlGroupAction_IsValid(value);
  }
  static const ControlGroupAction ControlGroupAction_MIN =
    ActionControlGroup_ControlGroupAction_ControlGroupAction_MIN;
  static const ControlGroupAction ControlGroupAction_MAX =
    ActionControlGroup_ControlGroupAction_ControlGroupAction_MAX;
  static const int ControlGroupAction_ARRAYSIZE =
    ActionControlGroup_ControlGroupAction_ControlGroupAction_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ControlGroupAction_descriptor() {
    return ActionControlGroup_ControlGroupAction_descriptor();
  }
  static inline const ::std::string& ControlGroupAction_Name(ControlGroupAction value) {
    return ActionControlGroup_ControlGroupAction_Name(value);
  }
  static inline bool ControlGroupAction_Parse(const ::std::string& name,
      ControlGroupAction* value) {
    return ActionControlGroup_ControlGroupAction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SC2APIProtocol.ActionControlGroup.ControlGroupAction action = 1;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 1;
  ::SC2APIProtocol::ActionControlGroup_ControlGroupAction action() const;
  void set_action(::SC2APIProtocol::ActionControlGroup_ControlGroupAction value);

  // optional uint32 control_group_index = 2;
  bool has_control_group_index() const;
  void clear_control_group_index();
  static const int kControlGroupIndexFieldNumber = 2;
  ::google::protobuf::uint32 control_group_index() const;
  void set_control_group_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ActionControlGroup)
 private:
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_control_group_index();
  inline void clear_has_control_group_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int action_;
  ::google::protobuf::uint32 control_group_index_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto();

  void InitAsDefaultInstance();
  static ActionControlGroup* default_instance_;
};
// -------------------------------------------------------------------

class ActionSelectArmy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ActionSelectArmy) */ {
 public:
  ActionSelectArmy();
  virtual ~ActionSelectArmy();

  ActionSelectArmy(const ActionSelectArmy& from);

  inline ActionSelectArmy& operator=(const ActionSelectArmy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionSelectArmy& default_instance();

  void Swap(ActionSelectArmy* other);

  // implements Message ----------------------------------------------

  inline ActionSelectArmy* New() const { return New(NULL); }

  ActionSelectArmy* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionSelectArmy& from);
  void MergeFrom(const ActionSelectArmy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionSelectArmy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool selection_add = 1;
  bool has_selection_add() const;
  void clear_selection_add();
  static const int kSelectionAddFieldNumber = 1;
  bool selection_add() const;
  void set_selection_add(bool value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ActionSelectArmy)
 private:
  inline void set_has_selection_add();
  inline void clear_has_selection_add();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool selection_add_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto();

  void InitAsDefaultInstance();
  static ActionSelectArmy* default_instance_;
};
// -------------------------------------------------------------------

class ActionSelectWarpGates : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ActionSelectWarpGates) */ {
 public:
  ActionSelectWarpGates();
  virtual ~ActionSelectWarpGates();

  ActionSelectWarpGates(const ActionSelectWarpGates& from);

  inline ActionSelectWarpGates& operator=(const ActionSelectWarpGates& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionSelectWarpGates& default_instance();

  void Swap(ActionSelectWarpGates* other);

  // implements Message ----------------------------------------------

  inline ActionSelectWarpGates* New() const { return New(NULL); }

  ActionSelectWarpGates* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionSelectWarpGates& from);
  void MergeFrom(const ActionSelectWarpGates& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionSelectWarpGates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool selection_add = 1;
  bool has_selection_add() const;
  void clear_selection_add();
  static const int kSelectionAddFieldNumber = 1;
  bool selection_add() const;
  void set_selection_add(bool value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ActionSelectWarpGates)
 private:
  inline void set_has_selection_add();
  inline void clear_has_selection_add();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool selection_add_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto();

  void InitAsDefaultInstance();
  static ActionSelectWarpGates* default_instance_;
};
// -------------------------------------------------------------------

class ActionSelectLarva : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ActionSelectLarva) */ {
 public:
  ActionSelectLarva();
  virtual ~ActionSelectLarva();

  ActionSelectLarva(const ActionSelectLarva& from);

  inline ActionSelectLarva& operator=(const ActionSelectLarva& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionSelectLarva& default_instance();

  void Swap(ActionSelectLarva* other);

  // implements Message ----------------------------------------------

  inline ActionSelectLarva* New() const { return New(NULL); }

  ActionSelectLarva* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionSelectLarva& from);
  void MergeFrom(const ActionSelectLarva& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionSelectLarva* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ActionSelectLarva)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto();

  void InitAsDefaultInstance();
  static ActionSelectLarva* default_instance_;
};
// -------------------------------------------------------------------

class ActionSelectIdleWorker : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ActionSelectIdleWorker) */ {
 public:
  ActionSelectIdleWorker();
  virtual ~ActionSelectIdleWorker();

  ActionSelectIdleWorker(const ActionSelectIdleWorker& from);

  inline ActionSelectIdleWorker& operator=(const ActionSelectIdleWorker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionSelectIdleWorker& default_instance();

  void Swap(ActionSelectIdleWorker* other);

  // implements Message ----------------------------------------------

  inline ActionSelectIdleWorker* New() const { return New(NULL); }

  ActionSelectIdleWorker* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionSelectIdleWorker& from);
  void MergeFrom(const ActionSelectIdleWorker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionSelectIdleWorker* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ActionSelectIdleWorker_Type Type;
  static const Type Set =
    ActionSelectIdleWorker_Type_Set;
  static const Type Add =
    ActionSelectIdleWorker_Type_Add;
  static const Type All =
    ActionSelectIdleWorker_Type_All;
  static const Type AddAll =
    ActionSelectIdleWorker_Type_AddAll;
  static inline bool Type_IsValid(int value) {
    return ActionSelectIdleWorker_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ActionSelectIdleWorker_Type_Type_MIN;
  static const Type Type_MAX =
    ActionSelectIdleWorker_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ActionSelectIdleWorker_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ActionSelectIdleWorker_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ActionSelectIdleWorker_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ActionSelectIdleWorker_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SC2APIProtocol.ActionSelectIdleWorker.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::SC2APIProtocol::ActionSelectIdleWorker_Type type() const;
  void set_type(::SC2APIProtocol::ActionSelectIdleWorker_Type value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ActionSelectIdleWorker)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto();

  void InitAsDefaultInstance();
  static ActionSelectIdleWorker* default_instance_;
};
// -------------------------------------------------------------------

class ActionMultiPanel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ActionMultiPanel) */ {
 public:
  ActionMultiPanel();
  virtual ~ActionMultiPanel();

  ActionMultiPanel(const ActionMultiPanel& from);

  inline ActionMultiPanel& operator=(const ActionMultiPanel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionMultiPanel& default_instance();

  void Swap(ActionMultiPanel* other);

  // implements Message ----------------------------------------------

  inline ActionMultiPanel* New() const { return New(NULL); }

  ActionMultiPanel* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionMultiPanel& from);
  void MergeFrom(const ActionMultiPanel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionMultiPanel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ActionMultiPanel_Type Type;
  static const Type SingleSelect =
    ActionMultiPanel_Type_SingleSelect;
  static const Type DeselectUnit =
    ActionMultiPanel_Type_DeselectUnit;
  static const Type SelectAllOfType =
    ActionMultiPanel_Type_SelectAllOfType;
  static const Type DeselectAllOfType =
    ActionMultiPanel_Type_DeselectAllOfType;
  static inline bool Type_IsValid(int value) {
    return ActionMultiPanel_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ActionMultiPanel_Type_Type_MIN;
  static const Type Type_MAX =
    ActionMultiPanel_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ActionMultiPanel_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ActionMultiPanel_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ActionMultiPanel_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ActionMultiPanel_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SC2APIProtocol.ActionMultiPanel.Type type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::SC2APIProtocol::ActionMultiPanel_Type type() const;
  void set_type(::SC2APIProtocol::ActionMultiPanel_Type value);

  // optional int32 unit_index = 2;
  bool has_unit_index() const;
  void clear_unit_index();
  static const int kUnitIndexFieldNumber = 2;
  ::google::protobuf::int32 unit_index() const;
  void set_unit_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ActionMultiPanel)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_unit_index();
  inline void clear_has_unit_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 unit_index_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto();

  void InitAsDefaultInstance();
  static ActionMultiPanel* default_instance_;
};
// -------------------------------------------------------------------

class ActionCargoPanelUnload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ActionCargoPanelUnload) */ {
 public:
  ActionCargoPanelUnload();
  virtual ~ActionCargoPanelUnload();

  ActionCargoPanelUnload(const ActionCargoPanelUnload& from);

  inline ActionCargoPanelUnload& operator=(const ActionCargoPanelUnload& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionCargoPanelUnload& default_instance();

  void Swap(ActionCargoPanelUnload* other);

  // implements Message ----------------------------------------------

  inline ActionCargoPanelUnload* New() const { return New(NULL); }

  ActionCargoPanelUnload* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionCargoPanelUnload& from);
  void MergeFrom(const ActionCargoPanelUnload& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionCargoPanelUnload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 unit_index = 1;
  bool has_unit_index() const;
  void clear_unit_index();
  static const int kUnitIndexFieldNumber = 1;
  ::google::protobuf::int32 unit_index() const;
  void set_unit_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ActionCargoPanelUnload)
 private:
  inline void set_has_unit_index();
  inline void clear_has_unit_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 unit_index_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto();

  void InitAsDefaultInstance();
  static ActionCargoPanelUnload* default_instance_;
};
// -------------------------------------------------------------------

class ActionProductionPanelRemoveFromQueue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ActionProductionPanelRemoveFromQueue) */ {
 public:
  ActionProductionPanelRemoveFromQueue();
  virtual ~ActionProductionPanelRemoveFromQueue();

  ActionProductionPanelRemoveFromQueue(const ActionProductionPanelRemoveFromQueue& from);

  inline ActionProductionPanelRemoveFromQueue& operator=(const ActionProductionPanelRemoveFromQueue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionProductionPanelRemoveFromQueue& default_instance();

  void Swap(ActionProductionPanelRemoveFromQueue* other);

  // implements Message ----------------------------------------------

  inline ActionProductionPanelRemoveFromQueue* New() const { return New(NULL); }

  ActionProductionPanelRemoveFromQueue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionProductionPanelRemoveFromQueue& from);
  void MergeFrom(const ActionProductionPanelRemoveFromQueue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionProductionPanelRemoveFromQueue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 unit_index = 1;
  bool has_unit_index() const;
  void clear_unit_index();
  static const int kUnitIndexFieldNumber = 1;
  ::google::protobuf::int32 unit_index() const;
  void set_unit_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
 private:
  inline void set_has_unit_index();
  inline void clear_has_unit_index();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 unit_index_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto();

  void InitAsDefaultInstance();
  static ActionProductionPanelRemoveFromQueue* default_instance_;
};
// -------------------------------------------------------------------

class ActionToggleAutocast : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ActionToggleAutocast) */ {
 public:
  ActionToggleAutocast();
  virtual ~ActionToggleAutocast();

  ActionToggleAutocast(const ActionToggleAutocast& from);

  inline ActionToggleAutocast& operator=(const ActionToggleAutocast& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionToggleAutocast& default_instance();

  void Swap(ActionToggleAutocast* other);

  // implements Message ----------------------------------------------

  inline ActionToggleAutocast* New() const { return New(NULL); }

  ActionToggleAutocast* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActionToggleAutocast& from);
  void MergeFrom(const ActionToggleAutocast& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ActionToggleAutocast* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ability_id = 1;
  bool has_ability_id() const;
  void clear_ability_id();
  static const int kAbilityIdFieldNumber = 1;
  ::google::protobuf::int32 ability_id() const;
  void set_ability_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ActionToggleAutocast)
 private:
  inline void set_has_ability_id();
  inline void clear_has_ability_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ability_id_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto();

  void InitAsDefaultInstance();
  static ActionToggleAutocast* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ObservationUI

// repeated .SC2APIProtocol.ControlGroup groups = 1;
inline int ObservationUI::groups_size() const {
  return groups_.size();
}
inline void ObservationUI::clear_groups() {
  groups_.Clear();
}
inline const ::SC2APIProtocol::ControlGroup& ObservationUI::groups(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationUI.groups)
  return groups_.Get(index);
}
inline ::SC2APIProtocol::ControlGroup* ObservationUI::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationUI.groups)
  return groups_.Mutable(index);
}
inline ::SC2APIProtocol::ControlGroup* ObservationUI::add_groups() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ObservationUI.groups)
  return groups_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::ControlGroup >*
ObservationUI::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ObservationUI.groups)
  return &groups_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::ControlGroup >&
ObservationUI::groups() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ObservationUI.groups)
  return groups_;
}

// optional .SC2APIProtocol.SinglePanel single = 2;
inline bool ObservationUI::has_single() const {
  return panel_case() == kSingle;
}
inline void ObservationUI::set_has_single() {
  _oneof_case_[0] = kSingle;
}
inline void ObservationUI::clear_single() {
  if (has_single()) {
    delete panel_.single_;
    clear_has_panel();
  }
}
inline  const ::SC2APIProtocol::SinglePanel& ObservationUI::single() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationUI.single)
  return has_single()
      ? *panel_.single_
      : ::SC2APIProtocol::SinglePanel::default_instance();
}
inline ::SC2APIProtocol::SinglePanel* ObservationUI::mutable_single() {
  if (!has_single()) {
    clear_panel();
    set_has_single();
    panel_.single_ = new ::SC2APIProtocol::SinglePanel;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationUI.single)
  return panel_.single_;
}
inline ::SC2APIProtocol::SinglePanel* ObservationUI::release_single() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ObservationUI.single)
  if (has_single()) {
    clear_has_panel();
    ::SC2APIProtocol::SinglePanel* temp = panel_.single_;
    panel_.single_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObservationUI::set_allocated_single(::SC2APIProtocol::SinglePanel* single) {
  clear_panel();
  if (single) {
    set_has_single();
    panel_.single_ = single;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObservationUI.single)
}

// optional .SC2APIProtocol.MultiPanel multi = 3;
inline bool ObservationUI::has_multi() const {
  return panel_case() == kMulti;
}
inline void ObservationUI::set_has_multi() {
  _oneof_case_[0] = kMulti;
}
inline void ObservationUI::clear_multi() {
  if (has_multi()) {
    delete panel_.multi_;
    clear_has_panel();
  }
}
inline  const ::SC2APIProtocol::MultiPanel& ObservationUI::multi() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationUI.multi)
  return has_multi()
      ? *panel_.multi_
      : ::SC2APIProtocol::MultiPanel::default_instance();
}
inline ::SC2APIProtocol::MultiPanel* ObservationUI::mutable_multi() {
  if (!has_multi()) {
    clear_panel();
    set_has_multi();
    panel_.multi_ = new ::SC2APIProtocol::MultiPanel;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationUI.multi)
  return panel_.multi_;
}
inline ::SC2APIProtocol::MultiPanel* ObservationUI::release_multi() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ObservationUI.multi)
  if (has_multi()) {
    clear_has_panel();
    ::SC2APIProtocol::MultiPanel* temp = panel_.multi_;
    panel_.multi_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObservationUI::set_allocated_multi(::SC2APIProtocol::MultiPanel* multi) {
  clear_panel();
  if (multi) {
    set_has_multi();
    panel_.multi_ = multi;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObservationUI.multi)
}

// optional .SC2APIProtocol.CargoPanel cargo = 4;
inline bool ObservationUI::has_cargo() const {
  return panel_case() == kCargo;
}
inline void ObservationUI::set_has_cargo() {
  _oneof_case_[0] = kCargo;
}
inline void ObservationUI::clear_cargo() {
  if (has_cargo()) {
    delete panel_.cargo_;
    clear_has_panel();
  }
}
inline  const ::SC2APIProtocol::CargoPanel& ObservationUI::cargo() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationUI.cargo)
  return has_cargo()
      ? *panel_.cargo_
      : ::SC2APIProtocol::CargoPanel::default_instance();
}
inline ::SC2APIProtocol::CargoPanel* ObservationUI::mutable_cargo() {
  if (!has_cargo()) {
    clear_panel();
    set_has_cargo();
    panel_.cargo_ = new ::SC2APIProtocol::CargoPanel;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationUI.cargo)
  return panel_.cargo_;
}
inline ::SC2APIProtocol::CargoPanel* ObservationUI::release_cargo() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ObservationUI.cargo)
  if (has_cargo()) {
    clear_has_panel();
    ::SC2APIProtocol::CargoPanel* temp = panel_.cargo_;
    panel_.cargo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObservationUI::set_allocated_cargo(::SC2APIProtocol::CargoPanel* cargo) {
  clear_panel();
  if (cargo) {
    set_has_cargo();
    panel_.cargo_ = cargo;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObservationUI.cargo)
}

// optional .SC2APIProtocol.ProductionPanel production = 5;
inline bool ObservationUI::has_production() const {
  return panel_case() == kProduction;
}
inline void ObservationUI::set_has_production() {
  _oneof_case_[0] = kProduction;
}
inline void ObservationUI::clear_production() {
  if (has_production()) {
    delete panel_.production_;
    clear_has_panel();
  }
}
inline  const ::SC2APIProtocol::ProductionPanel& ObservationUI::production() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationUI.production)
  return has_production()
      ? *panel_.production_
      : ::SC2APIProtocol::ProductionPanel::default_instance();
}
inline ::SC2APIProtocol::ProductionPanel* ObservationUI::mutable_production() {
  if (!has_production()) {
    clear_panel();
    set_has_production();
    panel_.production_ = new ::SC2APIProtocol::ProductionPanel;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationUI.production)
  return panel_.production_;
}
inline ::SC2APIProtocol::ProductionPanel* ObservationUI::release_production() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ObservationUI.production)
  if (has_production()) {
    clear_has_panel();
    ::SC2APIProtocol::ProductionPanel* temp = panel_.production_;
    panel_.production_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ObservationUI::set_allocated_production(::SC2APIProtocol::ProductionPanel* production) {
  clear_panel();
  if (production) {
    set_has_production();
    panel_.production_ = production;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObservationUI.production)
}

inline bool ObservationUI::has_panel() const {
  return panel_case() != PANEL_NOT_SET;
}
inline void ObservationUI::clear_has_panel() {
  _oneof_case_[0] = PANEL_NOT_SET;
}
inline ObservationUI::PanelCase ObservationUI::panel_case() const {
  return ObservationUI::PanelCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ControlGroup

// optional uint32 control_group_index = 1;
inline bool ControlGroup::has_control_group_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ControlGroup::set_has_control_group_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ControlGroup::clear_has_control_group_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ControlGroup::clear_control_group_index() {
  control_group_index_ = 0u;
  clear_has_control_group_index();
}
inline ::google::protobuf::uint32 ControlGroup::control_group_index() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ControlGroup.control_group_index)
  return control_group_index_;
}
inline void ControlGroup::set_control_group_index(::google::protobuf::uint32 value) {
  set_has_control_group_index();
  control_group_index_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ControlGroup.control_group_index)
}

// optional uint32 leader_unit_type = 2;
inline bool ControlGroup::has_leader_unit_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ControlGroup::set_has_leader_unit_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ControlGroup::clear_has_leader_unit_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ControlGroup::clear_leader_unit_type() {
  leader_unit_type_ = 0u;
  clear_has_leader_unit_type();
}
inline ::google::protobuf::uint32 ControlGroup::leader_unit_type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ControlGroup.leader_unit_type)
  return leader_unit_type_;
}
inline void ControlGroup::set_leader_unit_type(::google::protobuf::uint32 value) {
  set_has_leader_unit_type();
  leader_unit_type_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ControlGroup.leader_unit_type)
}

// optional uint32 count = 3;
inline bool ControlGroup::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ControlGroup::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ControlGroup::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ControlGroup::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 ControlGroup::count() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ControlGroup.count)
  return count_;
}
inline void ControlGroup::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ControlGroup.count)
}

// -------------------------------------------------------------------

// UnitInfo

// optional uint32 unit_type = 1;
inline bool UnitInfo::has_unit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnitInfo::set_has_unit_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnitInfo::clear_has_unit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnitInfo::clear_unit_type() {
  unit_type_ = 0u;
  clear_has_unit_type();
}
inline ::google::protobuf::uint32 UnitInfo::unit_type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitInfo.unit_type)
  return unit_type_;
}
inline void UnitInfo::set_unit_type(::google::protobuf::uint32 value) {
  set_has_unit_type();
  unit_type_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitInfo.unit_type)
}

// optional uint32 player_relative = 2;
inline bool UnitInfo::has_player_relative() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnitInfo::set_has_player_relative() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnitInfo::clear_has_player_relative() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnitInfo::clear_player_relative() {
  player_relative_ = 0u;
  clear_has_player_relative();
}
inline ::google::protobuf::uint32 UnitInfo::player_relative() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitInfo.player_relative)
  return player_relative_;
}
inline void UnitInfo::set_player_relative(::google::protobuf::uint32 value) {
  set_has_player_relative();
  player_relative_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitInfo.player_relative)
}

// optional int32 health = 3;
inline bool UnitInfo::has_health() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnitInfo::set_has_health() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnitInfo::clear_has_health() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnitInfo::clear_health() {
  health_ = 0;
  clear_has_health();
}
inline ::google::protobuf::int32 UnitInfo::health() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitInfo.health)
  return health_;
}
inline void UnitInfo::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitInfo.health)
}

// optional int32 shields = 4;
inline bool UnitInfo::has_shields() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnitInfo::set_has_shields() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnitInfo::clear_has_shields() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnitInfo::clear_shields() {
  shields_ = 0;
  clear_has_shields();
}
inline ::google::protobuf::int32 UnitInfo::shields() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitInfo.shields)
  return shields_;
}
inline void UnitInfo::set_shields(::google::protobuf::int32 value) {
  set_has_shields();
  shields_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitInfo.shields)
}

// optional int32 energy = 5;
inline bool UnitInfo::has_energy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UnitInfo::set_has_energy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UnitInfo::clear_has_energy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UnitInfo::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
inline ::google::protobuf::int32 UnitInfo::energy() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitInfo.energy)
  return energy_;
}
inline void UnitInfo::set_energy(::google::protobuf::int32 value) {
  set_has_energy();
  energy_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitInfo.energy)
}

// optional int32 transport_slots_taken = 6;
inline bool UnitInfo::has_transport_slots_taken() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UnitInfo::set_has_transport_slots_taken() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UnitInfo::clear_has_transport_slots_taken() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UnitInfo::clear_transport_slots_taken() {
  transport_slots_taken_ = 0;
  clear_has_transport_slots_taken();
}
inline ::google::protobuf::int32 UnitInfo::transport_slots_taken() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitInfo.transport_slots_taken)
  return transport_slots_taken_;
}
inline void UnitInfo::set_transport_slots_taken(::google::protobuf::int32 value) {
  set_has_transport_slots_taken();
  transport_slots_taken_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitInfo.transport_slots_taken)
}

// optional float build_progress = 7;
inline bool UnitInfo::has_build_progress() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UnitInfo::set_has_build_progress() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UnitInfo::clear_has_build_progress() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UnitInfo::clear_build_progress() {
  build_progress_ = 0;
  clear_has_build_progress();
}
inline float UnitInfo::build_progress() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitInfo.build_progress)
  return build_progress_;
}
inline void UnitInfo::set_build_progress(float value) {
  set_has_build_progress();
  build_progress_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitInfo.build_progress)
}

// optional .SC2APIProtocol.UnitInfo add_on = 8;
inline bool UnitInfo::has_add_on() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UnitInfo::set_has_add_on() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UnitInfo::clear_has_add_on() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UnitInfo::clear_add_on() {
  if (add_on_ != NULL) add_on_->::SC2APIProtocol::UnitInfo::Clear();
  clear_has_add_on();
}
inline const ::SC2APIProtocol::UnitInfo& UnitInfo::add_on() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitInfo.add_on)
  return add_on_ != NULL ? *add_on_ : *default_instance_->add_on_;
}
inline ::SC2APIProtocol::UnitInfo* UnitInfo::mutable_add_on() {
  set_has_add_on();
  if (add_on_ == NULL) {
    add_on_ = new ::SC2APIProtocol::UnitInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.UnitInfo.add_on)
  return add_on_;
}
inline ::SC2APIProtocol::UnitInfo* UnitInfo::release_add_on() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.UnitInfo.add_on)
  clear_has_add_on();
  ::SC2APIProtocol::UnitInfo* temp = add_on_;
  add_on_ = NULL;
  return temp;
}
inline void UnitInfo::set_allocated_add_on(::SC2APIProtocol::UnitInfo* add_on) {
  delete add_on_;
  add_on_ = add_on;
  if (add_on) {
    set_has_add_on();
  } else {
    clear_has_add_on();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.UnitInfo.add_on)
}

// -------------------------------------------------------------------

// SinglePanel

// optional .SC2APIProtocol.UnitInfo unit = 1;
inline bool SinglePanel::has_unit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SinglePanel::set_has_unit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SinglePanel::clear_has_unit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SinglePanel::clear_unit() {
  if (unit_ != NULL) unit_->::SC2APIProtocol::UnitInfo::Clear();
  clear_has_unit();
}
inline const ::SC2APIProtocol::UnitInfo& SinglePanel::unit() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.SinglePanel.unit)
  return unit_ != NULL ? *unit_ : *default_instance_->unit_;
}
inline ::SC2APIProtocol::UnitInfo* SinglePanel::mutable_unit() {
  set_has_unit();
  if (unit_ == NULL) {
    unit_ = new ::SC2APIProtocol::UnitInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.SinglePanel.unit)
  return unit_;
}
inline ::SC2APIProtocol::UnitInfo* SinglePanel::release_unit() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.SinglePanel.unit)
  clear_has_unit();
  ::SC2APIProtocol::UnitInfo* temp = unit_;
  unit_ = NULL;
  return temp;
}
inline void SinglePanel::set_allocated_unit(::SC2APIProtocol::UnitInfo* unit) {
  delete unit_;
  unit_ = unit;
  if (unit) {
    set_has_unit();
  } else {
    clear_has_unit();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.SinglePanel.unit)
}

// -------------------------------------------------------------------

// MultiPanel

// repeated .SC2APIProtocol.UnitInfo units = 1;
inline int MultiPanel::units_size() const {
  return units_.size();
}
inline void MultiPanel::clear_units() {
  units_.Clear();
}
inline const ::SC2APIProtocol::UnitInfo& MultiPanel::units(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.MultiPanel.units)
  return units_.Get(index);
}
inline ::SC2APIProtocol::UnitInfo* MultiPanel::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.MultiPanel.units)
  return units_.Mutable(index);
}
inline ::SC2APIProtocol::UnitInfo* MultiPanel::add_units() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.MultiPanel.units)
  return units_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo >*
MultiPanel::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.MultiPanel.units)
  return &units_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo >&
MultiPanel::units() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.MultiPanel.units)
  return units_;
}

// -------------------------------------------------------------------

// CargoPanel

// optional .SC2APIProtocol.UnitInfo unit = 1;
inline bool CargoPanel::has_unit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CargoPanel::set_has_unit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CargoPanel::clear_has_unit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CargoPanel::clear_unit() {
  if (unit_ != NULL) unit_->::SC2APIProtocol::UnitInfo::Clear();
  clear_has_unit();
}
inline const ::SC2APIProtocol::UnitInfo& CargoPanel::unit() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CargoPanel.unit)
  return unit_ != NULL ? *unit_ : *default_instance_->unit_;
}
inline ::SC2APIProtocol::UnitInfo* CargoPanel::mutable_unit() {
  set_has_unit();
  if (unit_ == NULL) {
    unit_ = new ::SC2APIProtocol::UnitInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.CargoPanel.unit)
  return unit_;
}
inline ::SC2APIProtocol::UnitInfo* CargoPanel::release_unit() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.CargoPanel.unit)
  clear_has_unit();
  ::SC2APIProtocol::UnitInfo* temp = unit_;
  unit_ = NULL;
  return temp;
}
inline void CargoPanel::set_allocated_unit(::SC2APIProtocol::UnitInfo* unit) {
  delete unit_;
  unit_ = unit;
  if (unit) {
    set_has_unit();
  } else {
    clear_has_unit();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.CargoPanel.unit)
}

// repeated .SC2APIProtocol.UnitInfo passengers = 2;
inline int CargoPanel::passengers_size() const {
  return passengers_.size();
}
inline void CargoPanel::clear_passengers() {
  passengers_.Clear();
}
inline const ::SC2APIProtocol::UnitInfo& CargoPanel::passengers(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CargoPanel.passengers)
  return passengers_.Get(index);
}
inline ::SC2APIProtocol::UnitInfo* CargoPanel::mutable_passengers(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.CargoPanel.passengers)
  return passengers_.Mutable(index);
}
inline ::SC2APIProtocol::UnitInfo* CargoPanel::add_passengers() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.CargoPanel.passengers)
  return passengers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo >*
CargoPanel::mutable_passengers() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.CargoPanel.passengers)
  return &passengers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo >&
CargoPanel::passengers() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.CargoPanel.passengers)
  return passengers_;
}

// optional int32 slots_available = 3;
inline bool CargoPanel::has_slots_available() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CargoPanel::set_has_slots_available() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CargoPanel::clear_has_slots_available() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CargoPanel::clear_slots_available() {
  slots_available_ = 0;
  clear_has_slots_available();
}
inline ::google::protobuf::int32 CargoPanel::slots_available() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CargoPanel.slots_available)
  return slots_available_;
}
inline void CargoPanel::set_slots_available(::google::protobuf::int32 value) {
  set_has_slots_available();
  slots_available_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.CargoPanel.slots_available)
}

// -------------------------------------------------------------------

// ProductionPanel

// optional .SC2APIProtocol.UnitInfo unit = 1;
inline bool ProductionPanel::has_unit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProductionPanel::set_has_unit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProductionPanel::clear_has_unit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProductionPanel::clear_unit() {
  if (unit_ != NULL) unit_->::SC2APIProtocol::UnitInfo::Clear();
  clear_has_unit();
}
inline const ::SC2APIProtocol::UnitInfo& ProductionPanel::unit() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ProductionPanel.unit)
  return unit_ != NULL ? *unit_ : *default_instance_->unit_;
}
inline ::SC2APIProtocol::UnitInfo* ProductionPanel::mutable_unit() {
  set_has_unit();
  if (unit_ == NULL) {
    unit_ = new ::SC2APIProtocol::UnitInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ProductionPanel.unit)
  return unit_;
}
inline ::SC2APIProtocol::UnitInfo* ProductionPanel::release_unit() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ProductionPanel.unit)
  clear_has_unit();
  ::SC2APIProtocol::UnitInfo* temp = unit_;
  unit_ = NULL;
  return temp;
}
inline void ProductionPanel::set_allocated_unit(::SC2APIProtocol::UnitInfo* unit) {
  delete unit_;
  unit_ = unit;
  if (unit) {
    set_has_unit();
  } else {
    clear_has_unit();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ProductionPanel.unit)
}

// repeated .SC2APIProtocol.UnitInfo build_queue = 2;
inline int ProductionPanel::build_queue_size() const {
  return build_queue_.size();
}
inline void ProductionPanel::clear_build_queue() {
  build_queue_.Clear();
}
inline const ::SC2APIProtocol::UnitInfo& ProductionPanel::build_queue(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ProductionPanel.build_queue)
  return build_queue_.Get(index);
}
inline ::SC2APIProtocol::UnitInfo* ProductionPanel::mutable_build_queue(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ProductionPanel.build_queue)
  return build_queue_.Mutable(index);
}
inline ::SC2APIProtocol::UnitInfo* ProductionPanel::add_build_queue() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ProductionPanel.build_queue)
  return build_queue_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo >*
ProductionPanel::mutable_build_queue() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ProductionPanel.build_queue)
  return &build_queue_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo >&
ProductionPanel::build_queue() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ProductionPanel.build_queue)
  return build_queue_;
}

// -------------------------------------------------------------------

// ActionUI

// optional .SC2APIProtocol.ActionControlGroup control_group = 1;
inline bool ActionUI::has_control_group() const {
  return action_case() == kControlGroup;
}
inline void ActionUI::set_has_control_group() {
  _oneof_case_[0] = kControlGroup;
}
inline void ActionUI::clear_control_group() {
  if (has_control_group()) {
    delete action_.control_group_;
    clear_has_action();
  }
}
inline  const ::SC2APIProtocol::ActionControlGroup& ActionUI::control_group() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionUI.control_group)
  return has_control_group()
      ? *action_.control_group_
      : ::SC2APIProtocol::ActionControlGroup::default_instance();
}
inline ::SC2APIProtocol::ActionControlGroup* ActionUI::mutable_control_group() {
  if (!has_control_group()) {
    clear_action();
    set_has_control_group();
    action_.control_group_ = new ::SC2APIProtocol::ActionControlGroup;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionUI.control_group)
  return action_.control_group_;
}
inline ::SC2APIProtocol::ActionControlGroup* ActionUI::release_control_group() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionUI.control_group)
  if (has_control_group()) {
    clear_has_action();
    ::SC2APIProtocol::ActionControlGroup* temp = action_.control_group_;
    action_.control_group_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ActionUI::set_allocated_control_group(::SC2APIProtocol::ActionControlGroup* control_group) {
  clear_action();
  if (control_group) {
    set_has_control_group();
    action_.control_group_ = control_group;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.control_group)
}

// optional .SC2APIProtocol.ActionSelectArmy select_army = 2;
inline bool ActionUI::has_select_army() const {
  return action_case() == kSelectArmy;
}
inline void ActionUI::set_has_select_army() {
  _oneof_case_[0] = kSelectArmy;
}
inline void ActionUI::clear_select_army() {
  if (has_select_army()) {
    delete action_.select_army_;
    clear_has_action();
  }
}
inline  const ::SC2APIProtocol::ActionSelectArmy& ActionUI::select_army() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionUI.select_army)
  return has_select_army()
      ? *action_.select_army_
      : ::SC2APIProtocol::ActionSelectArmy::default_instance();
}
inline ::SC2APIProtocol::ActionSelectArmy* ActionUI::mutable_select_army() {
  if (!has_select_army()) {
    clear_action();
    set_has_select_army();
    action_.select_army_ = new ::SC2APIProtocol::ActionSelectArmy;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionUI.select_army)
  return action_.select_army_;
}
inline ::SC2APIProtocol::ActionSelectArmy* ActionUI::release_select_army() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionUI.select_army)
  if (has_select_army()) {
    clear_has_action();
    ::SC2APIProtocol::ActionSelectArmy* temp = action_.select_army_;
    action_.select_army_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ActionUI::set_allocated_select_army(::SC2APIProtocol::ActionSelectArmy* select_army) {
  clear_action();
  if (select_army) {
    set_has_select_army();
    action_.select_army_ = select_army;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.select_army)
}

// optional .SC2APIProtocol.ActionSelectWarpGates select_warp_gates = 3;
inline bool ActionUI::has_select_warp_gates() const {
  return action_case() == kSelectWarpGates;
}
inline void ActionUI::set_has_select_warp_gates() {
  _oneof_case_[0] = kSelectWarpGates;
}
inline void ActionUI::clear_select_warp_gates() {
  if (has_select_warp_gates()) {
    delete action_.select_warp_gates_;
    clear_has_action();
  }
}
inline  const ::SC2APIProtocol::ActionSelectWarpGates& ActionUI::select_warp_gates() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionUI.select_warp_gates)
  return has_select_warp_gates()
      ? *action_.select_warp_gates_
      : ::SC2APIProtocol::ActionSelectWarpGates::default_instance();
}
inline ::SC2APIProtocol::ActionSelectWarpGates* ActionUI::mutable_select_warp_gates() {
  if (!has_select_warp_gates()) {
    clear_action();
    set_has_select_warp_gates();
    action_.select_warp_gates_ = new ::SC2APIProtocol::ActionSelectWarpGates;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionUI.select_warp_gates)
  return action_.select_warp_gates_;
}
inline ::SC2APIProtocol::ActionSelectWarpGates* ActionUI::release_select_warp_gates() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionUI.select_warp_gates)
  if (has_select_warp_gates()) {
    clear_has_action();
    ::SC2APIProtocol::ActionSelectWarpGates* temp = action_.select_warp_gates_;
    action_.select_warp_gates_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ActionUI::set_allocated_select_warp_gates(::SC2APIProtocol::ActionSelectWarpGates* select_warp_gates) {
  clear_action();
  if (select_warp_gates) {
    set_has_select_warp_gates();
    action_.select_warp_gates_ = select_warp_gates;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.select_warp_gates)
}

// optional .SC2APIProtocol.ActionSelectLarva select_larva = 4;
inline bool ActionUI::has_select_larva() const {
  return action_case() == kSelectLarva;
}
inline void ActionUI::set_has_select_larva() {
  _oneof_case_[0] = kSelectLarva;
}
inline void ActionUI::clear_select_larva() {
  if (has_select_larva()) {
    delete action_.select_larva_;
    clear_has_action();
  }
}
inline  const ::SC2APIProtocol::ActionSelectLarva& ActionUI::select_larva() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionUI.select_larva)
  return has_select_larva()
      ? *action_.select_larva_
      : ::SC2APIProtocol::ActionSelectLarva::default_instance();
}
inline ::SC2APIProtocol::ActionSelectLarva* ActionUI::mutable_select_larva() {
  if (!has_select_larva()) {
    clear_action();
    set_has_select_larva();
    action_.select_larva_ = new ::SC2APIProtocol::ActionSelectLarva;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionUI.select_larva)
  return action_.select_larva_;
}
inline ::SC2APIProtocol::ActionSelectLarva* ActionUI::release_select_larva() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionUI.select_larva)
  if (has_select_larva()) {
    clear_has_action();
    ::SC2APIProtocol::ActionSelectLarva* temp = action_.select_larva_;
    action_.select_larva_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ActionUI::set_allocated_select_larva(::SC2APIProtocol::ActionSelectLarva* select_larva) {
  clear_action();
  if (select_larva) {
    set_has_select_larva();
    action_.select_larva_ = select_larva;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.select_larva)
}

// optional .SC2APIProtocol.ActionSelectIdleWorker select_idle_worker = 5;
inline bool ActionUI::has_select_idle_worker() const {
  return action_case() == kSelectIdleWorker;
}
inline void ActionUI::set_has_select_idle_worker() {
  _oneof_case_[0] = kSelectIdleWorker;
}
inline void ActionUI::clear_select_idle_worker() {
  if (has_select_idle_worker()) {
    delete action_.select_idle_worker_;
    clear_has_action();
  }
}
inline  const ::SC2APIProtocol::ActionSelectIdleWorker& ActionUI::select_idle_worker() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionUI.select_idle_worker)
  return has_select_idle_worker()
      ? *action_.select_idle_worker_
      : ::SC2APIProtocol::ActionSelectIdleWorker::default_instance();
}
inline ::SC2APIProtocol::ActionSelectIdleWorker* ActionUI::mutable_select_idle_worker() {
  if (!has_select_idle_worker()) {
    clear_action();
    set_has_select_idle_worker();
    action_.select_idle_worker_ = new ::SC2APIProtocol::ActionSelectIdleWorker;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionUI.select_idle_worker)
  return action_.select_idle_worker_;
}
inline ::SC2APIProtocol::ActionSelectIdleWorker* ActionUI::release_select_idle_worker() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionUI.select_idle_worker)
  if (has_select_idle_worker()) {
    clear_has_action();
    ::SC2APIProtocol::ActionSelectIdleWorker* temp = action_.select_idle_worker_;
    action_.select_idle_worker_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ActionUI::set_allocated_select_idle_worker(::SC2APIProtocol::ActionSelectIdleWorker* select_idle_worker) {
  clear_action();
  if (select_idle_worker) {
    set_has_select_idle_worker();
    action_.select_idle_worker_ = select_idle_worker;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.select_idle_worker)
}

// optional .SC2APIProtocol.ActionMultiPanel multi_panel = 6;
inline bool ActionUI::has_multi_panel() const {
  return action_case() == kMultiPanel;
}
inline void ActionUI::set_has_multi_panel() {
  _oneof_case_[0] = kMultiPanel;
}
inline void ActionUI::clear_multi_panel() {
  if (has_multi_panel()) {
    delete action_.multi_panel_;
    clear_has_action();
  }
}
inline  const ::SC2APIProtocol::ActionMultiPanel& ActionUI::multi_panel() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionUI.multi_panel)
  return has_multi_panel()
      ? *action_.multi_panel_
      : ::SC2APIProtocol::ActionMultiPanel::default_instance();
}
inline ::SC2APIProtocol::ActionMultiPanel* ActionUI::mutable_multi_panel() {
  if (!has_multi_panel()) {
    clear_action();
    set_has_multi_panel();
    action_.multi_panel_ = new ::SC2APIProtocol::ActionMultiPanel;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionUI.multi_panel)
  return action_.multi_panel_;
}
inline ::SC2APIProtocol::ActionMultiPanel* ActionUI::release_multi_panel() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionUI.multi_panel)
  if (has_multi_panel()) {
    clear_has_action();
    ::SC2APIProtocol::ActionMultiPanel* temp = action_.multi_panel_;
    action_.multi_panel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ActionUI::set_allocated_multi_panel(::SC2APIProtocol::ActionMultiPanel* multi_panel) {
  clear_action();
  if (multi_panel) {
    set_has_multi_panel();
    action_.multi_panel_ = multi_panel;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.multi_panel)
}

// optional .SC2APIProtocol.ActionCargoPanelUnload cargo_panel = 7;
inline bool ActionUI::has_cargo_panel() const {
  return action_case() == kCargoPanel;
}
inline void ActionUI::set_has_cargo_panel() {
  _oneof_case_[0] = kCargoPanel;
}
inline void ActionUI::clear_cargo_panel() {
  if (has_cargo_panel()) {
    delete action_.cargo_panel_;
    clear_has_action();
  }
}
inline  const ::SC2APIProtocol::ActionCargoPanelUnload& ActionUI::cargo_panel() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionUI.cargo_panel)
  return has_cargo_panel()
      ? *action_.cargo_panel_
      : ::SC2APIProtocol::ActionCargoPanelUnload::default_instance();
}
inline ::SC2APIProtocol::ActionCargoPanelUnload* ActionUI::mutable_cargo_panel() {
  if (!has_cargo_panel()) {
    clear_action();
    set_has_cargo_panel();
    action_.cargo_panel_ = new ::SC2APIProtocol::ActionCargoPanelUnload;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionUI.cargo_panel)
  return action_.cargo_panel_;
}
inline ::SC2APIProtocol::ActionCargoPanelUnload* ActionUI::release_cargo_panel() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionUI.cargo_panel)
  if (has_cargo_panel()) {
    clear_has_action();
    ::SC2APIProtocol::ActionCargoPanelUnload* temp = action_.cargo_panel_;
    action_.cargo_panel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ActionUI::set_allocated_cargo_panel(::SC2APIProtocol::ActionCargoPanelUnload* cargo_panel) {
  clear_action();
  if (cargo_panel) {
    set_has_cargo_panel();
    action_.cargo_panel_ = cargo_panel;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.cargo_panel)
}

// optional .SC2APIProtocol.ActionProductionPanelRemoveFromQueue production_panel = 8;
inline bool ActionUI::has_production_panel() const {
  return action_case() == kProductionPanel;
}
inline void ActionUI::set_has_production_panel() {
  _oneof_case_[0] = kProductionPanel;
}
inline void ActionUI::clear_production_panel() {
  if (has_production_panel()) {
    delete action_.production_panel_;
    clear_has_action();
  }
}
inline  const ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue& ActionUI::production_panel() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionUI.production_panel)
  return has_production_panel()
      ? *action_.production_panel_
      : ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue::default_instance();
}
inline ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue* ActionUI::mutable_production_panel() {
  if (!has_production_panel()) {
    clear_action();
    set_has_production_panel();
    action_.production_panel_ = new ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionUI.production_panel)
  return action_.production_panel_;
}
inline ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue* ActionUI::release_production_panel() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionUI.production_panel)
  if (has_production_panel()) {
    clear_has_action();
    ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue* temp = action_.production_panel_;
    action_.production_panel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ActionUI::set_allocated_production_panel(::SC2APIProtocol::ActionProductionPanelRemoveFromQueue* production_panel) {
  clear_action();
  if (production_panel) {
    set_has_production_panel();
    action_.production_panel_ = production_panel;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.production_panel)
}

// optional .SC2APIProtocol.ActionToggleAutocast toggle_autocast = 9;
inline bool ActionUI::has_toggle_autocast() const {
  return action_case() == kToggleAutocast;
}
inline void ActionUI::set_has_toggle_autocast() {
  _oneof_case_[0] = kToggleAutocast;
}
inline void ActionUI::clear_toggle_autocast() {
  if (has_toggle_autocast()) {
    delete action_.toggle_autocast_;
    clear_has_action();
  }
}
inline  const ::SC2APIProtocol::ActionToggleAutocast& ActionUI::toggle_autocast() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionUI.toggle_autocast)
  return has_toggle_autocast()
      ? *action_.toggle_autocast_
      : ::SC2APIProtocol::ActionToggleAutocast::default_instance();
}
inline ::SC2APIProtocol::ActionToggleAutocast* ActionUI::mutable_toggle_autocast() {
  if (!has_toggle_autocast()) {
    clear_action();
    set_has_toggle_autocast();
    action_.toggle_autocast_ = new ::SC2APIProtocol::ActionToggleAutocast;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionUI.toggle_autocast)
  return action_.toggle_autocast_;
}
inline ::SC2APIProtocol::ActionToggleAutocast* ActionUI::release_toggle_autocast() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionUI.toggle_autocast)
  if (has_toggle_autocast()) {
    clear_has_action();
    ::SC2APIProtocol::ActionToggleAutocast* temp = action_.toggle_autocast_;
    action_.toggle_autocast_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ActionUI::set_allocated_toggle_autocast(::SC2APIProtocol::ActionToggleAutocast* toggle_autocast) {
  clear_action();
  if (toggle_autocast) {
    set_has_toggle_autocast();
    action_.toggle_autocast_ = toggle_autocast;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.toggle_autocast)
}

inline bool ActionUI::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void ActionUI::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline ActionUI::ActionCase ActionUI::action_case() const {
  return ActionUI::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ActionControlGroup

// optional .SC2APIProtocol.ActionControlGroup.ControlGroupAction action = 1;
inline bool ActionControlGroup::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionControlGroup::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionControlGroup::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionControlGroup::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::SC2APIProtocol::ActionControlGroup_ControlGroupAction ActionControlGroup::action() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionControlGroup.action)
  return static_cast< ::SC2APIProtocol::ActionControlGroup_ControlGroupAction >(action_);
}
inline void ActionControlGroup::set_action(::SC2APIProtocol::ActionControlGroup_ControlGroupAction value) {
  assert(::SC2APIProtocol::ActionControlGroup_ControlGroupAction_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionControlGroup.action)
}

// optional uint32 control_group_index = 2;
inline bool ActionControlGroup::has_control_group_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionControlGroup::set_has_control_group_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionControlGroup::clear_has_control_group_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionControlGroup::clear_control_group_index() {
  control_group_index_ = 0u;
  clear_has_control_group_index();
}
inline ::google::protobuf::uint32 ActionControlGroup::control_group_index() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionControlGroup.control_group_index)
  return control_group_index_;
}
inline void ActionControlGroup::set_control_group_index(::google::protobuf::uint32 value) {
  set_has_control_group_index();
  control_group_index_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionControlGroup.control_group_index)
}

// -------------------------------------------------------------------

// ActionSelectArmy

// optional bool selection_add = 1;
inline bool ActionSelectArmy::has_selection_add() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionSelectArmy::set_has_selection_add() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionSelectArmy::clear_has_selection_add() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionSelectArmy::clear_selection_add() {
  selection_add_ = false;
  clear_has_selection_add();
}
inline bool ActionSelectArmy::selection_add() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionSelectArmy.selection_add)
  return selection_add_;
}
inline void ActionSelectArmy::set_selection_add(bool value) {
  set_has_selection_add();
  selection_add_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionSelectArmy.selection_add)
}

// -------------------------------------------------------------------

// ActionSelectWarpGates

// optional bool selection_add = 1;
inline bool ActionSelectWarpGates::has_selection_add() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionSelectWarpGates::set_has_selection_add() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionSelectWarpGates::clear_has_selection_add() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionSelectWarpGates::clear_selection_add() {
  selection_add_ = false;
  clear_has_selection_add();
}
inline bool ActionSelectWarpGates::selection_add() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionSelectWarpGates.selection_add)
  return selection_add_;
}
inline void ActionSelectWarpGates::set_selection_add(bool value) {
  set_has_selection_add();
  selection_add_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionSelectWarpGates.selection_add)
}

// -------------------------------------------------------------------

// ActionSelectLarva

// -------------------------------------------------------------------

// ActionSelectIdleWorker

// optional .SC2APIProtocol.ActionSelectIdleWorker.Type type = 1;
inline bool ActionSelectIdleWorker::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionSelectIdleWorker::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionSelectIdleWorker::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionSelectIdleWorker::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::SC2APIProtocol::ActionSelectIdleWorker_Type ActionSelectIdleWorker::type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionSelectIdleWorker.type)
  return static_cast< ::SC2APIProtocol::ActionSelectIdleWorker_Type >(type_);
}
inline void ActionSelectIdleWorker::set_type(::SC2APIProtocol::ActionSelectIdleWorker_Type value) {
  assert(::SC2APIProtocol::ActionSelectIdleWorker_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionSelectIdleWorker.type)
}

// -------------------------------------------------------------------

// ActionMultiPanel

// optional .SC2APIProtocol.ActionMultiPanel.Type type = 1;
inline bool ActionMultiPanel::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionMultiPanel::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionMultiPanel::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionMultiPanel::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::SC2APIProtocol::ActionMultiPanel_Type ActionMultiPanel::type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionMultiPanel.type)
  return static_cast< ::SC2APIProtocol::ActionMultiPanel_Type >(type_);
}
inline void ActionMultiPanel::set_type(::SC2APIProtocol::ActionMultiPanel_Type value) {
  assert(::SC2APIProtocol::ActionMultiPanel_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionMultiPanel.type)
}

// optional int32 unit_index = 2;
inline bool ActionMultiPanel::has_unit_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionMultiPanel::set_has_unit_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionMultiPanel::clear_has_unit_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionMultiPanel::clear_unit_index() {
  unit_index_ = 0;
  clear_has_unit_index();
}
inline ::google::protobuf::int32 ActionMultiPanel::unit_index() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionMultiPanel.unit_index)
  return unit_index_;
}
inline void ActionMultiPanel::set_unit_index(::google::protobuf::int32 value) {
  set_has_unit_index();
  unit_index_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionMultiPanel.unit_index)
}

// -------------------------------------------------------------------

// ActionCargoPanelUnload

// optional int32 unit_index = 1;
inline bool ActionCargoPanelUnload::has_unit_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionCargoPanelUnload::set_has_unit_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionCargoPanelUnload::clear_has_unit_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionCargoPanelUnload::clear_unit_index() {
  unit_index_ = 0;
  clear_has_unit_index();
}
inline ::google::protobuf::int32 ActionCargoPanelUnload::unit_index() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionCargoPanelUnload.unit_index)
  return unit_index_;
}
inline void ActionCargoPanelUnload::set_unit_index(::google::protobuf::int32 value) {
  set_has_unit_index();
  unit_index_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionCargoPanelUnload.unit_index)
}

// -------------------------------------------------------------------

// ActionProductionPanelRemoveFromQueue

// optional int32 unit_index = 1;
inline bool ActionProductionPanelRemoveFromQueue::has_unit_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionProductionPanelRemoveFromQueue::set_has_unit_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionProductionPanelRemoveFromQueue::clear_has_unit_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionProductionPanelRemoveFromQueue::clear_unit_index() {
  unit_index_ = 0;
  clear_has_unit_index();
}
inline ::google::protobuf::int32 ActionProductionPanelRemoveFromQueue::unit_index() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionProductionPanelRemoveFromQueue.unit_index)
  return unit_index_;
}
inline void ActionProductionPanelRemoveFromQueue::set_unit_index(::google::protobuf::int32 value) {
  set_has_unit_index();
  unit_index_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionProductionPanelRemoveFromQueue.unit_index)
}

// -------------------------------------------------------------------

// ActionToggleAutocast

// optional int32 ability_id = 1;
inline bool ActionToggleAutocast::has_ability_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionToggleAutocast::set_has_ability_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionToggleAutocast::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionToggleAutocast::clear_ability_id() {
  ability_id_ = 0;
  clear_has_ability_id();
}
inline ::google::protobuf::int32 ActionToggleAutocast::ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionToggleAutocast.ability_id)
  return ability_id_;
}
inline void ActionToggleAutocast::set_ability_id(::google::protobuf::int32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionToggleAutocast.ability_id)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SC2APIProtocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SC2APIProtocol::ActionControlGroup_ControlGroupAction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC2APIProtocol::ActionControlGroup_ControlGroupAction>() {
  return ::SC2APIProtocol::ActionControlGroup_ControlGroupAction_descriptor();
}
template <> struct is_proto_enum< ::SC2APIProtocol::ActionSelectIdleWorker_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC2APIProtocol::ActionSelectIdleWorker_Type>() {
  return ::SC2APIProtocol::ActionSelectIdleWorker_Type_descriptor();
}
template <> struct is_proto_enum< ::SC2APIProtocol::ActionMultiPanel_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC2APIProtocol::ActionMultiPanel_Type>() {
  return ::SC2APIProtocol::ActionMultiPanel_Type_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_s2clientprotocol_2fui_2eproto__INCLUDED
