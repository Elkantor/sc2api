// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/ui.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "s2clientprotocol/ui.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SC2APIProtocol {

namespace {

const ::google::protobuf::Descriptor* ObservationUI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObservationUI_reflection_ = NULL;
struct ObservationUIOneofInstance {
  const ::SC2APIProtocol::SinglePanel* single_;
  const ::SC2APIProtocol::MultiPanel* multi_;
  const ::SC2APIProtocol::CargoPanel* cargo_;
  const ::SC2APIProtocol::ProductionPanel* production_;
}* ObservationUI_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ControlGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ControlGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SinglePanel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SinglePanel_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiPanel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiPanel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CargoPanel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CargoPanel_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductionPanel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductionPanel_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionUI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionUI_reflection_ = NULL;
struct ActionUIOneofInstance {
  const ::SC2APIProtocol::ActionControlGroup* control_group_;
  const ::SC2APIProtocol::ActionSelectArmy* select_army_;
  const ::SC2APIProtocol::ActionSelectWarpGates* select_warp_gates_;
  const ::SC2APIProtocol::ActionSelectLarva* select_larva_;
  const ::SC2APIProtocol::ActionSelectIdleWorker* select_idle_worker_;
  const ::SC2APIProtocol::ActionMultiPanel* multi_panel_;
  const ::SC2APIProtocol::ActionCargoPanelUnload* cargo_panel_;
  const ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue* production_panel_;
  const ::SC2APIProtocol::ActionToggleAutocast* toggle_autocast_;
}* ActionUI_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ActionControlGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionControlGroup_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ActionControlGroup_ControlGroupAction_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ActionSelectArmy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionSelectArmy_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionSelectWarpGates_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionSelectWarpGates_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionSelectLarva_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionSelectLarva_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionSelectIdleWorker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionSelectIdleWorker_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ActionSelectIdleWorker_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ActionMultiPanel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionMultiPanel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ActionMultiPanel_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ActionCargoPanelUnload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionCargoPanelUnload_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionProductionPanelRemoveFromQueue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionProductionPanelRemoveFromQueue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionToggleAutocast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionToggleAutocast_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_s2clientprotocol_2fui_2eproto() {
  protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "s2clientprotocol/ui.proto");
  GOOGLE_CHECK(file != NULL);
  ObservationUI_descriptor_ = file->message_type(0);
  static const int ObservationUI_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationUI, groups_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObservationUI_default_oneof_instance_, single_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObservationUI_default_oneof_instance_, multi_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObservationUI_default_oneof_instance_, cargo_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ObservationUI_default_oneof_instance_, production_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationUI, panel_),
  };
  ObservationUI_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObservationUI_descriptor_,
      ObservationUI::default_instance_,
      ObservationUI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationUI, _has_bits_[0]),
      -1,
      -1,
      ObservationUI_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationUI, _oneof_case_[0]),
      sizeof(ObservationUI),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationUI, _internal_metadata_),
      -1);
  ControlGroup_descriptor_ = file->message_type(1);
  static const int ControlGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlGroup, control_group_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlGroup, leader_unit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlGroup, count_),
  };
  ControlGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ControlGroup_descriptor_,
      ControlGroup::default_instance_,
      ControlGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlGroup, _has_bits_[0]),
      -1,
      -1,
      sizeof(ControlGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlGroup, _internal_metadata_),
      -1);
  UnitInfo_descriptor_ = file->message_type(2);
  static const int UnitInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitInfo, unit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitInfo, player_relative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitInfo, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitInfo, shields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitInfo, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitInfo, transport_slots_taken_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitInfo, build_progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitInfo, add_on_),
  };
  UnitInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UnitInfo_descriptor_,
      UnitInfo::default_instance_,
      UnitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(UnitInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitInfo, _internal_metadata_),
      -1);
  SinglePanel_descriptor_ = file->message_type(3);
  static const int SinglePanel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePanel, unit_),
  };
  SinglePanel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SinglePanel_descriptor_,
      SinglePanel::default_instance_,
      SinglePanel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePanel, _has_bits_[0]),
      -1,
      -1,
      sizeof(SinglePanel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SinglePanel, _internal_metadata_),
      -1);
  MultiPanel_descriptor_ = file->message_type(4);
  static const int MultiPanel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiPanel, units_),
  };
  MultiPanel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiPanel_descriptor_,
      MultiPanel::default_instance_,
      MultiPanel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiPanel, _has_bits_[0]),
      -1,
      -1,
      sizeof(MultiPanel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiPanel, _internal_metadata_),
      -1);
  CargoPanel_descriptor_ = file->message_type(5);
  static const int CargoPanel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CargoPanel, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CargoPanel, passengers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CargoPanel, slots_available_),
  };
  CargoPanel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CargoPanel_descriptor_,
      CargoPanel::default_instance_,
      CargoPanel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CargoPanel, _has_bits_[0]),
      -1,
      -1,
      sizeof(CargoPanel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CargoPanel, _internal_metadata_),
      -1);
  ProductionPanel_descriptor_ = file->message_type(6);
  static const int ProductionPanel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductionPanel, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductionPanel, build_queue_),
  };
  ProductionPanel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProductionPanel_descriptor_,
      ProductionPanel::default_instance_,
      ProductionPanel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductionPanel, _has_bits_[0]),
      -1,
      -1,
      sizeof(ProductionPanel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductionPanel, _internal_metadata_),
      -1);
  ActionUI_descriptor_ = file->message_type(7);
  static const int ActionUI_offsets_[10] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionUI_default_oneof_instance_, control_group_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionUI_default_oneof_instance_, select_army_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionUI_default_oneof_instance_, select_warp_gates_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionUI_default_oneof_instance_, select_larva_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionUI_default_oneof_instance_, select_idle_worker_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionUI_default_oneof_instance_, multi_panel_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionUI_default_oneof_instance_, cargo_panel_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionUI_default_oneof_instance_, production_panel_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionUI_default_oneof_instance_, toggle_autocast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionUI, action_),
  };
  ActionUI_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionUI_descriptor_,
      ActionUI::default_instance_,
      ActionUI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionUI, _has_bits_[0]),
      -1,
      -1,
      ActionUI_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionUI, _oneof_case_[0]),
      sizeof(ActionUI),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionUI, _internal_metadata_),
      -1);
  ActionControlGroup_descriptor_ = file->message_type(8);
  static const int ActionControlGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionControlGroup, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionControlGroup, control_group_index_),
  };
  ActionControlGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionControlGroup_descriptor_,
      ActionControlGroup::default_instance_,
      ActionControlGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionControlGroup, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActionControlGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionControlGroup, _internal_metadata_),
      -1);
  ActionControlGroup_ControlGroupAction_descriptor_ = ActionControlGroup_descriptor_->enum_type(0);
  ActionSelectArmy_descriptor_ = file->message_type(9);
  static const int ActionSelectArmy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSelectArmy, selection_add_),
  };
  ActionSelectArmy_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionSelectArmy_descriptor_,
      ActionSelectArmy::default_instance_,
      ActionSelectArmy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSelectArmy, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActionSelectArmy),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSelectArmy, _internal_metadata_),
      -1);
  ActionSelectWarpGates_descriptor_ = file->message_type(10);
  static const int ActionSelectWarpGates_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSelectWarpGates, selection_add_),
  };
  ActionSelectWarpGates_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionSelectWarpGates_descriptor_,
      ActionSelectWarpGates::default_instance_,
      ActionSelectWarpGates_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSelectWarpGates, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActionSelectWarpGates),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSelectWarpGates, _internal_metadata_),
      -1);
  ActionSelectLarva_descriptor_ = file->message_type(11);
  static const int ActionSelectLarva_offsets_[1] = {
  };
  ActionSelectLarva_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionSelectLarva_descriptor_,
      ActionSelectLarva::default_instance_,
      ActionSelectLarva_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSelectLarva, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActionSelectLarva),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSelectLarva, _internal_metadata_),
      -1);
  ActionSelectIdleWorker_descriptor_ = file->message_type(12);
  static const int ActionSelectIdleWorker_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSelectIdleWorker, type_),
  };
  ActionSelectIdleWorker_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionSelectIdleWorker_descriptor_,
      ActionSelectIdleWorker::default_instance_,
      ActionSelectIdleWorker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSelectIdleWorker, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActionSelectIdleWorker),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSelectIdleWorker, _internal_metadata_),
      -1);
  ActionSelectIdleWorker_Type_descriptor_ = ActionSelectIdleWorker_descriptor_->enum_type(0);
  ActionMultiPanel_descriptor_ = file->message_type(13);
  static const int ActionMultiPanel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionMultiPanel, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionMultiPanel, unit_index_),
  };
  ActionMultiPanel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionMultiPanel_descriptor_,
      ActionMultiPanel::default_instance_,
      ActionMultiPanel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionMultiPanel, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActionMultiPanel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionMultiPanel, _internal_metadata_),
      -1);
  ActionMultiPanel_Type_descriptor_ = ActionMultiPanel_descriptor_->enum_type(0);
  ActionCargoPanelUnload_descriptor_ = file->message_type(14);
  static const int ActionCargoPanelUnload_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCargoPanelUnload, unit_index_),
  };
  ActionCargoPanelUnload_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionCargoPanelUnload_descriptor_,
      ActionCargoPanelUnload::default_instance_,
      ActionCargoPanelUnload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCargoPanelUnload, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActionCargoPanelUnload),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionCargoPanelUnload, _internal_metadata_),
      -1);
  ActionProductionPanelRemoveFromQueue_descriptor_ = file->message_type(15);
  static const int ActionProductionPanelRemoveFromQueue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProductionPanelRemoveFromQueue, unit_index_),
  };
  ActionProductionPanelRemoveFromQueue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionProductionPanelRemoveFromQueue_descriptor_,
      ActionProductionPanelRemoveFromQueue::default_instance_,
      ActionProductionPanelRemoveFromQueue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProductionPanelRemoveFromQueue, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActionProductionPanelRemoveFromQueue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionProductionPanelRemoveFromQueue, _internal_metadata_),
      -1);
  ActionToggleAutocast_descriptor_ = file->message_type(16);
  static const int ActionToggleAutocast_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionToggleAutocast, ability_id_),
  };
  ActionToggleAutocast_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionToggleAutocast_descriptor_,
      ActionToggleAutocast::default_instance_,
      ActionToggleAutocast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionToggleAutocast, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActionToggleAutocast),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionToggleAutocast, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_s2clientprotocol_2fui_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObservationUI_descriptor_, &ObservationUI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ControlGroup_descriptor_, &ControlGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UnitInfo_descriptor_, &UnitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SinglePanel_descriptor_, &SinglePanel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiPanel_descriptor_, &MultiPanel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CargoPanel_descriptor_, &CargoPanel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProductionPanel_descriptor_, &ProductionPanel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionUI_descriptor_, &ActionUI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionControlGroup_descriptor_, &ActionControlGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionSelectArmy_descriptor_, &ActionSelectArmy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionSelectWarpGates_descriptor_, &ActionSelectWarpGates::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionSelectLarva_descriptor_, &ActionSelectLarva::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionSelectIdleWorker_descriptor_, &ActionSelectIdleWorker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionMultiPanel_descriptor_, &ActionMultiPanel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionCargoPanelUnload_descriptor_, &ActionCargoPanelUnload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionProductionPanelRemoveFromQueue_descriptor_, &ActionProductionPanelRemoveFromQueue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionToggleAutocast_descriptor_, &ActionToggleAutocast::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto() {
  delete ObservationUI::default_instance_;
  delete ObservationUI_default_oneof_instance_;
  delete ObservationUI_reflection_;
  delete ControlGroup::default_instance_;
  delete ControlGroup_reflection_;
  delete UnitInfo::default_instance_;
  delete UnitInfo_reflection_;
  delete SinglePanel::default_instance_;
  delete SinglePanel_reflection_;
  delete MultiPanel::default_instance_;
  delete MultiPanel_reflection_;
  delete CargoPanel::default_instance_;
  delete CargoPanel_reflection_;
  delete ProductionPanel::default_instance_;
  delete ProductionPanel_reflection_;
  delete ActionUI::default_instance_;
  delete ActionUI_default_oneof_instance_;
  delete ActionUI_reflection_;
  delete ActionControlGroup::default_instance_;
  delete ActionControlGroup_reflection_;
  delete ActionSelectArmy::default_instance_;
  delete ActionSelectArmy_reflection_;
  delete ActionSelectWarpGates::default_instance_;
  delete ActionSelectWarpGates_reflection_;
  delete ActionSelectLarva::default_instance_;
  delete ActionSelectLarva_reflection_;
  delete ActionSelectIdleWorker::default_instance_;
  delete ActionSelectIdleWorker_reflection_;
  delete ActionMultiPanel::default_instance_;
  delete ActionMultiPanel_reflection_;
  delete ActionCargoPanelUnload::default_instance_;
  delete ActionCargoPanelUnload_reflection_;
  delete ActionProductionPanelRemoveFromQueue::default_instance_;
  delete ActionProductionPanelRemoveFromQueue_reflection_;
  delete ActionToggleAutocast::default_instance_;
  delete ActionToggleAutocast_reflection_;
}

void protobuf_AddDesc_s2clientprotocol_2fui_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_s2clientprotocol_2fui_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031s2clientprotocol/ui.proto\022\016SC2APIProto"
    "col\"\206\002\n\rObservationUI\022,\n\006groups\030\001 \003(\0132\034."
    "SC2APIProtocol.ControlGroup\022-\n\006single\030\002 "
    "\001(\0132\033.SC2APIProtocol.SinglePanelH\000\022+\n\005mu"
    "lti\030\003 \001(\0132\032.SC2APIProtocol.MultiPanelH\000\022"
    "+\n\005cargo\030\004 \001(\0132\032.SC2APIProtocol.CargoPan"
    "elH\000\0225\n\nproduction\030\005 \001(\0132\037.SC2APIProtoco"
    "l.ProductionPanelH\000B\007\n\005panel\"T\n\014ControlG"
    "roup\022\033\n\023control_group_index\030\001 \001(\r\022\030\n\020lea"
    "der_unit_type\030\002 \001(\r\022\r\n\005count\030\003 \001(\r\"\310\001\n\010U"
    "nitInfo\022\021\n\tunit_type\030\001 \001(\r\022\027\n\017player_rel"
    "ative\030\002 \001(\r\022\016\n\006health\030\003 \001(\005\022\017\n\007shields\030\004"
    " \001(\005\022\016\n\006energy\030\005 \001(\005\022\035\n\025transport_slots_"
    "taken\030\006 \001(\005\022\026\n\016build_progress\030\007 \001(\002\022(\n\006a"
    "dd_on\030\010 \001(\0132\030.SC2APIProtocol.UnitInfo\"5\n"
    "\013SinglePanel\022&\n\004unit\030\001 \001(\0132\030.SC2APIProto"
    "col.UnitInfo\"5\n\nMultiPanel\022\'\n\005units\030\001 \003("
    "\0132\030.SC2APIProtocol.UnitInfo\"{\n\nCargoPane"
    "l\022&\n\004unit\030\001 \001(\0132\030.SC2APIProtocol.UnitInf"
    "o\022,\n\npassengers\030\002 \003(\0132\030.SC2APIProtocol.U"
    "nitInfo\022\027\n\017slots_available\030\003 \001(\005\"h\n\017Prod"
    "uctionPanel\022&\n\004unit\030\001 \001(\0132\030.SC2APIProtoc"
    "ol.UnitInfo\022-\n\013build_queue\030\002 \003(\0132\030.SC2AP"
    "IProtocol.UnitInfo\"\332\004\n\010ActionUI\022;\n\rcontr"
    "ol_group\030\001 \001(\0132\".SC2APIProtocol.ActionCo"
    "ntrolGroupH\000\0227\n\013select_army\030\002 \001(\0132 .SC2A"
    "PIProtocol.ActionSelectArmyH\000\022B\n\021select_"
    "warp_gates\030\003 \001(\0132%.SC2APIProtocol.Action"
    "SelectWarpGatesH\000\0229\n\014select_larva\030\004 \001(\0132"
    "!.SC2APIProtocol.ActionSelectLarvaH\000\022D\n\022"
    "select_idle_worker\030\005 \001(\0132&.SC2APIProtoco"
    "l.ActionSelectIdleWorkerH\000\0227\n\013multi_pane"
    "l\030\006 \001(\0132 .SC2APIProtocol.ActionMultiPane"
    "lH\000\022=\n\013cargo_panel\030\007 \001(\0132&.SC2APIProtoco"
    "l.ActionCargoPanelUnloadH\000\022P\n\020production"
    "_panel\030\010 \001(\01324.SC2APIProtocol.ActionProd"
    "uctionPanelRemoveFromQueueH\000\022\?\n\017toggle_a"
    "utocast\030\t \001(\0132$.SC2APIProtocol.ActionTog"
    "gleAutocastH\000B\010\n\006action\"\324\001\n\022ActionContro"
    "lGroup\022E\n\006action\030\001 \001(\01625.SC2APIProtocol."
    "ActionControlGroup.ControlGroupAction\022\033\n"
    "\023control_group_index\030\002 \001(\r\"Z\n\022ControlGro"
    "upAction\022\n\n\006Recall\020\001\022\007\n\003Set\020\002\022\n\n\006Append\020"
    "\003\022\017\n\013SetAndSteal\020\004\022\022\n\016AppendAndSteal\020\005\")"
    "\n\020ActionSelectArmy\022\025\n\rselection_add\030\001 \001("
    "\010\".\n\025ActionSelectWarpGates\022\025\n\rselection_"
    "add\030\001 \001(\010\"\023\n\021ActionSelectLarva\"\202\001\n\026Actio"
    "nSelectIdleWorker\0229\n\004type\030\001 \001(\0162+.SC2API"
    "Protocol.ActionSelectIdleWorker.Type\"-\n\004"
    "Type\022\007\n\003Set\020\001\022\007\n\003Add\020\002\022\007\n\003All\020\003\022\n\n\006AddAl"
    "l\020\004\"\263\001\n\020ActionMultiPanel\0223\n\004type\030\001 \001(\0162%"
    ".SC2APIProtocol.ActionMultiPanel.Type\022\022\n"
    "\nunit_index\030\002 \001(\005\"V\n\004Type\022\020\n\014SingleSelec"
    "t\020\001\022\020\n\014DeselectUnit\020\002\022\023\n\017SelectAllOfType"
    "\020\003\022\025\n\021DeselectAllOfType\020\004\",\n\026ActionCargo"
    "PanelUnload\022\022\n\nunit_index\030\001 \001(\005\":\n$Actio"
    "nProductionPanelRemoveFromQueue\022\022\n\nunit_"
    "index\030\001 \001(\005\"*\n\024ActionToggleAutocast\022\022\n\na"
    "bility_id\030\001 \001(\005", 2335);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "s2clientprotocol/ui.proto", &protobuf_RegisterTypes);
  ObservationUI::default_instance_ = new ObservationUI();
  ObservationUI_default_oneof_instance_ = new ObservationUIOneofInstance();
  ControlGroup::default_instance_ = new ControlGroup();
  UnitInfo::default_instance_ = new UnitInfo();
  SinglePanel::default_instance_ = new SinglePanel();
  MultiPanel::default_instance_ = new MultiPanel();
  CargoPanel::default_instance_ = new CargoPanel();
  ProductionPanel::default_instance_ = new ProductionPanel();
  ActionUI::default_instance_ = new ActionUI();
  ActionUI_default_oneof_instance_ = new ActionUIOneofInstance();
  ActionControlGroup::default_instance_ = new ActionControlGroup();
  ActionSelectArmy::default_instance_ = new ActionSelectArmy();
  ActionSelectWarpGates::default_instance_ = new ActionSelectWarpGates();
  ActionSelectLarva::default_instance_ = new ActionSelectLarva();
  ActionSelectIdleWorker::default_instance_ = new ActionSelectIdleWorker();
  ActionMultiPanel::default_instance_ = new ActionMultiPanel();
  ActionCargoPanelUnload::default_instance_ = new ActionCargoPanelUnload();
  ActionProductionPanelRemoveFromQueue::default_instance_ = new ActionProductionPanelRemoveFromQueue();
  ActionToggleAutocast::default_instance_ = new ActionToggleAutocast();
  ObservationUI::default_instance_->InitAsDefaultInstance();
  ControlGroup::default_instance_->InitAsDefaultInstance();
  UnitInfo::default_instance_->InitAsDefaultInstance();
  SinglePanel::default_instance_->InitAsDefaultInstance();
  MultiPanel::default_instance_->InitAsDefaultInstance();
  CargoPanel::default_instance_->InitAsDefaultInstance();
  ProductionPanel::default_instance_->InitAsDefaultInstance();
  ActionUI::default_instance_->InitAsDefaultInstance();
  ActionControlGroup::default_instance_->InitAsDefaultInstance();
  ActionSelectArmy::default_instance_->InitAsDefaultInstance();
  ActionSelectWarpGates::default_instance_->InitAsDefaultInstance();
  ActionSelectLarva::default_instance_->InitAsDefaultInstance();
  ActionSelectIdleWorker::default_instance_->InitAsDefaultInstance();
  ActionMultiPanel::default_instance_->InitAsDefaultInstance();
  ActionCargoPanelUnload::default_instance_->InitAsDefaultInstance();
  ActionProductionPanelRemoveFromQueue::default_instance_->InitAsDefaultInstance();
  ActionToggleAutocast::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_s2clientprotocol_2fui_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_s2clientprotocol_2fui_2eproto {
  StaticDescriptorInitializer_s2clientprotocol_2fui_2eproto() {
    protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  }
} static_descriptor_initializer_s2clientprotocol_2fui_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObservationUI::kGroupsFieldNumber;
const int ObservationUI::kSingleFieldNumber;
const int ObservationUI::kMultiFieldNumber;
const int ObservationUI::kCargoFieldNumber;
const int ObservationUI::kProductionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObservationUI::ObservationUI()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ObservationUI)
}

void ObservationUI::InitAsDefaultInstance() {
  ObservationUI_default_oneof_instance_->single_ = const_cast< ::SC2APIProtocol::SinglePanel*>(&::SC2APIProtocol::SinglePanel::default_instance());
  ObservationUI_default_oneof_instance_->multi_ = const_cast< ::SC2APIProtocol::MultiPanel*>(&::SC2APIProtocol::MultiPanel::default_instance());
  ObservationUI_default_oneof_instance_->cargo_ = const_cast< ::SC2APIProtocol::CargoPanel*>(&::SC2APIProtocol::CargoPanel::default_instance());
  ObservationUI_default_oneof_instance_->production_ = const_cast< ::SC2APIProtocol::ProductionPanel*>(&::SC2APIProtocol::ProductionPanel::default_instance());
}

ObservationUI::ObservationUI(const ObservationUI& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ObservationUI)
}

void ObservationUI::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_panel();
}

ObservationUI::~ObservationUI() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ObservationUI)
  SharedDtor();
}

void ObservationUI::SharedDtor() {
  if (has_panel()) {
    clear_panel();
  }
  if (this != default_instance_) {
  }
}

void ObservationUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObservationUI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObservationUI_descriptor_;
}

const ObservationUI& ObservationUI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  return *default_instance_;
}

ObservationUI* ObservationUI::default_instance_ = NULL;

ObservationUI* ObservationUI::New(::google::protobuf::Arena* arena) const {
  ObservationUI* n = new ObservationUI;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObservationUI::clear_panel() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.ObservationUI)
  switch(panel_case()) {
    case kSingle: {
      delete panel_.single_;
      break;
    }
    case kMulti: {
      delete panel_.multi_;
      break;
    }
    case kCargo: {
      delete panel_.cargo_;
      break;
    }
    case kProduction: {
      delete panel_.production_;
      break;
    }
    case PANEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PANEL_NOT_SET;
}


void ObservationUI::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ObservationUI)
  groups_.Clear();
  clear_panel();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObservationUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ObservationUI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC2APIProtocol.ControlGroup groups = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_groups;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(18)) goto parse_single;
        break;
      }

      // optional .SC2APIProtocol.SinglePanel single = 2;
      case 2: {
        if (tag == 18) {
         parse_single:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_single()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_multi;
        break;
      }

      // optional .SC2APIProtocol.MultiPanel multi = 3;
      case 3: {
        if (tag == 26) {
         parse_multi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_cargo;
        break;
      }

      // optional .SC2APIProtocol.CargoPanel cargo = 4;
      case 4: {
        if (tag == 34) {
         parse_cargo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cargo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_production;
        break;
      }

      // optional .SC2APIProtocol.ProductionPanel production = 5;
      case 5: {
        if (tag == 42) {
         parse_production:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_production()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ObservationUI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ObservationUI)
  return false;
#undef DO_
}

void ObservationUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ObservationUI)
  // repeated .SC2APIProtocol.ControlGroup groups = 1;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->groups(i), output);
  }

  // optional .SC2APIProtocol.SinglePanel single = 2;
  if (has_single()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *panel_.single_, output);
  }

  // optional .SC2APIProtocol.MultiPanel multi = 3;
  if (has_multi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *panel_.multi_, output);
  }

  // optional .SC2APIProtocol.CargoPanel cargo = 4;
  if (has_cargo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *panel_.cargo_, output);
  }

  // optional .SC2APIProtocol.ProductionPanel production = 5;
  if (has_production()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *panel_.production_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ObservationUI)
}

::google::protobuf::uint8* ObservationUI::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ObservationUI)
  // repeated .SC2APIProtocol.ControlGroup groups = 1;
  for (unsigned int i = 0, n = this->groups_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->groups(i), false, target);
  }

  // optional .SC2APIProtocol.SinglePanel single = 2;
  if (has_single()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *panel_.single_, false, target);
  }

  // optional .SC2APIProtocol.MultiPanel multi = 3;
  if (has_multi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *panel_.multi_, false, target);
  }

  // optional .SC2APIProtocol.CargoPanel cargo = 4;
  if (has_cargo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *panel_.cargo_, false, target);
  }

  // optional .SC2APIProtocol.ProductionPanel production = 5;
  if (has_production()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *panel_.production_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ObservationUI)
  return target;
}

int ObservationUI::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ObservationUI)
  int total_size = 0;

  // repeated .SC2APIProtocol.ControlGroup groups = 1;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }

  switch (panel_case()) {
    // optional .SC2APIProtocol.SinglePanel single = 2;
    case kSingle: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *panel_.single_);
      break;
    }
    // optional .SC2APIProtocol.MultiPanel multi = 3;
    case kMulti: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *panel_.multi_);
      break;
    }
    // optional .SC2APIProtocol.CargoPanel cargo = 4;
    case kCargo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *panel_.cargo_);
      break;
    }
    // optional .SC2APIProtocol.ProductionPanel production = 5;
    case kProduction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *panel_.production_);
      break;
    }
    case PANEL_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObservationUI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ObservationUI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObservationUI* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObservationUI>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ObservationUI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ObservationUI)
    MergeFrom(*source);
  }
}

void ObservationUI::MergeFrom(const ObservationUI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ObservationUI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  groups_.MergeFrom(from.groups_);
  switch (from.panel_case()) {
    case kSingle: {
      mutable_single()->::SC2APIProtocol::SinglePanel::MergeFrom(from.single());
      break;
    }
    case kMulti: {
      mutable_multi()->::SC2APIProtocol::MultiPanel::MergeFrom(from.multi());
      break;
    }
    case kCargo: {
      mutable_cargo()->::SC2APIProtocol::CargoPanel::MergeFrom(from.cargo());
      break;
    }
    case kProduction: {
      mutable_production()->::SC2APIProtocol::ProductionPanel::MergeFrom(from.production());
      break;
    }
    case PANEL_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObservationUI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ObservationUI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservationUI::CopyFrom(const ObservationUI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ObservationUI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservationUI::IsInitialized() const {

  return true;
}

void ObservationUI::Swap(ObservationUI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObservationUI::InternalSwap(ObservationUI* other) {
  groups_.UnsafeArenaSwap(&other->groups_);
  std::swap(panel_, other->panel_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObservationUI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObservationUI_descriptor_;
  metadata.reflection = ObservationUI_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObservationUI

// repeated .SC2APIProtocol.ControlGroup groups = 1;
int ObservationUI::groups_size() const {
  return groups_.size();
}
void ObservationUI::clear_groups() {
  groups_.Clear();
}
const ::SC2APIProtocol::ControlGroup& ObservationUI::groups(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationUI.groups)
  return groups_.Get(index);
}
::SC2APIProtocol::ControlGroup* ObservationUI::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationUI.groups)
  return groups_.Mutable(index);
}
::SC2APIProtocol::ControlGroup* ObservationUI::add_groups() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ObservationUI.groups)
  return groups_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::ControlGroup >*
ObservationUI::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ObservationUI.groups)
  return &groups_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::ControlGroup >&
ObservationUI::groups() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ObservationUI.groups)
  return groups_;
}

// optional .SC2APIProtocol.SinglePanel single = 2;
bool ObservationUI::has_single() const {
  return panel_case() == kSingle;
}
void ObservationUI::set_has_single() {
  _oneof_case_[0] = kSingle;
}
void ObservationUI::clear_single() {
  if (has_single()) {
    delete panel_.single_;
    clear_has_panel();
  }
}
 const ::SC2APIProtocol::SinglePanel& ObservationUI::single() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationUI.single)
  return has_single()
      ? *panel_.single_
      : ::SC2APIProtocol::SinglePanel::default_instance();
}
::SC2APIProtocol::SinglePanel* ObservationUI::mutable_single() {
  if (!has_single()) {
    clear_panel();
    set_has_single();
    panel_.single_ = new ::SC2APIProtocol::SinglePanel;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationUI.single)
  return panel_.single_;
}
::SC2APIProtocol::SinglePanel* ObservationUI::release_single() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ObservationUI.single)
  if (has_single()) {
    clear_has_panel();
    ::SC2APIProtocol::SinglePanel* temp = panel_.single_;
    panel_.single_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObservationUI::set_allocated_single(::SC2APIProtocol::SinglePanel* single) {
  clear_panel();
  if (single) {
    set_has_single();
    panel_.single_ = single;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObservationUI.single)
}

// optional .SC2APIProtocol.MultiPanel multi = 3;
bool ObservationUI::has_multi() const {
  return panel_case() == kMulti;
}
void ObservationUI::set_has_multi() {
  _oneof_case_[0] = kMulti;
}
void ObservationUI::clear_multi() {
  if (has_multi()) {
    delete panel_.multi_;
    clear_has_panel();
  }
}
 const ::SC2APIProtocol::MultiPanel& ObservationUI::multi() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationUI.multi)
  return has_multi()
      ? *panel_.multi_
      : ::SC2APIProtocol::MultiPanel::default_instance();
}
::SC2APIProtocol::MultiPanel* ObservationUI::mutable_multi() {
  if (!has_multi()) {
    clear_panel();
    set_has_multi();
    panel_.multi_ = new ::SC2APIProtocol::MultiPanel;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationUI.multi)
  return panel_.multi_;
}
::SC2APIProtocol::MultiPanel* ObservationUI::release_multi() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ObservationUI.multi)
  if (has_multi()) {
    clear_has_panel();
    ::SC2APIProtocol::MultiPanel* temp = panel_.multi_;
    panel_.multi_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObservationUI::set_allocated_multi(::SC2APIProtocol::MultiPanel* multi) {
  clear_panel();
  if (multi) {
    set_has_multi();
    panel_.multi_ = multi;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObservationUI.multi)
}

// optional .SC2APIProtocol.CargoPanel cargo = 4;
bool ObservationUI::has_cargo() const {
  return panel_case() == kCargo;
}
void ObservationUI::set_has_cargo() {
  _oneof_case_[0] = kCargo;
}
void ObservationUI::clear_cargo() {
  if (has_cargo()) {
    delete panel_.cargo_;
    clear_has_panel();
  }
}
 const ::SC2APIProtocol::CargoPanel& ObservationUI::cargo() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationUI.cargo)
  return has_cargo()
      ? *panel_.cargo_
      : ::SC2APIProtocol::CargoPanel::default_instance();
}
::SC2APIProtocol::CargoPanel* ObservationUI::mutable_cargo() {
  if (!has_cargo()) {
    clear_panel();
    set_has_cargo();
    panel_.cargo_ = new ::SC2APIProtocol::CargoPanel;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationUI.cargo)
  return panel_.cargo_;
}
::SC2APIProtocol::CargoPanel* ObservationUI::release_cargo() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ObservationUI.cargo)
  if (has_cargo()) {
    clear_has_panel();
    ::SC2APIProtocol::CargoPanel* temp = panel_.cargo_;
    panel_.cargo_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObservationUI::set_allocated_cargo(::SC2APIProtocol::CargoPanel* cargo) {
  clear_panel();
  if (cargo) {
    set_has_cargo();
    panel_.cargo_ = cargo;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObservationUI.cargo)
}

// optional .SC2APIProtocol.ProductionPanel production = 5;
bool ObservationUI::has_production() const {
  return panel_case() == kProduction;
}
void ObservationUI::set_has_production() {
  _oneof_case_[0] = kProduction;
}
void ObservationUI::clear_production() {
  if (has_production()) {
    delete panel_.production_;
    clear_has_panel();
  }
}
 const ::SC2APIProtocol::ProductionPanel& ObservationUI::production() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationUI.production)
  return has_production()
      ? *panel_.production_
      : ::SC2APIProtocol::ProductionPanel::default_instance();
}
::SC2APIProtocol::ProductionPanel* ObservationUI::mutable_production() {
  if (!has_production()) {
    clear_panel();
    set_has_production();
    panel_.production_ = new ::SC2APIProtocol::ProductionPanel;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationUI.production)
  return panel_.production_;
}
::SC2APIProtocol::ProductionPanel* ObservationUI::release_production() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ObservationUI.production)
  if (has_production()) {
    clear_has_panel();
    ::SC2APIProtocol::ProductionPanel* temp = panel_.production_;
    panel_.production_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ObservationUI::set_allocated_production(::SC2APIProtocol::ProductionPanel* production) {
  clear_panel();
  if (production) {
    set_has_production();
    panel_.production_ = production;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObservationUI.production)
}

bool ObservationUI::has_panel() const {
  return panel_case() != PANEL_NOT_SET;
}
void ObservationUI::clear_has_panel() {
  _oneof_case_[0] = PANEL_NOT_SET;
}
ObservationUI::PanelCase ObservationUI::panel_case() const {
  return ObservationUI::PanelCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlGroup::kControlGroupIndexFieldNumber;
const int ControlGroup::kLeaderUnitTypeFieldNumber;
const int ControlGroup::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlGroup::ControlGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ControlGroup)
}

void ControlGroup::InitAsDefaultInstance() {
}

ControlGroup::ControlGroup(const ControlGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ControlGroup)
}

void ControlGroup::SharedCtor() {
  _cached_size_ = 0;
  control_group_index_ = 0u;
  leader_unit_type_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ControlGroup::~ControlGroup() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ControlGroup)
  SharedDtor();
}

void ControlGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ControlGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ControlGroup_descriptor_;
}

const ControlGroup& ControlGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  return *default_instance_;
}

ControlGroup* ControlGroup::default_instance_ = NULL;

ControlGroup* ControlGroup::New(::google::protobuf::Arena* arena) const {
  ControlGroup* n = new ControlGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControlGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ControlGroup)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ControlGroup, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ControlGroup*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(control_group_index_, count_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ControlGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ControlGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 control_group_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control_group_index_)));
          set_has_control_group_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_leader_unit_type;
        break;
      }

      // optional uint32 leader_unit_type = 2;
      case 2: {
        if (tag == 16) {
         parse_leader_unit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leader_unit_type_)));
          set_has_leader_unit_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ControlGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ControlGroup)
  return false;
#undef DO_
}

void ControlGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ControlGroup)
  // optional uint32 control_group_index = 1;
  if (has_control_group_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->control_group_index(), output);
  }

  // optional uint32 leader_unit_type = 2;
  if (has_leader_unit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->leader_unit_type(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ControlGroup)
}

::google::protobuf::uint8* ControlGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ControlGroup)
  // optional uint32 control_group_index = 1;
  if (has_control_group_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->control_group_index(), target);
  }

  // optional uint32 leader_unit_type = 2;
  if (has_leader_unit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->leader_unit_type(), target);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ControlGroup)
  return target;
}

int ControlGroup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ControlGroup)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 control_group_index = 1;
    if (has_control_group_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control_group_index());
    }

    // optional uint32 leader_unit_type = 2;
    if (has_leader_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leader_unit_type());
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ControlGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ControlGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ControlGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ControlGroup)
    MergeFrom(*source);
  }
}

void ControlGroup::MergeFrom(const ControlGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ControlGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_group_index()) {
      set_control_group_index(from.control_group_index());
    }
    if (from.has_leader_unit_type()) {
      set_leader_unit_type(from.leader_unit_type());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ControlGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ControlGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlGroup::CopyFrom(const ControlGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ControlGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlGroup::IsInitialized() const {

  return true;
}

void ControlGroup::Swap(ControlGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlGroup::InternalSwap(ControlGroup* other) {
  std::swap(control_group_index_, other->control_group_index_);
  std::swap(leader_unit_type_, other->leader_unit_type_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControlGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ControlGroup_descriptor_;
  metadata.reflection = ControlGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControlGroup

// optional uint32 control_group_index = 1;
bool ControlGroup::has_control_group_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ControlGroup::set_has_control_group_index() {
  _has_bits_[0] |= 0x00000001u;
}
void ControlGroup::clear_has_control_group_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void ControlGroup::clear_control_group_index() {
  control_group_index_ = 0u;
  clear_has_control_group_index();
}
 ::google::protobuf::uint32 ControlGroup::control_group_index() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ControlGroup.control_group_index)
  return control_group_index_;
}
 void ControlGroup::set_control_group_index(::google::protobuf::uint32 value) {
  set_has_control_group_index();
  control_group_index_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ControlGroup.control_group_index)
}

// optional uint32 leader_unit_type = 2;
bool ControlGroup::has_leader_unit_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ControlGroup::set_has_leader_unit_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ControlGroup::clear_has_leader_unit_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ControlGroup::clear_leader_unit_type() {
  leader_unit_type_ = 0u;
  clear_has_leader_unit_type();
}
 ::google::protobuf::uint32 ControlGroup::leader_unit_type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ControlGroup.leader_unit_type)
  return leader_unit_type_;
}
 void ControlGroup::set_leader_unit_type(::google::protobuf::uint32 value) {
  set_has_leader_unit_type();
  leader_unit_type_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ControlGroup.leader_unit_type)
}

// optional uint32 count = 3;
bool ControlGroup::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ControlGroup::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
void ControlGroup::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
void ControlGroup::clear_count() {
  count_ = 0u;
  clear_has_count();
}
 ::google::protobuf::uint32 ControlGroup::count() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ControlGroup.count)
  return count_;
}
 void ControlGroup::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ControlGroup.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnitInfo::kUnitTypeFieldNumber;
const int UnitInfo::kPlayerRelativeFieldNumber;
const int UnitInfo::kHealthFieldNumber;
const int UnitInfo::kShieldsFieldNumber;
const int UnitInfo::kEnergyFieldNumber;
const int UnitInfo::kTransportSlotsTakenFieldNumber;
const int UnitInfo::kBuildProgressFieldNumber;
const int UnitInfo::kAddOnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnitInfo::UnitInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.UnitInfo)
}

void UnitInfo::InitAsDefaultInstance() {
  add_on_ = const_cast< ::SC2APIProtocol::UnitInfo*>(&::SC2APIProtocol::UnitInfo::default_instance());
}

UnitInfo::UnitInfo(const UnitInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.UnitInfo)
}

void UnitInfo::SharedCtor() {
  _cached_size_ = 0;
  unit_type_ = 0u;
  player_relative_ = 0u;
  health_ = 0;
  shields_ = 0;
  energy_ = 0;
  transport_slots_taken_ = 0;
  build_progress_ = 0;
  add_on_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitInfo::~UnitInfo() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.UnitInfo)
  SharedDtor();
}

void UnitInfo::SharedDtor() {
  if (this != default_instance_) {
    delete add_on_;
  }
}

void UnitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitInfo_descriptor_;
}

const UnitInfo& UnitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  return *default_instance_;
}

UnitInfo* UnitInfo::default_instance_ = NULL;

UnitInfo* UnitInfo::New(::google::protobuf::Arena* arena) const {
  UnitInfo* n = new UnitInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnitInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.UnitInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UnitInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UnitInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(unit_type_, transport_slots_taken_);
    build_progress_ = 0;
    if (has_add_on()) {
      if (add_on_ != NULL) add_on_->::SC2APIProtocol::UnitInfo::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UnitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.UnitInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unit_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_type_)));
          set_has_unit_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_player_relative;
        break;
      }

      // optional uint32 player_relative = 2;
      case 2: {
        if (tag == 16) {
         parse_player_relative:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_relative_)));
          set_has_player_relative();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_health;
        break;
      }

      // optional int32 health = 3;
      case 3: {
        if (tag == 24) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_shields;
        break;
      }

      // optional int32 shields = 4;
      case 4: {
        if (tag == 32) {
         parse_shields:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shields_)));
          set_has_shields();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_energy;
        break;
      }

      // optional int32 energy = 5;
      case 5: {
        if (tag == 40) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_transport_slots_taken;
        break;
      }

      // optional int32 transport_slots_taken = 6;
      case 6: {
        if (tag == 48) {
         parse_transport_slots_taken:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &transport_slots_taken_)));
          set_has_transport_slots_taken();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_build_progress;
        break;
      }

      // optional float build_progress = 7;
      case 7: {
        if (tag == 61) {
         parse_build_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &build_progress_)));
          set_has_build_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_add_on;
        break;
      }

      // optional .SC2APIProtocol.UnitInfo add_on = 8;
      case 8: {
        if (tag == 66) {
         parse_add_on:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_on()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.UnitInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.UnitInfo)
  return false;
#undef DO_
}

void UnitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.UnitInfo)
  // optional uint32 unit_type = 1;
  if (has_unit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unit_type(), output);
  }

  // optional uint32 player_relative = 2;
  if (has_player_relative()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_relative(), output);
  }

  // optional int32 health = 3;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->health(), output);
  }

  // optional int32 shields = 4;
  if (has_shields()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shields(), output);
  }

  // optional int32 energy = 5;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->energy(), output);
  }

  // optional int32 transport_slots_taken = 6;
  if (has_transport_slots_taken()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->transport_slots_taken(), output);
  }

  // optional float build_progress = 7;
  if (has_build_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->build_progress(), output);
  }

  // optional .SC2APIProtocol.UnitInfo add_on = 8;
  if (has_add_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->add_on_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.UnitInfo)
}

::google::protobuf::uint8* UnitInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.UnitInfo)
  // optional uint32 unit_type = 1;
  if (has_unit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unit_type(), target);
  }

  // optional uint32 player_relative = 2;
  if (has_player_relative()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_relative(), target);
  }

  // optional int32 health = 3;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->health(), target);
  }

  // optional int32 shields = 4;
  if (has_shields()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shields(), target);
  }

  // optional int32 energy = 5;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->energy(), target);
  }

  // optional int32 transport_slots_taken = 6;
  if (has_transport_slots_taken()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->transport_slots_taken(), target);
  }

  // optional float build_progress = 7;
  if (has_build_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->build_progress(), target);
  }

  // optional .SC2APIProtocol.UnitInfo add_on = 8;
  if (has_add_on()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->add_on_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.UnitInfo)
  return target;
}

int UnitInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.UnitInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 unit_type = 1;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit_type());
    }

    // optional uint32 player_relative = 2;
    if (has_player_relative()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_relative());
    }

    // optional int32 health = 3;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }

    // optional int32 shields = 4;
    if (has_shields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shields());
    }

    // optional int32 energy = 5;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy());
    }

    // optional int32 transport_slots_taken = 6;
    if (has_transport_slots_taken()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->transport_slots_taken());
    }

    // optional float build_progress = 7;
    if (has_build_progress()) {
      total_size += 1 + 4;
    }

    // optional .SC2APIProtocol.UnitInfo add_on = 8;
    if (has_add_on()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->add_on_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.UnitInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UnitInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UnitInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.UnitInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.UnitInfo)
    MergeFrom(*source);
  }
}

void UnitInfo::MergeFrom(const UnitInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.UnitInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit_type()) {
      set_unit_type(from.unit_type());
    }
    if (from.has_player_relative()) {
      set_player_relative(from.player_relative());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
    if (from.has_shields()) {
      set_shields(from.shields());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_transport_slots_taken()) {
      set_transport_slots_taken(from.transport_slots_taken());
    }
    if (from.has_build_progress()) {
      set_build_progress(from.build_progress());
    }
    if (from.has_add_on()) {
      mutable_add_on()->::SC2APIProtocol::UnitInfo::MergeFrom(from.add_on());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UnitInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.UnitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitInfo::CopyFrom(const UnitInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.UnitInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitInfo::IsInitialized() const {

  return true;
}

void UnitInfo::Swap(UnitInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnitInfo::InternalSwap(UnitInfo* other) {
  std::swap(unit_type_, other->unit_type_);
  std::swap(player_relative_, other->player_relative_);
  std::swap(health_, other->health_);
  std::swap(shields_, other->shields_);
  std::swap(energy_, other->energy_);
  std::swap(transport_slots_taken_, other->transport_slots_taken_);
  std::swap(build_progress_, other->build_progress_);
  std::swap(add_on_, other->add_on_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitInfo_descriptor_;
  metadata.reflection = UnitInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnitInfo

// optional uint32 unit_type = 1;
bool UnitInfo::has_unit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UnitInfo::set_has_unit_type() {
  _has_bits_[0] |= 0x00000001u;
}
void UnitInfo::clear_has_unit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void UnitInfo::clear_unit_type() {
  unit_type_ = 0u;
  clear_has_unit_type();
}
 ::google::protobuf::uint32 UnitInfo::unit_type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitInfo.unit_type)
  return unit_type_;
}
 void UnitInfo::set_unit_type(::google::protobuf::uint32 value) {
  set_has_unit_type();
  unit_type_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitInfo.unit_type)
}

// optional uint32 player_relative = 2;
bool UnitInfo::has_player_relative() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UnitInfo::set_has_player_relative() {
  _has_bits_[0] |= 0x00000002u;
}
void UnitInfo::clear_has_player_relative() {
  _has_bits_[0] &= ~0x00000002u;
}
void UnitInfo::clear_player_relative() {
  player_relative_ = 0u;
  clear_has_player_relative();
}
 ::google::protobuf::uint32 UnitInfo::player_relative() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitInfo.player_relative)
  return player_relative_;
}
 void UnitInfo::set_player_relative(::google::protobuf::uint32 value) {
  set_has_player_relative();
  player_relative_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitInfo.player_relative)
}

// optional int32 health = 3;
bool UnitInfo::has_health() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UnitInfo::set_has_health() {
  _has_bits_[0] |= 0x00000004u;
}
void UnitInfo::clear_has_health() {
  _has_bits_[0] &= ~0x00000004u;
}
void UnitInfo::clear_health() {
  health_ = 0;
  clear_has_health();
}
 ::google::protobuf::int32 UnitInfo::health() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitInfo.health)
  return health_;
}
 void UnitInfo::set_health(::google::protobuf::int32 value) {
  set_has_health();
  health_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitInfo.health)
}

// optional int32 shields = 4;
bool UnitInfo::has_shields() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UnitInfo::set_has_shields() {
  _has_bits_[0] |= 0x00000008u;
}
void UnitInfo::clear_has_shields() {
  _has_bits_[0] &= ~0x00000008u;
}
void UnitInfo::clear_shields() {
  shields_ = 0;
  clear_has_shields();
}
 ::google::protobuf::int32 UnitInfo::shields() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitInfo.shields)
  return shields_;
}
 void UnitInfo::set_shields(::google::protobuf::int32 value) {
  set_has_shields();
  shields_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitInfo.shields)
}

// optional int32 energy = 5;
bool UnitInfo::has_energy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UnitInfo::set_has_energy() {
  _has_bits_[0] |= 0x00000010u;
}
void UnitInfo::clear_has_energy() {
  _has_bits_[0] &= ~0x00000010u;
}
void UnitInfo::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
 ::google::protobuf::int32 UnitInfo::energy() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitInfo.energy)
  return energy_;
}
 void UnitInfo::set_energy(::google::protobuf::int32 value) {
  set_has_energy();
  energy_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitInfo.energy)
}

// optional int32 transport_slots_taken = 6;
bool UnitInfo::has_transport_slots_taken() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UnitInfo::set_has_transport_slots_taken() {
  _has_bits_[0] |= 0x00000020u;
}
void UnitInfo::clear_has_transport_slots_taken() {
  _has_bits_[0] &= ~0x00000020u;
}
void UnitInfo::clear_transport_slots_taken() {
  transport_slots_taken_ = 0;
  clear_has_transport_slots_taken();
}
 ::google::protobuf::int32 UnitInfo::transport_slots_taken() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitInfo.transport_slots_taken)
  return transport_slots_taken_;
}
 void UnitInfo::set_transport_slots_taken(::google::protobuf::int32 value) {
  set_has_transport_slots_taken();
  transport_slots_taken_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitInfo.transport_slots_taken)
}

// optional float build_progress = 7;
bool UnitInfo::has_build_progress() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UnitInfo::set_has_build_progress() {
  _has_bits_[0] |= 0x00000040u;
}
void UnitInfo::clear_has_build_progress() {
  _has_bits_[0] &= ~0x00000040u;
}
void UnitInfo::clear_build_progress() {
  build_progress_ = 0;
  clear_has_build_progress();
}
 float UnitInfo::build_progress() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitInfo.build_progress)
  return build_progress_;
}
 void UnitInfo::set_build_progress(float value) {
  set_has_build_progress();
  build_progress_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitInfo.build_progress)
}

// optional .SC2APIProtocol.UnitInfo add_on = 8;
bool UnitInfo::has_add_on() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UnitInfo::set_has_add_on() {
  _has_bits_[0] |= 0x00000080u;
}
void UnitInfo::clear_has_add_on() {
  _has_bits_[0] &= ~0x00000080u;
}
void UnitInfo::clear_add_on() {
  if (add_on_ != NULL) add_on_->::SC2APIProtocol::UnitInfo::Clear();
  clear_has_add_on();
}
const ::SC2APIProtocol::UnitInfo& UnitInfo::add_on() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitInfo.add_on)
  return add_on_ != NULL ? *add_on_ : *default_instance_->add_on_;
}
::SC2APIProtocol::UnitInfo* UnitInfo::mutable_add_on() {
  set_has_add_on();
  if (add_on_ == NULL) {
    add_on_ = new ::SC2APIProtocol::UnitInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.UnitInfo.add_on)
  return add_on_;
}
::SC2APIProtocol::UnitInfo* UnitInfo::release_add_on() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.UnitInfo.add_on)
  clear_has_add_on();
  ::SC2APIProtocol::UnitInfo* temp = add_on_;
  add_on_ = NULL;
  return temp;
}
void UnitInfo::set_allocated_add_on(::SC2APIProtocol::UnitInfo* add_on) {
  delete add_on_;
  add_on_ = add_on;
  if (add_on) {
    set_has_add_on();
  } else {
    clear_has_add_on();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.UnitInfo.add_on)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SinglePanel::kUnitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SinglePanel::SinglePanel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.SinglePanel)
}

void SinglePanel::InitAsDefaultInstance() {
  unit_ = const_cast< ::SC2APIProtocol::UnitInfo*>(&::SC2APIProtocol::UnitInfo::default_instance());
}

SinglePanel::SinglePanel(const SinglePanel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.SinglePanel)
}

void SinglePanel::SharedCtor() {
  _cached_size_ = 0;
  unit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SinglePanel::~SinglePanel() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.SinglePanel)
  SharedDtor();
}

void SinglePanel::SharedDtor() {
  if (this != default_instance_) {
    delete unit_;
  }
}

void SinglePanel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SinglePanel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SinglePanel_descriptor_;
}

const SinglePanel& SinglePanel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  return *default_instance_;
}

SinglePanel* SinglePanel::default_instance_ = NULL;

SinglePanel* SinglePanel::New(::google::protobuf::Arena* arena) const {
  SinglePanel* n = new SinglePanel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SinglePanel::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.SinglePanel)
  if (has_unit()) {
    if (unit_ != NULL) unit_->::SC2APIProtocol::UnitInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SinglePanel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.SinglePanel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.UnitInfo unit = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.SinglePanel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.SinglePanel)
  return false;
#undef DO_
}

void SinglePanel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.SinglePanel)
  // optional .SC2APIProtocol.UnitInfo unit = 1;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->unit_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.SinglePanel)
}

::google::protobuf::uint8* SinglePanel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.SinglePanel)
  // optional .SC2APIProtocol.UnitInfo unit = 1;
  if (has_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->unit_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.SinglePanel)
  return target;
}

int SinglePanel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.SinglePanel)
  int total_size = 0;

  // optional .SC2APIProtocol.UnitInfo unit = 1;
  if (has_unit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->unit_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SinglePanel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.SinglePanel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SinglePanel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SinglePanel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.SinglePanel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.SinglePanel)
    MergeFrom(*source);
  }
}

void SinglePanel::MergeFrom(const SinglePanel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.SinglePanel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit()) {
      mutable_unit()->::SC2APIProtocol::UnitInfo::MergeFrom(from.unit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SinglePanel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.SinglePanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SinglePanel::CopyFrom(const SinglePanel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.SinglePanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SinglePanel::IsInitialized() const {

  return true;
}

void SinglePanel::Swap(SinglePanel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SinglePanel::InternalSwap(SinglePanel* other) {
  std::swap(unit_, other->unit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SinglePanel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SinglePanel_descriptor_;
  metadata.reflection = SinglePanel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SinglePanel

// optional .SC2APIProtocol.UnitInfo unit = 1;
bool SinglePanel::has_unit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SinglePanel::set_has_unit() {
  _has_bits_[0] |= 0x00000001u;
}
void SinglePanel::clear_has_unit() {
  _has_bits_[0] &= ~0x00000001u;
}
void SinglePanel::clear_unit() {
  if (unit_ != NULL) unit_->::SC2APIProtocol::UnitInfo::Clear();
  clear_has_unit();
}
const ::SC2APIProtocol::UnitInfo& SinglePanel::unit() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.SinglePanel.unit)
  return unit_ != NULL ? *unit_ : *default_instance_->unit_;
}
::SC2APIProtocol::UnitInfo* SinglePanel::mutable_unit() {
  set_has_unit();
  if (unit_ == NULL) {
    unit_ = new ::SC2APIProtocol::UnitInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.SinglePanel.unit)
  return unit_;
}
::SC2APIProtocol::UnitInfo* SinglePanel::release_unit() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.SinglePanel.unit)
  clear_has_unit();
  ::SC2APIProtocol::UnitInfo* temp = unit_;
  unit_ = NULL;
  return temp;
}
void SinglePanel::set_allocated_unit(::SC2APIProtocol::UnitInfo* unit) {
  delete unit_;
  unit_ = unit;
  if (unit) {
    set_has_unit();
  } else {
    clear_has_unit();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.SinglePanel.unit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiPanel::kUnitsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiPanel::MultiPanel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.MultiPanel)
}

void MultiPanel::InitAsDefaultInstance() {
}

MultiPanel::MultiPanel(const MultiPanel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.MultiPanel)
}

void MultiPanel::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiPanel::~MultiPanel() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.MultiPanel)
  SharedDtor();
}

void MultiPanel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiPanel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiPanel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiPanel_descriptor_;
}

const MultiPanel& MultiPanel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  return *default_instance_;
}

MultiPanel* MultiPanel::default_instance_ = NULL;

MultiPanel* MultiPanel::New(::google::protobuf::Arena* arena) const {
  MultiPanel* n = new MultiPanel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiPanel::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.MultiPanel)
  units_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MultiPanel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.MultiPanel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC2APIProtocol.UnitInfo units = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_units()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_units;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.MultiPanel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.MultiPanel)
  return false;
#undef DO_
}

void MultiPanel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.MultiPanel)
  // repeated .SC2APIProtocol.UnitInfo units = 1;
  for (unsigned int i = 0, n = this->units_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->units(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.MultiPanel)
}

::google::protobuf::uint8* MultiPanel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.MultiPanel)
  // repeated .SC2APIProtocol.UnitInfo units = 1;
  for (unsigned int i = 0, n = this->units_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->units(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.MultiPanel)
  return target;
}

int MultiPanel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.MultiPanel)
  int total_size = 0;

  // repeated .SC2APIProtocol.UnitInfo units = 1;
  total_size += 1 * this->units_size();
  for (int i = 0; i < this->units_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->units(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiPanel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.MultiPanel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MultiPanel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiPanel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.MultiPanel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.MultiPanel)
    MergeFrom(*source);
  }
}

void MultiPanel::MergeFrom(const MultiPanel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.MultiPanel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  units_.MergeFrom(from.units_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MultiPanel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.MultiPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiPanel::CopyFrom(const MultiPanel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.MultiPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiPanel::IsInitialized() const {

  return true;
}

void MultiPanel::Swap(MultiPanel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiPanel::InternalSwap(MultiPanel* other) {
  units_.UnsafeArenaSwap(&other->units_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiPanel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiPanel_descriptor_;
  metadata.reflection = MultiPanel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiPanel

// repeated .SC2APIProtocol.UnitInfo units = 1;
int MultiPanel::units_size() const {
  return units_.size();
}
void MultiPanel::clear_units() {
  units_.Clear();
}
const ::SC2APIProtocol::UnitInfo& MultiPanel::units(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.MultiPanel.units)
  return units_.Get(index);
}
::SC2APIProtocol::UnitInfo* MultiPanel::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.MultiPanel.units)
  return units_.Mutable(index);
}
::SC2APIProtocol::UnitInfo* MultiPanel::add_units() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.MultiPanel.units)
  return units_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo >*
MultiPanel::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.MultiPanel.units)
  return &units_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo >&
MultiPanel::units() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.MultiPanel.units)
  return units_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CargoPanel::kUnitFieldNumber;
const int CargoPanel::kPassengersFieldNumber;
const int CargoPanel::kSlotsAvailableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CargoPanel::CargoPanel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.CargoPanel)
}

void CargoPanel::InitAsDefaultInstance() {
  unit_ = const_cast< ::SC2APIProtocol::UnitInfo*>(&::SC2APIProtocol::UnitInfo::default_instance());
}

CargoPanel::CargoPanel(const CargoPanel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.CargoPanel)
}

void CargoPanel::SharedCtor() {
  _cached_size_ = 0;
  unit_ = NULL;
  slots_available_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CargoPanel::~CargoPanel() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.CargoPanel)
  SharedDtor();
}

void CargoPanel::SharedDtor() {
  if (this != default_instance_) {
    delete unit_;
  }
}

void CargoPanel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CargoPanel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CargoPanel_descriptor_;
}

const CargoPanel& CargoPanel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  return *default_instance_;
}

CargoPanel* CargoPanel::default_instance_ = NULL;

CargoPanel* CargoPanel::New(::google::protobuf::Arena* arena) const {
  CargoPanel* n = new CargoPanel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CargoPanel::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.CargoPanel)
  if (_has_bits_[0 / 32] & 5u) {
    if (has_unit()) {
      if (unit_ != NULL) unit_->::SC2APIProtocol::UnitInfo::Clear();
    }
    slots_available_ = 0;
  }
  passengers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CargoPanel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.CargoPanel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.UnitInfo unit = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_passengers;
        break;
      }

      // repeated .SC2APIProtocol.UnitInfo passengers = 2;
      case 2: {
        if (tag == 18) {
         parse_passengers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_passengers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_passengers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_passengers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(24)) goto parse_slots_available;
        break;
      }

      // optional int32 slots_available = 3;
      case 3: {
        if (tag == 24) {
         parse_slots_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slots_available_)));
          set_has_slots_available();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.CargoPanel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.CargoPanel)
  return false;
#undef DO_
}

void CargoPanel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.CargoPanel)
  // optional .SC2APIProtocol.UnitInfo unit = 1;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->unit_, output);
  }

  // repeated .SC2APIProtocol.UnitInfo passengers = 2;
  for (unsigned int i = 0, n = this->passengers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->passengers(i), output);
  }

  // optional int32 slots_available = 3;
  if (has_slots_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slots_available(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.CargoPanel)
}

::google::protobuf::uint8* CargoPanel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.CargoPanel)
  // optional .SC2APIProtocol.UnitInfo unit = 1;
  if (has_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->unit_, false, target);
  }

  // repeated .SC2APIProtocol.UnitInfo passengers = 2;
  for (unsigned int i = 0, n = this->passengers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->passengers(i), false, target);
  }

  // optional int32 slots_available = 3;
  if (has_slots_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slots_available(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.CargoPanel)
  return target;
}

int CargoPanel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.CargoPanel)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 5u) {
    // optional .SC2APIProtocol.UnitInfo unit = 1;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unit_);
    }

    // optional int32 slots_available = 3;
    if (has_slots_available()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slots_available());
    }

  }
  // repeated .SC2APIProtocol.UnitInfo passengers = 2;
  total_size += 1 * this->passengers_size();
  for (int i = 0; i < this->passengers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->passengers(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CargoPanel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.CargoPanel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CargoPanel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CargoPanel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.CargoPanel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.CargoPanel)
    MergeFrom(*source);
  }
}

void CargoPanel::MergeFrom(const CargoPanel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.CargoPanel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  passengers_.MergeFrom(from.passengers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit()) {
      mutable_unit()->::SC2APIProtocol::UnitInfo::MergeFrom(from.unit());
    }
    if (from.has_slots_available()) {
      set_slots_available(from.slots_available());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CargoPanel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.CargoPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CargoPanel::CopyFrom(const CargoPanel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.CargoPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CargoPanel::IsInitialized() const {

  return true;
}

void CargoPanel::Swap(CargoPanel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CargoPanel::InternalSwap(CargoPanel* other) {
  std::swap(unit_, other->unit_);
  passengers_.UnsafeArenaSwap(&other->passengers_);
  std::swap(slots_available_, other->slots_available_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CargoPanel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CargoPanel_descriptor_;
  metadata.reflection = CargoPanel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CargoPanel

// optional .SC2APIProtocol.UnitInfo unit = 1;
bool CargoPanel::has_unit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CargoPanel::set_has_unit() {
  _has_bits_[0] |= 0x00000001u;
}
void CargoPanel::clear_has_unit() {
  _has_bits_[0] &= ~0x00000001u;
}
void CargoPanel::clear_unit() {
  if (unit_ != NULL) unit_->::SC2APIProtocol::UnitInfo::Clear();
  clear_has_unit();
}
const ::SC2APIProtocol::UnitInfo& CargoPanel::unit() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CargoPanel.unit)
  return unit_ != NULL ? *unit_ : *default_instance_->unit_;
}
::SC2APIProtocol::UnitInfo* CargoPanel::mutable_unit() {
  set_has_unit();
  if (unit_ == NULL) {
    unit_ = new ::SC2APIProtocol::UnitInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.CargoPanel.unit)
  return unit_;
}
::SC2APIProtocol::UnitInfo* CargoPanel::release_unit() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.CargoPanel.unit)
  clear_has_unit();
  ::SC2APIProtocol::UnitInfo* temp = unit_;
  unit_ = NULL;
  return temp;
}
void CargoPanel::set_allocated_unit(::SC2APIProtocol::UnitInfo* unit) {
  delete unit_;
  unit_ = unit;
  if (unit) {
    set_has_unit();
  } else {
    clear_has_unit();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.CargoPanel.unit)
}

// repeated .SC2APIProtocol.UnitInfo passengers = 2;
int CargoPanel::passengers_size() const {
  return passengers_.size();
}
void CargoPanel::clear_passengers() {
  passengers_.Clear();
}
const ::SC2APIProtocol::UnitInfo& CargoPanel::passengers(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CargoPanel.passengers)
  return passengers_.Get(index);
}
::SC2APIProtocol::UnitInfo* CargoPanel::mutable_passengers(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.CargoPanel.passengers)
  return passengers_.Mutable(index);
}
::SC2APIProtocol::UnitInfo* CargoPanel::add_passengers() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.CargoPanel.passengers)
  return passengers_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo >*
CargoPanel::mutable_passengers() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.CargoPanel.passengers)
  return &passengers_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo >&
CargoPanel::passengers() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.CargoPanel.passengers)
  return passengers_;
}

// optional int32 slots_available = 3;
bool CargoPanel::has_slots_available() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CargoPanel::set_has_slots_available() {
  _has_bits_[0] |= 0x00000004u;
}
void CargoPanel::clear_has_slots_available() {
  _has_bits_[0] &= ~0x00000004u;
}
void CargoPanel::clear_slots_available() {
  slots_available_ = 0;
  clear_has_slots_available();
}
 ::google::protobuf::int32 CargoPanel::slots_available() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.CargoPanel.slots_available)
  return slots_available_;
}
 void CargoPanel::set_slots_available(::google::protobuf::int32 value) {
  set_has_slots_available();
  slots_available_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.CargoPanel.slots_available)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProductionPanel::kUnitFieldNumber;
const int ProductionPanel::kBuildQueueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProductionPanel::ProductionPanel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ProductionPanel)
}

void ProductionPanel::InitAsDefaultInstance() {
  unit_ = const_cast< ::SC2APIProtocol::UnitInfo*>(&::SC2APIProtocol::UnitInfo::default_instance());
}

ProductionPanel::ProductionPanel(const ProductionPanel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ProductionPanel)
}

void ProductionPanel::SharedCtor() {
  _cached_size_ = 0;
  unit_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductionPanel::~ProductionPanel() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ProductionPanel)
  SharedDtor();
}

void ProductionPanel::SharedDtor() {
  if (this != default_instance_) {
    delete unit_;
  }
}

void ProductionPanel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductionPanel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductionPanel_descriptor_;
}

const ProductionPanel& ProductionPanel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  return *default_instance_;
}

ProductionPanel* ProductionPanel::default_instance_ = NULL;

ProductionPanel* ProductionPanel::New(::google::protobuf::Arena* arena) const {
  ProductionPanel* n = new ProductionPanel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProductionPanel::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ProductionPanel)
  if (has_unit()) {
    if (unit_ != NULL) unit_->::SC2APIProtocol::UnitInfo::Clear();
  }
  build_queue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProductionPanel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ProductionPanel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.UnitInfo unit = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_build_queue;
        break;
      }

      // repeated .SC2APIProtocol.UnitInfo build_queue = 2;
      case 2: {
        if (tag == 18) {
         parse_build_queue:
          DO_(input->IncrementRecursionDepth());
         parse_loop_build_queue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_build_queue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_build_queue;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ProductionPanel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ProductionPanel)
  return false;
#undef DO_
}

void ProductionPanel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ProductionPanel)
  // optional .SC2APIProtocol.UnitInfo unit = 1;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->unit_, output);
  }

  // repeated .SC2APIProtocol.UnitInfo build_queue = 2;
  for (unsigned int i = 0, n = this->build_queue_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->build_queue(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ProductionPanel)
}

::google::protobuf::uint8* ProductionPanel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ProductionPanel)
  // optional .SC2APIProtocol.UnitInfo unit = 1;
  if (has_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->unit_, false, target);
  }

  // repeated .SC2APIProtocol.UnitInfo build_queue = 2;
  for (unsigned int i = 0, n = this->build_queue_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->build_queue(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ProductionPanel)
  return target;
}

int ProductionPanel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ProductionPanel)
  int total_size = 0;

  // optional .SC2APIProtocol.UnitInfo unit = 1;
  if (has_unit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->unit_);
  }

  // repeated .SC2APIProtocol.UnitInfo build_queue = 2;
  total_size += 1 * this->build_queue_size();
  for (int i = 0; i < this->build_queue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->build_queue(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductionPanel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ProductionPanel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ProductionPanel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ProductionPanel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ProductionPanel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ProductionPanel)
    MergeFrom(*source);
  }
}

void ProductionPanel::MergeFrom(const ProductionPanel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ProductionPanel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  build_queue_.MergeFrom(from.build_queue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit()) {
      mutable_unit()->::SC2APIProtocol::UnitInfo::MergeFrom(from.unit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ProductionPanel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ProductionPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductionPanel::CopyFrom(const ProductionPanel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ProductionPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductionPanel::IsInitialized() const {

  return true;
}

void ProductionPanel::Swap(ProductionPanel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProductionPanel::InternalSwap(ProductionPanel* other) {
  std::swap(unit_, other->unit_);
  build_queue_.UnsafeArenaSwap(&other->build_queue_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProductionPanel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductionPanel_descriptor_;
  metadata.reflection = ProductionPanel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProductionPanel

// optional .SC2APIProtocol.UnitInfo unit = 1;
bool ProductionPanel::has_unit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProductionPanel::set_has_unit() {
  _has_bits_[0] |= 0x00000001u;
}
void ProductionPanel::clear_has_unit() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProductionPanel::clear_unit() {
  if (unit_ != NULL) unit_->::SC2APIProtocol::UnitInfo::Clear();
  clear_has_unit();
}
const ::SC2APIProtocol::UnitInfo& ProductionPanel::unit() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ProductionPanel.unit)
  return unit_ != NULL ? *unit_ : *default_instance_->unit_;
}
::SC2APIProtocol::UnitInfo* ProductionPanel::mutable_unit() {
  set_has_unit();
  if (unit_ == NULL) {
    unit_ = new ::SC2APIProtocol::UnitInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ProductionPanel.unit)
  return unit_;
}
::SC2APIProtocol::UnitInfo* ProductionPanel::release_unit() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ProductionPanel.unit)
  clear_has_unit();
  ::SC2APIProtocol::UnitInfo* temp = unit_;
  unit_ = NULL;
  return temp;
}
void ProductionPanel::set_allocated_unit(::SC2APIProtocol::UnitInfo* unit) {
  delete unit_;
  unit_ = unit;
  if (unit) {
    set_has_unit();
  } else {
    clear_has_unit();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ProductionPanel.unit)
}

// repeated .SC2APIProtocol.UnitInfo build_queue = 2;
int ProductionPanel::build_queue_size() const {
  return build_queue_.size();
}
void ProductionPanel::clear_build_queue() {
  build_queue_.Clear();
}
const ::SC2APIProtocol::UnitInfo& ProductionPanel::build_queue(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ProductionPanel.build_queue)
  return build_queue_.Get(index);
}
::SC2APIProtocol::UnitInfo* ProductionPanel::mutable_build_queue(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ProductionPanel.build_queue)
  return build_queue_.Mutable(index);
}
::SC2APIProtocol::UnitInfo* ProductionPanel::add_build_queue() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ProductionPanel.build_queue)
  return build_queue_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo >*
ProductionPanel::mutable_build_queue() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ProductionPanel.build_queue)
  return &build_queue_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitInfo >&
ProductionPanel::build_queue() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ProductionPanel.build_queue)
  return build_queue_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionUI::kControlGroupFieldNumber;
const int ActionUI::kSelectArmyFieldNumber;
const int ActionUI::kSelectWarpGatesFieldNumber;
const int ActionUI::kSelectLarvaFieldNumber;
const int ActionUI::kSelectIdleWorkerFieldNumber;
const int ActionUI::kMultiPanelFieldNumber;
const int ActionUI::kCargoPanelFieldNumber;
const int ActionUI::kProductionPanelFieldNumber;
const int ActionUI::kToggleAutocastFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionUI::ActionUI()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionUI)
}

void ActionUI::InitAsDefaultInstance() {
  ActionUI_default_oneof_instance_->control_group_ = const_cast< ::SC2APIProtocol::ActionControlGroup*>(&::SC2APIProtocol::ActionControlGroup::default_instance());
  ActionUI_default_oneof_instance_->select_army_ = const_cast< ::SC2APIProtocol::ActionSelectArmy*>(&::SC2APIProtocol::ActionSelectArmy::default_instance());
  ActionUI_default_oneof_instance_->select_warp_gates_ = const_cast< ::SC2APIProtocol::ActionSelectWarpGates*>(&::SC2APIProtocol::ActionSelectWarpGates::default_instance());
  ActionUI_default_oneof_instance_->select_larva_ = const_cast< ::SC2APIProtocol::ActionSelectLarva*>(&::SC2APIProtocol::ActionSelectLarva::default_instance());
  ActionUI_default_oneof_instance_->select_idle_worker_ = const_cast< ::SC2APIProtocol::ActionSelectIdleWorker*>(&::SC2APIProtocol::ActionSelectIdleWorker::default_instance());
  ActionUI_default_oneof_instance_->multi_panel_ = const_cast< ::SC2APIProtocol::ActionMultiPanel*>(&::SC2APIProtocol::ActionMultiPanel::default_instance());
  ActionUI_default_oneof_instance_->cargo_panel_ = const_cast< ::SC2APIProtocol::ActionCargoPanelUnload*>(&::SC2APIProtocol::ActionCargoPanelUnload::default_instance());
  ActionUI_default_oneof_instance_->production_panel_ = const_cast< ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue*>(&::SC2APIProtocol::ActionProductionPanelRemoveFromQueue::default_instance());
  ActionUI_default_oneof_instance_->toggle_autocast_ = const_cast< ::SC2APIProtocol::ActionToggleAutocast*>(&::SC2APIProtocol::ActionToggleAutocast::default_instance());
}

ActionUI::ActionUI(const ActionUI& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionUI)
}

void ActionUI::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_action();
}

ActionUI::~ActionUI() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionUI)
  SharedDtor();
}

void ActionUI::SharedDtor() {
  if (has_action()) {
    clear_action();
  }
  if (this != default_instance_) {
  }
}

void ActionUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionUI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionUI_descriptor_;
}

const ActionUI& ActionUI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  return *default_instance_;
}

ActionUI* ActionUI::default_instance_ = NULL;

ActionUI* ActionUI::New(::google::protobuf::Arena* arena) const {
  ActionUI* n = new ActionUI;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionUI::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.ActionUI)
  switch(action_case()) {
    case kControlGroup: {
      delete action_.control_group_;
      break;
    }
    case kSelectArmy: {
      delete action_.select_army_;
      break;
    }
    case kSelectWarpGates: {
      delete action_.select_warp_gates_;
      break;
    }
    case kSelectLarva: {
      delete action_.select_larva_;
      break;
    }
    case kSelectIdleWorker: {
      delete action_.select_idle_worker_;
      break;
    }
    case kMultiPanel: {
      delete action_.multi_panel_;
      break;
    }
    case kCargoPanel: {
      delete action_.cargo_panel_;
      break;
    }
    case kProductionPanel: {
      delete action_.production_panel_;
      break;
    }
    case kToggleAutocast: {
      delete action_.toggle_autocast_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void ActionUI::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionUI)
  clear_action();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionUI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ActionControlGroup control_group = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_select_army;
        break;
      }

      // optional .SC2APIProtocol.ActionSelectArmy select_army = 2;
      case 2: {
        if (tag == 18) {
         parse_select_army:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_select_army()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_select_warp_gates;
        break;
      }

      // optional .SC2APIProtocol.ActionSelectWarpGates select_warp_gates = 3;
      case 3: {
        if (tag == 26) {
         parse_select_warp_gates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_select_warp_gates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_select_larva;
        break;
      }

      // optional .SC2APIProtocol.ActionSelectLarva select_larva = 4;
      case 4: {
        if (tag == 34) {
         parse_select_larva:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_select_larva()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_select_idle_worker;
        break;
      }

      // optional .SC2APIProtocol.ActionSelectIdleWorker select_idle_worker = 5;
      case 5: {
        if (tag == 42) {
         parse_select_idle_worker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_select_idle_worker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_multi_panel;
        break;
      }

      // optional .SC2APIProtocol.ActionMultiPanel multi_panel = 6;
      case 6: {
        if (tag == 50) {
         parse_multi_panel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_multi_panel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_cargo_panel;
        break;
      }

      // optional .SC2APIProtocol.ActionCargoPanelUnload cargo_panel = 7;
      case 7: {
        if (tag == 58) {
         parse_cargo_panel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cargo_panel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_production_panel;
        break;
      }

      // optional .SC2APIProtocol.ActionProductionPanelRemoveFromQueue production_panel = 8;
      case 8: {
        if (tag == 66) {
         parse_production_panel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_production_panel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_toggle_autocast;
        break;
      }

      // optional .SC2APIProtocol.ActionToggleAutocast toggle_autocast = 9;
      case 9: {
        if (tag == 74) {
         parse_toggle_autocast:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toggle_autocast()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionUI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionUI)
  return false;
#undef DO_
}

void ActionUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionUI)
  // optional .SC2APIProtocol.ActionControlGroup control_group = 1;
  if (has_control_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *action_.control_group_, output);
  }

  // optional .SC2APIProtocol.ActionSelectArmy select_army = 2;
  if (has_select_army()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *action_.select_army_, output);
  }

  // optional .SC2APIProtocol.ActionSelectWarpGates select_warp_gates = 3;
  if (has_select_warp_gates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *action_.select_warp_gates_, output);
  }

  // optional .SC2APIProtocol.ActionSelectLarva select_larva = 4;
  if (has_select_larva()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *action_.select_larva_, output);
  }

  // optional .SC2APIProtocol.ActionSelectIdleWorker select_idle_worker = 5;
  if (has_select_idle_worker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *action_.select_idle_worker_, output);
  }

  // optional .SC2APIProtocol.ActionMultiPanel multi_panel = 6;
  if (has_multi_panel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *action_.multi_panel_, output);
  }

  // optional .SC2APIProtocol.ActionCargoPanelUnload cargo_panel = 7;
  if (has_cargo_panel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *action_.cargo_panel_, output);
  }

  // optional .SC2APIProtocol.ActionProductionPanelRemoveFromQueue production_panel = 8;
  if (has_production_panel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *action_.production_panel_, output);
  }

  // optional .SC2APIProtocol.ActionToggleAutocast toggle_autocast = 9;
  if (has_toggle_autocast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *action_.toggle_autocast_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionUI)
}

::google::protobuf::uint8* ActionUI::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionUI)
  // optional .SC2APIProtocol.ActionControlGroup control_group = 1;
  if (has_control_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *action_.control_group_, false, target);
  }

  // optional .SC2APIProtocol.ActionSelectArmy select_army = 2;
  if (has_select_army()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *action_.select_army_, false, target);
  }

  // optional .SC2APIProtocol.ActionSelectWarpGates select_warp_gates = 3;
  if (has_select_warp_gates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *action_.select_warp_gates_, false, target);
  }

  // optional .SC2APIProtocol.ActionSelectLarva select_larva = 4;
  if (has_select_larva()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *action_.select_larva_, false, target);
  }

  // optional .SC2APIProtocol.ActionSelectIdleWorker select_idle_worker = 5;
  if (has_select_idle_worker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *action_.select_idle_worker_, false, target);
  }

  // optional .SC2APIProtocol.ActionMultiPanel multi_panel = 6;
  if (has_multi_panel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *action_.multi_panel_, false, target);
  }

  // optional .SC2APIProtocol.ActionCargoPanelUnload cargo_panel = 7;
  if (has_cargo_panel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *action_.cargo_panel_, false, target);
  }

  // optional .SC2APIProtocol.ActionProductionPanelRemoveFromQueue production_panel = 8;
  if (has_production_panel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *action_.production_panel_, false, target);
  }

  // optional .SC2APIProtocol.ActionToggleAutocast toggle_autocast = 9;
  if (has_toggle_autocast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *action_.toggle_autocast_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionUI)
  return target;
}

int ActionUI::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionUI)
  int total_size = 0;

  switch (action_case()) {
    // optional .SC2APIProtocol.ActionControlGroup control_group = 1;
    case kControlGroup: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.control_group_);
      break;
    }
    // optional .SC2APIProtocol.ActionSelectArmy select_army = 2;
    case kSelectArmy: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.select_army_);
      break;
    }
    // optional .SC2APIProtocol.ActionSelectWarpGates select_warp_gates = 3;
    case kSelectWarpGates: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.select_warp_gates_);
      break;
    }
    // optional .SC2APIProtocol.ActionSelectLarva select_larva = 4;
    case kSelectLarva: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.select_larva_);
      break;
    }
    // optional .SC2APIProtocol.ActionSelectIdleWorker select_idle_worker = 5;
    case kSelectIdleWorker: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.select_idle_worker_);
      break;
    }
    // optional .SC2APIProtocol.ActionMultiPanel multi_panel = 6;
    case kMultiPanel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.multi_panel_);
      break;
    }
    // optional .SC2APIProtocol.ActionCargoPanelUnload cargo_panel = 7;
    case kCargoPanel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.cargo_panel_);
      break;
    }
    // optional .SC2APIProtocol.ActionProductionPanelRemoveFromQueue production_panel = 8;
    case kProductionPanel: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.production_panel_);
      break;
    }
    // optional .SC2APIProtocol.ActionToggleAutocast toggle_autocast = 9;
    case kToggleAutocast: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.toggle_autocast_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionUI::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionUI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionUI* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionUI>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionUI)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionUI)
    MergeFrom(*source);
  }
}

void ActionUI::MergeFrom(const ActionUI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionUI)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.action_case()) {
    case kControlGroup: {
      mutable_control_group()->::SC2APIProtocol::ActionControlGroup::MergeFrom(from.control_group());
      break;
    }
    case kSelectArmy: {
      mutable_select_army()->::SC2APIProtocol::ActionSelectArmy::MergeFrom(from.select_army());
      break;
    }
    case kSelectWarpGates: {
      mutable_select_warp_gates()->::SC2APIProtocol::ActionSelectWarpGates::MergeFrom(from.select_warp_gates());
      break;
    }
    case kSelectLarva: {
      mutable_select_larva()->::SC2APIProtocol::ActionSelectLarva::MergeFrom(from.select_larva());
      break;
    }
    case kSelectIdleWorker: {
      mutable_select_idle_worker()->::SC2APIProtocol::ActionSelectIdleWorker::MergeFrom(from.select_idle_worker());
      break;
    }
    case kMultiPanel: {
      mutable_multi_panel()->::SC2APIProtocol::ActionMultiPanel::MergeFrom(from.multi_panel());
      break;
    }
    case kCargoPanel: {
      mutable_cargo_panel()->::SC2APIProtocol::ActionCargoPanelUnload::MergeFrom(from.cargo_panel());
      break;
    }
    case kProductionPanel: {
      mutable_production_panel()->::SC2APIProtocol::ActionProductionPanelRemoveFromQueue::MergeFrom(from.production_panel());
      break;
    }
    case kToggleAutocast: {
      mutable_toggle_autocast()->::SC2APIProtocol::ActionToggleAutocast::MergeFrom(from.toggle_autocast());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionUI::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionUI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionUI::CopyFrom(const ActionUI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionUI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionUI::IsInitialized() const {

  return true;
}

void ActionUI::Swap(ActionUI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionUI::InternalSwap(ActionUI* other) {
  std::swap(action_, other->action_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionUI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionUI_descriptor_;
  metadata.reflection = ActionUI_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionUI

// optional .SC2APIProtocol.ActionControlGroup control_group = 1;
bool ActionUI::has_control_group() const {
  return action_case() == kControlGroup;
}
void ActionUI::set_has_control_group() {
  _oneof_case_[0] = kControlGroup;
}
void ActionUI::clear_control_group() {
  if (has_control_group()) {
    delete action_.control_group_;
    clear_has_action();
  }
}
 const ::SC2APIProtocol::ActionControlGroup& ActionUI::control_group() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionUI.control_group)
  return has_control_group()
      ? *action_.control_group_
      : ::SC2APIProtocol::ActionControlGroup::default_instance();
}
::SC2APIProtocol::ActionControlGroup* ActionUI::mutable_control_group() {
  if (!has_control_group()) {
    clear_action();
    set_has_control_group();
    action_.control_group_ = new ::SC2APIProtocol::ActionControlGroup;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionUI.control_group)
  return action_.control_group_;
}
::SC2APIProtocol::ActionControlGroup* ActionUI::release_control_group() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionUI.control_group)
  if (has_control_group()) {
    clear_has_action();
    ::SC2APIProtocol::ActionControlGroup* temp = action_.control_group_;
    action_.control_group_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionUI::set_allocated_control_group(::SC2APIProtocol::ActionControlGroup* control_group) {
  clear_action();
  if (control_group) {
    set_has_control_group();
    action_.control_group_ = control_group;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.control_group)
}

// optional .SC2APIProtocol.ActionSelectArmy select_army = 2;
bool ActionUI::has_select_army() const {
  return action_case() == kSelectArmy;
}
void ActionUI::set_has_select_army() {
  _oneof_case_[0] = kSelectArmy;
}
void ActionUI::clear_select_army() {
  if (has_select_army()) {
    delete action_.select_army_;
    clear_has_action();
  }
}
 const ::SC2APIProtocol::ActionSelectArmy& ActionUI::select_army() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionUI.select_army)
  return has_select_army()
      ? *action_.select_army_
      : ::SC2APIProtocol::ActionSelectArmy::default_instance();
}
::SC2APIProtocol::ActionSelectArmy* ActionUI::mutable_select_army() {
  if (!has_select_army()) {
    clear_action();
    set_has_select_army();
    action_.select_army_ = new ::SC2APIProtocol::ActionSelectArmy;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionUI.select_army)
  return action_.select_army_;
}
::SC2APIProtocol::ActionSelectArmy* ActionUI::release_select_army() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionUI.select_army)
  if (has_select_army()) {
    clear_has_action();
    ::SC2APIProtocol::ActionSelectArmy* temp = action_.select_army_;
    action_.select_army_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionUI::set_allocated_select_army(::SC2APIProtocol::ActionSelectArmy* select_army) {
  clear_action();
  if (select_army) {
    set_has_select_army();
    action_.select_army_ = select_army;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.select_army)
}

// optional .SC2APIProtocol.ActionSelectWarpGates select_warp_gates = 3;
bool ActionUI::has_select_warp_gates() const {
  return action_case() == kSelectWarpGates;
}
void ActionUI::set_has_select_warp_gates() {
  _oneof_case_[0] = kSelectWarpGates;
}
void ActionUI::clear_select_warp_gates() {
  if (has_select_warp_gates()) {
    delete action_.select_warp_gates_;
    clear_has_action();
  }
}
 const ::SC2APIProtocol::ActionSelectWarpGates& ActionUI::select_warp_gates() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionUI.select_warp_gates)
  return has_select_warp_gates()
      ? *action_.select_warp_gates_
      : ::SC2APIProtocol::ActionSelectWarpGates::default_instance();
}
::SC2APIProtocol::ActionSelectWarpGates* ActionUI::mutable_select_warp_gates() {
  if (!has_select_warp_gates()) {
    clear_action();
    set_has_select_warp_gates();
    action_.select_warp_gates_ = new ::SC2APIProtocol::ActionSelectWarpGates;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionUI.select_warp_gates)
  return action_.select_warp_gates_;
}
::SC2APIProtocol::ActionSelectWarpGates* ActionUI::release_select_warp_gates() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionUI.select_warp_gates)
  if (has_select_warp_gates()) {
    clear_has_action();
    ::SC2APIProtocol::ActionSelectWarpGates* temp = action_.select_warp_gates_;
    action_.select_warp_gates_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionUI::set_allocated_select_warp_gates(::SC2APIProtocol::ActionSelectWarpGates* select_warp_gates) {
  clear_action();
  if (select_warp_gates) {
    set_has_select_warp_gates();
    action_.select_warp_gates_ = select_warp_gates;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.select_warp_gates)
}

// optional .SC2APIProtocol.ActionSelectLarva select_larva = 4;
bool ActionUI::has_select_larva() const {
  return action_case() == kSelectLarva;
}
void ActionUI::set_has_select_larva() {
  _oneof_case_[0] = kSelectLarva;
}
void ActionUI::clear_select_larva() {
  if (has_select_larva()) {
    delete action_.select_larva_;
    clear_has_action();
  }
}
 const ::SC2APIProtocol::ActionSelectLarva& ActionUI::select_larva() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionUI.select_larva)
  return has_select_larva()
      ? *action_.select_larva_
      : ::SC2APIProtocol::ActionSelectLarva::default_instance();
}
::SC2APIProtocol::ActionSelectLarva* ActionUI::mutable_select_larva() {
  if (!has_select_larva()) {
    clear_action();
    set_has_select_larva();
    action_.select_larva_ = new ::SC2APIProtocol::ActionSelectLarva;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionUI.select_larva)
  return action_.select_larva_;
}
::SC2APIProtocol::ActionSelectLarva* ActionUI::release_select_larva() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionUI.select_larva)
  if (has_select_larva()) {
    clear_has_action();
    ::SC2APIProtocol::ActionSelectLarva* temp = action_.select_larva_;
    action_.select_larva_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionUI::set_allocated_select_larva(::SC2APIProtocol::ActionSelectLarva* select_larva) {
  clear_action();
  if (select_larva) {
    set_has_select_larva();
    action_.select_larva_ = select_larva;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.select_larva)
}

// optional .SC2APIProtocol.ActionSelectIdleWorker select_idle_worker = 5;
bool ActionUI::has_select_idle_worker() const {
  return action_case() == kSelectIdleWorker;
}
void ActionUI::set_has_select_idle_worker() {
  _oneof_case_[0] = kSelectIdleWorker;
}
void ActionUI::clear_select_idle_worker() {
  if (has_select_idle_worker()) {
    delete action_.select_idle_worker_;
    clear_has_action();
  }
}
 const ::SC2APIProtocol::ActionSelectIdleWorker& ActionUI::select_idle_worker() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionUI.select_idle_worker)
  return has_select_idle_worker()
      ? *action_.select_idle_worker_
      : ::SC2APIProtocol::ActionSelectIdleWorker::default_instance();
}
::SC2APIProtocol::ActionSelectIdleWorker* ActionUI::mutable_select_idle_worker() {
  if (!has_select_idle_worker()) {
    clear_action();
    set_has_select_idle_worker();
    action_.select_idle_worker_ = new ::SC2APIProtocol::ActionSelectIdleWorker;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionUI.select_idle_worker)
  return action_.select_idle_worker_;
}
::SC2APIProtocol::ActionSelectIdleWorker* ActionUI::release_select_idle_worker() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionUI.select_idle_worker)
  if (has_select_idle_worker()) {
    clear_has_action();
    ::SC2APIProtocol::ActionSelectIdleWorker* temp = action_.select_idle_worker_;
    action_.select_idle_worker_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionUI::set_allocated_select_idle_worker(::SC2APIProtocol::ActionSelectIdleWorker* select_idle_worker) {
  clear_action();
  if (select_idle_worker) {
    set_has_select_idle_worker();
    action_.select_idle_worker_ = select_idle_worker;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.select_idle_worker)
}

// optional .SC2APIProtocol.ActionMultiPanel multi_panel = 6;
bool ActionUI::has_multi_panel() const {
  return action_case() == kMultiPanel;
}
void ActionUI::set_has_multi_panel() {
  _oneof_case_[0] = kMultiPanel;
}
void ActionUI::clear_multi_panel() {
  if (has_multi_panel()) {
    delete action_.multi_panel_;
    clear_has_action();
  }
}
 const ::SC2APIProtocol::ActionMultiPanel& ActionUI::multi_panel() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionUI.multi_panel)
  return has_multi_panel()
      ? *action_.multi_panel_
      : ::SC2APIProtocol::ActionMultiPanel::default_instance();
}
::SC2APIProtocol::ActionMultiPanel* ActionUI::mutable_multi_panel() {
  if (!has_multi_panel()) {
    clear_action();
    set_has_multi_panel();
    action_.multi_panel_ = new ::SC2APIProtocol::ActionMultiPanel;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionUI.multi_panel)
  return action_.multi_panel_;
}
::SC2APIProtocol::ActionMultiPanel* ActionUI::release_multi_panel() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionUI.multi_panel)
  if (has_multi_panel()) {
    clear_has_action();
    ::SC2APIProtocol::ActionMultiPanel* temp = action_.multi_panel_;
    action_.multi_panel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionUI::set_allocated_multi_panel(::SC2APIProtocol::ActionMultiPanel* multi_panel) {
  clear_action();
  if (multi_panel) {
    set_has_multi_panel();
    action_.multi_panel_ = multi_panel;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.multi_panel)
}

// optional .SC2APIProtocol.ActionCargoPanelUnload cargo_panel = 7;
bool ActionUI::has_cargo_panel() const {
  return action_case() == kCargoPanel;
}
void ActionUI::set_has_cargo_panel() {
  _oneof_case_[0] = kCargoPanel;
}
void ActionUI::clear_cargo_panel() {
  if (has_cargo_panel()) {
    delete action_.cargo_panel_;
    clear_has_action();
  }
}
 const ::SC2APIProtocol::ActionCargoPanelUnload& ActionUI::cargo_panel() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionUI.cargo_panel)
  return has_cargo_panel()
      ? *action_.cargo_panel_
      : ::SC2APIProtocol::ActionCargoPanelUnload::default_instance();
}
::SC2APIProtocol::ActionCargoPanelUnload* ActionUI::mutable_cargo_panel() {
  if (!has_cargo_panel()) {
    clear_action();
    set_has_cargo_panel();
    action_.cargo_panel_ = new ::SC2APIProtocol::ActionCargoPanelUnload;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionUI.cargo_panel)
  return action_.cargo_panel_;
}
::SC2APIProtocol::ActionCargoPanelUnload* ActionUI::release_cargo_panel() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionUI.cargo_panel)
  if (has_cargo_panel()) {
    clear_has_action();
    ::SC2APIProtocol::ActionCargoPanelUnload* temp = action_.cargo_panel_;
    action_.cargo_panel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionUI::set_allocated_cargo_panel(::SC2APIProtocol::ActionCargoPanelUnload* cargo_panel) {
  clear_action();
  if (cargo_panel) {
    set_has_cargo_panel();
    action_.cargo_panel_ = cargo_panel;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.cargo_panel)
}

// optional .SC2APIProtocol.ActionProductionPanelRemoveFromQueue production_panel = 8;
bool ActionUI::has_production_panel() const {
  return action_case() == kProductionPanel;
}
void ActionUI::set_has_production_panel() {
  _oneof_case_[0] = kProductionPanel;
}
void ActionUI::clear_production_panel() {
  if (has_production_panel()) {
    delete action_.production_panel_;
    clear_has_action();
  }
}
 const ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue& ActionUI::production_panel() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionUI.production_panel)
  return has_production_panel()
      ? *action_.production_panel_
      : ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue::default_instance();
}
::SC2APIProtocol::ActionProductionPanelRemoveFromQueue* ActionUI::mutable_production_panel() {
  if (!has_production_panel()) {
    clear_action();
    set_has_production_panel();
    action_.production_panel_ = new ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionUI.production_panel)
  return action_.production_panel_;
}
::SC2APIProtocol::ActionProductionPanelRemoveFromQueue* ActionUI::release_production_panel() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionUI.production_panel)
  if (has_production_panel()) {
    clear_has_action();
    ::SC2APIProtocol::ActionProductionPanelRemoveFromQueue* temp = action_.production_panel_;
    action_.production_panel_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionUI::set_allocated_production_panel(::SC2APIProtocol::ActionProductionPanelRemoveFromQueue* production_panel) {
  clear_action();
  if (production_panel) {
    set_has_production_panel();
    action_.production_panel_ = production_panel;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.production_panel)
}

// optional .SC2APIProtocol.ActionToggleAutocast toggle_autocast = 9;
bool ActionUI::has_toggle_autocast() const {
  return action_case() == kToggleAutocast;
}
void ActionUI::set_has_toggle_autocast() {
  _oneof_case_[0] = kToggleAutocast;
}
void ActionUI::clear_toggle_autocast() {
  if (has_toggle_autocast()) {
    delete action_.toggle_autocast_;
    clear_has_action();
  }
}
 const ::SC2APIProtocol::ActionToggleAutocast& ActionUI::toggle_autocast() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionUI.toggle_autocast)
  return has_toggle_autocast()
      ? *action_.toggle_autocast_
      : ::SC2APIProtocol::ActionToggleAutocast::default_instance();
}
::SC2APIProtocol::ActionToggleAutocast* ActionUI::mutable_toggle_autocast() {
  if (!has_toggle_autocast()) {
    clear_action();
    set_has_toggle_autocast();
    action_.toggle_autocast_ = new ::SC2APIProtocol::ActionToggleAutocast;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionUI.toggle_autocast)
  return action_.toggle_autocast_;
}
::SC2APIProtocol::ActionToggleAutocast* ActionUI::release_toggle_autocast() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionUI.toggle_autocast)
  if (has_toggle_autocast()) {
    clear_has_action();
    ::SC2APIProtocol::ActionToggleAutocast* temp = action_.toggle_autocast_;
    action_.toggle_autocast_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionUI::set_allocated_toggle_autocast(::SC2APIProtocol::ActionToggleAutocast* toggle_autocast) {
  clear_action();
  if (toggle_autocast) {
    set_has_toggle_autocast();
    action_.toggle_autocast_ = toggle_autocast;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionUI.toggle_autocast)
}

bool ActionUI::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
void ActionUI::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
ActionUI::ActionCase ActionUI::action_case() const {
  return ActionUI::ActionCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ActionControlGroup_ControlGroupAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionControlGroup_ControlGroupAction_descriptor_;
}
bool ActionControlGroup_ControlGroupAction_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ActionControlGroup_ControlGroupAction ActionControlGroup::Recall;
const ActionControlGroup_ControlGroupAction ActionControlGroup::Set;
const ActionControlGroup_ControlGroupAction ActionControlGroup::Append;
const ActionControlGroup_ControlGroupAction ActionControlGroup::SetAndSteal;
const ActionControlGroup_ControlGroupAction ActionControlGroup::AppendAndSteal;
const ActionControlGroup_ControlGroupAction ActionControlGroup::ControlGroupAction_MIN;
const ActionControlGroup_ControlGroupAction ActionControlGroup::ControlGroupAction_MAX;
const int ActionControlGroup::ControlGroupAction_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionControlGroup::kActionFieldNumber;
const int ActionControlGroup::kControlGroupIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionControlGroup::ActionControlGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionControlGroup)
}

void ActionControlGroup::InitAsDefaultInstance() {
}

ActionControlGroup::ActionControlGroup(const ActionControlGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionControlGroup)
}

void ActionControlGroup::SharedCtor() {
  _cached_size_ = 0;
  action_ = 1;
  control_group_index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionControlGroup::~ActionControlGroup() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionControlGroup)
  SharedDtor();
}

void ActionControlGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionControlGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionControlGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionControlGroup_descriptor_;
}

const ActionControlGroup& ActionControlGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  return *default_instance_;
}

ActionControlGroup* ActionControlGroup::default_instance_ = NULL;

ActionControlGroup* ActionControlGroup::New(::google::protobuf::Arena* arena) const {
  ActionControlGroup* n = new ActionControlGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionControlGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionControlGroup)
  if (_has_bits_[0 / 32] & 3u) {
    action_ = 1;
    control_group_index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionControlGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionControlGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ActionControlGroup.ControlGroupAction action = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ActionControlGroup_ControlGroupAction_IsValid(value)) {
            set_action(static_cast< ::SC2APIProtocol::ActionControlGroup_ControlGroupAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_control_group_index;
        break;
      }

      // optional uint32 control_group_index = 2;
      case 2: {
        if (tag == 16) {
         parse_control_group_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &control_group_index_)));
          set_has_control_group_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionControlGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionControlGroup)
  return false;
#undef DO_
}

void ActionControlGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionControlGroup)
  // optional .SC2APIProtocol.ActionControlGroup.ControlGroupAction action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional uint32 control_group_index = 2;
  if (has_control_group_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->control_group_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionControlGroup)
}

::google::protobuf::uint8* ActionControlGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionControlGroup)
  // optional .SC2APIProtocol.ActionControlGroup.ControlGroupAction action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional uint32 control_group_index = 2;
  if (has_control_group_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->control_group_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionControlGroup)
  return target;
}

int ActionControlGroup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionControlGroup)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .SC2APIProtocol.ActionControlGroup.ControlGroupAction action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional uint32 control_group_index = 2;
    if (has_control_group_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->control_group_index());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionControlGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionControlGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionControlGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionControlGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionControlGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionControlGroup)
    MergeFrom(*source);
  }
}

void ActionControlGroup::MergeFrom(const ActionControlGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionControlGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_control_group_index()) {
      set_control_group_index(from.control_group_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionControlGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionControlGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionControlGroup::CopyFrom(const ActionControlGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionControlGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionControlGroup::IsInitialized() const {

  return true;
}

void ActionControlGroup::Swap(ActionControlGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionControlGroup::InternalSwap(ActionControlGroup* other) {
  std::swap(action_, other->action_);
  std::swap(control_group_index_, other->control_group_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionControlGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionControlGroup_descriptor_;
  metadata.reflection = ActionControlGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionControlGroup

// optional .SC2APIProtocol.ActionControlGroup.ControlGroupAction action = 1;
bool ActionControlGroup::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActionControlGroup::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
void ActionControlGroup::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActionControlGroup::clear_action() {
  action_ = 1;
  clear_has_action();
}
 ::SC2APIProtocol::ActionControlGroup_ControlGroupAction ActionControlGroup::action() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionControlGroup.action)
  return static_cast< ::SC2APIProtocol::ActionControlGroup_ControlGroupAction >(action_);
}
 void ActionControlGroup::set_action(::SC2APIProtocol::ActionControlGroup_ControlGroupAction value) {
  assert(::SC2APIProtocol::ActionControlGroup_ControlGroupAction_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionControlGroup.action)
}

// optional uint32 control_group_index = 2;
bool ActionControlGroup::has_control_group_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActionControlGroup::set_has_control_group_index() {
  _has_bits_[0] |= 0x00000002u;
}
void ActionControlGroup::clear_has_control_group_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActionControlGroup::clear_control_group_index() {
  control_group_index_ = 0u;
  clear_has_control_group_index();
}
 ::google::protobuf::uint32 ActionControlGroup::control_group_index() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionControlGroup.control_group_index)
  return control_group_index_;
}
 void ActionControlGroup::set_control_group_index(::google::protobuf::uint32 value) {
  set_has_control_group_index();
  control_group_index_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionControlGroup.control_group_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionSelectArmy::kSelectionAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionSelectArmy::ActionSelectArmy()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionSelectArmy)
}

void ActionSelectArmy::InitAsDefaultInstance() {
}

ActionSelectArmy::ActionSelectArmy(const ActionSelectArmy& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionSelectArmy)
}

void ActionSelectArmy::SharedCtor() {
  _cached_size_ = 0;
  selection_add_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionSelectArmy::~ActionSelectArmy() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionSelectArmy)
  SharedDtor();
}

void ActionSelectArmy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionSelectArmy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionSelectArmy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionSelectArmy_descriptor_;
}

const ActionSelectArmy& ActionSelectArmy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  return *default_instance_;
}

ActionSelectArmy* ActionSelectArmy::default_instance_ = NULL;

ActionSelectArmy* ActionSelectArmy::New(::google::protobuf::Arena* arena) const {
  ActionSelectArmy* n = new ActionSelectArmy;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionSelectArmy::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionSelectArmy)
  selection_add_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionSelectArmy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionSelectArmy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool selection_add = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selection_add_)));
          set_has_selection_add();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionSelectArmy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionSelectArmy)
  return false;
#undef DO_
}

void ActionSelectArmy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionSelectArmy)
  // optional bool selection_add = 1;
  if (has_selection_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->selection_add(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionSelectArmy)
}

::google::protobuf::uint8* ActionSelectArmy::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionSelectArmy)
  // optional bool selection_add = 1;
  if (has_selection_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->selection_add(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionSelectArmy)
  return target;
}

int ActionSelectArmy::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionSelectArmy)
  int total_size = 0;

  // optional bool selection_add = 1;
  if (has_selection_add()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionSelectArmy::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionSelectArmy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionSelectArmy* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionSelectArmy>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionSelectArmy)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionSelectArmy)
    MergeFrom(*source);
  }
}

void ActionSelectArmy::MergeFrom(const ActionSelectArmy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionSelectArmy)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selection_add()) {
      set_selection_add(from.selection_add());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionSelectArmy::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionSelectArmy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSelectArmy::CopyFrom(const ActionSelectArmy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionSelectArmy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSelectArmy::IsInitialized() const {

  return true;
}

void ActionSelectArmy::Swap(ActionSelectArmy* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionSelectArmy::InternalSwap(ActionSelectArmy* other) {
  std::swap(selection_add_, other->selection_add_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionSelectArmy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionSelectArmy_descriptor_;
  metadata.reflection = ActionSelectArmy_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionSelectArmy

// optional bool selection_add = 1;
bool ActionSelectArmy::has_selection_add() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActionSelectArmy::set_has_selection_add() {
  _has_bits_[0] |= 0x00000001u;
}
void ActionSelectArmy::clear_has_selection_add() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActionSelectArmy::clear_selection_add() {
  selection_add_ = false;
  clear_has_selection_add();
}
 bool ActionSelectArmy::selection_add() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionSelectArmy.selection_add)
  return selection_add_;
}
 void ActionSelectArmy::set_selection_add(bool value) {
  set_has_selection_add();
  selection_add_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionSelectArmy.selection_add)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionSelectWarpGates::kSelectionAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionSelectWarpGates::ActionSelectWarpGates()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionSelectWarpGates)
}

void ActionSelectWarpGates::InitAsDefaultInstance() {
}

ActionSelectWarpGates::ActionSelectWarpGates(const ActionSelectWarpGates& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionSelectWarpGates)
}

void ActionSelectWarpGates::SharedCtor() {
  _cached_size_ = 0;
  selection_add_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionSelectWarpGates::~ActionSelectWarpGates() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionSelectWarpGates)
  SharedDtor();
}

void ActionSelectWarpGates::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionSelectWarpGates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionSelectWarpGates::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionSelectWarpGates_descriptor_;
}

const ActionSelectWarpGates& ActionSelectWarpGates::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  return *default_instance_;
}

ActionSelectWarpGates* ActionSelectWarpGates::default_instance_ = NULL;

ActionSelectWarpGates* ActionSelectWarpGates::New(::google::protobuf::Arena* arena) const {
  ActionSelectWarpGates* n = new ActionSelectWarpGates;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionSelectWarpGates::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionSelectWarpGates)
  selection_add_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionSelectWarpGates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionSelectWarpGates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool selection_add = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selection_add_)));
          set_has_selection_add();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionSelectWarpGates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionSelectWarpGates)
  return false;
#undef DO_
}

void ActionSelectWarpGates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionSelectWarpGates)
  // optional bool selection_add = 1;
  if (has_selection_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->selection_add(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionSelectWarpGates)
}

::google::protobuf::uint8* ActionSelectWarpGates::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionSelectWarpGates)
  // optional bool selection_add = 1;
  if (has_selection_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->selection_add(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionSelectWarpGates)
  return target;
}

int ActionSelectWarpGates::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionSelectWarpGates)
  int total_size = 0;

  // optional bool selection_add = 1;
  if (has_selection_add()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionSelectWarpGates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionSelectWarpGates)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionSelectWarpGates* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionSelectWarpGates>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionSelectWarpGates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionSelectWarpGates)
    MergeFrom(*source);
  }
}

void ActionSelectWarpGates::MergeFrom(const ActionSelectWarpGates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionSelectWarpGates)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selection_add()) {
      set_selection_add(from.selection_add());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionSelectWarpGates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionSelectWarpGates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSelectWarpGates::CopyFrom(const ActionSelectWarpGates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionSelectWarpGates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSelectWarpGates::IsInitialized() const {

  return true;
}

void ActionSelectWarpGates::Swap(ActionSelectWarpGates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionSelectWarpGates::InternalSwap(ActionSelectWarpGates* other) {
  std::swap(selection_add_, other->selection_add_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionSelectWarpGates::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionSelectWarpGates_descriptor_;
  metadata.reflection = ActionSelectWarpGates_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionSelectWarpGates

// optional bool selection_add = 1;
bool ActionSelectWarpGates::has_selection_add() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActionSelectWarpGates::set_has_selection_add() {
  _has_bits_[0] |= 0x00000001u;
}
void ActionSelectWarpGates::clear_has_selection_add() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActionSelectWarpGates::clear_selection_add() {
  selection_add_ = false;
  clear_has_selection_add();
}
 bool ActionSelectWarpGates::selection_add() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionSelectWarpGates.selection_add)
  return selection_add_;
}
 void ActionSelectWarpGates::set_selection_add(bool value) {
  set_has_selection_add();
  selection_add_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionSelectWarpGates.selection_add)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionSelectLarva::ActionSelectLarva()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionSelectLarva)
}

void ActionSelectLarva::InitAsDefaultInstance() {
}

ActionSelectLarva::ActionSelectLarva(const ActionSelectLarva& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionSelectLarva)
}

void ActionSelectLarva::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionSelectLarva::~ActionSelectLarva() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionSelectLarva)
  SharedDtor();
}

void ActionSelectLarva::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionSelectLarva::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionSelectLarva::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionSelectLarva_descriptor_;
}

const ActionSelectLarva& ActionSelectLarva::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  return *default_instance_;
}

ActionSelectLarva* ActionSelectLarva::default_instance_ = NULL;

ActionSelectLarva* ActionSelectLarva::New(::google::protobuf::Arena* arena) const {
  ActionSelectLarva* n = new ActionSelectLarva;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionSelectLarva::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionSelectLarva)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionSelectLarva::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionSelectLarva)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionSelectLarva)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionSelectLarva)
  return false;
#undef DO_
}

void ActionSelectLarva::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionSelectLarva)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionSelectLarva)
}

::google::protobuf::uint8* ActionSelectLarva::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionSelectLarva)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionSelectLarva)
  return target;
}

int ActionSelectLarva::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionSelectLarva)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionSelectLarva::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionSelectLarva)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionSelectLarva* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionSelectLarva>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionSelectLarva)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionSelectLarva)
    MergeFrom(*source);
  }
}

void ActionSelectLarva::MergeFrom(const ActionSelectLarva& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionSelectLarva)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionSelectLarva::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionSelectLarva)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSelectLarva::CopyFrom(const ActionSelectLarva& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionSelectLarva)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSelectLarva::IsInitialized() const {

  return true;
}

void ActionSelectLarva::Swap(ActionSelectLarva* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionSelectLarva::InternalSwap(ActionSelectLarva* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionSelectLarva::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionSelectLarva_descriptor_;
  metadata.reflection = ActionSelectLarva_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionSelectLarva

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ActionSelectIdleWorker_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionSelectIdleWorker_Type_descriptor_;
}
bool ActionSelectIdleWorker_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ActionSelectIdleWorker_Type ActionSelectIdleWorker::Set;
const ActionSelectIdleWorker_Type ActionSelectIdleWorker::Add;
const ActionSelectIdleWorker_Type ActionSelectIdleWorker::All;
const ActionSelectIdleWorker_Type ActionSelectIdleWorker::AddAll;
const ActionSelectIdleWorker_Type ActionSelectIdleWorker::Type_MIN;
const ActionSelectIdleWorker_Type ActionSelectIdleWorker::Type_MAX;
const int ActionSelectIdleWorker::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionSelectIdleWorker::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionSelectIdleWorker::ActionSelectIdleWorker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionSelectIdleWorker)
}

void ActionSelectIdleWorker::InitAsDefaultInstance() {
}

ActionSelectIdleWorker::ActionSelectIdleWorker(const ActionSelectIdleWorker& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionSelectIdleWorker)
}

void ActionSelectIdleWorker::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionSelectIdleWorker::~ActionSelectIdleWorker() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionSelectIdleWorker)
  SharedDtor();
}

void ActionSelectIdleWorker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionSelectIdleWorker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionSelectIdleWorker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionSelectIdleWorker_descriptor_;
}

const ActionSelectIdleWorker& ActionSelectIdleWorker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  return *default_instance_;
}

ActionSelectIdleWorker* ActionSelectIdleWorker::default_instance_ = NULL;

ActionSelectIdleWorker* ActionSelectIdleWorker::New(::google::protobuf::Arena* arena) const {
  ActionSelectIdleWorker* n = new ActionSelectIdleWorker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionSelectIdleWorker::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionSelectIdleWorker)
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionSelectIdleWorker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionSelectIdleWorker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ActionSelectIdleWorker.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ActionSelectIdleWorker_Type_IsValid(value)) {
            set_type(static_cast< ::SC2APIProtocol::ActionSelectIdleWorker_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionSelectIdleWorker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionSelectIdleWorker)
  return false;
#undef DO_
}

void ActionSelectIdleWorker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionSelectIdleWorker)
  // optional .SC2APIProtocol.ActionSelectIdleWorker.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionSelectIdleWorker)
}

::google::protobuf::uint8* ActionSelectIdleWorker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionSelectIdleWorker)
  // optional .SC2APIProtocol.ActionSelectIdleWorker.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionSelectIdleWorker)
  return target;
}

int ActionSelectIdleWorker::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionSelectIdleWorker)
  int total_size = 0;

  // optional .SC2APIProtocol.ActionSelectIdleWorker.Type type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionSelectIdleWorker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionSelectIdleWorker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionSelectIdleWorker* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionSelectIdleWorker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionSelectIdleWorker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionSelectIdleWorker)
    MergeFrom(*source);
  }
}

void ActionSelectIdleWorker::MergeFrom(const ActionSelectIdleWorker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionSelectIdleWorker)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionSelectIdleWorker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionSelectIdleWorker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSelectIdleWorker::CopyFrom(const ActionSelectIdleWorker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionSelectIdleWorker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSelectIdleWorker::IsInitialized() const {

  return true;
}

void ActionSelectIdleWorker::Swap(ActionSelectIdleWorker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionSelectIdleWorker::InternalSwap(ActionSelectIdleWorker* other) {
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionSelectIdleWorker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionSelectIdleWorker_descriptor_;
  metadata.reflection = ActionSelectIdleWorker_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionSelectIdleWorker

// optional .SC2APIProtocol.ActionSelectIdleWorker.Type type = 1;
bool ActionSelectIdleWorker::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActionSelectIdleWorker::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ActionSelectIdleWorker::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActionSelectIdleWorker::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::SC2APIProtocol::ActionSelectIdleWorker_Type ActionSelectIdleWorker::type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionSelectIdleWorker.type)
  return static_cast< ::SC2APIProtocol::ActionSelectIdleWorker_Type >(type_);
}
 void ActionSelectIdleWorker::set_type(::SC2APIProtocol::ActionSelectIdleWorker_Type value) {
  assert(::SC2APIProtocol::ActionSelectIdleWorker_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionSelectIdleWorker.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ActionMultiPanel_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionMultiPanel_Type_descriptor_;
}
bool ActionMultiPanel_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ActionMultiPanel_Type ActionMultiPanel::SingleSelect;
const ActionMultiPanel_Type ActionMultiPanel::DeselectUnit;
const ActionMultiPanel_Type ActionMultiPanel::SelectAllOfType;
const ActionMultiPanel_Type ActionMultiPanel::DeselectAllOfType;
const ActionMultiPanel_Type ActionMultiPanel::Type_MIN;
const ActionMultiPanel_Type ActionMultiPanel::Type_MAX;
const int ActionMultiPanel::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionMultiPanel::kTypeFieldNumber;
const int ActionMultiPanel::kUnitIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionMultiPanel::ActionMultiPanel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionMultiPanel)
}

void ActionMultiPanel::InitAsDefaultInstance() {
}

ActionMultiPanel::ActionMultiPanel(const ActionMultiPanel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionMultiPanel)
}

void ActionMultiPanel::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  unit_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionMultiPanel::~ActionMultiPanel() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionMultiPanel)
  SharedDtor();
}

void ActionMultiPanel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionMultiPanel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionMultiPanel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionMultiPanel_descriptor_;
}

const ActionMultiPanel& ActionMultiPanel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  return *default_instance_;
}

ActionMultiPanel* ActionMultiPanel::default_instance_ = NULL;

ActionMultiPanel* ActionMultiPanel::New(::google::protobuf::Arena* arena) const {
  ActionMultiPanel* n = new ActionMultiPanel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionMultiPanel::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionMultiPanel)
  if (_has_bits_[0 / 32] & 3u) {
    type_ = 1;
    unit_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionMultiPanel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionMultiPanel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ActionMultiPanel.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ActionMultiPanel_Type_IsValid(value)) {
            set_type(static_cast< ::SC2APIProtocol::ActionMultiPanel_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unit_index;
        break;
      }

      // optional int32 unit_index = 2;
      case 2: {
        if (tag == 16) {
         parse_unit_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_index_)));
          set_has_unit_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionMultiPanel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionMultiPanel)
  return false;
#undef DO_
}

void ActionMultiPanel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionMultiPanel)
  // optional .SC2APIProtocol.ActionMultiPanel.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 unit_index = 2;
  if (has_unit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unit_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionMultiPanel)
}

::google::protobuf::uint8* ActionMultiPanel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionMultiPanel)
  // optional .SC2APIProtocol.ActionMultiPanel.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 unit_index = 2;
  if (has_unit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unit_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionMultiPanel)
  return target;
}

int ActionMultiPanel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionMultiPanel)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .SC2APIProtocol.ActionMultiPanel.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 unit_index = 2;
    if (has_unit_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unit_index());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionMultiPanel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionMultiPanel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionMultiPanel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionMultiPanel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionMultiPanel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionMultiPanel)
    MergeFrom(*source);
  }
}

void ActionMultiPanel::MergeFrom(const ActionMultiPanel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionMultiPanel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_unit_index()) {
      set_unit_index(from.unit_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionMultiPanel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionMultiPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionMultiPanel::CopyFrom(const ActionMultiPanel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionMultiPanel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionMultiPanel::IsInitialized() const {

  return true;
}

void ActionMultiPanel::Swap(ActionMultiPanel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionMultiPanel::InternalSwap(ActionMultiPanel* other) {
  std::swap(type_, other->type_);
  std::swap(unit_index_, other->unit_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionMultiPanel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionMultiPanel_descriptor_;
  metadata.reflection = ActionMultiPanel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionMultiPanel

// optional .SC2APIProtocol.ActionMultiPanel.Type type = 1;
bool ActionMultiPanel::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActionMultiPanel::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void ActionMultiPanel::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActionMultiPanel::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::SC2APIProtocol::ActionMultiPanel_Type ActionMultiPanel::type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionMultiPanel.type)
  return static_cast< ::SC2APIProtocol::ActionMultiPanel_Type >(type_);
}
 void ActionMultiPanel::set_type(::SC2APIProtocol::ActionMultiPanel_Type value) {
  assert(::SC2APIProtocol::ActionMultiPanel_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionMultiPanel.type)
}

// optional int32 unit_index = 2;
bool ActionMultiPanel::has_unit_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActionMultiPanel::set_has_unit_index() {
  _has_bits_[0] |= 0x00000002u;
}
void ActionMultiPanel::clear_has_unit_index() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActionMultiPanel::clear_unit_index() {
  unit_index_ = 0;
  clear_has_unit_index();
}
 ::google::protobuf::int32 ActionMultiPanel::unit_index() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionMultiPanel.unit_index)
  return unit_index_;
}
 void ActionMultiPanel::set_unit_index(::google::protobuf::int32 value) {
  set_has_unit_index();
  unit_index_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionMultiPanel.unit_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionCargoPanelUnload::kUnitIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionCargoPanelUnload::ActionCargoPanelUnload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionCargoPanelUnload)
}

void ActionCargoPanelUnload::InitAsDefaultInstance() {
}

ActionCargoPanelUnload::ActionCargoPanelUnload(const ActionCargoPanelUnload& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionCargoPanelUnload)
}

void ActionCargoPanelUnload::SharedCtor() {
  _cached_size_ = 0;
  unit_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionCargoPanelUnload::~ActionCargoPanelUnload() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionCargoPanelUnload)
  SharedDtor();
}

void ActionCargoPanelUnload::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionCargoPanelUnload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionCargoPanelUnload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionCargoPanelUnload_descriptor_;
}

const ActionCargoPanelUnload& ActionCargoPanelUnload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  return *default_instance_;
}

ActionCargoPanelUnload* ActionCargoPanelUnload::default_instance_ = NULL;

ActionCargoPanelUnload* ActionCargoPanelUnload::New(::google::protobuf::Arena* arena) const {
  ActionCargoPanelUnload* n = new ActionCargoPanelUnload;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionCargoPanelUnload::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionCargoPanelUnload)
  unit_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionCargoPanelUnload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionCargoPanelUnload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 unit_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_index_)));
          set_has_unit_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionCargoPanelUnload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionCargoPanelUnload)
  return false;
#undef DO_
}

void ActionCargoPanelUnload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionCargoPanelUnload)
  // optional int32 unit_index = 1;
  if (has_unit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->unit_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionCargoPanelUnload)
}

::google::protobuf::uint8* ActionCargoPanelUnload::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionCargoPanelUnload)
  // optional int32 unit_index = 1;
  if (has_unit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->unit_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionCargoPanelUnload)
  return target;
}

int ActionCargoPanelUnload::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionCargoPanelUnload)
  int total_size = 0;

  // optional int32 unit_index = 1;
  if (has_unit_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unit_index());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionCargoPanelUnload::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionCargoPanelUnload)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionCargoPanelUnload* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionCargoPanelUnload>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionCargoPanelUnload)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionCargoPanelUnload)
    MergeFrom(*source);
  }
}

void ActionCargoPanelUnload::MergeFrom(const ActionCargoPanelUnload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionCargoPanelUnload)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit_index()) {
      set_unit_index(from.unit_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionCargoPanelUnload::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionCargoPanelUnload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionCargoPanelUnload::CopyFrom(const ActionCargoPanelUnload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionCargoPanelUnload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionCargoPanelUnload::IsInitialized() const {

  return true;
}

void ActionCargoPanelUnload::Swap(ActionCargoPanelUnload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionCargoPanelUnload::InternalSwap(ActionCargoPanelUnload* other) {
  std::swap(unit_index_, other->unit_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionCargoPanelUnload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionCargoPanelUnload_descriptor_;
  metadata.reflection = ActionCargoPanelUnload_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionCargoPanelUnload

// optional int32 unit_index = 1;
bool ActionCargoPanelUnload::has_unit_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActionCargoPanelUnload::set_has_unit_index() {
  _has_bits_[0] |= 0x00000001u;
}
void ActionCargoPanelUnload::clear_has_unit_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActionCargoPanelUnload::clear_unit_index() {
  unit_index_ = 0;
  clear_has_unit_index();
}
 ::google::protobuf::int32 ActionCargoPanelUnload::unit_index() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionCargoPanelUnload.unit_index)
  return unit_index_;
}
 void ActionCargoPanelUnload::set_unit_index(::google::protobuf::int32 value) {
  set_has_unit_index();
  unit_index_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionCargoPanelUnload.unit_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionProductionPanelRemoveFromQueue::kUnitIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionProductionPanelRemoveFromQueue::ActionProductionPanelRemoveFromQueue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
}

void ActionProductionPanelRemoveFromQueue::InitAsDefaultInstance() {
}

ActionProductionPanelRemoveFromQueue::ActionProductionPanelRemoveFromQueue(const ActionProductionPanelRemoveFromQueue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
}

void ActionProductionPanelRemoveFromQueue::SharedCtor() {
  _cached_size_ = 0;
  unit_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionProductionPanelRemoveFromQueue::~ActionProductionPanelRemoveFromQueue() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  SharedDtor();
}

void ActionProductionPanelRemoveFromQueue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionProductionPanelRemoveFromQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionProductionPanelRemoveFromQueue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionProductionPanelRemoveFromQueue_descriptor_;
}

const ActionProductionPanelRemoveFromQueue& ActionProductionPanelRemoveFromQueue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  return *default_instance_;
}

ActionProductionPanelRemoveFromQueue* ActionProductionPanelRemoveFromQueue::default_instance_ = NULL;

ActionProductionPanelRemoveFromQueue* ActionProductionPanelRemoveFromQueue::New(::google::protobuf::Arena* arena) const {
  ActionProductionPanelRemoveFromQueue* n = new ActionProductionPanelRemoveFromQueue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionProductionPanelRemoveFromQueue::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  unit_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionProductionPanelRemoveFromQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 unit_index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unit_index_)));
          set_has_unit_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  return false;
#undef DO_
}

void ActionProductionPanelRemoveFromQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  // optional int32 unit_index = 1;
  if (has_unit_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->unit_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
}

::google::protobuf::uint8* ActionProductionPanelRemoveFromQueue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  // optional int32 unit_index = 1;
  if (has_unit_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->unit_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  return target;
}

int ActionProductionPanelRemoveFromQueue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  int total_size = 0;

  // optional int32 unit_index = 1;
  if (has_unit_index()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unit_index());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionProductionPanelRemoveFromQueue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionProductionPanelRemoveFromQueue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionProductionPanelRemoveFromQueue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
    MergeFrom(*source);
  }
}

void ActionProductionPanelRemoveFromQueue::MergeFrom(const ActionProductionPanelRemoveFromQueue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit_index()) {
      set_unit_index(from.unit_index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionProductionPanelRemoveFromQueue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionProductionPanelRemoveFromQueue::CopyFrom(const ActionProductionPanelRemoveFromQueue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionProductionPanelRemoveFromQueue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionProductionPanelRemoveFromQueue::IsInitialized() const {

  return true;
}

void ActionProductionPanelRemoveFromQueue::Swap(ActionProductionPanelRemoveFromQueue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionProductionPanelRemoveFromQueue::InternalSwap(ActionProductionPanelRemoveFromQueue* other) {
  std::swap(unit_index_, other->unit_index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionProductionPanelRemoveFromQueue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionProductionPanelRemoveFromQueue_descriptor_;
  metadata.reflection = ActionProductionPanelRemoveFromQueue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionProductionPanelRemoveFromQueue

// optional int32 unit_index = 1;
bool ActionProductionPanelRemoveFromQueue::has_unit_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActionProductionPanelRemoveFromQueue::set_has_unit_index() {
  _has_bits_[0] |= 0x00000001u;
}
void ActionProductionPanelRemoveFromQueue::clear_has_unit_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActionProductionPanelRemoveFromQueue::clear_unit_index() {
  unit_index_ = 0;
  clear_has_unit_index();
}
 ::google::protobuf::int32 ActionProductionPanelRemoveFromQueue::unit_index() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionProductionPanelRemoveFromQueue.unit_index)
  return unit_index_;
}
 void ActionProductionPanelRemoveFromQueue::set_unit_index(::google::protobuf::int32 value) {
  set_has_unit_index();
  unit_index_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionProductionPanelRemoveFromQueue.unit_index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionToggleAutocast::kAbilityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionToggleAutocast::ActionToggleAutocast()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionToggleAutocast)
}

void ActionToggleAutocast::InitAsDefaultInstance() {
}

ActionToggleAutocast::ActionToggleAutocast(const ActionToggleAutocast& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionToggleAutocast)
}

void ActionToggleAutocast::SharedCtor() {
  _cached_size_ = 0;
  ability_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionToggleAutocast::~ActionToggleAutocast() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionToggleAutocast)
  SharedDtor();
}

void ActionToggleAutocast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionToggleAutocast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionToggleAutocast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionToggleAutocast_descriptor_;
}

const ActionToggleAutocast& ActionToggleAutocast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  return *default_instance_;
}

ActionToggleAutocast* ActionToggleAutocast::default_instance_ = NULL;

ActionToggleAutocast* ActionToggleAutocast::New(::google::protobuf::Arena* arena) const {
  ActionToggleAutocast* n = new ActionToggleAutocast;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionToggleAutocast::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionToggleAutocast)
  ability_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionToggleAutocast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionToggleAutocast)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ability_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_id_)));
          set_has_ability_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionToggleAutocast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionToggleAutocast)
  return false;
#undef DO_
}

void ActionToggleAutocast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionToggleAutocast)
  // optional int32 ability_id = 1;
  if (has_ability_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ability_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionToggleAutocast)
}

::google::protobuf::uint8* ActionToggleAutocast::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionToggleAutocast)
  // optional int32 ability_id = 1;
  if (has_ability_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ability_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionToggleAutocast)
  return target;
}

int ActionToggleAutocast::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionToggleAutocast)
  int total_size = 0;

  // optional int32 ability_id = 1;
  if (has_ability_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ability_id());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionToggleAutocast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionToggleAutocast)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionToggleAutocast* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionToggleAutocast>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionToggleAutocast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionToggleAutocast)
    MergeFrom(*source);
  }
}

void ActionToggleAutocast::MergeFrom(const ActionToggleAutocast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionToggleAutocast)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ability_id()) {
      set_ability_id(from.ability_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionToggleAutocast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionToggleAutocast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionToggleAutocast::CopyFrom(const ActionToggleAutocast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionToggleAutocast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionToggleAutocast::IsInitialized() const {

  return true;
}

void ActionToggleAutocast::Swap(ActionToggleAutocast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionToggleAutocast::InternalSwap(ActionToggleAutocast* other) {
  std::swap(ability_id_, other->ability_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionToggleAutocast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionToggleAutocast_descriptor_;
  metadata.reflection = ActionToggleAutocast_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionToggleAutocast

// optional int32 ability_id = 1;
bool ActionToggleAutocast::has_ability_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActionToggleAutocast::set_has_ability_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ActionToggleAutocast::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActionToggleAutocast::clear_ability_id() {
  ability_id_ = 0;
  clear_has_ability_id();
}
 ::google::protobuf::int32 ActionToggleAutocast::ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionToggleAutocast.ability_id)
  return ability_id_;
}
 void ActionToggleAutocast::set_ability_id(::google::protobuf::int32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionToggleAutocast.ability_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SC2APIProtocol

// @@protoc_insertion_point(global_scope)
