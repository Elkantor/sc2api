// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "s2clientprotocol/data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SC2APIProtocol {

namespace {

const ::google::protobuf::Descriptor* AbilityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AbilityData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AbilityData_Target_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DamageBonus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DamageBonus_reflection_ = NULL;
const ::google::protobuf::Descriptor* Weapon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Weapon_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Weapon_TargetType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* UnitTypeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnitTypeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Attribute_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_s2clientprotocol_2fdata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_s2clientprotocol_2fdata_2eproto() {
  protobuf_AddDesc_s2clientprotocol_2fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "s2clientprotocol/data.proto");
  GOOGLE_CHECK(file != NULL);
  AbilityData_descriptor_ = file->message_type(0);
  static const int AbilityData_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityData, ability_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityData, link_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityData, link_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityData, button_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityData, friendly_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityData, hotkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityData, remaps_to_ability_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityData, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityData, target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityData, allow_minimap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityData, allow_autocast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityData, is_building_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityData, footprint_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityData, is_instant_placement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityData, cast_range_),
  };
  AbilityData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AbilityData_descriptor_,
      AbilityData::default_instance_,
      AbilityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityData, _has_bits_[0]),
      -1,
      -1,
      sizeof(AbilityData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AbilityData, _internal_metadata_),
      -1);
  AbilityData_Target_descriptor_ = AbilityData_descriptor_->enum_type(0);
  DamageBonus_descriptor_ = file->message_type(1);
  static const int DamageBonus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageBonus, attribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageBonus, bonus_),
  };
  DamageBonus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DamageBonus_descriptor_,
      DamageBonus::default_instance_,
      DamageBonus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageBonus, _has_bits_[0]),
      -1,
      -1,
      sizeof(DamageBonus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageBonus, _internal_metadata_),
      -1);
  Weapon_descriptor_ = file->message_type(2);
  static const int Weapon_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weapon, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weapon, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weapon, damage_bonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weapon, attacks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weapon, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weapon, speed_),
  };
  Weapon_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Weapon_descriptor_,
      Weapon::default_instance_,
      Weapon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weapon, _has_bits_[0]),
      -1,
      -1,
      sizeof(Weapon),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weapon, _internal_metadata_),
      -1);
  Weapon_TargetType_descriptor_ = Weapon_descriptor_->enum_type(0);
  UnitTypeData_descriptor_ = file->message_type(3);
  static const int UnitTypeData_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, unit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, available_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, cargo_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, mineral_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, vespene_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, food_required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, food_provided_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, ability_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, build_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, has_vespene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, has_minerals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, tech_alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, unit_alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, tech_requirement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, require_attached_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, attributes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, movement_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, weapons_),
  };
  UnitTypeData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UnitTypeData_descriptor_,
      UnitTypeData::default_instance_,
      UnitTypeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, _has_bits_[0]),
      -1,
      -1,
      sizeof(UnitTypeData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitTypeData, _internal_metadata_),
      -1);
  UpgradeData_descriptor_ = file->message_type(4);
  static const int UpgradeData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeData, upgrade_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeData, mineral_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeData, vespene_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeData, research_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeData, ability_id_),
  };
  UpgradeData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UpgradeData_descriptor_,
      UpgradeData::default_instance_,
      UpgradeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeData, _has_bits_[0]),
      -1,
      -1,
      sizeof(UpgradeData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeData, _internal_metadata_),
      -1);
  BuffData_descriptor_ = file->message_type(5);
  static const int BuffData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, buff_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, name_),
  };
  BuffData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BuffData_descriptor_,
      BuffData::default_instance_,
      BuffData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, _has_bits_[0]),
      -1,
      -1,
      sizeof(BuffData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffData, _internal_metadata_),
      -1);
  Attribute_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_s2clientprotocol_2fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AbilityData_descriptor_, &AbilityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DamageBonus_descriptor_, &DamageBonus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Weapon_descriptor_, &Weapon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UnitTypeData_descriptor_, &UnitTypeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UpgradeData_descriptor_, &UpgradeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BuffData_descriptor_, &BuffData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_s2clientprotocol_2fdata_2eproto() {
  delete AbilityData::default_instance_;
  delete AbilityData_reflection_;
  delete DamageBonus::default_instance_;
  delete DamageBonus_reflection_;
  delete Weapon::default_instance_;
  delete Weapon_reflection_;
  delete UnitTypeData::default_instance_;
  delete UnitTypeData_reflection_;
  delete UpgradeData::default_instance_;
  delete UpgradeData_reflection_;
  delete BuffData::default_instance_;
  delete BuffData_reflection_;
}

void protobuf_AddDesc_s2clientprotocol_2fdata_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_s2clientprotocol_2fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SC2APIProtocol::protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033s2clientprotocol/data.proto\022\016SC2APIPro"
    "tocol\032\035s2clientprotocol/common.proto\"\304\003\n"
    "\013AbilityData\022\022\n\nability_id\030\001 \001(\r\022\021\n\tlink"
    "_name\030\002 \001(\t\022\022\n\nlink_index\030\003 \001(\r\022\023\n\013butto"
    "n_name\030\004 \001(\t\022\025\n\rfriendly_name\030\005 \001(\t\022\016\n\006h"
    "otkey\030\006 \001(\t\022\034\n\024remaps_to_ability_id\030\007 \001("
    "\r\022\021\n\tavailable\030\010 \001(\010\0222\n\006target\030\t \001(\0162\".S"
    "C2APIProtocol.AbilityData.Target\022\025\n\rallo"
    "w_minimap\030\n \001(\010\022\026\n\016allow_autocast\030\013 \001(\010\022"
    "\023\n\013is_building\030\014 \001(\010\022\030\n\020footprint_radius"
    "\030\r \001(\002\022\034\n\024is_instant_placement\030\016 \001(\010\022\022\n\n"
    "cast_range\030\017 \001(\002\"I\n\006Target\022\010\n\004None\020\001\022\t\n\005"
    "Point\020\002\022\010\n\004Unit\020\003\022\017\n\013PointOrUnit\020\004\022\017\n\013Po"
    "intOrNone\020\005\"J\n\013DamageBonus\022,\n\tattribute\030"
    "\001 \001(\0162\031.SC2APIProtocol.Attribute\022\r\n\005bonu"
    "s\030\002 \001(\002\"\327\001\n\006Weapon\022/\n\004type\030\001 \001(\0162!.SC2AP"
    "IProtocol.Weapon.TargetType\022\016\n\006damage\030\002 "
    "\001(\002\0221\n\014damage_bonus\030\003 \003(\0132\033.SC2APIProtoc"
    "ol.DamageBonus\022\017\n\007attacks\030\004 \001(\r\022\r\n\005range"
    "\030\005 \001(\002\022\r\n\005speed\030\006 \001(\002\"*\n\nTargetType\022\n\n\006G"
    "round\020\001\022\007\n\003Air\020\002\022\007\n\003Any\020\003\"\200\004\n\014UnitTypeDa"
    "ta\022\017\n\007unit_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\021\n\tava"
    "ilable\030\003 \001(\010\022\022\n\ncargo_size\030\004 \001(\r\022\024\n\014mine"
    "ral_cost\030\014 \001(\r\022\024\n\014vespene_cost\030\r \001(\r\022\025\n\r"
    "food_required\030\016 \001(\002\022\025\n\rfood_provided\030\022 \001"
    "(\002\022\022\n\nability_id\030\017 \001(\r\022\"\n\004race\030\020 \001(\0162\024.S"
    "C2APIProtocol.Race\022\022\n\nbuild_time\030\021 \001(\002\022\023"
    "\n\013has_vespene\030\023 \001(\010\022\024\n\014has_minerals\030\024 \001("
    "\010\022\022\n\ntech_alias\030\025 \003(\r\022\022\n\nunit_alias\030\026 \001("
    "\r\022\030\n\020tech_requirement\030\027 \001(\r\022\030\n\020require_a"
    "ttached\030\030 \001(\010\022-\n\nattributes\030\010 \003(\0162\031.SC2A"
    "PIProtocol.Attribute\022\026\n\016movement_speed\030\t"
    " \001(\002\022\r\n\005armor\030\n \001(\002\022\'\n\007weapons\030\013 \003(\0132\026.S"
    "C2APIProtocol.Weapon\"\206\001\n\013UpgradeData\022\022\n\n"
    "upgrade_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\024\n\014minera"
    "l_cost\030\003 \001(\r\022\024\n\014vespene_cost\030\004 \001(\r\022\025\n\rre"
    "search_time\030\005 \001(\002\022\022\n\nability_id\030\006 \001(\r\")\n"
    "\010BuffData\022\017\n\007buff_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t"
    "*\236\001\n\tAttribute\022\t\n\005Light\020\001\022\013\n\007Armored\020\002\022\016"
    "\n\nBiological\020\003\022\016\n\nMechanical\020\004\022\013\n\007Roboti"
    "c\020\005\022\013\n\007Psionic\020\006\022\013\n\007Massive\020\007\022\r\n\tStructu"
    "re\020\010\022\t\n\005Hover\020\t\022\n\n\006Heroic\020\n\022\014\n\010Summoned\020"
    "\013", 1681);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "s2clientprotocol/data.proto", &protobuf_RegisterTypes);
  AbilityData::default_instance_ = new AbilityData();
  DamageBonus::default_instance_ = new DamageBonus();
  Weapon::default_instance_ = new Weapon();
  UnitTypeData::default_instance_ = new UnitTypeData();
  UpgradeData::default_instance_ = new UpgradeData();
  BuffData::default_instance_ = new BuffData();
  AbilityData::default_instance_->InitAsDefaultInstance();
  DamageBonus::default_instance_->InitAsDefaultInstance();
  Weapon::default_instance_->InitAsDefaultInstance();
  UnitTypeData::default_instance_->InitAsDefaultInstance();
  UpgradeData::default_instance_->InitAsDefaultInstance();
  BuffData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_s2clientprotocol_2fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_s2clientprotocol_2fdata_2eproto {
  StaticDescriptorInitializer_s2clientprotocol_2fdata_2eproto() {
    protobuf_AddDesc_s2clientprotocol_2fdata_2eproto();
  }
} static_descriptor_initializer_s2clientprotocol_2fdata_2eproto_;
const ::google::protobuf::EnumDescriptor* Attribute_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attribute_descriptor_;
}
bool Attribute_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* AbilityData_Target_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbilityData_Target_descriptor_;
}
bool AbilityData_Target_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AbilityData_Target AbilityData::None;
const AbilityData_Target AbilityData::Point;
const AbilityData_Target AbilityData::Unit;
const AbilityData_Target AbilityData::PointOrUnit;
const AbilityData_Target AbilityData::PointOrNone;
const AbilityData_Target AbilityData::Target_MIN;
const AbilityData_Target AbilityData::Target_MAX;
const int AbilityData::Target_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AbilityData::kAbilityIdFieldNumber;
const int AbilityData::kLinkNameFieldNumber;
const int AbilityData::kLinkIndexFieldNumber;
const int AbilityData::kButtonNameFieldNumber;
const int AbilityData::kFriendlyNameFieldNumber;
const int AbilityData::kHotkeyFieldNumber;
const int AbilityData::kRemapsToAbilityIdFieldNumber;
const int AbilityData::kAvailableFieldNumber;
const int AbilityData::kTargetFieldNumber;
const int AbilityData::kAllowMinimapFieldNumber;
const int AbilityData::kAllowAutocastFieldNumber;
const int AbilityData::kIsBuildingFieldNumber;
const int AbilityData::kFootprintRadiusFieldNumber;
const int AbilityData::kIsInstantPlacementFieldNumber;
const int AbilityData::kCastRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AbilityData::AbilityData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.AbilityData)
}

void AbilityData::InitAsDefaultInstance() {
}

AbilityData::AbilityData(const AbilityData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.AbilityData)
}

void AbilityData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ability_id_ = 0u;
  link_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  link_index_ = 0u;
  button_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friendly_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hotkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remaps_to_ability_id_ = 0u;
  available_ = false;
  target_ = 1;
  allow_minimap_ = false;
  allow_autocast_ = false;
  is_building_ = false;
  footprint_radius_ = 0;
  is_instant_placement_ = false;
  cast_range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AbilityData::~AbilityData() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.AbilityData)
  SharedDtor();
}

void AbilityData::SharedDtor() {
  link_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  button_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  friendly_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hotkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AbilityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AbilityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AbilityData_descriptor_;
}

const AbilityData& AbilityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdata_2eproto();
  return *default_instance_;
}

AbilityData* AbilityData::default_instance_ = NULL;

AbilityData* AbilityData::New(::google::protobuf::Arena* arena) const {
  AbilityData* n = new AbilityData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AbilityData::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.AbilityData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AbilityData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AbilityData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(ability_id_, link_index_);
    if (has_link_name()) {
      link_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_button_name()) {
      button_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_friendly_name()) {
      friendly_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_hotkey()) {
      hotkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    remaps_to_ability_id_ = 0u;
    available_ = false;
  }
  if (_has_bits_[8 / 32] & 32512u) {
    ZR_(allow_minimap_, cast_range_);
    target_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AbilityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.AbilityData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
          set_has_ability_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_link_name;
        break;
      }

      // optional string link_name = 2;
      case 2: {
        if (tag == 18) {
         parse_link_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link_name().data(), this->link_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.AbilityData.link_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_link_index;
        break;
      }

      // optional uint32 link_index = 3;
      case 3: {
        if (tag == 24) {
         parse_link_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &link_index_)));
          set_has_link_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_button_name;
        break;
      }

      // optional string button_name = 4;
      case 4: {
        if (tag == 34) {
         parse_button_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_button_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->button_name().data(), this->button_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.AbilityData.button_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_friendly_name;
        break;
      }

      // optional string friendly_name = 5;
      case 5: {
        if (tag == 42) {
         parse_friendly_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendly_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->friendly_name().data(), this->friendly_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.AbilityData.friendly_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_hotkey;
        break;
      }

      // optional string hotkey = 6;
      case 6: {
        if (tag == 50) {
         parse_hotkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hotkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hotkey().data(), this->hotkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.AbilityData.hotkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_remaps_to_ability_id;
        break;
      }

      // optional uint32 remaps_to_ability_id = 7;
      case 7: {
        if (tag == 56) {
         parse_remaps_to_ability_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaps_to_ability_id_)));
          set_has_remaps_to_ability_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_available;
        break;
      }

      // optional bool available = 8;
      case 8: {
        if (tag == 64) {
         parse_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &available_)));
          set_has_available();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_target;
        break;
      }

      // optional .SC2APIProtocol.AbilityData.Target target = 9;
      case 9: {
        if (tag == 72) {
         parse_target:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::AbilityData_Target_IsValid(value)) {
            set_target(static_cast< ::SC2APIProtocol::AbilityData_Target >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_allow_minimap;
        break;
      }

      // optional bool allow_minimap = 10;
      case 10: {
        if (tag == 80) {
         parse_allow_minimap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_minimap_)));
          set_has_allow_minimap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_allow_autocast;
        break;
      }

      // optional bool allow_autocast = 11;
      case 11: {
        if (tag == 88) {
         parse_allow_autocast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_autocast_)));
          set_has_allow_autocast();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_is_building;
        break;
      }

      // optional bool is_building = 12;
      case 12: {
        if (tag == 96) {
         parse_is_building:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_building_)));
          set_has_is_building();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_footprint_radius;
        break;
      }

      // optional float footprint_radius = 13;
      case 13: {
        if (tag == 109) {
         parse_footprint_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &footprint_radius_)));
          set_has_footprint_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_is_instant_placement;
        break;
      }

      // optional bool is_instant_placement = 14;
      case 14: {
        if (tag == 112) {
         parse_is_instant_placement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_instant_placement_)));
          set_has_is_instant_placement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_cast_range;
        break;
      }

      // optional float cast_range = 15;
      case 15: {
        if (tag == 125) {
         parse_cast_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cast_range_)));
          set_has_cast_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.AbilityData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.AbilityData)
  return false;
#undef DO_
}

void AbilityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.AbilityData)
  // optional uint32 ability_id = 1;
  if (has_ability_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability_id(), output);
  }

  // optional string link_name = 2;
  if (has_link_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name().data(), this->link_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.AbilityData.link_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->link_name(), output);
  }

  // optional uint32 link_index = 3;
  if (has_link_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->link_index(), output);
  }

  // optional string button_name = 4;
  if (has_button_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->button_name().data(), this->button_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.AbilityData.button_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->button_name(), output);
  }

  // optional string friendly_name = 5;
  if (has_friendly_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendly_name().data(), this->friendly_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.AbilityData.friendly_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->friendly_name(), output);
  }

  // optional string hotkey = 6;
  if (has_hotkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hotkey().data(), this->hotkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.AbilityData.hotkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->hotkey(), output);
  }

  // optional uint32 remaps_to_ability_id = 7;
  if (has_remaps_to_ability_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->remaps_to_ability_id(), output);
  }

  // optional bool available = 8;
  if (has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->available(), output);
  }

  // optional .SC2APIProtocol.AbilityData.Target target = 9;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->target(), output);
  }

  // optional bool allow_minimap = 10;
  if (has_allow_minimap()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->allow_minimap(), output);
  }

  // optional bool allow_autocast = 11;
  if (has_allow_autocast()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->allow_autocast(), output);
  }

  // optional bool is_building = 12;
  if (has_is_building()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_building(), output);
  }

  // optional float footprint_radius = 13;
  if (has_footprint_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->footprint_radius(), output);
  }

  // optional bool is_instant_placement = 14;
  if (has_is_instant_placement()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_instant_placement(), output);
  }

  // optional float cast_range = 15;
  if (has_cast_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->cast_range(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.AbilityData)
}

::google::protobuf::uint8* AbilityData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.AbilityData)
  // optional uint32 ability_id = 1;
  if (has_ability_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability_id(), target);
  }

  // optional string link_name = 2;
  if (has_link_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link_name().data(), this->link_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.AbilityData.link_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->link_name(), target);
  }

  // optional uint32 link_index = 3;
  if (has_link_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->link_index(), target);
  }

  // optional string button_name = 4;
  if (has_button_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->button_name().data(), this->button_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.AbilityData.button_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->button_name(), target);
  }

  // optional string friendly_name = 5;
  if (has_friendly_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->friendly_name().data(), this->friendly_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.AbilityData.friendly_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->friendly_name(), target);
  }

  // optional string hotkey = 6;
  if (has_hotkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hotkey().data(), this->hotkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.AbilityData.hotkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->hotkey(), target);
  }

  // optional uint32 remaps_to_ability_id = 7;
  if (has_remaps_to_ability_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->remaps_to_ability_id(), target);
  }

  // optional bool available = 8;
  if (has_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->available(), target);
  }

  // optional .SC2APIProtocol.AbilityData.Target target = 9;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->target(), target);
  }

  // optional bool allow_minimap = 10;
  if (has_allow_minimap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->allow_minimap(), target);
  }

  // optional bool allow_autocast = 11;
  if (has_allow_autocast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->allow_autocast(), target);
  }

  // optional bool is_building = 12;
  if (has_is_building()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_building(), target);
  }

  // optional float footprint_radius = 13;
  if (has_footprint_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->footprint_radius(), target);
  }

  // optional bool is_instant_placement = 14;
  if (has_is_instant_placement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_instant_placement(), target);
  }

  // optional float cast_range = 15;
  if (has_cast_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->cast_range(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.AbilityData)
  return target;
}

int AbilityData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.AbilityData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 ability_id = 1;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional string link_name = 2;
    if (has_link_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link_name());
    }

    // optional uint32 link_index = 3;
    if (has_link_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->link_index());
    }

    // optional string button_name = 4;
    if (has_button_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->button_name());
    }

    // optional string friendly_name = 5;
    if (has_friendly_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendly_name());
    }

    // optional string hotkey = 6;
    if (has_hotkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hotkey());
    }

    // optional uint32 remaps_to_ability_id = 7;
    if (has_remaps_to_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaps_to_ability_id());
    }

    // optional bool available = 8;
    if (has_available()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional .SC2APIProtocol.AbilityData.Target target = 9;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->target());
    }

    // optional bool allow_minimap = 10;
    if (has_allow_minimap()) {
      total_size += 1 + 1;
    }

    // optional bool allow_autocast = 11;
    if (has_allow_autocast()) {
      total_size += 1 + 1;
    }

    // optional bool is_building = 12;
    if (has_is_building()) {
      total_size += 1 + 1;
    }

    // optional float footprint_radius = 13;
    if (has_footprint_radius()) {
      total_size += 1 + 4;
    }

    // optional bool is_instant_placement = 14;
    if (has_is_instant_placement()) {
      total_size += 1 + 1;
    }

    // optional float cast_range = 15;
    if (has_cast_range()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AbilityData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.AbilityData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const AbilityData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AbilityData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.AbilityData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.AbilityData)
    MergeFrom(*source);
  }
}

void AbilityData::MergeFrom(const AbilityData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.AbilityData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ability_id()) {
      set_ability_id(from.ability_id());
    }
    if (from.has_link_name()) {
      set_has_link_name();
      link_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_name_);
    }
    if (from.has_link_index()) {
      set_link_index(from.link_index());
    }
    if (from.has_button_name()) {
      set_has_button_name();
      button_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.button_name_);
    }
    if (from.has_friendly_name()) {
      set_has_friendly_name();
      friendly_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.friendly_name_);
    }
    if (from.has_hotkey()) {
      set_has_hotkey();
      hotkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hotkey_);
    }
    if (from.has_remaps_to_ability_id()) {
      set_remaps_to_ability_id(from.remaps_to_ability_id());
    }
    if (from.has_available()) {
      set_available(from.available());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_target()) {
      set_target(from.target());
    }
    if (from.has_allow_minimap()) {
      set_allow_minimap(from.allow_minimap());
    }
    if (from.has_allow_autocast()) {
      set_allow_autocast(from.allow_autocast());
    }
    if (from.has_is_building()) {
      set_is_building(from.is_building());
    }
    if (from.has_footprint_radius()) {
      set_footprint_radius(from.footprint_radius());
    }
    if (from.has_is_instant_placement()) {
      set_is_instant_placement(from.is_instant_placement());
    }
    if (from.has_cast_range()) {
      set_cast_range(from.cast_range());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AbilityData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.AbilityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbilityData::CopyFrom(const AbilityData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.AbilityData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbilityData::IsInitialized() const {

  return true;
}

void AbilityData::Swap(AbilityData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AbilityData::InternalSwap(AbilityData* other) {
  std::swap(ability_id_, other->ability_id_);
  link_name_.Swap(&other->link_name_);
  std::swap(link_index_, other->link_index_);
  button_name_.Swap(&other->button_name_);
  friendly_name_.Swap(&other->friendly_name_);
  hotkey_.Swap(&other->hotkey_);
  std::swap(remaps_to_ability_id_, other->remaps_to_ability_id_);
  std::swap(available_, other->available_);
  std::swap(target_, other->target_);
  std::swap(allow_minimap_, other->allow_minimap_);
  std::swap(allow_autocast_, other->allow_autocast_);
  std::swap(is_building_, other->is_building_);
  std::swap(footprint_radius_, other->footprint_radius_);
  std::swap(is_instant_placement_, other->is_instant_placement_);
  std::swap(cast_range_, other->cast_range_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AbilityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AbilityData_descriptor_;
  metadata.reflection = AbilityData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AbilityData

// optional uint32 ability_id = 1;
bool AbilityData::has_ability_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AbilityData::set_has_ability_id() {
  _has_bits_[0] |= 0x00000001u;
}
void AbilityData::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void AbilityData::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
 ::google::protobuf::uint32 AbilityData::ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.ability_id)
  return ability_id_;
}
 void AbilityData::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.ability_id)
}

// optional string link_name = 2;
bool AbilityData::has_link_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AbilityData::set_has_link_name() {
  _has_bits_[0] |= 0x00000002u;
}
void AbilityData::clear_has_link_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void AbilityData::clear_link_name() {
  link_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_link_name();
}
 const ::std::string& AbilityData::link_name() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.link_name)
  return link_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AbilityData::set_link_name(const ::std::string& value) {
  set_has_link_name();
  link_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.link_name)
}
 void AbilityData::set_link_name(const char* value) {
  set_has_link_name();
  link_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.AbilityData.link_name)
}
 void AbilityData::set_link_name(const char* value, size_t size) {
  set_has_link_name();
  link_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.AbilityData.link_name)
}
 ::std::string* AbilityData::mutable_link_name() {
  set_has_link_name();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.AbilityData.link_name)
  return link_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AbilityData::release_link_name() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.AbilityData.link_name)
  clear_has_link_name();
  return link_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AbilityData::set_allocated_link_name(::std::string* link_name) {
  if (link_name != NULL) {
    set_has_link_name();
  } else {
    clear_has_link_name();
  }
  link_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link_name);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.AbilityData.link_name)
}

// optional uint32 link_index = 3;
bool AbilityData::has_link_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AbilityData::set_has_link_index() {
  _has_bits_[0] |= 0x00000004u;
}
void AbilityData::clear_has_link_index() {
  _has_bits_[0] &= ~0x00000004u;
}
void AbilityData::clear_link_index() {
  link_index_ = 0u;
  clear_has_link_index();
}
 ::google::protobuf::uint32 AbilityData::link_index() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.link_index)
  return link_index_;
}
 void AbilityData::set_link_index(::google::protobuf::uint32 value) {
  set_has_link_index();
  link_index_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.link_index)
}

// optional string button_name = 4;
bool AbilityData::has_button_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AbilityData::set_has_button_name() {
  _has_bits_[0] |= 0x00000008u;
}
void AbilityData::clear_has_button_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void AbilityData::clear_button_name() {
  button_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_button_name();
}
 const ::std::string& AbilityData::button_name() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.button_name)
  return button_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AbilityData::set_button_name(const ::std::string& value) {
  set_has_button_name();
  button_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.button_name)
}
 void AbilityData::set_button_name(const char* value) {
  set_has_button_name();
  button_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.AbilityData.button_name)
}
 void AbilityData::set_button_name(const char* value, size_t size) {
  set_has_button_name();
  button_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.AbilityData.button_name)
}
 ::std::string* AbilityData::mutable_button_name() {
  set_has_button_name();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.AbilityData.button_name)
  return button_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AbilityData::release_button_name() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.AbilityData.button_name)
  clear_has_button_name();
  return button_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AbilityData::set_allocated_button_name(::std::string* button_name) {
  if (button_name != NULL) {
    set_has_button_name();
  } else {
    clear_has_button_name();
  }
  button_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), button_name);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.AbilityData.button_name)
}

// optional string friendly_name = 5;
bool AbilityData::has_friendly_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AbilityData::set_has_friendly_name() {
  _has_bits_[0] |= 0x00000010u;
}
void AbilityData::clear_has_friendly_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void AbilityData::clear_friendly_name() {
  friendly_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_friendly_name();
}
 const ::std::string& AbilityData::friendly_name() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.friendly_name)
  return friendly_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AbilityData::set_friendly_name(const ::std::string& value) {
  set_has_friendly_name();
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.friendly_name)
}
 void AbilityData::set_friendly_name(const char* value) {
  set_has_friendly_name();
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.AbilityData.friendly_name)
}
 void AbilityData::set_friendly_name(const char* value, size_t size) {
  set_has_friendly_name();
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.AbilityData.friendly_name)
}
 ::std::string* AbilityData::mutable_friendly_name() {
  set_has_friendly_name();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.AbilityData.friendly_name)
  return friendly_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AbilityData::release_friendly_name() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.AbilityData.friendly_name)
  clear_has_friendly_name();
  return friendly_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AbilityData::set_allocated_friendly_name(::std::string* friendly_name) {
  if (friendly_name != NULL) {
    set_has_friendly_name();
  } else {
    clear_has_friendly_name();
  }
  friendly_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friendly_name);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.AbilityData.friendly_name)
}

// optional string hotkey = 6;
bool AbilityData::has_hotkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AbilityData::set_has_hotkey() {
  _has_bits_[0] |= 0x00000020u;
}
void AbilityData::clear_has_hotkey() {
  _has_bits_[0] &= ~0x00000020u;
}
void AbilityData::clear_hotkey() {
  hotkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hotkey();
}
 const ::std::string& AbilityData::hotkey() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.hotkey)
  return hotkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AbilityData::set_hotkey(const ::std::string& value) {
  set_has_hotkey();
  hotkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.hotkey)
}
 void AbilityData::set_hotkey(const char* value) {
  set_has_hotkey();
  hotkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.AbilityData.hotkey)
}
 void AbilityData::set_hotkey(const char* value, size_t size) {
  set_has_hotkey();
  hotkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.AbilityData.hotkey)
}
 ::std::string* AbilityData::mutable_hotkey() {
  set_has_hotkey();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.AbilityData.hotkey)
  return hotkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AbilityData::release_hotkey() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.AbilityData.hotkey)
  clear_has_hotkey();
  return hotkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AbilityData::set_allocated_hotkey(::std::string* hotkey) {
  if (hotkey != NULL) {
    set_has_hotkey();
  } else {
    clear_has_hotkey();
  }
  hotkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hotkey);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.AbilityData.hotkey)
}

// optional uint32 remaps_to_ability_id = 7;
bool AbilityData::has_remaps_to_ability_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AbilityData::set_has_remaps_to_ability_id() {
  _has_bits_[0] |= 0x00000040u;
}
void AbilityData::clear_has_remaps_to_ability_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void AbilityData::clear_remaps_to_ability_id() {
  remaps_to_ability_id_ = 0u;
  clear_has_remaps_to_ability_id();
}
 ::google::protobuf::uint32 AbilityData::remaps_to_ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.remaps_to_ability_id)
  return remaps_to_ability_id_;
}
 void AbilityData::set_remaps_to_ability_id(::google::protobuf::uint32 value) {
  set_has_remaps_to_ability_id();
  remaps_to_ability_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.remaps_to_ability_id)
}

// optional bool available = 8;
bool AbilityData::has_available() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void AbilityData::set_has_available() {
  _has_bits_[0] |= 0x00000080u;
}
void AbilityData::clear_has_available() {
  _has_bits_[0] &= ~0x00000080u;
}
void AbilityData::clear_available() {
  available_ = false;
  clear_has_available();
}
 bool AbilityData::available() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.available)
  return available_;
}
 void AbilityData::set_available(bool value) {
  set_has_available();
  available_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.available)
}

// optional .SC2APIProtocol.AbilityData.Target target = 9;
bool AbilityData::has_target() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void AbilityData::set_has_target() {
  _has_bits_[0] |= 0x00000100u;
}
void AbilityData::clear_has_target() {
  _has_bits_[0] &= ~0x00000100u;
}
void AbilityData::clear_target() {
  target_ = 1;
  clear_has_target();
}
 ::SC2APIProtocol::AbilityData_Target AbilityData::target() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.target)
  return static_cast< ::SC2APIProtocol::AbilityData_Target >(target_);
}
 void AbilityData::set_target(::SC2APIProtocol::AbilityData_Target value) {
  assert(::SC2APIProtocol::AbilityData_Target_IsValid(value));
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.target)
}

// optional bool allow_minimap = 10;
bool AbilityData::has_allow_minimap() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void AbilityData::set_has_allow_minimap() {
  _has_bits_[0] |= 0x00000200u;
}
void AbilityData::clear_has_allow_minimap() {
  _has_bits_[0] &= ~0x00000200u;
}
void AbilityData::clear_allow_minimap() {
  allow_minimap_ = false;
  clear_has_allow_minimap();
}
 bool AbilityData::allow_minimap() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.allow_minimap)
  return allow_minimap_;
}
 void AbilityData::set_allow_minimap(bool value) {
  set_has_allow_minimap();
  allow_minimap_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.allow_minimap)
}

// optional bool allow_autocast = 11;
bool AbilityData::has_allow_autocast() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void AbilityData::set_has_allow_autocast() {
  _has_bits_[0] |= 0x00000400u;
}
void AbilityData::clear_has_allow_autocast() {
  _has_bits_[0] &= ~0x00000400u;
}
void AbilityData::clear_allow_autocast() {
  allow_autocast_ = false;
  clear_has_allow_autocast();
}
 bool AbilityData::allow_autocast() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.allow_autocast)
  return allow_autocast_;
}
 void AbilityData::set_allow_autocast(bool value) {
  set_has_allow_autocast();
  allow_autocast_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.allow_autocast)
}

// optional bool is_building = 12;
bool AbilityData::has_is_building() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void AbilityData::set_has_is_building() {
  _has_bits_[0] |= 0x00000800u;
}
void AbilityData::clear_has_is_building() {
  _has_bits_[0] &= ~0x00000800u;
}
void AbilityData::clear_is_building() {
  is_building_ = false;
  clear_has_is_building();
}
 bool AbilityData::is_building() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.is_building)
  return is_building_;
}
 void AbilityData::set_is_building(bool value) {
  set_has_is_building();
  is_building_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.is_building)
}

// optional float footprint_radius = 13;
bool AbilityData::has_footprint_radius() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void AbilityData::set_has_footprint_radius() {
  _has_bits_[0] |= 0x00001000u;
}
void AbilityData::clear_has_footprint_radius() {
  _has_bits_[0] &= ~0x00001000u;
}
void AbilityData::clear_footprint_radius() {
  footprint_radius_ = 0;
  clear_has_footprint_radius();
}
 float AbilityData::footprint_radius() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.footprint_radius)
  return footprint_radius_;
}
 void AbilityData::set_footprint_radius(float value) {
  set_has_footprint_radius();
  footprint_radius_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.footprint_radius)
}

// optional bool is_instant_placement = 14;
bool AbilityData::has_is_instant_placement() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void AbilityData::set_has_is_instant_placement() {
  _has_bits_[0] |= 0x00002000u;
}
void AbilityData::clear_has_is_instant_placement() {
  _has_bits_[0] &= ~0x00002000u;
}
void AbilityData::clear_is_instant_placement() {
  is_instant_placement_ = false;
  clear_has_is_instant_placement();
}
 bool AbilityData::is_instant_placement() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.is_instant_placement)
  return is_instant_placement_;
}
 void AbilityData::set_is_instant_placement(bool value) {
  set_has_is_instant_placement();
  is_instant_placement_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.is_instant_placement)
}

// optional float cast_range = 15;
bool AbilityData::has_cast_range() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void AbilityData::set_has_cast_range() {
  _has_bits_[0] |= 0x00004000u;
}
void AbilityData::clear_has_cast_range() {
  _has_bits_[0] &= ~0x00004000u;
}
void AbilityData::clear_cast_range() {
  cast_range_ = 0;
  clear_has_cast_range();
}
 float AbilityData::cast_range() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.cast_range)
  return cast_range_;
}
 void AbilityData::set_cast_range(float value) {
  set_has_cast_range();
  cast_range_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.cast_range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DamageBonus::kAttributeFieldNumber;
const int DamageBonus::kBonusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DamageBonus::DamageBonus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.DamageBonus)
}

void DamageBonus::InitAsDefaultInstance() {
}

DamageBonus::DamageBonus(const DamageBonus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DamageBonus)
}

void DamageBonus::SharedCtor() {
  _cached_size_ = 0;
  attribute_ = 1;
  bonus_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DamageBonus::~DamageBonus() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DamageBonus)
  SharedDtor();
}

void DamageBonus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DamageBonus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DamageBonus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DamageBonus_descriptor_;
}

const DamageBonus& DamageBonus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdata_2eproto();
  return *default_instance_;
}

DamageBonus* DamageBonus::default_instance_ = NULL;

DamageBonus* DamageBonus::New(::google::protobuf::Arena* arena) const {
  DamageBonus* n = new DamageBonus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DamageBonus::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DamageBonus)
  if (_has_bits_[0 / 32] & 3u) {
    attribute_ = 1;
    bonus_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DamageBonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.DamageBonus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.Attribute attribute = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Attribute_IsValid(value)) {
            set_attribute(static_cast< ::SC2APIProtocol::Attribute >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_bonus;
        break;
      }

      // optional float bonus = 2;
      case 2: {
        if (tag == 21) {
         parse_bonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bonus_)));
          set_has_bonus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.DamageBonus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.DamageBonus)
  return false;
#undef DO_
}

void DamageBonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.DamageBonus)
  // optional .SC2APIProtocol.Attribute attribute = 1;
  if (has_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->attribute(), output);
  }

  // optional float bonus = 2;
  if (has_bonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->bonus(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.DamageBonus)
}

::google::protobuf::uint8* DamageBonus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DamageBonus)
  // optional .SC2APIProtocol.Attribute attribute = 1;
  if (has_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->attribute(), target);
  }

  // optional float bonus = 2;
  if (has_bonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->bonus(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DamageBonus)
  return target;
}

int DamageBonus::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DamageBonus)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .SC2APIProtocol.Attribute attribute = 1;
    if (has_attribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->attribute());
    }

    // optional float bonus = 2;
    if (has_bonus()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DamageBonus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.DamageBonus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DamageBonus* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DamageBonus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.DamageBonus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.DamageBonus)
    MergeFrom(*source);
  }
}

void DamageBonus::MergeFrom(const DamageBonus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DamageBonus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attribute()) {
      set_attribute(from.attribute());
    }
    if (from.has_bonus()) {
      set_bonus(from.bonus());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DamageBonus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.DamageBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DamageBonus::CopyFrom(const DamageBonus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DamageBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DamageBonus::IsInitialized() const {

  return true;
}

void DamageBonus::Swap(DamageBonus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DamageBonus::InternalSwap(DamageBonus* other) {
  std::swap(attribute_, other->attribute_);
  std::swap(bonus_, other->bonus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DamageBonus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DamageBonus_descriptor_;
  metadata.reflection = DamageBonus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DamageBonus

// optional .SC2APIProtocol.Attribute attribute = 1;
bool DamageBonus::has_attribute() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DamageBonus::set_has_attribute() {
  _has_bits_[0] |= 0x00000001u;
}
void DamageBonus::clear_has_attribute() {
  _has_bits_[0] &= ~0x00000001u;
}
void DamageBonus::clear_attribute() {
  attribute_ = 1;
  clear_has_attribute();
}
 ::SC2APIProtocol::Attribute DamageBonus::attribute() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DamageBonus.attribute)
  return static_cast< ::SC2APIProtocol::Attribute >(attribute_);
}
 void DamageBonus::set_attribute(::SC2APIProtocol::Attribute value) {
  assert(::SC2APIProtocol::Attribute_IsValid(value));
  set_has_attribute();
  attribute_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.DamageBonus.attribute)
}

// optional float bonus = 2;
bool DamageBonus::has_bonus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DamageBonus::set_has_bonus() {
  _has_bits_[0] |= 0x00000002u;
}
void DamageBonus::clear_has_bonus() {
  _has_bits_[0] &= ~0x00000002u;
}
void DamageBonus::clear_bonus() {
  bonus_ = 0;
  clear_has_bonus();
}
 float DamageBonus::bonus() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DamageBonus.bonus)
  return bonus_;
}
 void DamageBonus::set_bonus(float value) {
  set_has_bonus();
  bonus_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.DamageBonus.bonus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* Weapon_TargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Weapon_TargetType_descriptor_;
}
bool Weapon_TargetType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Weapon_TargetType Weapon::Ground;
const Weapon_TargetType Weapon::Air;
const Weapon_TargetType Weapon::Any;
const Weapon_TargetType Weapon::TargetType_MIN;
const Weapon_TargetType Weapon::TargetType_MAX;
const int Weapon::TargetType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Weapon::kTypeFieldNumber;
const int Weapon::kDamageFieldNumber;
const int Weapon::kDamageBonusFieldNumber;
const int Weapon::kAttacksFieldNumber;
const int Weapon::kRangeFieldNumber;
const int Weapon::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Weapon::Weapon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.Weapon)
}

void Weapon::InitAsDefaultInstance() {
}

Weapon::Weapon(const Weapon& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Weapon)
}

void Weapon::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  damage_ = 0;
  attacks_ = 0u;
  range_ = 0;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Weapon::~Weapon() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Weapon)
  SharedDtor();
}

void Weapon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Weapon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Weapon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Weapon_descriptor_;
}

const Weapon& Weapon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdata_2eproto();
  return *default_instance_;
}

Weapon* Weapon::default_instance_ = NULL;

Weapon* Weapon::New(::google::protobuf::Arena* arena) const {
  Weapon* n = new Weapon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Weapon::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Weapon)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Weapon, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Weapon*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 59u) {
    ZR_(attacks_, speed_);
    type_ = 1;
    damage_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  damage_bonus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Weapon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.Weapon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.Weapon.TargetType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Weapon_TargetType_IsValid(value)) {
            set_type(static_cast< ::SC2APIProtocol::Weapon_TargetType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_damage;
        break;
      }

      // optional float damage = 2;
      case 2: {
        if (tag == 21) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_damage_bonus;
        break;
      }

      // repeated .SC2APIProtocol.DamageBonus damage_bonus = 3;
      case 3: {
        if (tag == 26) {
         parse_damage_bonus:
          DO_(input->IncrementRecursionDepth());
         parse_loop_damage_bonus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_damage_bonus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_damage_bonus;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_attacks;
        break;
      }

      // optional uint32 attacks = 4;
      case 4: {
        if (tag == 32) {
         parse_attacks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacks_)));
          set_has_attacks();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_range;
        break;
      }

      // optional float range = 5;
      case 5: {
        if (tag == 45) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_speed;
        break;
      }

      // optional float speed = 6;
      case 6: {
        if (tag == 53) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.Weapon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.Weapon)
  return false;
#undef DO_
}

void Weapon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.Weapon)
  // optional .SC2APIProtocol.Weapon.TargetType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional float damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->damage(), output);
  }

  // repeated .SC2APIProtocol.DamageBonus damage_bonus = 3;
  for (unsigned int i = 0, n = this->damage_bonus_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->damage_bonus(i), output);
  }

  // optional uint32 attacks = 4;
  if (has_attacks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attacks(), output);
  }

  // optional float range = 5;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->range(), output);
  }

  // optional float speed = 6;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.Weapon)
}

::google::protobuf::uint8* Weapon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Weapon)
  // optional .SC2APIProtocol.Weapon.TargetType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional float damage = 2;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->damage(), target);
  }

  // repeated .SC2APIProtocol.DamageBonus damage_bonus = 3;
  for (unsigned int i = 0, n = this->damage_bonus_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->damage_bonus(i), false, target);
  }

  // optional uint32 attacks = 4;
  if (has_attacks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attacks(), target);
  }

  // optional float range = 5;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->range(), target);
  }

  // optional float speed = 6;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Weapon)
  return target;
}

int Weapon::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Weapon)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 59u) {
    // optional .SC2APIProtocol.Weapon.TargetType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional float damage = 2;
    if (has_damage()) {
      total_size += 1 + 4;
    }

    // optional uint32 attacks = 4;
    if (has_attacks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacks());
    }

    // optional float range = 5;
    if (has_range()) {
      total_size += 1 + 4;
    }

    // optional float speed = 6;
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  // repeated .SC2APIProtocol.DamageBonus damage_bonus = 3;
  total_size += 1 * this->damage_bonus_size();
  for (int i = 0; i < this->damage_bonus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damage_bonus(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Weapon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.Weapon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Weapon* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Weapon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.Weapon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.Weapon)
    MergeFrom(*source);
  }
}

void Weapon::MergeFrom(const Weapon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Weapon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  damage_bonus_.MergeFrom(from.damage_bonus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_attacks()) {
      set_attacks(from.attacks());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Weapon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.Weapon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Weapon::CopyFrom(const Weapon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Weapon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Weapon::IsInitialized() const {

  return true;
}

void Weapon::Swap(Weapon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Weapon::InternalSwap(Weapon* other) {
  std::swap(type_, other->type_);
  std::swap(damage_, other->damage_);
  damage_bonus_.UnsafeArenaSwap(&other->damage_bonus_);
  std::swap(attacks_, other->attacks_);
  std::swap(range_, other->range_);
  std::swap(speed_, other->speed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Weapon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Weapon_descriptor_;
  metadata.reflection = Weapon_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Weapon

// optional .SC2APIProtocol.Weapon.TargetType type = 1;
bool Weapon::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Weapon::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Weapon::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Weapon::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::SC2APIProtocol::Weapon_TargetType Weapon::type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Weapon.type)
  return static_cast< ::SC2APIProtocol::Weapon_TargetType >(type_);
}
 void Weapon::set_type(::SC2APIProtocol::Weapon_TargetType value) {
  assert(::SC2APIProtocol::Weapon_TargetType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Weapon.type)
}

// optional float damage = 2;
bool Weapon::has_damage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Weapon::set_has_damage() {
  _has_bits_[0] |= 0x00000002u;
}
void Weapon::clear_has_damage() {
  _has_bits_[0] &= ~0x00000002u;
}
void Weapon::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
 float Weapon::damage() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Weapon.damage)
  return damage_;
}
 void Weapon::set_damage(float value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Weapon.damage)
}

// repeated .SC2APIProtocol.DamageBonus damage_bonus = 3;
int Weapon::damage_bonus_size() const {
  return damage_bonus_.size();
}
void Weapon::clear_damage_bonus() {
  damage_bonus_.Clear();
}
const ::SC2APIProtocol::DamageBonus& Weapon::damage_bonus(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Weapon.damage_bonus)
  return damage_bonus_.Get(index);
}
::SC2APIProtocol::DamageBonus* Weapon::mutable_damage_bonus(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Weapon.damage_bonus)
  return damage_bonus_.Mutable(index);
}
::SC2APIProtocol::DamageBonus* Weapon::add_damage_bonus() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.Weapon.damage_bonus)
  return damage_bonus_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::DamageBonus >*
Weapon::mutable_damage_bonus() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.Weapon.damage_bonus)
  return &damage_bonus_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::DamageBonus >&
Weapon::damage_bonus() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.Weapon.damage_bonus)
  return damage_bonus_;
}

// optional uint32 attacks = 4;
bool Weapon::has_attacks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Weapon::set_has_attacks() {
  _has_bits_[0] |= 0x00000008u;
}
void Weapon::clear_has_attacks() {
  _has_bits_[0] &= ~0x00000008u;
}
void Weapon::clear_attacks() {
  attacks_ = 0u;
  clear_has_attacks();
}
 ::google::protobuf::uint32 Weapon::attacks() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Weapon.attacks)
  return attacks_;
}
 void Weapon::set_attacks(::google::protobuf::uint32 value) {
  set_has_attacks();
  attacks_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Weapon.attacks)
}

// optional float range = 5;
bool Weapon::has_range() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Weapon::set_has_range() {
  _has_bits_[0] |= 0x00000010u;
}
void Weapon::clear_has_range() {
  _has_bits_[0] &= ~0x00000010u;
}
void Weapon::clear_range() {
  range_ = 0;
  clear_has_range();
}
 float Weapon::range() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Weapon.range)
  return range_;
}
 void Weapon::set_range(float value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Weapon.range)
}

// optional float speed = 6;
bool Weapon::has_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Weapon::set_has_speed() {
  _has_bits_[0] |= 0x00000020u;
}
void Weapon::clear_has_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
void Weapon::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
 float Weapon::speed() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Weapon.speed)
  return speed_;
}
 void Weapon::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Weapon.speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UnitTypeData::kUnitIdFieldNumber;
const int UnitTypeData::kNameFieldNumber;
const int UnitTypeData::kAvailableFieldNumber;
const int UnitTypeData::kCargoSizeFieldNumber;
const int UnitTypeData::kMineralCostFieldNumber;
const int UnitTypeData::kVespeneCostFieldNumber;
const int UnitTypeData::kFoodRequiredFieldNumber;
const int UnitTypeData::kFoodProvidedFieldNumber;
const int UnitTypeData::kAbilityIdFieldNumber;
const int UnitTypeData::kRaceFieldNumber;
const int UnitTypeData::kBuildTimeFieldNumber;
const int UnitTypeData::kHasVespeneFieldNumber;
const int UnitTypeData::kHasMineralsFieldNumber;
const int UnitTypeData::kTechAliasFieldNumber;
const int UnitTypeData::kUnitAliasFieldNumber;
const int UnitTypeData::kTechRequirementFieldNumber;
const int UnitTypeData::kRequireAttachedFieldNumber;
const int UnitTypeData::kAttributesFieldNumber;
const int UnitTypeData::kMovementSpeedFieldNumber;
const int UnitTypeData::kArmorFieldNumber;
const int UnitTypeData::kWeaponsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UnitTypeData::UnitTypeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.UnitTypeData)
}

void UnitTypeData::InitAsDefaultInstance() {
}

UnitTypeData::UnitTypeData(const UnitTypeData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.UnitTypeData)
}

void UnitTypeData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  unit_id_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  available_ = false;
  cargo_size_ = 0u;
  mineral_cost_ = 0u;
  vespene_cost_ = 0u;
  food_required_ = 0;
  food_provided_ = 0;
  ability_id_ = 0u;
  race_ = 0;
  build_time_ = 0;
  has_vespene_ = false;
  has_minerals_ = false;
  unit_alias_ = 0u;
  tech_requirement_ = 0u;
  require_attached_ = false;
  movement_speed_ = 0;
  armor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitTypeData::~UnitTypeData() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.UnitTypeData)
  SharedDtor();
}

void UnitTypeData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UnitTypeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnitTypeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitTypeData_descriptor_;
}

const UnitTypeData& UnitTypeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdata_2eproto();
  return *default_instance_;
}

UnitTypeData* UnitTypeData::default_instance_ = NULL;

UnitTypeData* UnitTypeData::New(::google::protobuf::Arena* arena) const {
  UnitTypeData* n = new UnitTypeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UnitTypeData::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.UnitTypeData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UnitTypeData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UnitTypeData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(unit_id_, food_provided_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    available_ = false;
  }
  if (_has_bits_[8 / 32] & 57088u) {
    ZR_(ability_id_, build_time_);
    ZR_(has_vespene_, has_minerals_);
    ZR_(unit_alias_, tech_requirement_);
  }
  if (_has_bits_[16 / 32] & 851968u) {
    ZR_(movement_speed_, armor_);
    require_attached_ = false;
  }

#undef ZR_HELPER_
#undef ZR_

  tech_alias_.Clear();
  attributes_.Clear();
  weapons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UnitTypeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.UnitTypeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unit_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_id_)));
          set_has_unit_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.UnitTypeData.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_available;
        break;
      }

      // optional bool available = 3;
      case 3: {
        if (tag == 24) {
         parse_available:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &available_)));
          set_has_available();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cargo_size;
        break;
      }

      // optional uint32 cargo_size = 4;
      case 4: {
        if (tag == 32) {
         parse_cargo_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cargo_size_)));
          set_has_cargo_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_attributes;
        break;
      }

      // repeated .SC2APIProtocol.Attribute attributes = 8;
      case 8: {
        if (tag == 64) {
         parse_attributes:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Attribute_IsValid(value)) {
            add_attributes(static_cast< ::SC2APIProtocol::Attribute >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 8,
                 ::SC2APIProtocol::Attribute_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_attributes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_attributes;
        if (input->ExpectTag(77)) goto parse_movement_speed;
        break;
      }

      // optional float movement_speed = 9;
      case 9: {
        if (tag == 77) {
         parse_movement_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &movement_speed_)));
          set_has_movement_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_armor;
        break;
      }

      // optional float armor = 10;
      case 10: {
        if (tag == 85) {
         parse_armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &armor_)));
          set_has_armor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_weapons;
        break;
      }

      // repeated .SC2APIProtocol.Weapon weapons = 11;
      case 11: {
        if (tag == 90) {
         parse_weapons:
          DO_(input->IncrementRecursionDepth());
         parse_loop_weapons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_weapons()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_loop_weapons;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(96)) goto parse_mineral_cost;
        break;
      }

      // optional uint32 mineral_cost = 12;
      case 12: {
        if (tag == 96) {
         parse_mineral_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mineral_cost_)));
          set_has_mineral_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_vespene_cost;
        break;
      }

      // optional uint32 vespene_cost = 13;
      case 13: {
        if (tag == 104) {
         parse_vespene_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vespene_cost_)));
          set_has_vespene_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_food_required;
        break;
      }

      // optional float food_required = 14;
      case 14: {
        if (tag == 117) {
         parse_food_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &food_required_)));
          set_has_food_required();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_ability_id;
        break;
      }

      // optional uint32 ability_id = 15;
      case 15: {
        if (tag == 120) {
         parse_ability_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
          set_has_ability_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_race;
        break;
      }

      // optional .SC2APIProtocol.Race race = 16;
      case 16: {
        if (tag == 128) {
         parse_race:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Race_IsValid(value)) {
            set_race(static_cast< ::SC2APIProtocol::Race >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_build_time;
        break;
      }

      // optional float build_time = 17;
      case 17: {
        if (tag == 141) {
         parse_build_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &build_time_)));
          set_has_build_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_food_provided;
        break;
      }

      // optional float food_provided = 18;
      case 18: {
        if (tag == 149) {
         parse_food_provided:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &food_provided_)));
          set_has_food_provided();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_has_vespene;
        break;
      }

      // optional bool has_vespene = 19;
      case 19: {
        if (tag == 152) {
         parse_has_vespene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_vespene_)));
          set_has_has_vespene();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_has_minerals;
        break;
      }

      // optional bool has_minerals = 20;
      case 20: {
        if (tag == 160) {
         parse_has_minerals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_minerals_)));
          set_has_has_minerals();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_tech_alias;
        break;
      }

      // repeated uint32 tech_alias = 21;
      case 21: {
        if (tag == 168) {
         parse_tech_alias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 168, input, this->mutable_tech_alias())));
        } else if (tag == 170) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tech_alias())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_tech_alias;
        if (input->ExpectTag(176)) goto parse_unit_alias;
        break;
      }

      // optional uint32 unit_alias = 22;
      case 22: {
        if (tag == 176) {
         parse_unit_alias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_alias_)));
          set_has_unit_alias();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_tech_requirement;
        break;
      }

      // optional uint32 tech_requirement = 23;
      case 23: {
        if (tag == 184) {
         parse_tech_requirement:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tech_requirement_)));
          set_has_tech_requirement();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_require_attached;
        break;
      }

      // optional bool require_attached = 24;
      case 24: {
        if (tag == 192) {
         parse_require_attached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &require_attached_)));
          set_has_require_attached();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.UnitTypeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.UnitTypeData)
  return false;
#undef DO_
}

void UnitTypeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.UnitTypeData)
  // optional uint32 unit_id = 1;
  if (has_unit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unit_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.UnitTypeData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional bool available = 3;
  if (has_available()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->available(), output);
  }

  // optional uint32 cargo_size = 4;
  if (has_cargo_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cargo_size(), output);
  }

  // repeated .SC2APIProtocol.Attribute attributes = 8;
  for (int i = 0; i < this->attributes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->attributes(i), output);
  }

  // optional float movement_speed = 9;
  if (has_movement_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->movement_speed(), output);
  }

  // optional float armor = 10;
  if (has_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->armor(), output);
  }

  // repeated .SC2APIProtocol.Weapon weapons = 11;
  for (unsigned int i = 0, n = this->weapons_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->weapons(i), output);
  }

  // optional uint32 mineral_cost = 12;
  if (has_mineral_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->mineral_cost(), output);
  }

  // optional uint32 vespene_cost = 13;
  if (has_vespene_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->vespene_cost(), output);
  }

  // optional float food_required = 14;
  if (has_food_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->food_required(), output);
  }

  // optional uint32 ability_id = 15;
  if (has_ability_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->ability_id(), output);
  }

  // optional .SC2APIProtocol.Race race = 16;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->race(), output);
  }

  // optional float build_time = 17;
  if (has_build_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->build_time(), output);
  }

  // optional float food_provided = 18;
  if (has_food_provided()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->food_provided(), output);
  }

  // optional bool has_vespene = 19;
  if (has_has_vespene()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->has_vespene(), output);
  }

  // optional bool has_minerals = 20;
  if (has_has_minerals()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->has_minerals(), output);
  }

  // repeated uint32 tech_alias = 21;
  for (int i = 0; i < this->tech_alias_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      21, this->tech_alias(i), output);
  }

  // optional uint32 unit_alias = 22;
  if (has_unit_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->unit_alias(), output);
  }

  // optional uint32 tech_requirement = 23;
  if (has_tech_requirement()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->tech_requirement(), output);
  }

  // optional bool require_attached = 24;
  if (has_require_attached()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->require_attached(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.UnitTypeData)
}

::google::protobuf::uint8* UnitTypeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.UnitTypeData)
  // optional uint32 unit_id = 1;
  if (has_unit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unit_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.UnitTypeData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional bool available = 3;
  if (has_available()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->available(), target);
  }

  // optional uint32 cargo_size = 4;
  if (has_cargo_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cargo_size(), target);
  }

  // repeated .SC2APIProtocol.Attribute attributes = 8;
  for (int i = 0; i < this->attributes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->attributes(i), target);
  }

  // optional float movement_speed = 9;
  if (has_movement_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->movement_speed(), target);
  }

  // optional float armor = 10;
  if (has_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->armor(), target);
  }

  // repeated .SC2APIProtocol.Weapon weapons = 11;
  for (unsigned int i = 0, n = this->weapons_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->weapons(i), false, target);
  }

  // optional uint32 mineral_cost = 12;
  if (has_mineral_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->mineral_cost(), target);
  }

  // optional uint32 vespene_cost = 13;
  if (has_vespene_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->vespene_cost(), target);
  }

  // optional float food_required = 14;
  if (has_food_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->food_required(), target);
  }

  // optional uint32 ability_id = 15;
  if (has_ability_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->ability_id(), target);
  }

  // optional .SC2APIProtocol.Race race = 16;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->race(), target);
  }

  // optional float build_time = 17;
  if (has_build_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->build_time(), target);
  }

  // optional float food_provided = 18;
  if (has_food_provided()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->food_provided(), target);
  }

  // optional bool has_vespene = 19;
  if (has_has_vespene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->has_vespene(), target);
  }

  // optional bool has_minerals = 20;
  if (has_has_minerals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->has_minerals(), target);
  }

  // repeated uint32 tech_alias = 21;
  for (int i = 0; i < this->tech_alias_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(21, this->tech_alias(i), target);
  }

  // optional uint32 unit_alias = 22;
  if (has_unit_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->unit_alias(), target);
  }

  // optional uint32 tech_requirement = 23;
  if (has_tech_requirement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->tech_requirement(), target);
  }

  // optional bool require_attached = 24;
  if (has_require_attached()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->require_attached(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.UnitTypeData)
  return target;
}

int UnitTypeData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.UnitTypeData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 unit_id = 1;
    if (has_unit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool available = 3;
    if (has_available()) {
      total_size += 1 + 1;
    }

    // optional uint32 cargo_size = 4;
    if (has_cargo_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cargo_size());
    }

    // optional uint32 mineral_cost = 12;
    if (has_mineral_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mineral_cost());
    }

    // optional uint32 vespene_cost = 13;
    if (has_vespene_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vespene_cost());
    }

    // optional float food_required = 14;
    if (has_food_required()) {
      total_size += 1 + 4;
    }

    // optional float food_provided = 18;
    if (has_food_provided()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 57088u) {
    // optional uint32 ability_id = 15;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

    // optional .SC2APIProtocol.Race race = 16;
    if (has_race()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->race());
    }

    // optional float build_time = 17;
    if (has_build_time()) {
      total_size += 2 + 4;
    }

    // optional bool has_vespene = 19;
    if (has_has_vespene()) {
      total_size += 2 + 1;
    }

    // optional bool has_minerals = 20;
    if (has_has_minerals()) {
      total_size += 2 + 1;
    }

    // optional uint32 unit_alias = 22;
    if (has_unit_alias()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit_alias());
    }

    // optional uint32 tech_requirement = 23;
    if (has_tech_requirement()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tech_requirement());
    }

  }
  if (_has_bits_[16 / 32] & 851968u) {
    // optional bool require_attached = 24;
    if (has_require_attached()) {
      total_size += 2 + 1;
    }

    // optional float movement_speed = 9;
    if (has_movement_speed()) {
      total_size += 1 + 4;
    }

    // optional float armor = 10;
    if (has_armor()) {
      total_size += 1 + 4;
    }

  }
  // repeated uint32 tech_alias = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->tech_alias_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->tech_alias(i));
    }
    total_size += 2 * this->tech_alias_size() + data_size;
  }

  // repeated .SC2APIProtocol.Attribute attributes = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->attributes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->attributes(i));
    }
    total_size += 1 * this->attributes_size() + data_size;
  }

  // repeated .SC2APIProtocol.Weapon weapons = 11;
  total_size += 1 * this->weapons_size();
  for (int i = 0; i < this->weapons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weapons(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitTypeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.UnitTypeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UnitTypeData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UnitTypeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.UnitTypeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.UnitTypeData)
    MergeFrom(*source);
  }
}

void UnitTypeData::MergeFrom(const UnitTypeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.UnitTypeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tech_alias_.MergeFrom(from.tech_alias_);
  attributes_.MergeFrom(from.attributes_);
  weapons_.MergeFrom(from.weapons_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit_id()) {
      set_unit_id(from.unit_id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_available()) {
      set_available(from.available());
    }
    if (from.has_cargo_size()) {
      set_cargo_size(from.cargo_size());
    }
    if (from.has_mineral_cost()) {
      set_mineral_cost(from.mineral_cost());
    }
    if (from.has_vespene_cost()) {
      set_vespene_cost(from.vespene_cost());
    }
    if (from.has_food_required()) {
      set_food_required(from.food_required());
    }
    if (from.has_food_provided()) {
      set_food_provided(from.food_provided());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ability_id()) {
      set_ability_id(from.ability_id());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_build_time()) {
      set_build_time(from.build_time());
    }
    if (from.has_has_vespene()) {
      set_has_vespene(from.has_vespene());
    }
    if (from.has_has_minerals()) {
      set_has_minerals(from.has_minerals());
    }
    if (from.has_unit_alias()) {
      set_unit_alias(from.unit_alias());
    }
    if (from.has_tech_requirement()) {
      set_tech_requirement(from.tech_requirement());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_require_attached()) {
      set_require_attached(from.require_attached());
    }
    if (from.has_movement_speed()) {
      set_movement_speed(from.movement_speed());
    }
    if (from.has_armor()) {
      set_armor(from.armor());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UnitTypeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.UnitTypeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitTypeData::CopyFrom(const UnitTypeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.UnitTypeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitTypeData::IsInitialized() const {

  return true;
}

void UnitTypeData::Swap(UnitTypeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UnitTypeData::InternalSwap(UnitTypeData* other) {
  std::swap(unit_id_, other->unit_id_);
  name_.Swap(&other->name_);
  std::swap(available_, other->available_);
  std::swap(cargo_size_, other->cargo_size_);
  std::swap(mineral_cost_, other->mineral_cost_);
  std::swap(vespene_cost_, other->vespene_cost_);
  std::swap(food_required_, other->food_required_);
  std::swap(food_provided_, other->food_provided_);
  std::swap(ability_id_, other->ability_id_);
  std::swap(race_, other->race_);
  std::swap(build_time_, other->build_time_);
  std::swap(has_vespene_, other->has_vespene_);
  std::swap(has_minerals_, other->has_minerals_);
  tech_alias_.UnsafeArenaSwap(&other->tech_alias_);
  std::swap(unit_alias_, other->unit_alias_);
  std::swap(tech_requirement_, other->tech_requirement_);
  std::swap(require_attached_, other->require_attached_);
  attributes_.UnsafeArenaSwap(&other->attributes_);
  std::swap(movement_speed_, other->movement_speed_);
  std::swap(armor_, other->armor_);
  weapons_.UnsafeArenaSwap(&other->weapons_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UnitTypeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnitTypeData_descriptor_;
  metadata.reflection = UnitTypeData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UnitTypeData

// optional uint32 unit_id = 1;
bool UnitTypeData::has_unit_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UnitTypeData::set_has_unit_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UnitTypeData::clear_has_unit_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UnitTypeData::clear_unit_id() {
  unit_id_ = 0u;
  clear_has_unit_id();
}
 ::google::protobuf::uint32 UnitTypeData::unit_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.unit_id)
  return unit_id_;
}
 void UnitTypeData::set_unit_id(::google::protobuf::uint32 value) {
  set_has_unit_id();
  unit_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.unit_id)
}

// optional string name = 2;
bool UnitTypeData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UnitTypeData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void UnitTypeData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void UnitTypeData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& UnitTypeData::name() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnitTypeData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.name)
}
 void UnitTypeData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.UnitTypeData.name)
}
 void UnitTypeData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.UnitTypeData.name)
}
 ::std::string* UnitTypeData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.UnitTypeData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UnitTypeData::release_name() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.UnitTypeData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UnitTypeData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.UnitTypeData.name)
}

// optional bool available = 3;
bool UnitTypeData::has_available() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UnitTypeData::set_has_available() {
  _has_bits_[0] |= 0x00000004u;
}
void UnitTypeData::clear_has_available() {
  _has_bits_[0] &= ~0x00000004u;
}
void UnitTypeData::clear_available() {
  available_ = false;
  clear_has_available();
}
 bool UnitTypeData::available() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.available)
  return available_;
}
 void UnitTypeData::set_available(bool value) {
  set_has_available();
  available_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.available)
}

// optional uint32 cargo_size = 4;
bool UnitTypeData::has_cargo_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UnitTypeData::set_has_cargo_size() {
  _has_bits_[0] |= 0x00000008u;
}
void UnitTypeData::clear_has_cargo_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void UnitTypeData::clear_cargo_size() {
  cargo_size_ = 0u;
  clear_has_cargo_size();
}
 ::google::protobuf::uint32 UnitTypeData::cargo_size() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.cargo_size)
  return cargo_size_;
}
 void UnitTypeData::set_cargo_size(::google::protobuf::uint32 value) {
  set_has_cargo_size();
  cargo_size_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.cargo_size)
}

// optional uint32 mineral_cost = 12;
bool UnitTypeData::has_mineral_cost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UnitTypeData::set_has_mineral_cost() {
  _has_bits_[0] |= 0x00000010u;
}
void UnitTypeData::clear_has_mineral_cost() {
  _has_bits_[0] &= ~0x00000010u;
}
void UnitTypeData::clear_mineral_cost() {
  mineral_cost_ = 0u;
  clear_has_mineral_cost();
}
 ::google::protobuf::uint32 UnitTypeData::mineral_cost() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.mineral_cost)
  return mineral_cost_;
}
 void UnitTypeData::set_mineral_cost(::google::protobuf::uint32 value) {
  set_has_mineral_cost();
  mineral_cost_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.mineral_cost)
}

// optional uint32 vespene_cost = 13;
bool UnitTypeData::has_vespene_cost() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UnitTypeData::set_has_vespene_cost() {
  _has_bits_[0] |= 0x00000020u;
}
void UnitTypeData::clear_has_vespene_cost() {
  _has_bits_[0] &= ~0x00000020u;
}
void UnitTypeData::clear_vespene_cost() {
  vespene_cost_ = 0u;
  clear_has_vespene_cost();
}
 ::google::protobuf::uint32 UnitTypeData::vespene_cost() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.vespene_cost)
  return vespene_cost_;
}
 void UnitTypeData::set_vespene_cost(::google::protobuf::uint32 value) {
  set_has_vespene_cost();
  vespene_cost_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.vespene_cost)
}

// optional float food_required = 14;
bool UnitTypeData::has_food_required() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void UnitTypeData::set_has_food_required() {
  _has_bits_[0] |= 0x00000040u;
}
void UnitTypeData::clear_has_food_required() {
  _has_bits_[0] &= ~0x00000040u;
}
void UnitTypeData::clear_food_required() {
  food_required_ = 0;
  clear_has_food_required();
}
 float UnitTypeData::food_required() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.food_required)
  return food_required_;
}
 void UnitTypeData::set_food_required(float value) {
  set_has_food_required();
  food_required_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.food_required)
}

// optional float food_provided = 18;
bool UnitTypeData::has_food_provided() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void UnitTypeData::set_has_food_provided() {
  _has_bits_[0] |= 0x00000080u;
}
void UnitTypeData::clear_has_food_provided() {
  _has_bits_[0] &= ~0x00000080u;
}
void UnitTypeData::clear_food_provided() {
  food_provided_ = 0;
  clear_has_food_provided();
}
 float UnitTypeData::food_provided() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.food_provided)
  return food_provided_;
}
 void UnitTypeData::set_food_provided(float value) {
  set_has_food_provided();
  food_provided_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.food_provided)
}

// optional uint32 ability_id = 15;
bool UnitTypeData::has_ability_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void UnitTypeData::set_has_ability_id() {
  _has_bits_[0] |= 0x00000100u;
}
void UnitTypeData::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000100u;
}
void UnitTypeData::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
 ::google::protobuf::uint32 UnitTypeData::ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.ability_id)
  return ability_id_;
}
 void UnitTypeData::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.ability_id)
}

// optional .SC2APIProtocol.Race race = 16;
bool UnitTypeData::has_race() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void UnitTypeData::set_has_race() {
  _has_bits_[0] |= 0x00000200u;
}
void UnitTypeData::clear_has_race() {
  _has_bits_[0] &= ~0x00000200u;
}
void UnitTypeData::clear_race() {
  race_ = 0;
  clear_has_race();
}
 ::SC2APIProtocol::Race UnitTypeData::race() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.race)
  return static_cast< ::SC2APIProtocol::Race >(race_);
}
 void UnitTypeData::set_race(::SC2APIProtocol::Race value) {
  assert(::SC2APIProtocol::Race_IsValid(value));
  set_has_race();
  race_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.race)
}

// optional float build_time = 17;
bool UnitTypeData::has_build_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void UnitTypeData::set_has_build_time() {
  _has_bits_[0] |= 0x00000400u;
}
void UnitTypeData::clear_has_build_time() {
  _has_bits_[0] &= ~0x00000400u;
}
void UnitTypeData::clear_build_time() {
  build_time_ = 0;
  clear_has_build_time();
}
 float UnitTypeData::build_time() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.build_time)
  return build_time_;
}
 void UnitTypeData::set_build_time(float value) {
  set_has_build_time();
  build_time_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.build_time)
}

// optional bool has_vespene = 19;
bool UnitTypeData::has_has_vespene() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void UnitTypeData::set_has_has_vespene() {
  _has_bits_[0] |= 0x00000800u;
}
void UnitTypeData::clear_has_has_vespene() {
  _has_bits_[0] &= ~0x00000800u;
}
void UnitTypeData::clear_has_vespene() {
  has_vespene_ = false;
  clear_has_has_vespene();
}
 bool UnitTypeData::has_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.has_vespene)
  return has_vespene_;
}
 void UnitTypeData::set_has_vespene(bool value) {
  set_has_has_vespene();
  has_vespene_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.has_vespene)
}

// optional bool has_minerals = 20;
bool UnitTypeData::has_has_minerals() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void UnitTypeData::set_has_has_minerals() {
  _has_bits_[0] |= 0x00001000u;
}
void UnitTypeData::clear_has_has_minerals() {
  _has_bits_[0] &= ~0x00001000u;
}
void UnitTypeData::clear_has_minerals() {
  has_minerals_ = false;
  clear_has_has_minerals();
}
 bool UnitTypeData::has_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.has_minerals)
  return has_minerals_;
}
 void UnitTypeData::set_has_minerals(bool value) {
  set_has_has_minerals();
  has_minerals_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.has_minerals)
}

// repeated uint32 tech_alias = 21;
int UnitTypeData::tech_alias_size() const {
  return tech_alias_.size();
}
void UnitTypeData::clear_tech_alias() {
  tech_alias_.Clear();
}
 ::google::protobuf::uint32 UnitTypeData::tech_alias(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.tech_alias)
  return tech_alias_.Get(index);
}
 void UnitTypeData::set_tech_alias(int index, ::google::protobuf::uint32 value) {
  tech_alias_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.tech_alias)
}
 void UnitTypeData::add_tech_alias(::google::protobuf::uint32 value) {
  tech_alias_.Add(value);
  // @@protoc_insertion_point(field_add:SC2APIProtocol.UnitTypeData.tech_alias)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UnitTypeData::tech_alias() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.UnitTypeData.tech_alias)
  return tech_alias_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UnitTypeData::mutable_tech_alias() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.UnitTypeData.tech_alias)
  return &tech_alias_;
}

// optional uint32 unit_alias = 22;
bool UnitTypeData::has_unit_alias() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void UnitTypeData::set_has_unit_alias() {
  _has_bits_[0] |= 0x00004000u;
}
void UnitTypeData::clear_has_unit_alias() {
  _has_bits_[0] &= ~0x00004000u;
}
void UnitTypeData::clear_unit_alias() {
  unit_alias_ = 0u;
  clear_has_unit_alias();
}
 ::google::protobuf::uint32 UnitTypeData::unit_alias() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.unit_alias)
  return unit_alias_;
}
 void UnitTypeData::set_unit_alias(::google::protobuf::uint32 value) {
  set_has_unit_alias();
  unit_alias_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.unit_alias)
}

// optional uint32 tech_requirement = 23;
bool UnitTypeData::has_tech_requirement() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void UnitTypeData::set_has_tech_requirement() {
  _has_bits_[0] |= 0x00008000u;
}
void UnitTypeData::clear_has_tech_requirement() {
  _has_bits_[0] &= ~0x00008000u;
}
void UnitTypeData::clear_tech_requirement() {
  tech_requirement_ = 0u;
  clear_has_tech_requirement();
}
 ::google::protobuf::uint32 UnitTypeData::tech_requirement() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.tech_requirement)
  return tech_requirement_;
}
 void UnitTypeData::set_tech_requirement(::google::protobuf::uint32 value) {
  set_has_tech_requirement();
  tech_requirement_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.tech_requirement)
}

// optional bool require_attached = 24;
bool UnitTypeData::has_require_attached() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void UnitTypeData::set_has_require_attached() {
  _has_bits_[0] |= 0x00010000u;
}
void UnitTypeData::clear_has_require_attached() {
  _has_bits_[0] &= ~0x00010000u;
}
void UnitTypeData::clear_require_attached() {
  require_attached_ = false;
  clear_has_require_attached();
}
 bool UnitTypeData::require_attached() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.require_attached)
  return require_attached_;
}
 void UnitTypeData::set_require_attached(bool value) {
  set_has_require_attached();
  require_attached_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.require_attached)
}

// repeated .SC2APIProtocol.Attribute attributes = 8;
int UnitTypeData::attributes_size() const {
  return attributes_.size();
}
void UnitTypeData::clear_attributes() {
  attributes_.Clear();
}
 ::SC2APIProtocol::Attribute UnitTypeData::attributes(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.attributes)
  return static_cast< ::SC2APIProtocol::Attribute >(attributes_.Get(index));
}
 void UnitTypeData::set_attributes(int index, ::SC2APIProtocol::Attribute value) {
  assert(::SC2APIProtocol::Attribute_IsValid(value));
  attributes_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.attributes)
}
 void UnitTypeData::add_attributes(::SC2APIProtocol::Attribute value) {
  assert(::SC2APIProtocol::Attribute_IsValid(value));
  attributes_.Add(value);
  // @@protoc_insertion_point(field_add:SC2APIProtocol.UnitTypeData.attributes)
}
 const ::google::protobuf::RepeatedField<int>&
UnitTypeData::attributes() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.UnitTypeData.attributes)
  return attributes_;
}
 ::google::protobuf::RepeatedField<int>*
UnitTypeData::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.UnitTypeData.attributes)
  return &attributes_;
}

// optional float movement_speed = 9;
bool UnitTypeData::has_movement_speed() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void UnitTypeData::set_has_movement_speed() {
  _has_bits_[0] |= 0x00040000u;
}
void UnitTypeData::clear_has_movement_speed() {
  _has_bits_[0] &= ~0x00040000u;
}
void UnitTypeData::clear_movement_speed() {
  movement_speed_ = 0;
  clear_has_movement_speed();
}
 float UnitTypeData::movement_speed() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.movement_speed)
  return movement_speed_;
}
 void UnitTypeData::set_movement_speed(float value) {
  set_has_movement_speed();
  movement_speed_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.movement_speed)
}

// optional float armor = 10;
bool UnitTypeData::has_armor() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void UnitTypeData::set_has_armor() {
  _has_bits_[0] |= 0x00080000u;
}
void UnitTypeData::clear_has_armor() {
  _has_bits_[0] &= ~0x00080000u;
}
void UnitTypeData::clear_armor() {
  armor_ = 0;
  clear_has_armor();
}
 float UnitTypeData::armor() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.armor)
  return armor_;
}
 void UnitTypeData::set_armor(float value) {
  set_has_armor();
  armor_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.armor)
}

// repeated .SC2APIProtocol.Weapon weapons = 11;
int UnitTypeData::weapons_size() const {
  return weapons_.size();
}
void UnitTypeData::clear_weapons() {
  weapons_.Clear();
}
const ::SC2APIProtocol::Weapon& UnitTypeData::weapons(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.weapons)
  return weapons_.Get(index);
}
::SC2APIProtocol::Weapon* UnitTypeData::mutable_weapons(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.UnitTypeData.weapons)
  return weapons_.Mutable(index);
}
::SC2APIProtocol::Weapon* UnitTypeData::add_weapons() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.UnitTypeData.weapons)
  return weapons_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::Weapon >*
UnitTypeData::mutable_weapons() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.UnitTypeData.weapons)
  return &weapons_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::Weapon >&
UnitTypeData::weapons() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.UnitTypeData.weapons)
  return weapons_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpgradeData::kUpgradeIdFieldNumber;
const int UpgradeData::kNameFieldNumber;
const int UpgradeData::kMineralCostFieldNumber;
const int UpgradeData::kVespeneCostFieldNumber;
const int UpgradeData::kResearchTimeFieldNumber;
const int UpgradeData::kAbilityIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpgradeData::UpgradeData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.UpgradeData)
}

void UpgradeData::InitAsDefaultInstance() {
}

UpgradeData::UpgradeData(const UpgradeData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.UpgradeData)
}

void UpgradeData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  upgrade_id_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mineral_cost_ = 0u;
  vespene_cost_ = 0u;
  research_time_ = 0;
  ability_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeData::~UpgradeData() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.UpgradeData)
  SharedDtor();
}

void UpgradeData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void UpgradeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeData_descriptor_;
}

const UpgradeData& UpgradeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdata_2eproto();
  return *default_instance_;
}

UpgradeData* UpgradeData::default_instance_ = NULL;

UpgradeData* UpgradeData::New(::google::protobuf::Arena* arena) const {
  UpgradeData* n = new UpgradeData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UpgradeData::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.UpgradeData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UpgradeData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UpgradeData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(upgrade_id_, ability_id_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UpgradeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.UpgradeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 upgrade_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgrade_id_)));
          set_has_upgrade_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.UpgradeData.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mineral_cost;
        break;
      }

      // optional uint32 mineral_cost = 3;
      case 3: {
        if (tag == 24) {
         parse_mineral_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mineral_cost_)));
          set_has_mineral_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_vespene_cost;
        break;
      }

      // optional uint32 vespene_cost = 4;
      case 4: {
        if (tag == 32) {
         parse_vespene_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vespene_cost_)));
          set_has_vespene_cost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_research_time;
        break;
      }

      // optional float research_time = 5;
      case 5: {
        if (tag == 45) {
         parse_research_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &research_time_)));
          set_has_research_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ability_id;
        break;
      }

      // optional uint32 ability_id = 6;
      case 6: {
        if (tag == 48) {
         parse_ability_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_id_)));
          set_has_ability_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.UpgradeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.UpgradeData)
  return false;
#undef DO_
}

void UpgradeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.UpgradeData)
  // optional uint32 upgrade_id = 1;
  if (has_upgrade_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->upgrade_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.UpgradeData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 mineral_cost = 3;
  if (has_mineral_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mineral_cost(), output);
  }

  // optional uint32 vespene_cost = 4;
  if (has_vespene_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vespene_cost(), output);
  }

  // optional float research_time = 5;
  if (has_research_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->research_time(), output);
  }

  // optional uint32 ability_id = 6;
  if (has_ability_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ability_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.UpgradeData)
}

::google::protobuf::uint8* UpgradeData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.UpgradeData)
  // optional uint32 upgrade_id = 1;
  if (has_upgrade_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->upgrade_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.UpgradeData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 mineral_cost = 3;
  if (has_mineral_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mineral_cost(), target);
  }

  // optional uint32 vespene_cost = 4;
  if (has_vespene_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->vespene_cost(), target);
  }

  // optional float research_time = 5;
  if (has_research_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->research_time(), target);
  }

  // optional uint32 ability_id = 6;
  if (has_ability_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ability_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.UpgradeData)
  return target;
}

int UpgradeData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.UpgradeData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional uint32 upgrade_id = 1;
    if (has_upgrade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgrade_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 mineral_cost = 3;
    if (has_mineral_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mineral_cost());
    }

    // optional uint32 vespene_cost = 4;
    if (has_vespene_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vespene_cost());
    }

    // optional float research_time = 5;
    if (has_research_time()) {
      total_size += 1 + 4;
    }

    // optional uint32 ability_id = 6;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability_id());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.UpgradeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UpgradeData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UpgradeData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.UpgradeData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.UpgradeData)
    MergeFrom(*source);
  }
}

void UpgradeData::MergeFrom(const UpgradeData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.UpgradeData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upgrade_id()) {
      set_upgrade_id(from.upgrade_id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_mineral_cost()) {
      set_mineral_cost(from.mineral_cost());
    }
    if (from.has_vespene_cost()) {
      set_vespene_cost(from.vespene_cost());
    }
    if (from.has_research_time()) {
      set_research_time(from.research_time());
    }
    if (from.has_ability_id()) {
      set_ability_id(from.ability_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UpgradeData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.UpgradeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeData::CopyFrom(const UpgradeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.UpgradeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeData::IsInitialized() const {

  return true;
}

void UpgradeData::Swap(UpgradeData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpgradeData::InternalSwap(UpgradeData* other) {
  std::swap(upgrade_id_, other->upgrade_id_);
  name_.Swap(&other->name_);
  std::swap(mineral_cost_, other->mineral_cost_);
  std::swap(vespene_cost_, other->vespene_cost_);
  std::swap(research_time_, other->research_time_);
  std::swap(ability_id_, other->ability_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpgradeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeData_descriptor_;
  metadata.reflection = UpgradeData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UpgradeData

// optional uint32 upgrade_id = 1;
bool UpgradeData::has_upgrade_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UpgradeData::set_has_upgrade_id() {
  _has_bits_[0] |= 0x00000001u;
}
void UpgradeData::clear_has_upgrade_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void UpgradeData::clear_upgrade_id() {
  upgrade_id_ = 0u;
  clear_has_upgrade_id();
}
 ::google::protobuf::uint32 UpgradeData::upgrade_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UpgradeData.upgrade_id)
  return upgrade_id_;
}
 void UpgradeData::set_upgrade_id(::google::protobuf::uint32 value) {
  set_has_upgrade_id();
  upgrade_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UpgradeData.upgrade_id)
}

// optional string name = 2;
bool UpgradeData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UpgradeData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void UpgradeData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void UpgradeData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& UpgradeData::name() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UpgradeData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpgradeData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UpgradeData.name)
}
 void UpgradeData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.UpgradeData.name)
}
 void UpgradeData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.UpgradeData.name)
}
 ::std::string* UpgradeData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.UpgradeData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* UpgradeData::release_name() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.UpgradeData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void UpgradeData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.UpgradeData.name)
}

// optional uint32 mineral_cost = 3;
bool UpgradeData::has_mineral_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UpgradeData::set_has_mineral_cost() {
  _has_bits_[0] |= 0x00000004u;
}
void UpgradeData::clear_has_mineral_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
void UpgradeData::clear_mineral_cost() {
  mineral_cost_ = 0u;
  clear_has_mineral_cost();
}
 ::google::protobuf::uint32 UpgradeData::mineral_cost() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UpgradeData.mineral_cost)
  return mineral_cost_;
}
 void UpgradeData::set_mineral_cost(::google::protobuf::uint32 value) {
  set_has_mineral_cost();
  mineral_cost_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UpgradeData.mineral_cost)
}

// optional uint32 vespene_cost = 4;
bool UpgradeData::has_vespene_cost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UpgradeData::set_has_vespene_cost() {
  _has_bits_[0] |= 0x00000008u;
}
void UpgradeData::clear_has_vespene_cost() {
  _has_bits_[0] &= ~0x00000008u;
}
void UpgradeData::clear_vespene_cost() {
  vespene_cost_ = 0u;
  clear_has_vespene_cost();
}
 ::google::protobuf::uint32 UpgradeData::vespene_cost() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UpgradeData.vespene_cost)
  return vespene_cost_;
}
 void UpgradeData::set_vespene_cost(::google::protobuf::uint32 value) {
  set_has_vespene_cost();
  vespene_cost_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UpgradeData.vespene_cost)
}

// optional float research_time = 5;
bool UpgradeData::has_research_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UpgradeData::set_has_research_time() {
  _has_bits_[0] |= 0x00000010u;
}
void UpgradeData::clear_has_research_time() {
  _has_bits_[0] &= ~0x00000010u;
}
void UpgradeData::clear_research_time() {
  research_time_ = 0;
  clear_has_research_time();
}
 float UpgradeData::research_time() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UpgradeData.research_time)
  return research_time_;
}
 void UpgradeData::set_research_time(float value) {
  set_has_research_time();
  research_time_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UpgradeData.research_time)
}

// optional uint32 ability_id = 6;
bool UpgradeData::has_ability_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void UpgradeData::set_has_ability_id() {
  _has_bits_[0] |= 0x00000020u;
}
void UpgradeData::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void UpgradeData::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
 ::google::protobuf::uint32 UpgradeData::ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UpgradeData.ability_id)
  return ability_id_;
}
 void UpgradeData::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UpgradeData.ability_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BuffData::kBuffIdFieldNumber;
const int BuffData::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BuffData::BuffData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.BuffData)
}

void BuffData::InitAsDefaultInstance() {
}

BuffData::BuffData(const BuffData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.BuffData)
}

void BuffData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  buff_id_ = 0u;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffData::~BuffData() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.BuffData)
  SharedDtor();
}

void BuffData::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BuffData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffData_descriptor_;
}

const BuffData& BuffData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdata_2eproto();
  return *default_instance_;
}

BuffData* BuffData::default_instance_ = NULL;

BuffData* BuffData::New(::google::protobuf::Arena* arena) const {
  BuffData* n = new BuffData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BuffData::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.BuffData)
  if (_has_bits_[0 / 32] & 3u) {
    buff_id_ = 0u;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BuffData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.BuffData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 buff_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_id_)));
          set_has_buff_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.BuffData.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.BuffData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.BuffData)
  return false;
#undef DO_
}

void BuffData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.BuffData)
  // optional uint32 buff_id = 1;
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buff_id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.BuffData.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.BuffData)
}

::google::protobuf::uint8* BuffData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.BuffData)
  // optional uint32 buff_id = 1;
  if (has_buff_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buff_id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.BuffData.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.BuffData)
  return target;
}

int BuffData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.BuffData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 buff_id = 1;
    if (has_buff_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buff_id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.BuffData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BuffData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BuffData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.BuffData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.BuffData)
    MergeFrom(*source);
  }
}

void BuffData::MergeFrom(const BuffData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.BuffData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_id()) {
      set_buff_id(from.buff_id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BuffData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.BuffData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffData::CopyFrom(const BuffData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.BuffData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffData::IsInitialized() const {

  return true;
}

void BuffData::Swap(BuffData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BuffData::InternalSwap(BuffData* other) {
  std::swap(buff_id_, other->buff_id_);
  name_.Swap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BuffData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffData_descriptor_;
  metadata.reflection = BuffData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BuffData

// optional uint32 buff_id = 1;
bool BuffData::has_buff_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BuffData::set_has_buff_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BuffData::clear_has_buff_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BuffData::clear_buff_id() {
  buff_id_ = 0u;
  clear_has_buff_id();
}
 ::google::protobuf::uint32 BuffData::buff_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.BuffData.buff_id)
  return buff_id_;
}
 void BuffData::set_buff_id(::google::protobuf::uint32 value) {
  set_has_buff_id();
  buff_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.BuffData.buff_id)
}

// optional string name = 2;
bool BuffData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BuffData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void BuffData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void BuffData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& BuffData::name() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.BuffData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BuffData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.BuffData.name)
}
 void BuffData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.BuffData.name)
}
 void BuffData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.BuffData.name)
}
 ::std::string* BuffData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.BuffData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BuffData::release_name() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.BuffData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BuffData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.BuffData.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SC2APIProtocol

// @@protoc_insertion_point(global_scope)
