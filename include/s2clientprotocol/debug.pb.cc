// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/debug.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "s2clientprotocol/debug.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SC2APIProtocol {

namespace {

const ::google::protobuf::Descriptor* DebugCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugCommand_reflection_ = NULL;
struct DebugCommandOneofInstance {
  const ::SC2APIProtocol::DebugDraw* draw_;
  int game_state_;
  const ::SC2APIProtocol::DebugCreateUnit* create_unit_;
  const ::SC2APIProtocol::DebugKillUnit* kill_unit_;
  const ::SC2APIProtocol::DebugTestProcess* test_process_;
  const ::SC2APIProtocol::DebugSetScore* score_;
  const ::SC2APIProtocol::DebugEndGame* end_game_;
  const ::SC2APIProtocol::DebugSetUnitValue* unit_value_;
  const ::SC2APIProtocol::DebugChat* chat_;
}* DebugCommand_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* DebugDraw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugDraw_reflection_ = NULL;
const ::google::protobuf::Descriptor* Line_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Line_reflection_ = NULL;
const ::google::protobuf::Descriptor* Color_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Color_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugText_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugSphere_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugSphere_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugCreateUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugCreateUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugKillUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugKillUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugTestProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugTestProcess_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DebugTestProcess_Test_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DebugSetScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugSetScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* DebugEndGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugEndGame_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DebugEndGame_EndResult_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DebugSetUnitValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugSetUnitValue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DebugSetUnitValue_UnitValue_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DebugChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DebugChat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DebugGameState_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_s2clientprotocol_2fdebug_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_s2clientprotocol_2fdebug_2eproto() {
  protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "s2clientprotocol/debug.proto");
  GOOGLE_CHECK(file != NULL);
  DebugCommand_descriptor_ = file->message_type(0);
  static const int DebugCommand_offsets_[10] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DebugCommand_default_oneof_instance_, draw_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DebugCommand_default_oneof_instance_, game_state_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DebugCommand_default_oneof_instance_, create_unit_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DebugCommand_default_oneof_instance_, kill_unit_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DebugCommand_default_oneof_instance_, test_process_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DebugCommand_default_oneof_instance_, score_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DebugCommand_default_oneof_instance_, end_game_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DebugCommand_default_oneof_instance_, unit_value_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(DebugCommand_default_oneof_instance_, chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugCommand, command_),
  };
  DebugCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DebugCommand_descriptor_,
      DebugCommand::default_instance_,
      DebugCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugCommand, _has_bits_[0]),
      -1,
      -1,
      DebugCommand_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugCommand, _oneof_case_[0]),
      sizeof(DebugCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugCommand, _internal_metadata_),
      -1);
  DebugDraw_descriptor_ = file->message_type(1);
  static const int DebugDraw_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugDraw, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugDraw, lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugDraw, boxes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugDraw, spheres_),
  };
  DebugDraw_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DebugDraw_descriptor_,
      DebugDraw::default_instance_,
      DebugDraw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugDraw, _has_bits_[0]),
      -1,
      -1,
      sizeof(DebugDraw),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugDraw, _internal_metadata_),
      -1);
  Line_descriptor_ = file->message_type(2);
  static const int Line_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, p0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, p1_),
  };
  Line_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Line_descriptor_,
      Line::default_instance_,
      Line_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, _has_bits_[0]),
      -1,
      -1,
      sizeof(Line),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Line, _internal_metadata_),
      -1);
  Color_descriptor_ = file->message_type(3);
  static const int Color_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, r_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, g_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, b_),
  };
  Color_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Color_descriptor_,
      Color::default_instance_,
      Color_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _has_bits_[0]),
      -1,
      -1,
      sizeof(Color),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Color, _internal_metadata_),
      -1);
  DebugText_descriptor_ = file->message_type(4);
  static const int DebugText_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugText, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugText, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugText, virtual_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugText, world_pos_),
  };
  DebugText_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DebugText_descriptor_,
      DebugText::default_instance_,
      DebugText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugText, _has_bits_[0]),
      -1,
      -1,
      sizeof(DebugText),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugText, _internal_metadata_),
      -1);
  DebugLine_descriptor_ = file->message_type(5);
  static const int DebugLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugLine, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugLine, line_),
  };
  DebugLine_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DebugLine_descriptor_,
      DebugLine::default_instance_,
      DebugLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugLine, _has_bits_[0]),
      -1,
      -1,
      sizeof(DebugLine),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugLine, _internal_metadata_),
      -1);
  DebugBox_descriptor_ = file->message_type(6);
  static const int DebugBox_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugBox, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugBox, min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugBox, max_),
  };
  DebugBox_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DebugBox_descriptor_,
      DebugBox::default_instance_,
      DebugBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugBox, _has_bits_[0]),
      -1,
      -1,
      sizeof(DebugBox),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugBox, _internal_metadata_),
      -1);
  DebugSphere_descriptor_ = file->message_type(7);
  static const int DebugSphere_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugSphere, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugSphere, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugSphere, r_),
  };
  DebugSphere_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DebugSphere_descriptor_,
      DebugSphere::default_instance_,
      DebugSphere_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugSphere, _has_bits_[0]),
      -1,
      -1,
      sizeof(DebugSphere),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugSphere, _internal_metadata_),
      -1);
  DebugCreateUnit_descriptor_ = file->message_type(8);
  static const int DebugCreateUnit_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugCreateUnit, unit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugCreateUnit, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugCreateUnit, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugCreateUnit, quantity_),
  };
  DebugCreateUnit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DebugCreateUnit_descriptor_,
      DebugCreateUnit::default_instance_,
      DebugCreateUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugCreateUnit, _has_bits_[0]),
      -1,
      -1,
      sizeof(DebugCreateUnit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugCreateUnit, _internal_metadata_),
      -1);
  DebugKillUnit_descriptor_ = file->message_type(9);
  static const int DebugKillUnit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugKillUnit, tag_),
  };
  DebugKillUnit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DebugKillUnit_descriptor_,
      DebugKillUnit::default_instance_,
      DebugKillUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugKillUnit, _has_bits_[0]),
      -1,
      -1,
      sizeof(DebugKillUnit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugKillUnit, _internal_metadata_),
      -1);
  DebugTestProcess_descriptor_ = file->message_type(10);
  static const int DebugTestProcess_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTestProcess, test_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTestProcess, delay_ms_),
  };
  DebugTestProcess_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DebugTestProcess_descriptor_,
      DebugTestProcess::default_instance_,
      DebugTestProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTestProcess, _has_bits_[0]),
      -1,
      -1,
      sizeof(DebugTestProcess),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugTestProcess, _internal_metadata_),
      -1);
  DebugTestProcess_Test_descriptor_ = DebugTestProcess_descriptor_->enum_type(0);
  DebugSetScore_descriptor_ = file->message_type(11);
  static const int DebugSetScore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugSetScore, score_),
  };
  DebugSetScore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DebugSetScore_descriptor_,
      DebugSetScore::default_instance_,
      DebugSetScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugSetScore, _has_bits_[0]),
      -1,
      -1,
      sizeof(DebugSetScore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugSetScore, _internal_metadata_),
      -1);
  DebugEndGame_descriptor_ = file->message_type(12);
  static const int DebugEndGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugEndGame, end_result_),
  };
  DebugEndGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DebugEndGame_descriptor_,
      DebugEndGame::default_instance_,
      DebugEndGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugEndGame, _has_bits_[0]),
      -1,
      -1,
      sizeof(DebugEndGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugEndGame, _internal_metadata_),
      -1);
  DebugEndGame_EndResult_descriptor_ = DebugEndGame_descriptor_->enum_type(0);
  DebugSetUnitValue_descriptor_ = file->message_type(13);
  static const int DebugSetUnitValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugSetUnitValue, unit_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugSetUnitValue, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugSetUnitValue, unit_tag_),
  };
  DebugSetUnitValue_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DebugSetUnitValue_descriptor_,
      DebugSetUnitValue::default_instance_,
      DebugSetUnitValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugSetUnitValue, _has_bits_[0]),
      -1,
      -1,
      sizeof(DebugSetUnitValue),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugSetUnitValue, _internal_metadata_),
      -1);
  DebugSetUnitValue_UnitValue_descriptor_ = DebugSetUnitValue_descriptor_->enum_type(0);
  DebugChat_descriptor_ = file->message_type(14);
  static const int DebugChat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugChat, message_),
  };
  DebugChat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DebugChat_descriptor_,
      DebugChat::default_instance_,
      DebugChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugChat, _has_bits_[0]),
      -1,
      -1,
      sizeof(DebugChat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DebugChat, _internal_metadata_),
      -1);
  DebugGameState_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_s2clientprotocol_2fdebug_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DebugCommand_descriptor_, &DebugCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DebugDraw_descriptor_, &DebugDraw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Line_descriptor_, &Line::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Color_descriptor_, &Color::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DebugText_descriptor_, &DebugText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DebugLine_descriptor_, &DebugLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DebugBox_descriptor_, &DebugBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DebugSphere_descriptor_, &DebugSphere::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DebugCreateUnit_descriptor_, &DebugCreateUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DebugKillUnit_descriptor_, &DebugKillUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DebugTestProcess_descriptor_, &DebugTestProcess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DebugSetScore_descriptor_, &DebugSetScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DebugEndGame_descriptor_, &DebugEndGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DebugSetUnitValue_descriptor_, &DebugSetUnitValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DebugChat_descriptor_, &DebugChat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_s2clientprotocol_2fdebug_2eproto() {
  delete DebugCommand::default_instance_;
  delete DebugCommand_default_oneof_instance_;
  delete DebugCommand_reflection_;
  delete DebugDraw::default_instance_;
  delete DebugDraw_reflection_;
  delete Line::default_instance_;
  delete Line_reflection_;
  delete Color::default_instance_;
  delete Color_reflection_;
  delete DebugText::default_instance_;
  delete DebugText_reflection_;
  delete DebugLine::default_instance_;
  delete DebugLine_reflection_;
  delete DebugBox::default_instance_;
  delete DebugBox_reflection_;
  delete DebugSphere::default_instance_;
  delete DebugSphere_reflection_;
  delete DebugCreateUnit::default_instance_;
  delete DebugCreateUnit_reflection_;
  delete DebugKillUnit::default_instance_;
  delete DebugKillUnit_reflection_;
  delete DebugTestProcess::default_instance_;
  delete DebugTestProcess_reflection_;
  delete DebugSetScore::default_instance_;
  delete DebugSetScore_reflection_;
  delete DebugEndGame::default_instance_;
  delete DebugEndGame_reflection_;
  delete DebugSetUnitValue::default_instance_;
  delete DebugSetUnitValue_reflection_;
  delete DebugChat::default_instance_;
  delete DebugChat_reflection_;
}

void protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SC2APIProtocol::protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034s2clientprotocol/debug.proto\022\016SC2APIPr"
    "otocol\032\035s2clientprotocol/common.proto\"\346\003"
    "\n\014DebugCommand\022)\n\004draw\030\001 \001(\0132\031.SC2APIPro"
    "tocol.DebugDrawH\000\0224\n\ngame_state\030\002 \001(\0162\036."
    "SC2APIProtocol.DebugGameStateH\000\0226\n\013creat"
    "e_unit\030\003 \001(\0132\037.SC2APIProtocol.DebugCreat"
    "eUnitH\000\0222\n\tkill_unit\030\004 \001(\0132\035.SC2APIProto"
    "col.DebugKillUnitH\000\0228\n\014test_process\030\005 \001("
    "\0132 .SC2APIProtocol.DebugTestProcessH\000\022.\n"
    "\005score\030\006 \001(\0132\035.SC2APIProtocol.DebugSetSc"
    "oreH\000\0220\n\010end_game\030\007 \001(\0132\034.SC2APIProtocol"
    ".DebugEndGameH\000\0227\n\nunit_value\030\010 \001(\0132!.SC"
    "2APIProtocol.DebugSetUnitValueH\000\022)\n\004chat"
    "\030\t \001(\0132\031.SC2APIProtocol.DebugChatH\000B\t\n\007c"
    "ommand\"\265\001\n\tDebugDraw\022\'\n\004text\030\001 \003(\0132\031.SC2"
    "APIProtocol.DebugText\022(\n\005lines\030\002 \003(\0132\031.S"
    "C2APIProtocol.DebugLine\022\'\n\005boxes\030\003 \003(\0132\030"
    ".SC2APIProtocol.DebugBox\022,\n\007spheres\030\004 \003("
    "\0132\033.SC2APIProtocol.DebugSphere\"L\n\004Line\022!"
    "\n\002p0\030\001 \001(\0132\025.SC2APIProtocol.Point\022!\n\002p1\030"
    "\002 \001(\0132\025.SC2APIProtocol.Point\"(\n\005Color\022\t\n"
    "\001r\030\001 \001(\r\022\t\n\001g\030\002 \001(\r\022\t\n\001b\030\003 \001(\r\"\225\001\n\tDebug"
    "Text\022$\n\005color\030\001 \001(\0132\025.SC2APIProtocol.Col"
    "or\022\014\n\004text\030\002 \001(\t\022*\n\013virtual_pos\030\003 \001(\0132\025."
    "SC2APIProtocol.Point\022(\n\tworld_pos\030\004 \001(\0132"
    "\025.SC2APIProtocol.Point\"U\n\tDebugLine\022$\n\005c"
    "olor\030\001 \001(\0132\025.SC2APIProtocol.Color\022\"\n\004lin"
    "e\030\002 \001(\0132\024.SC2APIProtocol.Line\"x\n\010DebugBo"
    "x\022$\n\005color\030\001 \001(\0132\025.SC2APIProtocol.Color\022"
    "\"\n\003min\030\002 \001(\0132\025.SC2APIProtocol.Point\022\"\n\003m"
    "ax\030\003 \001(\0132\025.SC2APIProtocol.Point\"`\n\013Debug"
    "Sphere\022$\n\005color\030\001 \001(\0132\025.SC2APIProtocol.C"
    "olor\022 \n\001p\030\002 \001(\0132\025.SC2APIProtocol.Point\022\t"
    "\n\001r\030\003 \001(\002\"k\n\017DebugCreateUnit\022\021\n\tunit_typ"
    "e\030\001 \001(\r\022\r\n\005owner\030\002 \001(\005\022$\n\003pos\030\003 \001(\0132\027.SC"
    "2APIProtocol.Point2D\022\020\n\010quantity\030\004 \001(\r\"\034"
    "\n\rDebugKillUnit\022\013\n\003tag\030\001 \003(\004\"\200\001\n\020DebugTe"
    "stProcess\0223\n\004test\030\001 \001(\0162%.SC2APIProtocol"
    ".DebugTestProcess.Test\022\020\n\010delay_ms\030\002 \001(\005"
    "\"%\n\004Test\022\010\n\004hang\020\001\022\t\n\005crash\020\002\022\010\n\004exit\020\003\""
    "\036\n\rDebugSetScore\022\r\n\005score\030\001 \001(\002\"z\n\014Debug"
    "EndGame\022:\n\nend_result\030\001 \001(\0162&.SC2APIProt"
    "ocol.DebugEndGame.EndResult\".\n\tEndResult"
    "\022\r\n\tSurrender\020\001\022\022\n\016DeclareVictory\020\002\"\245\001\n\021"
    "DebugSetUnitValue\022\?\n\nunit_value\030\001 \001(\0162+."
    "SC2APIProtocol.DebugSetUnitValue.UnitVal"
    "ue\022\r\n\005value\030\002 \001(\002\022\020\n\010unit_tag\030\003 \001(\004\".\n\tU"
    "nitValue\022\n\n\006Energy\020\001\022\010\n\004Life\020\002\022\013\n\007Shield"
    "s\020\003\"\034\n\tDebugChat\022\017\n\007message\030\001 \001(\t*\262\001\n\016De"
    "bugGameState\022\014\n\010show_map\020\001\022\021\n\rcontrol_en"
    "emy\020\002\022\010\n\004food\020\003\022\010\n\004free\020\004\022\021\n\rall_resourc"
    "es\020\005\022\007\n\003god\020\006\022\014\n\010minerals\020\007\022\007\n\003gas\020\010\022\014\n\010"
    "cooldown\020\t\022\r\n\ttech_tree\020\n\022\013\n\007upgrade\020\013\022\016"
    "\n\nfast_build\020\014", 2134);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "s2clientprotocol/debug.proto", &protobuf_RegisterTypes);
  DebugCommand::default_instance_ = new DebugCommand();
  DebugCommand_default_oneof_instance_ = new DebugCommandOneofInstance();
  DebugDraw::default_instance_ = new DebugDraw();
  Line::default_instance_ = new Line();
  Color::default_instance_ = new Color();
  DebugText::default_instance_ = new DebugText();
  DebugLine::default_instance_ = new DebugLine();
  DebugBox::default_instance_ = new DebugBox();
  DebugSphere::default_instance_ = new DebugSphere();
  DebugCreateUnit::default_instance_ = new DebugCreateUnit();
  DebugKillUnit::default_instance_ = new DebugKillUnit();
  DebugTestProcess::default_instance_ = new DebugTestProcess();
  DebugSetScore::default_instance_ = new DebugSetScore();
  DebugEndGame::default_instance_ = new DebugEndGame();
  DebugSetUnitValue::default_instance_ = new DebugSetUnitValue();
  DebugChat::default_instance_ = new DebugChat();
  DebugCommand::default_instance_->InitAsDefaultInstance();
  DebugDraw::default_instance_->InitAsDefaultInstance();
  Line::default_instance_->InitAsDefaultInstance();
  Color::default_instance_->InitAsDefaultInstance();
  DebugText::default_instance_->InitAsDefaultInstance();
  DebugLine::default_instance_->InitAsDefaultInstance();
  DebugBox::default_instance_->InitAsDefaultInstance();
  DebugSphere::default_instance_->InitAsDefaultInstance();
  DebugCreateUnit::default_instance_->InitAsDefaultInstance();
  DebugKillUnit::default_instance_->InitAsDefaultInstance();
  DebugTestProcess::default_instance_->InitAsDefaultInstance();
  DebugSetScore::default_instance_->InitAsDefaultInstance();
  DebugEndGame::default_instance_->InitAsDefaultInstance();
  DebugSetUnitValue::default_instance_->InitAsDefaultInstance();
  DebugChat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_s2clientprotocol_2fdebug_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_s2clientprotocol_2fdebug_2eproto {
  StaticDescriptorInitializer_s2clientprotocol_2fdebug_2eproto() {
    protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto();
  }
} static_descriptor_initializer_s2clientprotocol_2fdebug_2eproto_;
const ::google::protobuf::EnumDescriptor* DebugGameState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugGameState_descriptor_;
}
bool DebugGameState_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugCommand::kDrawFieldNumber;
const int DebugCommand::kGameStateFieldNumber;
const int DebugCommand::kCreateUnitFieldNumber;
const int DebugCommand::kKillUnitFieldNumber;
const int DebugCommand::kTestProcessFieldNumber;
const int DebugCommand::kScoreFieldNumber;
const int DebugCommand::kEndGameFieldNumber;
const int DebugCommand::kUnitValueFieldNumber;
const int DebugCommand::kChatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugCommand::DebugCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.DebugCommand)
}

void DebugCommand::InitAsDefaultInstance() {
  DebugCommand_default_oneof_instance_->draw_ = const_cast< ::SC2APIProtocol::DebugDraw*>(&::SC2APIProtocol::DebugDraw::default_instance());
  DebugCommand_default_oneof_instance_->game_state_ = 1;
  DebugCommand_default_oneof_instance_->create_unit_ = const_cast< ::SC2APIProtocol::DebugCreateUnit*>(&::SC2APIProtocol::DebugCreateUnit::default_instance());
  DebugCommand_default_oneof_instance_->kill_unit_ = const_cast< ::SC2APIProtocol::DebugKillUnit*>(&::SC2APIProtocol::DebugKillUnit::default_instance());
  DebugCommand_default_oneof_instance_->test_process_ = const_cast< ::SC2APIProtocol::DebugTestProcess*>(&::SC2APIProtocol::DebugTestProcess::default_instance());
  DebugCommand_default_oneof_instance_->score_ = const_cast< ::SC2APIProtocol::DebugSetScore*>(&::SC2APIProtocol::DebugSetScore::default_instance());
  DebugCommand_default_oneof_instance_->end_game_ = const_cast< ::SC2APIProtocol::DebugEndGame*>(&::SC2APIProtocol::DebugEndGame::default_instance());
  DebugCommand_default_oneof_instance_->unit_value_ = const_cast< ::SC2APIProtocol::DebugSetUnitValue*>(&::SC2APIProtocol::DebugSetUnitValue::default_instance());
  DebugCommand_default_oneof_instance_->chat_ = const_cast< ::SC2APIProtocol::DebugChat*>(&::SC2APIProtocol::DebugChat::default_instance());
}

DebugCommand::DebugCommand(const DebugCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugCommand)
}

void DebugCommand::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_command();
}

DebugCommand::~DebugCommand() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugCommand)
  SharedDtor();
}

void DebugCommand::SharedDtor() {
  if (has_command()) {
    clear_command();
  }
  if (this != default_instance_) {
  }
}

void DebugCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugCommand_descriptor_;
}

const DebugCommand& DebugCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto();
  return *default_instance_;
}

DebugCommand* DebugCommand::default_instance_ = NULL;

DebugCommand* DebugCommand::New(::google::protobuf::Arena* arena) const {
  DebugCommand* n = new DebugCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugCommand::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.DebugCommand)
  switch(command_case()) {
    case kDraw: {
      delete command_.draw_;
      break;
    }
    case kGameState: {
      // No need to clear
      break;
    }
    case kCreateUnit: {
      delete command_.create_unit_;
      break;
    }
    case kKillUnit: {
      delete command_.kill_unit_;
      break;
    }
    case kTestProcess: {
      delete command_.test_process_;
      break;
    }
    case kScore: {
      delete command_.score_;
      break;
    }
    case kEndGame: {
      delete command_.end_game_;
      break;
    }
    case kUnitValue: {
      delete command_.unit_value_;
      break;
    }
    case kChat: {
      delete command_.chat_;
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void DebugCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugCommand)
  clear_command();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DebugCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.DebugCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.DebugDraw draw = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_draw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_game_state;
        break;
      }

      // optional .SC2APIProtocol.DebugGameState game_state = 2;
      case 2: {
        if (tag == 16) {
         parse_game_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::DebugGameState_IsValid(value)) {
            set_game_state(static_cast< ::SC2APIProtocol::DebugGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_create_unit;
        break;
      }

      // optional .SC2APIProtocol.DebugCreateUnit create_unit = 3;
      case 3: {
        if (tag == 26) {
         parse_create_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_unit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_kill_unit;
        break;
      }

      // optional .SC2APIProtocol.DebugKillUnit kill_unit = 4;
      case 4: {
        if (tag == 34) {
         parse_kill_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kill_unit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_test_process;
        break;
      }

      // optional .SC2APIProtocol.DebugTestProcess test_process = 5;
      case 5: {
        if (tag == 42) {
         parse_test_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_test_process()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_score;
        break;
      }

      // optional .SC2APIProtocol.DebugSetScore score = 6;
      case 6: {
        if (tag == 50) {
         parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_end_game;
        break;
      }

      // optional .SC2APIProtocol.DebugEndGame end_game = 7;
      case 7: {
        if (tag == 58) {
         parse_end_game:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end_game()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_unit_value;
        break;
      }

      // optional .SC2APIProtocol.DebugSetUnitValue unit_value = 8;
      case 8: {
        if (tag == 66) {
         parse_unit_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_chat;
        break;
      }

      // optional .SC2APIProtocol.DebugChat chat = 9;
      case 9: {
        if (tag == 74) {
         parse_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.DebugCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.DebugCommand)
  return false;
#undef DO_
}

void DebugCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.DebugCommand)
  // optional .SC2APIProtocol.DebugDraw draw = 1;
  if (has_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *command_.draw_, output);
  }

  // optional .SC2APIProtocol.DebugGameState game_state = 2;
  if (has_game_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->game_state(), output);
  }

  // optional .SC2APIProtocol.DebugCreateUnit create_unit = 3;
  if (has_create_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *command_.create_unit_, output);
  }

  // optional .SC2APIProtocol.DebugKillUnit kill_unit = 4;
  if (has_kill_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *command_.kill_unit_, output);
  }

  // optional .SC2APIProtocol.DebugTestProcess test_process = 5;
  if (has_test_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *command_.test_process_, output);
  }

  // optional .SC2APIProtocol.DebugSetScore score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *command_.score_, output);
  }

  // optional .SC2APIProtocol.DebugEndGame end_game = 7;
  if (has_end_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *command_.end_game_, output);
  }

  // optional .SC2APIProtocol.DebugSetUnitValue unit_value = 8;
  if (has_unit_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *command_.unit_value_, output);
  }

  // optional .SC2APIProtocol.DebugChat chat = 9;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *command_.chat_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.DebugCommand)
}

::google::protobuf::uint8* DebugCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugCommand)
  // optional .SC2APIProtocol.DebugDraw draw = 1;
  if (has_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *command_.draw_, false, target);
  }

  // optional .SC2APIProtocol.DebugGameState game_state = 2;
  if (has_game_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->game_state(), target);
  }

  // optional .SC2APIProtocol.DebugCreateUnit create_unit = 3;
  if (has_create_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *command_.create_unit_, false, target);
  }

  // optional .SC2APIProtocol.DebugKillUnit kill_unit = 4;
  if (has_kill_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *command_.kill_unit_, false, target);
  }

  // optional .SC2APIProtocol.DebugTestProcess test_process = 5;
  if (has_test_process()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *command_.test_process_, false, target);
  }

  // optional .SC2APIProtocol.DebugSetScore score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *command_.score_, false, target);
  }

  // optional .SC2APIProtocol.DebugEndGame end_game = 7;
  if (has_end_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *command_.end_game_, false, target);
  }

  // optional .SC2APIProtocol.DebugSetUnitValue unit_value = 8;
  if (has_unit_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *command_.unit_value_, false, target);
  }

  // optional .SC2APIProtocol.DebugChat chat = 9;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *command_.chat_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugCommand)
  return target;
}

int DebugCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugCommand)
  int total_size = 0;

  switch (command_case()) {
    // optional .SC2APIProtocol.DebugDraw draw = 1;
    case kDraw: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.draw_);
      break;
    }
    // optional .SC2APIProtocol.DebugGameState game_state = 2;
    case kGameState: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->game_state());
      break;
    }
    // optional .SC2APIProtocol.DebugCreateUnit create_unit = 3;
    case kCreateUnit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.create_unit_);
      break;
    }
    // optional .SC2APIProtocol.DebugKillUnit kill_unit = 4;
    case kKillUnit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.kill_unit_);
      break;
    }
    // optional .SC2APIProtocol.DebugTestProcess test_process = 5;
    case kTestProcess: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.test_process_);
      break;
    }
    // optional .SC2APIProtocol.DebugSetScore score = 6;
    case kScore: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.score_);
      break;
    }
    // optional .SC2APIProtocol.DebugEndGame end_game = 7;
    case kEndGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.end_game_);
      break;
    }
    // optional .SC2APIProtocol.DebugSetUnitValue unit_value = 8;
    case kUnitValue: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.unit_value_);
      break;
    }
    // optional .SC2APIProtocol.DebugChat chat = 9;
    case kChat: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *command_.chat_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.DebugCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DebugCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.DebugCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.DebugCommand)
    MergeFrom(*source);
  }
}

void DebugCommand::MergeFrom(const DebugCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.command_case()) {
    case kDraw: {
      mutable_draw()->::SC2APIProtocol::DebugDraw::MergeFrom(from.draw());
      break;
    }
    case kGameState: {
      set_game_state(from.game_state());
      break;
    }
    case kCreateUnit: {
      mutable_create_unit()->::SC2APIProtocol::DebugCreateUnit::MergeFrom(from.create_unit());
      break;
    }
    case kKillUnit: {
      mutable_kill_unit()->::SC2APIProtocol::DebugKillUnit::MergeFrom(from.kill_unit());
      break;
    }
    case kTestProcess: {
      mutable_test_process()->::SC2APIProtocol::DebugTestProcess::MergeFrom(from.test_process());
      break;
    }
    case kScore: {
      mutable_score()->::SC2APIProtocol::DebugSetScore::MergeFrom(from.score());
      break;
    }
    case kEndGame: {
      mutable_end_game()->::SC2APIProtocol::DebugEndGame::MergeFrom(from.end_game());
      break;
    }
    case kUnitValue: {
      mutable_unit_value()->::SC2APIProtocol::DebugSetUnitValue::MergeFrom(from.unit_value());
      break;
    }
    case kChat: {
      mutable_chat()->::SC2APIProtocol::DebugChat::MergeFrom(from.chat());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DebugCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.DebugCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugCommand::CopyFrom(const DebugCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugCommand::IsInitialized() const {

  return true;
}

void DebugCommand::Swap(DebugCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugCommand::InternalSwap(DebugCommand* other) {
  std::swap(command_, other->command_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugCommand_descriptor_;
  metadata.reflection = DebugCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugCommand

// optional .SC2APIProtocol.DebugDraw draw = 1;
bool DebugCommand::has_draw() const {
  return command_case() == kDraw;
}
void DebugCommand::set_has_draw() {
  _oneof_case_[0] = kDraw;
}
void DebugCommand::clear_draw() {
  if (has_draw()) {
    delete command_.draw_;
    clear_has_command();
  }
}
 const ::SC2APIProtocol::DebugDraw& DebugCommand::draw() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugCommand.draw)
  return has_draw()
      ? *command_.draw_
      : ::SC2APIProtocol::DebugDraw::default_instance();
}
::SC2APIProtocol::DebugDraw* DebugCommand::mutable_draw() {
  if (!has_draw()) {
    clear_command();
    set_has_draw();
    command_.draw_ = new ::SC2APIProtocol::DebugDraw;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugCommand.draw)
  return command_.draw_;
}
::SC2APIProtocol::DebugDraw* DebugCommand::release_draw() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugCommand.draw)
  if (has_draw()) {
    clear_has_command();
    ::SC2APIProtocol::DebugDraw* temp = command_.draw_;
    command_.draw_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DebugCommand::set_allocated_draw(::SC2APIProtocol::DebugDraw* draw) {
  clear_command();
  if (draw) {
    set_has_draw();
    command_.draw_ = draw;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugCommand.draw)
}

// optional .SC2APIProtocol.DebugGameState game_state = 2;
bool DebugCommand::has_game_state() const {
  return command_case() == kGameState;
}
void DebugCommand::set_has_game_state() {
  _oneof_case_[0] = kGameState;
}
void DebugCommand::clear_game_state() {
  if (has_game_state()) {
    command_.game_state_ = 1;
    clear_has_command();
  }
}
 ::SC2APIProtocol::DebugGameState DebugCommand::game_state() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugCommand.game_state)
  if (has_game_state()) {
    return static_cast< ::SC2APIProtocol::DebugGameState >(command_.game_state_);
  }
  return static_cast< ::SC2APIProtocol::DebugGameState >(1);
}
 void DebugCommand::set_game_state(::SC2APIProtocol::DebugGameState value) {
  assert(::SC2APIProtocol::DebugGameState_IsValid(value));
  if (!has_game_state()) {
    clear_command();
    set_has_game_state();
  }
  command_.game_state_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.DebugCommand.game_state)
}

// optional .SC2APIProtocol.DebugCreateUnit create_unit = 3;
bool DebugCommand::has_create_unit() const {
  return command_case() == kCreateUnit;
}
void DebugCommand::set_has_create_unit() {
  _oneof_case_[0] = kCreateUnit;
}
void DebugCommand::clear_create_unit() {
  if (has_create_unit()) {
    delete command_.create_unit_;
    clear_has_command();
  }
}
 const ::SC2APIProtocol::DebugCreateUnit& DebugCommand::create_unit() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugCommand.create_unit)
  return has_create_unit()
      ? *command_.create_unit_
      : ::SC2APIProtocol::DebugCreateUnit::default_instance();
}
::SC2APIProtocol::DebugCreateUnit* DebugCommand::mutable_create_unit() {
  if (!has_create_unit()) {
    clear_command();
    set_has_create_unit();
    command_.create_unit_ = new ::SC2APIProtocol::DebugCreateUnit;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugCommand.create_unit)
  return command_.create_unit_;
}
::SC2APIProtocol::DebugCreateUnit* DebugCommand::release_create_unit() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugCommand.create_unit)
  if (has_create_unit()) {
    clear_has_command();
    ::SC2APIProtocol::DebugCreateUnit* temp = command_.create_unit_;
    command_.create_unit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DebugCommand::set_allocated_create_unit(::SC2APIProtocol::DebugCreateUnit* create_unit) {
  clear_command();
  if (create_unit) {
    set_has_create_unit();
    command_.create_unit_ = create_unit;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugCommand.create_unit)
}

// optional .SC2APIProtocol.DebugKillUnit kill_unit = 4;
bool DebugCommand::has_kill_unit() const {
  return command_case() == kKillUnit;
}
void DebugCommand::set_has_kill_unit() {
  _oneof_case_[0] = kKillUnit;
}
void DebugCommand::clear_kill_unit() {
  if (has_kill_unit()) {
    delete command_.kill_unit_;
    clear_has_command();
  }
}
 const ::SC2APIProtocol::DebugKillUnit& DebugCommand::kill_unit() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugCommand.kill_unit)
  return has_kill_unit()
      ? *command_.kill_unit_
      : ::SC2APIProtocol::DebugKillUnit::default_instance();
}
::SC2APIProtocol::DebugKillUnit* DebugCommand::mutable_kill_unit() {
  if (!has_kill_unit()) {
    clear_command();
    set_has_kill_unit();
    command_.kill_unit_ = new ::SC2APIProtocol::DebugKillUnit;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugCommand.kill_unit)
  return command_.kill_unit_;
}
::SC2APIProtocol::DebugKillUnit* DebugCommand::release_kill_unit() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugCommand.kill_unit)
  if (has_kill_unit()) {
    clear_has_command();
    ::SC2APIProtocol::DebugKillUnit* temp = command_.kill_unit_;
    command_.kill_unit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DebugCommand::set_allocated_kill_unit(::SC2APIProtocol::DebugKillUnit* kill_unit) {
  clear_command();
  if (kill_unit) {
    set_has_kill_unit();
    command_.kill_unit_ = kill_unit;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugCommand.kill_unit)
}

// optional .SC2APIProtocol.DebugTestProcess test_process = 5;
bool DebugCommand::has_test_process() const {
  return command_case() == kTestProcess;
}
void DebugCommand::set_has_test_process() {
  _oneof_case_[0] = kTestProcess;
}
void DebugCommand::clear_test_process() {
  if (has_test_process()) {
    delete command_.test_process_;
    clear_has_command();
  }
}
 const ::SC2APIProtocol::DebugTestProcess& DebugCommand::test_process() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugCommand.test_process)
  return has_test_process()
      ? *command_.test_process_
      : ::SC2APIProtocol::DebugTestProcess::default_instance();
}
::SC2APIProtocol::DebugTestProcess* DebugCommand::mutable_test_process() {
  if (!has_test_process()) {
    clear_command();
    set_has_test_process();
    command_.test_process_ = new ::SC2APIProtocol::DebugTestProcess;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugCommand.test_process)
  return command_.test_process_;
}
::SC2APIProtocol::DebugTestProcess* DebugCommand::release_test_process() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugCommand.test_process)
  if (has_test_process()) {
    clear_has_command();
    ::SC2APIProtocol::DebugTestProcess* temp = command_.test_process_;
    command_.test_process_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DebugCommand::set_allocated_test_process(::SC2APIProtocol::DebugTestProcess* test_process) {
  clear_command();
  if (test_process) {
    set_has_test_process();
    command_.test_process_ = test_process;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugCommand.test_process)
}

// optional .SC2APIProtocol.DebugSetScore score = 6;
bool DebugCommand::has_score() const {
  return command_case() == kScore;
}
void DebugCommand::set_has_score() {
  _oneof_case_[0] = kScore;
}
void DebugCommand::clear_score() {
  if (has_score()) {
    delete command_.score_;
    clear_has_command();
  }
}
 const ::SC2APIProtocol::DebugSetScore& DebugCommand::score() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugCommand.score)
  return has_score()
      ? *command_.score_
      : ::SC2APIProtocol::DebugSetScore::default_instance();
}
::SC2APIProtocol::DebugSetScore* DebugCommand::mutable_score() {
  if (!has_score()) {
    clear_command();
    set_has_score();
    command_.score_ = new ::SC2APIProtocol::DebugSetScore;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugCommand.score)
  return command_.score_;
}
::SC2APIProtocol::DebugSetScore* DebugCommand::release_score() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugCommand.score)
  if (has_score()) {
    clear_has_command();
    ::SC2APIProtocol::DebugSetScore* temp = command_.score_;
    command_.score_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DebugCommand::set_allocated_score(::SC2APIProtocol::DebugSetScore* score) {
  clear_command();
  if (score) {
    set_has_score();
    command_.score_ = score;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugCommand.score)
}

// optional .SC2APIProtocol.DebugEndGame end_game = 7;
bool DebugCommand::has_end_game() const {
  return command_case() == kEndGame;
}
void DebugCommand::set_has_end_game() {
  _oneof_case_[0] = kEndGame;
}
void DebugCommand::clear_end_game() {
  if (has_end_game()) {
    delete command_.end_game_;
    clear_has_command();
  }
}
 const ::SC2APIProtocol::DebugEndGame& DebugCommand::end_game() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugCommand.end_game)
  return has_end_game()
      ? *command_.end_game_
      : ::SC2APIProtocol::DebugEndGame::default_instance();
}
::SC2APIProtocol::DebugEndGame* DebugCommand::mutable_end_game() {
  if (!has_end_game()) {
    clear_command();
    set_has_end_game();
    command_.end_game_ = new ::SC2APIProtocol::DebugEndGame;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugCommand.end_game)
  return command_.end_game_;
}
::SC2APIProtocol::DebugEndGame* DebugCommand::release_end_game() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugCommand.end_game)
  if (has_end_game()) {
    clear_has_command();
    ::SC2APIProtocol::DebugEndGame* temp = command_.end_game_;
    command_.end_game_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DebugCommand::set_allocated_end_game(::SC2APIProtocol::DebugEndGame* end_game) {
  clear_command();
  if (end_game) {
    set_has_end_game();
    command_.end_game_ = end_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugCommand.end_game)
}

// optional .SC2APIProtocol.DebugSetUnitValue unit_value = 8;
bool DebugCommand::has_unit_value() const {
  return command_case() == kUnitValue;
}
void DebugCommand::set_has_unit_value() {
  _oneof_case_[0] = kUnitValue;
}
void DebugCommand::clear_unit_value() {
  if (has_unit_value()) {
    delete command_.unit_value_;
    clear_has_command();
  }
}
 const ::SC2APIProtocol::DebugSetUnitValue& DebugCommand::unit_value() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugCommand.unit_value)
  return has_unit_value()
      ? *command_.unit_value_
      : ::SC2APIProtocol::DebugSetUnitValue::default_instance();
}
::SC2APIProtocol::DebugSetUnitValue* DebugCommand::mutable_unit_value() {
  if (!has_unit_value()) {
    clear_command();
    set_has_unit_value();
    command_.unit_value_ = new ::SC2APIProtocol::DebugSetUnitValue;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugCommand.unit_value)
  return command_.unit_value_;
}
::SC2APIProtocol::DebugSetUnitValue* DebugCommand::release_unit_value() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugCommand.unit_value)
  if (has_unit_value()) {
    clear_has_command();
    ::SC2APIProtocol::DebugSetUnitValue* temp = command_.unit_value_;
    command_.unit_value_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DebugCommand::set_allocated_unit_value(::SC2APIProtocol::DebugSetUnitValue* unit_value) {
  clear_command();
  if (unit_value) {
    set_has_unit_value();
    command_.unit_value_ = unit_value;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugCommand.unit_value)
}

// optional .SC2APIProtocol.DebugChat chat = 9;
bool DebugCommand::has_chat() const {
  return command_case() == kChat;
}
void DebugCommand::set_has_chat() {
  _oneof_case_[0] = kChat;
}
void DebugCommand::clear_chat() {
  if (has_chat()) {
    delete command_.chat_;
    clear_has_command();
  }
}
 const ::SC2APIProtocol::DebugChat& DebugCommand::chat() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugCommand.chat)
  return has_chat()
      ? *command_.chat_
      : ::SC2APIProtocol::DebugChat::default_instance();
}
::SC2APIProtocol::DebugChat* DebugCommand::mutable_chat() {
  if (!has_chat()) {
    clear_command();
    set_has_chat();
    command_.chat_ = new ::SC2APIProtocol::DebugChat;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugCommand.chat)
  return command_.chat_;
}
::SC2APIProtocol::DebugChat* DebugCommand::release_chat() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugCommand.chat)
  if (has_chat()) {
    clear_has_command();
    ::SC2APIProtocol::DebugChat* temp = command_.chat_;
    command_.chat_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void DebugCommand::set_allocated_chat(::SC2APIProtocol::DebugChat* chat) {
  clear_command();
  if (chat) {
    set_has_chat();
    command_.chat_ = chat;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugCommand.chat)
}

bool DebugCommand::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
void DebugCommand::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
DebugCommand::CommandCase DebugCommand::command_case() const {
  return DebugCommand::CommandCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugDraw::kTextFieldNumber;
const int DebugDraw::kLinesFieldNumber;
const int DebugDraw::kBoxesFieldNumber;
const int DebugDraw::kSpheresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugDraw::DebugDraw()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.DebugDraw)
}

void DebugDraw::InitAsDefaultInstance() {
}

DebugDraw::DebugDraw(const DebugDraw& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugDraw)
}

void DebugDraw::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugDraw::~DebugDraw() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugDraw)
  SharedDtor();
}

void DebugDraw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugDraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugDraw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugDraw_descriptor_;
}

const DebugDraw& DebugDraw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto();
  return *default_instance_;
}

DebugDraw* DebugDraw::default_instance_ = NULL;

DebugDraw* DebugDraw::New(::google::protobuf::Arena* arena) const {
  DebugDraw* n = new DebugDraw;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugDraw)
  text_.Clear();
  lines_.Clear();
  boxes_.Clear();
  spheres_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DebugDraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.DebugDraw)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC2APIProtocol.DebugText text = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_text;
        if (input->ExpectTag(18)) goto parse_loop_lines;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .SC2APIProtocol.DebugLine lines = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_lines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_lines()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_lines;
        if (input->ExpectTag(26)) goto parse_loop_boxes;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .SC2APIProtocol.DebugBox boxes = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_boxes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_boxes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_boxes;
        if (input->ExpectTag(34)) goto parse_loop_spheres;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .SC2APIProtocol.DebugSphere spheres = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_spheres:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_spheres()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_spheres;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.DebugDraw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.DebugDraw)
  return false;
#undef DO_
}

void DebugDraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.DebugDraw)
  // repeated .SC2APIProtocol.DebugText text = 1;
  for (unsigned int i = 0, n = this->text_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->text(i), output);
  }

  // repeated .SC2APIProtocol.DebugLine lines = 2;
  for (unsigned int i = 0, n = this->lines_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lines(i), output);
  }

  // repeated .SC2APIProtocol.DebugBox boxes = 3;
  for (unsigned int i = 0, n = this->boxes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->boxes(i), output);
  }

  // repeated .SC2APIProtocol.DebugSphere spheres = 4;
  for (unsigned int i = 0, n = this->spheres_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->spheres(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.DebugDraw)
}

::google::protobuf::uint8* DebugDraw::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugDraw)
  // repeated .SC2APIProtocol.DebugText text = 1;
  for (unsigned int i = 0, n = this->text_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->text(i), false, target);
  }

  // repeated .SC2APIProtocol.DebugLine lines = 2;
  for (unsigned int i = 0, n = this->lines_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->lines(i), false, target);
  }

  // repeated .SC2APIProtocol.DebugBox boxes = 3;
  for (unsigned int i = 0, n = this->boxes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->boxes(i), false, target);
  }

  // repeated .SC2APIProtocol.DebugSphere spheres = 4;
  for (unsigned int i = 0, n = this->spheres_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->spheres(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugDraw)
  return target;
}

int DebugDraw::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugDraw)
  int total_size = 0;

  // repeated .SC2APIProtocol.DebugText text = 1;
  total_size += 1 * this->text_size();
  for (int i = 0; i < this->text_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->text(i));
  }

  // repeated .SC2APIProtocol.DebugLine lines = 2;
  total_size += 1 * this->lines_size();
  for (int i = 0; i < this->lines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lines(i));
  }

  // repeated .SC2APIProtocol.DebugBox boxes = 3;
  total_size += 1 * this->boxes_size();
  for (int i = 0; i < this->boxes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxes(i));
  }

  // repeated .SC2APIProtocol.DebugSphere spheres = 4;
  total_size += 1 * this->spheres_size();
  for (int i = 0; i < this->spheres_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spheres(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugDraw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.DebugDraw)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DebugDraw* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugDraw>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.DebugDraw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.DebugDraw)
    MergeFrom(*source);
  }
}

void DebugDraw::MergeFrom(const DebugDraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugDraw)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  text_.MergeFrom(from.text_);
  lines_.MergeFrom(from.lines_);
  boxes_.MergeFrom(from.boxes_);
  spheres_.MergeFrom(from.spheres_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DebugDraw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.DebugDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugDraw::CopyFrom(const DebugDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugDraw::IsInitialized() const {

  return true;
}

void DebugDraw::Swap(DebugDraw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugDraw::InternalSwap(DebugDraw* other) {
  text_.UnsafeArenaSwap(&other->text_);
  lines_.UnsafeArenaSwap(&other->lines_);
  boxes_.UnsafeArenaSwap(&other->boxes_);
  spheres_.UnsafeArenaSwap(&other->spheres_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugDraw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugDraw_descriptor_;
  metadata.reflection = DebugDraw_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugDraw

// repeated .SC2APIProtocol.DebugText text = 1;
int DebugDraw::text_size() const {
  return text_.size();
}
void DebugDraw::clear_text() {
  text_.Clear();
}
const ::SC2APIProtocol::DebugText& DebugDraw::text(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugDraw.text)
  return text_.Get(index);
}
::SC2APIProtocol::DebugText* DebugDraw::mutable_text(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugDraw.text)
  return text_.Mutable(index);
}
::SC2APIProtocol::DebugText* DebugDraw::add_text() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.DebugDraw.text)
  return text_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::DebugText >*
DebugDraw::mutable_text() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.DebugDraw.text)
  return &text_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::DebugText >&
DebugDraw::text() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.DebugDraw.text)
  return text_;
}

// repeated .SC2APIProtocol.DebugLine lines = 2;
int DebugDraw::lines_size() const {
  return lines_.size();
}
void DebugDraw::clear_lines() {
  lines_.Clear();
}
const ::SC2APIProtocol::DebugLine& DebugDraw::lines(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugDraw.lines)
  return lines_.Get(index);
}
::SC2APIProtocol::DebugLine* DebugDraw::mutable_lines(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugDraw.lines)
  return lines_.Mutable(index);
}
::SC2APIProtocol::DebugLine* DebugDraw::add_lines() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.DebugDraw.lines)
  return lines_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::DebugLine >*
DebugDraw::mutable_lines() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.DebugDraw.lines)
  return &lines_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::DebugLine >&
DebugDraw::lines() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.DebugDraw.lines)
  return lines_;
}

// repeated .SC2APIProtocol.DebugBox boxes = 3;
int DebugDraw::boxes_size() const {
  return boxes_.size();
}
void DebugDraw::clear_boxes() {
  boxes_.Clear();
}
const ::SC2APIProtocol::DebugBox& DebugDraw::boxes(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugDraw.boxes)
  return boxes_.Get(index);
}
::SC2APIProtocol::DebugBox* DebugDraw::mutable_boxes(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugDraw.boxes)
  return boxes_.Mutable(index);
}
::SC2APIProtocol::DebugBox* DebugDraw::add_boxes() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.DebugDraw.boxes)
  return boxes_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::DebugBox >*
DebugDraw::mutable_boxes() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.DebugDraw.boxes)
  return &boxes_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::DebugBox >&
DebugDraw::boxes() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.DebugDraw.boxes)
  return boxes_;
}

// repeated .SC2APIProtocol.DebugSphere spheres = 4;
int DebugDraw::spheres_size() const {
  return spheres_.size();
}
void DebugDraw::clear_spheres() {
  spheres_.Clear();
}
const ::SC2APIProtocol::DebugSphere& DebugDraw::spheres(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugDraw.spheres)
  return spheres_.Get(index);
}
::SC2APIProtocol::DebugSphere* DebugDraw::mutable_spheres(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugDraw.spheres)
  return spheres_.Mutable(index);
}
::SC2APIProtocol::DebugSphere* DebugDraw::add_spheres() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.DebugDraw.spheres)
  return spheres_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::DebugSphere >*
DebugDraw::mutable_spheres() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.DebugDraw.spheres)
  return &spheres_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::DebugSphere >&
DebugDraw::spheres() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.DebugDraw.spheres)
  return spheres_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Line::kP0FieldNumber;
const int Line::kP1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Line::Line()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.Line)
}

void Line::InitAsDefaultInstance() {
  p0_ = const_cast< ::SC2APIProtocol::Point*>(&::SC2APIProtocol::Point::default_instance());
  p1_ = const_cast< ::SC2APIProtocol::Point*>(&::SC2APIProtocol::Point::default_instance());
}

Line::Line(const Line& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Line)
}

void Line::SharedCtor() {
  _cached_size_ = 0;
  p0_ = NULL;
  p1_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Line)
  SharedDtor();
}

void Line::SharedDtor() {
  if (this != default_instance_) {
    delete p0_;
    delete p1_;
  }
}

void Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Line::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Line_descriptor_;
}

const Line& Line::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto();
  return *default_instance_;
}

Line* Line::default_instance_ = NULL;

Line* Line::New(::google::protobuf::Arena* arena) const {
  Line* n = new Line;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Line)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_p0()) {
      if (p0_ != NULL) p0_->::SC2APIProtocol::Point::Clear();
    }
    if (has_p1()) {
      if (p1_ != NULL) p1_->::SC2APIProtocol::Point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.Line)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.Point p0 = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p0()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_p1;
        break;
      }

      // optional .SC2APIProtocol.Point p1 = 2;
      case 2: {
        if (tag == 18) {
         parse_p1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.Line)
  return false;
#undef DO_
}

void Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.Line)
  // optional .SC2APIProtocol.Point p0 = 1;
  if (has_p0()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->p0_, output);
  }

  // optional .SC2APIProtocol.Point p1 = 2;
  if (has_p1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->p1_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.Line)
}

::google::protobuf::uint8* Line::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Line)
  // optional .SC2APIProtocol.Point p0 = 1;
  if (has_p0()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->p0_, false, target);
  }

  // optional .SC2APIProtocol.Point p1 = 2;
  if (has_p1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->p1_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Line)
  return target;
}

int Line::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Line)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .SC2APIProtocol.Point p0 = 1;
    if (has_p0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->p0_);
    }

    // optional .SC2APIProtocol.Point p1 = 2;
    if (has_p1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->p1_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Line::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.Line)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Line* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Line>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.Line)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.Line)
    MergeFrom(*source);
  }
}

void Line::MergeFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Line)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_p0()) {
      mutable_p0()->::SC2APIProtocol::Point::MergeFrom(from.p0());
    }
    if (from.has_p1()) {
      mutable_p1()->::SC2APIProtocol::Point::MergeFrom(from.p1());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Line::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {

  return true;
}

void Line::Swap(Line* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Line::InternalSwap(Line* other) {
  std::swap(p0_, other->p0_);
  std::swap(p1_, other->p1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Line::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Line_descriptor_;
  metadata.reflection = Line_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Line

// optional .SC2APIProtocol.Point p0 = 1;
bool Line::has_p0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Line::set_has_p0() {
  _has_bits_[0] |= 0x00000001u;
}
void Line::clear_has_p0() {
  _has_bits_[0] &= ~0x00000001u;
}
void Line::clear_p0() {
  if (p0_ != NULL) p0_->::SC2APIProtocol::Point::Clear();
  clear_has_p0();
}
const ::SC2APIProtocol::Point& Line::p0() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Line.p0)
  return p0_ != NULL ? *p0_ : *default_instance_->p0_;
}
::SC2APIProtocol::Point* Line::mutable_p0() {
  set_has_p0();
  if (p0_ == NULL) {
    p0_ = new ::SC2APIProtocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Line.p0)
  return p0_;
}
::SC2APIProtocol::Point* Line::release_p0() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Line.p0)
  clear_has_p0();
  ::SC2APIProtocol::Point* temp = p0_;
  p0_ = NULL;
  return temp;
}
void Line::set_allocated_p0(::SC2APIProtocol::Point* p0) {
  delete p0_;
  p0_ = p0;
  if (p0) {
    set_has_p0();
  } else {
    clear_has_p0();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Line.p0)
}

// optional .SC2APIProtocol.Point p1 = 2;
bool Line::has_p1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Line::set_has_p1() {
  _has_bits_[0] |= 0x00000002u;
}
void Line::clear_has_p1() {
  _has_bits_[0] &= ~0x00000002u;
}
void Line::clear_p1() {
  if (p1_ != NULL) p1_->::SC2APIProtocol::Point::Clear();
  clear_has_p1();
}
const ::SC2APIProtocol::Point& Line::p1() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Line.p1)
  return p1_ != NULL ? *p1_ : *default_instance_->p1_;
}
::SC2APIProtocol::Point* Line::mutable_p1() {
  set_has_p1();
  if (p1_ == NULL) {
    p1_ = new ::SC2APIProtocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Line.p1)
  return p1_;
}
::SC2APIProtocol::Point* Line::release_p1() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Line.p1)
  clear_has_p1();
  ::SC2APIProtocol::Point* temp = p1_;
  p1_ = NULL;
  return temp;
}
void Line::set_allocated_p1(::SC2APIProtocol::Point* p1) {
  delete p1_;
  p1_ = p1;
  if (p1) {
    set_has_p1();
  } else {
    clear_has_p1();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Line.p1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Color::kRFieldNumber;
const int Color::kGFieldNumber;
const int Color::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Color::Color()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.Color)
}

void Color::InitAsDefaultInstance() {
}

Color::Color(const Color& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Color)
}

void Color::SharedCtor() {
  _cached_size_ = 0;
  r_ = 0u;
  g_ = 0u;
  b_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Color)
  SharedDtor();
}

void Color::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Color::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Color::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Color_descriptor_;
}

const Color& Color::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto();
  return *default_instance_;
}

Color* Color::default_instance_ = NULL;

Color* Color::New(::google::protobuf::Arena* arena) const {
  Color* n = new Color;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Color)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Color, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Color*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(r_, b_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.Color)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 r = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_g;
        break;
      }

      // optional uint32 g = 2;
      case 2: {
        if (tag == 16) {
         parse_g:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &g_)));
          set_has_g();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_b;
        break;
      }

      // optional uint32 b = 3;
      case 3: {
        if (tag == 24) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.Color)
  return false;
#undef DO_
}

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.Color)
  // optional uint32 r = 1;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->r(), output);
  }

  // optional uint32 g = 2;
  if (has_g()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->g(), output);
  }

  // optional uint32 b = 3;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->b(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.Color)
}

::google::protobuf::uint8* Color::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Color)
  // optional uint32 r = 1;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->r(), target);
  }

  // optional uint32 g = 2;
  if (has_g()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->g(), target);
  }

  // optional uint32 b = 3;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->b(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Color)
  return target;
}

int Color::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Color)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 r = 1;
    if (has_r()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r());
    }

    // optional uint32 g = 2;
    if (has_g()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->g());
    }

    // optional uint32 b = 3;
    if (has_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->b());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.Color)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Color* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Color>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.Color)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Color)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_r()) {
      set_r(from.r());
    }
    if (from.has_g()) {
      set_g(from.g());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {

  return true;
}

void Color::Swap(Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color::InternalSwap(Color* other) {
  std::swap(r_, other->r_);
  std::swap(g_, other->g_);
  std::swap(b_, other->b_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Color::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Color_descriptor_;
  metadata.reflection = Color_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Color

// optional uint32 r = 1;
bool Color::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Color::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
void Color::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
void Color::clear_r() {
  r_ = 0u;
  clear_has_r();
}
 ::google::protobuf::uint32 Color::r() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Color.r)
  return r_;
}
 void Color::set_r(::google::protobuf::uint32 value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Color.r)
}

// optional uint32 g = 2;
bool Color::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Color::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
void Color::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
void Color::clear_g() {
  g_ = 0u;
  clear_has_g();
}
 ::google::protobuf::uint32 Color::g() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Color.g)
  return g_;
}
 void Color::set_g(::google::protobuf::uint32 value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Color.g)
}

// optional uint32 b = 3;
bool Color::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Color::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
void Color::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
void Color::clear_b() {
  b_ = 0u;
  clear_has_b();
}
 ::google::protobuf::uint32 Color::b() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Color.b)
  return b_;
}
 void Color::set_b(::google::protobuf::uint32 value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Color.b)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugText::kColorFieldNumber;
const int DebugText::kTextFieldNumber;
const int DebugText::kVirtualPosFieldNumber;
const int DebugText::kWorldPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugText::DebugText()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.DebugText)
}

void DebugText::InitAsDefaultInstance() {
  color_ = const_cast< ::SC2APIProtocol::Color*>(&::SC2APIProtocol::Color::default_instance());
  virtual_pos_ = const_cast< ::SC2APIProtocol::Point*>(&::SC2APIProtocol::Point::default_instance());
  world_pos_ = const_cast< ::SC2APIProtocol::Point*>(&::SC2APIProtocol::Point::default_instance());
}

DebugText::DebugText(const DebugText& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugText)
}

void DebugText::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  color_ = NULL;
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  virtual_pos_ = NULL;
  world_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugText::~DebugText() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugText)
  SharedDtor();
}

void DebugText::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete color_;
    delete virtual_pos_;
    delete world_pos_;
  }
}

void DebugText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugText_descriptor_;
}

const DebugText& DebugText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto();
  return *default_instance_;
}

DebugText* DebugText::default_instance_ = NULL;

DebugText* DebugText::New(::google::protobuf::Arena* arena) const {
  DebugText* n = new DebugText;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugText::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugText)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_color()) {
      if (color_ != NULL) color_->::SC2APIProtocol::Color::Clear();
    }
    if (has_text()) {
      text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_virtual_pos()) {
      if (virtual_pos_ != NULL) virtual_pos_->::SC2APIProtocol::Point::Clear();
    }
    if (has_world_pos()) {
      if (world_pos_ != NULL) world_pos_->::SC2APIProtocol::Point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DebugText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.DebugText)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.Color color = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (tag == 18) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.DebugText.text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_virtual_pos;
        break;
      }

      // optional .SC2APIProtocol.Point virtual_pos = 3;
      case 3: {
        if (tag == 26) {
         parse_virtual_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_virtual_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_world_pos;
        break;
      }

      // optional .SC2APIProtocol.Point world_pos = 4;
      case 4: {
        if (tag == 34) {
         parse_world_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.DebugText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.DebugText)
  return false;
#undef DO_
}

void DebugText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.DebugText)
  // optional .SC2APIProtocol.Color color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->color_, output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.DebugText.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional .SC2APIProtocol.Point virtual_pos = 3;
  if (has_virtual_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->virtual_pos_, output);
  }

  // optional .SC2APIProtocol.Point world_pos = 4;
  if (has_world_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->world_pos_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.DebugText)
}

::google::protobuf::uint8* DebugText::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugText)
  // optional .SC2APIProtocol.Color color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->color_, false, target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.DebugText.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional .SC2APIProtocol.Point virtual_pos = 3;
  if (has_virtual_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->virtual_pos_, false, target);
  }

  // optional .SC2APIProtocol.Point world_pos = 4;
  if (has_world_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->world_pos_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugText)
  return target;
}

int DebugText::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugText)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .SC2APIProtocol.Color color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->color_);
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .SC2APIProtocol.Point virtual_pos = 3;
    if (has_virtual_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->virtual_pos_);
    }

    // optional .SC2APIProtocol.Point world_pos = 4;
    if (has_world_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->world_pos_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.DebugText)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DebugText* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugText>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.DebugText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.DebugText)
    MergeFrom(*source);
  }
}

void DebugText::MergeFrom(const DebugText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugText)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      mutable_color()->::SC2APIProtocol::Color::MergeFrom(from.color());
    }
    if (from.has_text()) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (from.has_virtual_pos()) {
      mutable_virtual_pos()->::SC2APIProtocol::Point::MergeFrom(from.virtual_pos());
    }
    if (from.has_world_pos()) {
      mutable_world_pos()->::SC2APIProtocol::Point::MergeFrom(from.world_pos());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DebugText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.DebugText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugText::CopyFrom(const DebugText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugText::IsInitialized() const {

  return true;
}

void DebugText::Swap(DebugText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugText::InternalSwap(DebugText* other) {
  std::swap(color_, other->color_);
  text_.Swap(&other->text_);
  std::swap(virtual_pos_, other->virtual_pos_);
  std::swap(world_pos_, other->world_pos_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugText_descriptor_;
  metadata.reflection = DebugText_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugText

// optional .SC2APIProtocol.Color color = 1;
bool DebugText::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DebugText::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
void DebugText::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
void DebugText::clear_color() {
  if (color_ != NULL) color_->::SC2APIProtocol::Color::Clear();
  clear_has_color();
}
const ::SC2APIProtocol::Color& DebugText::color() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugText.color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
::SC2APIProtocol::Color* DebugText::mutable_color() {
  set_has_color();
  if (color_ == NULL) {
    color_ = new ::SC2APIProtocol::Color;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugText.color)
  return color_;
}
::SC2APIProtocol::Color* DebugText::release_color() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugText.color)
  clear_has_color();
  ::SC2APIProtocol::Color* temp = color_;
  color_ = NULL;
  return temp;
}
void DebugText::set_allocated_color(::SC2APIProtocol::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    set_has_color();
  } else {
    clear_has_color();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugText.color)
}

// optional string text = 2;
bool DebugText::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DebugText::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
void DebugText::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
void DebugText::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
 const ::std::string& DebugText::text() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugText.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DebugText::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.DebugText.text)
}
 void DebugText::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.DebugText.text)
}
 void DebugText::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.DebugText.text)
}
 ::std::string* DebugText::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugText.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DebugText::release_text() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugText.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DebugText::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugText.text)
}

// optional .SC2APIProtocol.Point virtual_pos = 3;
bool DebugText::has_virtual_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DebugText::set_has_virtual_pos() {
  _has_bits_[0] |= 0x00000004u;
}
void DebugText::clear_has_virtual_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
void DebugText::clear_virtual_pos() {
  if (virtual_pos_ != NULL) virtual_pos_->::SC2APIProtocol::Point::Clear();
  clear_has_virtual_pos();
}
const ::SC2APIProtocol::Point& DebugText::virtual_pos() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugText.virtual_pos)
  return virtual_pos_ != NULL ? *virtual_pos_ : *default_instance_->virtual_pos_;
}
::SC2APIProtocol::Point* DebugText::mutable_virtual_pos() {
  set_has_virtual_pos();
  if (virtual_pos_ == NULL) {
    virtual_pos_ = new ::SC2APIProtocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugText.virtual_pos)
  return virtual_pos_;
}
::SC2APIProtocol::Point* DebugText::release_virtual_pos() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugText.virtual_pos)
  clear_has_virtual_pos();
  ::SC2APIProtocol::Point* temp = virtual_pos_;
  virtual_pos_ = NULL;
  return temp;
}
void DebugText::set_allocated_virtual_pos(::SC2APIProtocol::Point* virtual_pos) {
  delete virtual_pos_;
  virtual_pos_ = virtual_pos;
  if (virtual_pos) {
    set_has_virtual_pos();
  } else {
    clear_has_virtual_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugText.virtual_pos)
}

// optional .SC2APIProtocol.Point world_pos = 4;
bool DebugText::has_world_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DebugText::set_has_world_pos() {
  _has_bits_[0] |= 0x00000008u;
}
void DebugText::clear_has_world_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
void DebugText::clear_world_pos() {
  if (world_pos_ != NULL) world_pos_->::SC2APIProtocol::Point::Clear();
  clear_has_world_pos();
}
const ::SC2APIProtocol::Point& DebugText::world_pos() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugText.world_pos)
  return world_pos_ != NULL ? *world_pos_ : *default_instance_->world_pos_;
}
::SC2APIProtocol::Point* DebugText::mutable_world_pos() {
  set_has_world_pos();
  if (world_pos_ == NULL) {
    world_pos_ = new ::SC2APIProtocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugText.world_pos)
  return world_pos_;
}
::SC2APIProtocol::Point* DebugText::release_world_pos() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugText.world_pos)
  clear_has_world_pos();
  ::SC2APIProtocol::Point* temp = world_pos_;
  world_pos_ = NULL;
  return temp;
}
void DebugText::set_allocated_world_pos(::SC2APIProtocol::Point* world_pos) {
  delete world_pos_;
  world_pos_ = world_pos;
  if (world_pos) {
    set_has_world_pos();
  } else {
    clear_has_world_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugText.world_pos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugLine::kColorFieldNumber;
const int DebugLine::kLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugLine::DebugLine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.DebugLine)
}

void DebugLine::InitAsDefaultInstance() {
  color_ = const_cast< ::SC2APIProtocol::Color*>(&::SC2APIProtocol::Color::default_instance());
  line_ = const_cast< ::SC2APIProtocol::Line*>(&::SC2APIProtocol::Line::default_instance());
}

DebugLine::DebugLine(const DebugLine& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugLine)
}

void DebugLine::SharedCtor() {
  _cached_size_ = 0;
  color_ = NULL;
  line_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugLine::~DebugLine() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugLine)
  SharedDtor();
}

void DebugLine::SharedDtor() {
  if (this != default_instance_) {
    delete color_;
    delete line_;
  }
}

void DebugLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugLine_descriptor_;
}

const DebugLine& DebugLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto();
  return *default_instance_;
}

DebugLine* DebugLine::default_instance_ = NULL;

DebugLine* DebugLine::New(::google::protobuf::Arena* arena) const {
  DebugLine* n = new DebugLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugLine::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugLine)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_color()) {
      if (color_ != NULL) color_->::SC2APIProtocol::Color::Clear();
    }
    if (has_line()) {
      if (line_ != NULL) line_->::SC2APIProtocol::Line::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DebugLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.DebugLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.Color color = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_line;
        break;
      }

      // optional .SC2APIProtocol.Line line = 2;
      case 2: {
        if (tag == 18) {
         parse_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_line()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.DebugLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.DebugLine)
  return false;
#undef DO_
}

void DebugLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.DebugLine)
  // optional .SC2APIProtocol.Color color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->color_, output);
  }

  // optional .SC2APIProtocol.Line line = 2;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->line_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.DebugLine)
}

::google::protobuf::uint8* DebugLine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugLine)
  // optional .SC2APIProtocol.Color color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->color_, false, target);
  }

  // optional .SC2APIProtocol.Line line = 2;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->line_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugLine)
  return target;
}

int DebugLine::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugLine)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .SC2APIProtocol.Color color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->color_);
    }

    // optional .SC2APIProtocol.Line line = 2;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->line_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugLine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.DebugLine)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DebugLine* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugLine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.DebugLine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.DebugLine)
    MergeFrom(*source);
  }
}

void DebugLine::MergeFrom(const DebugLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugLine)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      mutable_color()->::SC2APIProtocol::Color::MergeFrom(from.color());
    }
    if (from.has_line()) {
      mutable_line()->::SC2APIProtocol::Line::MergeFrom(from.line());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DebugLine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.DebugLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugLine::CopyFrom(const DebugLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugLine::IsInitialized() const {

  return true;
}

void DebugLine::Swap(DebugLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugLine::InternalSwap(DebugLine* other) {
  std::swap(color_, other->color_);
  std::swap(line_, other->line_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugLine_descriptor_;
  metadata.reflection = DebugLine_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugLine

// optional .SC2APIProtocol.Color color = 1;
bool DebugLine::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DebugLine::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
void DebugLine::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
void DebugLine::clear_color() {
  if (color_ != NULL) color_->::SC2APIProtocol::Color::Clear();
  clear_has_color();
}
const ::SC2APIProtocol::Color& DebugLine::color() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugLine.color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
::SC2APIProtocol::Color* DebugLine::mutable_color() {
  set_has_color();
  if (color_ == NULL) {
    color_ = new ::SC2APIProtocol::Color;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugLine.color)
  return color_;
}
::SC2APIProtocol::Color* DebugLine::release_color() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugLine.color)
  clear_has_color();
  ::SC2APIProtocol::Color* temp = color_;
  color_ = NULL;
  return temp;
}
void DebugLine::set_allocated_color(::SC2APIProtocol::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    set_has_color();
  } else {
    clear_has_color();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugLine.color)
}

// optional .SC2APIProtocol.Line line = 2;
bool DebugLine::has_line() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DebugLine::set_has_line() {
  _has_bits_[0] |= 0x00000002u;
}
void DebugLine::clear_has_line() {
  _has_bits_[0] &= ~0x00000002u;
}
void DebugLine::clear_line() {
  if (line_ != NULL) line_->::SC2APIProtocol::Line::Clear();
  clear_has_line();
}
const ::SC2APIProtocol::Line& DebugLine::line() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugLine.line)
  return line_ != NULL ? *line_ : *default_instance_->line_;
}
::SC2APIProtocol::Line* DebugLine::mutable_line() {
  set_has_line();
  if (line_ == NULL) {
    line_ = new ::SC2APIProtocol::Line;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugLine.line)
  return line_;
}
::SC2APIProtocol::Line* DebugLine::release_line() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugLine.line)
  clear_has_line();
  ::SC2APIProtocol::Line* temp = line_;
  line_ = NULL;
  return temp;
}
void DebugLine::set_allocated_line(::SC2APIProtocol::Line* line) {
  delete line_;
  line_ = line;
  if (line) {
    set_has_line();
  } else {
    clear_has_line();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugLine.line)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugBox::kColorFieldNumber;
const int DebugBox::kMinFieldNumber;
const int DebugBox::kMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugBox::DebugBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.DebugBox)
}

void DebugBox::InitAsDefaultInstance() {
  color_ = const_cast< ::SC2APIProtocol::Color*>(&::SC2APIProtocol::Color::default_instance());
  min_ = const_cast< ::SC2APIProtocol::Point*>(&::SC2APIProtocol::Point::default_instance());
  max_ = const_cast< ::SC2APIProtocol::Point*>(&::SC2APIProtocol::Point::default_instance());
}

DebugBox::DebugBox(const DebugBox& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugBox)
}

void DebugBox::SharedCtor() {
  _cached_size_ = 0;
  color_ = NULL;
  min_ = NULL;
  max_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugBox::~DebugBox() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugBox)
  SharedDtor();
}

void DebugBox::SharedDtor() {
  if (this != default_instance_) {
    delete color_;
    delete min_;
    delete max_;
  }
}

void DebugBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugBox_descriptor_;
}

const DebugBox& DebugBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto();
  return *default_instance_;
}

DebugBox* DebugBox::default_instance_ = NULL;

DebugBox* DebugBox::New(::google::protobuf::Arena* arena) const {
  DebugBox* n = new DebugBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugBox::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugBox)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_color()) {
      if (color_ != NULL) color_->::SC2APIProtocol::Color::Clear();
    }
    if (has_min()) {
      if (min_ != NULL) min_->::SC2APIProtocol::Point::Clear();
    }
    if (has_max()) {
      if (max_ != NULL) max_->::SC2APIProtocol::Point::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DebugBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.DebugBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.Color color = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_min;
        break;
      }

      // optional .SC2APIProtocol.Point min = 2;
      case 2: {
        if (tag == 18) {
         parse_min:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_min()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_max;
        break;
      }

      // optional .SC2APIProtocol.Point max = 3;
      case 3: {
        if (tag == 26) {
         parse_max:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.DebugBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.DebugBox)
  return false;
#undef DO_
}

void DebugBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.DebugBox)
  // optional .SC2APIProtocol.Color color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->color_, output);
  }

  // optional .SC2APIProtocol.Point min = 2;
  if (has_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->min_, output);
  }

  // optional .SC2APIProtocol.Point max = 3;
  if (has_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->max_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.DebugBox)
}

::google::protobuf::uint8* DebugBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugBox)
  // optional .SC2APIProtocol.Color color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->color_, false, target);
  }

  // optional .SC2APIProtocol.Point min = 2;
  if (has_min()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->min_, false, target);
  }

  // optional .SC2APIProtocol.Point max = 3;
  if (has_max()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->max_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugBox)
  return target;
}

int DebugBox::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugBox)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .SC2APIProtocol.Color color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->color_);
    }

    // optional .SC2APIProtocol.Point min = 2;
    if (has_min()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->min_);
    }

    // optional .SC2APIProtocol.Point max = 3;
    if (has_max()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->max_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.DebugBox)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DebugBox* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.DebugBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.DebugBox)
    MergeFrom(*source);
  }
}

void DebugBox::MergeFrom(const DebugBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugBox)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      mutable_color()->::SC2APIProtocol::Color::MergeFrom(from.color());
    }
    if (from.has_min()) {
      mutable_min()->::SC2APIProtocol::Point::MergeFrom(from.min());
    }
    if (from.has_max()) {
      mutable_max()->::SC2APIProtocol::Point::MergeFrom(from.max());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DebugBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.DebugBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugBox::CopyFrom(const DebugBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugBox::IsInitialized() const {

  return true;
}

void DebugBox::Swap(DebugBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugBox::InternalSwap(DebugBox* other) {
  std::swap(color_, other->color_);
  std::swap(min_, other->min_);
  std::swap(max_, other->max_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugBox_descriptor_;
  metadata.reflection = DebugBox_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugBox

// optional .SC2APIProtocol.Color color = 1;
bool DebugBox::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DebugBox::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
void DebugBox::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
void DebugBox::clear_color() {
  if (color_ != NULL) color_->::SC2APIProtocol::Color::Clear();
  clear_has_color();
}
const ::SC2APIProtocol::Color& DebugBox::color() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugBox.color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
::SC2APIProtocol::Color* DebugBox::mutable_color() {
  set_has_color();
  if (color_ == NULL) {
    color_ = new ::SC2APIProtocol::Color;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugBox.color)
  return color_;
}
::SC2APIProtocol::Color* DebugBox::release_color() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugBox.color)
  clear_has_color();
  ::SC2APIProtocol::Color* temp = color_;
  color_ = NULL;
  return temp;
}
void DebugBox::set_allocated_color(::SC2APIProtocol::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    set_has_color();
  } else {
    clear_has_color();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugBox.color)
}

// optional .SC2APIProtocol.Point min = 2;
bool DebugBox::has_min() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DebugBox::set_has_min() {
  _has_bits_[0] |= 0x00000002u;
}
void DebugBox::clear_has_min() {
  _has_bits_[0] &= ~0x00000002u;
}
void DebugBox::clear_min() {
  if (min_ != NULL) min_->::SC2APIProtocol::Point::Clear();
  clear_has_min();
}
const ::SC2APIProtocol::Point& DebugBox::min() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugBox.min)
  return min_ != NULL ? *min_ : *default_instance_->min_;
}
::SC2APIProtocol::Point* DebugBox::mutable_min() {
  set_has_min();
  if (min_ == NULL) {
    min_ = new ::SC2APIProtocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugBox.min)
  return min_;
}
::SC2APIProtocol::Point* DebugBox::release_min() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugBox.min)
  clear_has_min();
  ::SC2APIProtocol::Point* temp = min_;
  min_ = NULL;
  return temp;
}
void DebugBox::set_allocated_min(::SC2APIProtocol::Point* min) {
  delete min_;
  min_ = min;
  if (min) {
    set_has_min();
  } else {
    clear_has_min();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugBox.min)
}

// optional .SC2APIProtocol.Point max = 3;
bool DebugBox::has_max() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DebugBox::set_has_max() {
  _has_bits_[0] |= 0x00000004u;
}
void DebugBox::clear_has_max() {
  _has_bits_[0] &= ~0x00000004u;
}
void DebugBox::clear_max() {
  if (max_ != NULL) max_->::SC2APIProtocol::Point::Clear();
  clear_has_max();
}
const ::SC2APIProtocol::Point& DebugBox::max() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugBox.max)
  return max_ != NULL ? *max_ : *default_instance_->max_;
}
::SC2APIProtocol::Point* DebugBox::mutable_max() {
  set_has_max();
  if (max_ == NULL) {
    max_ = new ::SC2APIProtocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugBox.max)
  return max_;
}
::SC2APIProtocol::Point* DebugBox::release_max() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugBox.max)
  clear_has_max();
  ::SC2APIProtocol::Point* temp = max_;
  max_ = NULL;
  return temp;
}
void DebugBox::set_allocated_max(::SC2APIProtocol::Point* max) {
  delete max_;
  max_ = max;
  if (max) {
    set_has_max();
  } else {
    clear_has_max();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugBox.max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugSphere::kColorFieldNumber;
const int DebugSphere::kPFieldNumber;
const int DebugSphere::kRFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugSphere::DebugSphere()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.DebugSphere)
}

void DebugSphere::InitAsDefaultInstance() {
  color_ = const_cast< ::SC2APIProtocol::Color*>(&::SC2APIProtocol::Color::default_instance());
  p_ = const_cast< ::SC2APIProtocol::Point*>(&::SC2APIProtocol::Point::default_instance());
}

DebugSphere::DebugSphere(const DebugSphere& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugSphere)
}

void DebugSphere::SharedCtor() {
  _cached_size_ = 0;
  color_ = NULL;
  p_ = NULL;
  r_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugSphere::~DebugSphere() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugSphere)
  SharedDtor();
}

void DebugSphere::SharedDtor() {
  if (this != default_instance_) {
    delete color_;
    delete p_;
  }
}

void DebugSphere::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugSphere::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugSphere_descriptor_;
}

const DebugSphere& DebugSphere::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto();
  return *default_instance_;
}

DebugSphere* DebugSphere::default_instance_ = NULL;

DebugSphere* DebugSphere::New(::google::protobuf::Arena* arena) const {
  DebugSphere* n = new DebugSphere;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugSphere::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugSphere)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_color()) {
      if (color_ != NULL) color_->::SC2APIProtocol::Color::Clear();
    }
    if (has_p()) {
      if (p_ != NULL) p_->::SC2APIProtocol::Point::Clear();
    }
    r_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DebugSphere::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.DebugSphere)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.Color color = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_p;
        break;
      }

      // optional .SC2APIProtocol.Point p = 2;
      case 2: {
        if (tag == 18) {
         parse_p:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_p()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_r;
        break;
      }

      // optional float r = 3;
      case 3: {
        if (tag == 29) {
         parse_r:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
          set_has_r();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.DebugSphere)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.DebugSphere)
  return false;
#undef DO_
}

void DebugSphere::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.DebugSphere)
  // optional .SC2APIProtocol.Color color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->color_, output);
  }

  // optional .SC2APIProtocol.Point p = 2;
  if (has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->p_, output);
  }

  // optional float r = 3;
  if (has_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->r(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.DebugSphere)
}

::google::protobuf::uint8* DebugSphere::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugSphere)
  // optional .SC2APIProtocol.Color color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->color_, false, target);
  }

  // optional .SC2APIProtocol.Point p = 2;
  if (has_p()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->p_, false, target);
  }

  // optional float r = 3;
  if (has_r()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->r(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugSphere)
  return target;
}

int DebugSphere::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugSphere)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .SC2APIProtocol.Color color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->color_);
    }

    // optional .SC2APIProtocol.Point p = 2;
    if (has_p()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->p_);
    }

    // optional float r = 3;
    if (has_r()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugSphere::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.DebugSphere)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DebugSphere* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugSphere>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.DebugSphere)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.DebugSphere)
    MergeFrom(*source);
  }
}

void DebugSphere::MergeFrom(const DebugSphere& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugSphere)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      mutable_color()->::SC2APIProtocol::Color::MergeFrom(from.color());
    }
    if (from.has_p()) {
      mutable_p()->::SC2APIProtocol::Point::MergeFrom(from.p());
    }
    if (from.has_r()) {
      set_r(from.r());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DebugSphere::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.DebugSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugSphere::CopyFrom(const DebugSphere& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugSphere::IsInitialized() const {

  return true;
}

void DebugSphere::Swap(DebugSphere* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugSphere::InternalSwap(DebugSphere* other) {
  std::swap(color_, other->color_);
  std::swap(p_, other->p_);
  std::swap(r_, other->r_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugSphere::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugSphere_descriptor_;
  metadata.reflection = DebugSphere_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugSphere

// optional .SC2APIProtocol.Color color = 1;
bool DebugSphere::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DebugSphere::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
void DebugSphere::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
void DebugSphere::clear_color() {
  if (color_ != NULL) color_->::SC2APIProtocol::Color::Clear();
  clear_has_color();
}
const ::SC2APIProtocol::Color& DebugSphere::color() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugSphere.color)
  return color_ != NULL ? *color_ : *default_instance_->color_;
}
::SC2APIProtocol::Color* DebugSphere::mutable_color() {
  set_has_color();
  if (color_ == NULL) {
    color_ = new ::SC2APIProtocol::Color;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugSphere.color)
  return color_;
}
::SC2APIProtocol::Color* DebugSphere::release_color() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugSphere.color)
  clear_has_color();
  ::SC2APIProtocol::Color* temp = color_;
  color_ = NULL;
  return temp;
}
void DebugSphere::set_allocated_color(::SC2APIProtocol::Color* color) {
  delete color_;
  color_ = color;
  if (color) {
    set_has_color();
  } else {
    clear_has_color();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugSphere.color)
}

// optional .SC2APIProtocol.Point p = 2;
bool DebugSphere::has_p() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DebugSphere::set_has_p() {
  _has_bits_[0] |= 0x00000002u;
}
void DebugSphere::clear_has_p() {
  _has_bits_[0] &= ~0x00000002u;
}
void DebugSphere::clear_p() {
  if (p_ != NULL) p_->::SC2APIProtocol::Point::Clear();
  clear_has_p();
}
const ::SC2APIProtocol::Point& DebugSphere::p() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugSphere.p)
  return p_ != NULL ? *p_ : *default_instance_->p_;
}
::SC2APIProtocol::Point* DebugSphere::mutable_p() {
  set_has_p();
  if (p_ == NULL) {
    p_ = new ::SC2APIProtocol::Point;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugSphere.p)
  return p_;
}
::SC2APIProtocol::Point* DebugSphere::release_p() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugSphere.p)
  clear_has_p();
  ::SC2APIProtocol::Point* temp = p_;
  p_ = NULL;
  return temp;
}
void DebugSphere::set_allocated_p(::SC2APIProtocol::Point* p) {
  delete p_;
  p_ = p;
  if (p) {
    set_has_p();
  } else {
    clear_has_p();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugSphere.p)
}

// optional float r = 3;
bool DebugSphere::has_r() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DebugSphere::set_has_r() {
  _has_bits_[0] |= 0x00000004u;
}
void DebugSphere::clear_has_r() {
  _has_bits_[0] &= ~0x00000004u;
}
void DebugSphere::clear_r() {
  r_ = 0;
  clear_has_r();
}
 float DebugSphere::r() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugSphere.r)
  return r_;
}
 void DebugSphere::set_r(float value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.DebugSphere.r)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugCreateUnit::kUnitTypeFieldNumber;
const int DebugCreateUnit::kOwnerFieldNumber;
const int DebugCreateUnit::kPosFieldNumber;
const int DebugCreateUnit::kQuantityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugCreateUnit::DebugCreateUnit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.DebugCreateUnit)
}

void DebugCreateUnit::InitAsDefaultInstance() {
  pos_ = const_cast< ::SC2APIProtocol::Point2D*>(&::SC2APIProtocol::Point2D::default_instance());
}

DebugCreateUnit::DebugCreateUnit(const DebugCreateUnit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugCreateUnit)
}

void DebugCreateUnit::SharedCtor() {
  _cached_size_ = 0;
  unit_type_ = 0u;
  owner_ = 0;
  pos_ = NULL;
  quantity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugCreateUnit::~DebugCreateUnit() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugCreateUnit)
  SharedDtor();
}

void DebugCreateUnit::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void DebugCreateUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugCreateUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugCreateUnit_descriptor_;
}

const DebugCreateUnit& DebugCreateUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto();
  return *default_instance_;
}

DebugCreateUnit* DebugCreateUnit::default_instance_ = NULL;

DebugCreateUnit* DebugCreateUnit::New(::google::protobuf::Arena* arena) const {
  DebugCreateUnit* n = new DebugCreateUnit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugCreateUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugCreateUnit)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DebugCreateUnit, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DebugCreateUnit*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(unit_type_, owner_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::SC2APIProtocol::Point2D::Clear();
    }
    quantity_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DebugCreateUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.DebugCreateUnit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 unit_type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unit_type_)));
          set_has_unit_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_owner;
        break;
      }

      // optional int32 owner = 2;
      case 2: {
        if (tag == 16) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .SC2APIProtocol.Point2D pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_quantity;
        break;
      }

      // optional uint32 quantity = 4;
      case 4: {
        if (tag == 32) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.DebugCreateUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.DebugCreateUnit)
  return false;
#undef DO_
}

void DebugCreateUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.DebugCreateUnit)
  // optional uint32 unit_type = 1;
  if (has_unit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->unit_type(), output);
  }

  // optional int32 owner = 2;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->owner(), output);
  }

  // optional .SC2APIProtocol.Point2D pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pos_, output);
  }

  // optional uint32 quantity = 4;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->quantity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.DebugCreateUnit)
}

::google::protobuf::uint8* DebugCreateUnit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugCreateUnit)
  // optional uint32 unit_type = 1;
  if (has_unit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->unit_type(), target);
  }

  // optional int32 owner = 2;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->owner(), target);
  }

  // optional .SC2APIProtocol.Point2D pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->pos_, false, target);
  }

  // optional uint32 quantity = 4;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->quantity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugCreateUnit)
  return target;
}

int DebugCreateUnit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugCreateUnit)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 unit_type = 1;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unit_type());
    }

    // optional int32 owner = 2;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->owner());
    }

    // optional .SC2APIProtocol.Point2D pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pos_);
    }

    // optional uint32 quantity = 4;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugCreateUnit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.DebugCreateUnit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DebugCreateUnit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugCreateUnit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.DebugCreateUnit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.DebugCreateUnit)
    MergeFrom(*source);
  }
}

void DebugCreateUnit::MergeFrom(const DebugCreateUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugCreateUnit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit_type()) {
      set_unit_type(from.unit_type());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_pos()) {
      mutable_pos()->::SC2APIProtocol::Point2D::MergeFrom(from.pos());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DebugCreateUnit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.DebugCreateUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugCreateUnit::CopyFrom(const DebugCreateUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugCreateUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugCreateUnit::IsInitialized() const {

  return true;
}

void DebugCreateUnit::Swap(DebugCreateUnit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugCreateUnit::InternalSwap(DebugCreateUnit* other) {
  std::swap(unit_type_, other->unit_type_);
  std::swap(owner_, other->owner_);
  std::swap(pos_, other->pos_);
  std::swap(quantity_, other->quantity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugCreateUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugCreateUnit_descriptor_;
  metadata.reflection = DebugCreateUnit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugCreateUnit

// optional uint32 unit_type = 1;
bool DebugCreateUnit::has_unit_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DebugCreateUnit::set_has_unit_type() {
  _has_bits_[0] |= 0x00000001u;
}
void DebugCreateUnit::clear_has_unit_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void DebugCreateUnit::clear_unit_type() {
  unit_type_ = 0u;
  clear_has_unit_type();
}
 ::google::protobuf::uint32 DebugCreateUnit::unit_type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugCreateUnit.unit_type)
  return unit_type_;
}
 void DebugCreateUnit::set_unit_type(::google::protobuf::uint32 value) {
  set_has_unit_type();
  unit_type_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.DebugCreateUnit.unit_type)
}

// optional int32 owner = 2;
bool DebugCreateUnit::has_owner() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DebugCreateUnit::set_has_owner() {
  _has_bits_[0] |= 0x00000002u;
}
void DebugCreateUnit::clear_has_owner() {
  _has_bits_[0] &= ~0x00000002u;
}
void DebugCreateUnit::clear_owner() {
  owner_ = 0;
  clear_has_owner();
}
 ::google::protobuf::int32 DebugCreateUnit::owner() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugCreateUnit.owner)
  return owner_;
}
 void DebugCreateUnit::set_owner(::google::protobuf::int32 value) {
  set_has_owner();
  owner_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.DebugCreateUnit.owner)
}

// optional .SC2APIProtocol.Point2D pos = 3;
bool DebugCreateUnit::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DebugCreateUnit::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
void DebugCreateUnit::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
void DebugCreateUnit::clear_pos() {
  if (pos_ != NULL) pos_->::SC2APIProtocol::Point2D::Clear();
  clear_has_pos();
}
const ::SC2APIProtocol::Point2D& DebugCreateUnit::pos() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugCreateUnit.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
::SC2APIProtocol::Point2D* DebugCreateUnit::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) {
    pos_ = new ::SC2APIProtocol::Point2D;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugCreateUnit.pos)
  return pos_;
}
::SC2APIProtocol::Point2D* DebugCreateUnit::release_pos() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugCreateUnit.pos)
  clear_has_pos();
  ::SC2APIProtocol::Point2D* temp = pos_;
  pos_ = NULL;
  return temp;
}
void DebugCreateUnit::set_allocated_pos(::SC2APIProtocol::Point2D* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugCreateUnit.pos)
}

// optional uint32 quantity = 4;
bool DebugCreateUnit::has_quantity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DebugCreateUnit::set_has_quantity() {
  _has_bits_[0] |= 0x00000008u;
}
void DebugCreateUnit::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000008u;
}
void DebugCreateUnit::clear_quantity() {
  quantity_ = 0u;
  clear_has_quantity();
}
 ::google::protobuf::uint32 DebugCreateUnit::quantity() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugCreateUnit.quantity)
  return quantity_;
}
 void DebugCreateUnit::set_quantity(::google::protobuf::uint32 value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.DebugCreateUnit.quantity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugKillUnit::kTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugKillUnit::DebugKillUnit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.DebugKillUnit)
}

void DebugKillUnit::InitAsDefaultInstance() {
}

DebugKillUnit::DebugKillUnit(const DebugKillUnit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugKillUnit)
}

void DebugKillUnit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugKillUnit::~DebugKillUnit() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugKillUnit)
  SharedDtor();
}

void DebugKillUnit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugKillUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugKillUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugKillUnit_descriptor_;
}

const DebugKillUnit& DebugKillUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto();
  return *default_instance_;
}

DebugKillUnit* DebugKillUnit::default_instance_ = NULL;

DebugKillUnit* DebugKillUnit::New(::google::protobuf::Arena* arena) const {
  DebugKillUnit* n = new DebugKillUnit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugKillUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugKillUnit)
  tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DebugKillUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.DebugKillUnit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 tag = 1;
      case 1: {
        if (tag == 8) {
         parse_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_tag())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_tag())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_tag;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.DebugKillUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.DebugKillUnit)
  return false;
#undef DO_
}

void DebugKillUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.DebugKillUnit)
  // repeated uint64 tag = 1;
  for (int i = 0; i < this->tag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->tag(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.DebugKillUnit)
}

::google::protobuf::uint8* DebugKillUnit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugKillUnit)
  // repeated uint64 tag = 1;
  for (int i = 0; i < this->tag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->tag(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugKillUnit)
  return target;
}

int DebugKillUnit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugKillUnit)
  int total_size = 0;

  // repeated uint64 tag = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->tag_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->tag(i));
    }
    total_size += 1 * this->tag_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugKillUnit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.DebugKillUnit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DebugKillUnit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugKillUnit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.DebugKillUnit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.DebugKillUnit)
    MergeFrom(*source);
  }
}

void DebugKillUnit::MergeFrom(const DebugKillUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugKillUnit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tag_.MergeFrom(from.tag_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DebugKillUnit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.DebugKillUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugKillUnit::CopyFrom(const DebugKillUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugKillUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugKillUnit::IsInitialized() const {

  return true;
}

void DebugKillUnit::Swap(DebugKillUnit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugKillUnit::InternalSwap(DebugKillUnit* other) {
  tag_.UnsafeArenaSwap(&other->tag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugKillUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugKillUnit_descriptor_;
  metadata.reflection = DebugKillUnit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugKillUnit

// repeated uint64 tag = 1;
int DebugKillUnit::tag_size() const {
  return tag_.size();
}
void DebugKillUnit::clear_tag() {
  tag_.Clear();
}
 ::google::protobuf::uint64 DebugKillUnit::tag(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugKillUnit.tag)
  return tag_.Get(index);
}
 void DebugKillUnit::set_tag(int index, ::google::protobuf::uint64 value) {
  tag_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.DebugKillUnit.tag)
}
 void DebugKillUnit::add_tag(::google::protobuf::uint64 value) {
  tag_.Add(value);
  // @@protoc_insertion_point(field_add:SC2APIProtocol.DebugKillUnit.tag)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
DebugKillUnit::tag() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.DebugKillUnit.tag)
  return tag_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
DebugKillUnit::mutable_tag() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.DebugKillUnit.tag)
  return &tag_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* DebugTestProcess_Test_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugTestProcess_Test_descriptor_;
}
bool DebugTestProcess_Test_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DebugTestProcess_Test DebugTestProcess::hang;
const DebugTestProcess_Test DebugTestProcess::crash;
const DebugTestProcess_Test DebugTestProcess::exit;
const DebugTestProcess_Test DebugTestProcess::Test_MIN;
const DebugTestProcess_Test DebugTestProcess::Test_MAX;
const int DebugTestProcess::Test_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugTestProcess::kTestFieldNumber;
const int DebugTestProcess::kDelayMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugTestProcess::DebugTestProcess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.DebugTestProcess)
}

void DebugTestProcess::InitAsDefaultInstance() {
}

DebugTestProcess::DebugTestProcess(const DebugTestProcess& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugTestProcess)
}

void DebugTestProcess::SharedCtor() {
  _cached_size_ = 0;
  test_ = 1;
  delay_ms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugTestProcess::~DebugTestProcess() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugTestProcess)
  SharedDtor();
}

void DebugTestProcess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugTestProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugTestProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugTestProcess_descriptor_;
}

const DebugTestProcess& DebugTestProcess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto();
  return *default_instance_;
}

DebugTestProcess* DebugTestProcess::default_instance_ = NULL;

DebugTestProcess* DebugTestProcess::New(::google::protobuf::Arena* arena) const {
  DebugTestProcess* n = new DebugTestProcess;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugTestProcess::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugTestProcess)
  if (_has_bits_[0 / 32] & 3u) {
    test_ = 1;
    delay_ms_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DebugTestProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.DebugTestProcess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.DebugTestProcess.Test test = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::DebugTestProcess_Test_IsValid(value)) {
            set_test(static_cast< ::SC2APIProtocol::DebugTestProcess_Test >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_delay_ms;
        break;
      }

      // optional int32 delay_ms = 2;
      case 2: {
        if (tag == 16) {
         parse_delay_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_ms_)));
          set_has_delay_ms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.DebugTestProcess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.DebugTestProcess)
  return false;
#undef DO_
}

void DebugTestProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.DebugTestProcess)
  // optional .SC2APIProtocol.DebugTestProcess.Test test = 1;
  if (has_test()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->test(), output);
  }

  // optional int32 delay_ms = 2;
  if (has_delay_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delay_ms(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.DebugTestProcess)
}

::google::protobuf::uint8* DebugTestProcess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugTestProcess)
  // optional .SC2APIProtocol.DebugTestProcess.Test test = 1;
  if (has_test()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->test(), target);
  }

  // optional int32 delay_ms = 2;
  if (has_delay_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delay_ms(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugTestProcess)
  return target;
}

int DebugTestProcess::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugTestProcess)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .SC2APIProtocol.DebugTestProcess.Test test = 1;
    if (has_test()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->test());
    }

    // optional int32 delay_ms = 2;
    if (has_delay_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delay_ms());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugTestProcess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.DebugTestProcess)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DebugTestProcess* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugTestProcess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.DebugTestProcess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.DebugTestProcess)
    MergeFrom(*source);
  }
}

void DebugTestProcess::MergeFrom(const DebugTestProcess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugTestProcess)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_test()) {
      set_test(from.test());
    }
    if (from.has_delay_ms()) {
      set_delay_ms(from.delay_ms());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DebugTestProcess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.DebugTestProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugTestProcess::CopyFrom(const DebugTestProcess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugTestProcess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugTestProcess::IsInitialized() const {

  return true;
}

void DebugTestProcess::Swap(DebugTestProcess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugTestProcess::InternalSwap(DebugTestProcess* other) {
  std::swap(test_, other->test_);
  std::swap(delay_ms_, other->delay_ms_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugTestProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugTestProcess_descriptor_;
  metadata.reflection = DebugTestProcess_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugTestProcess

// optional .SC2APIProtocol.DebugTestProcess.Test test = 1;
bool DebugTestProcess::has_test() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DebugTestProcess::set_has_test() {
  _has_bits_[0] |= 0x00000001u;
}
void DebugTestProcess::clear_has_test() {
  _has_bits_[0] &= ~0x00000001u;
}
void DebugTestProcess::clear_test() {
  test_ = 1;
  clear_has_test();
}
 ::SC2APIProtocol::DebugTestProcess_Test DebugTestProcess::test() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugTestProcess.test)
  return static_cast< ::SC2APIProtocol::DebugTestProcess_Test >(test_);
}
 void DebugTestProcess::set_test(::SC2APIProtocol::DebugTestProcess_Test value) {
  assert(::SC2APIProtocol::DebugTestProcess_Test_IsValid(value));
  set_has_test();
  test_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.DebugTestProcess.test)
}

// optional int32 delay_ms = 2;
bool DebugTestProcess::has_delay_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DebugTestProcess::set_has_delay_ms() {
  _has_bits_[0] |= 0x00000002u;
}
void DebugTestProcess::clear_has_delay_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
void DebugTestProcess::clear_delay_ms() {
  delay_ms_ = 0;
  clear_has_delay_ms();
}
 ::google::protobuf::int32 DebugTestProcess::delay_ms() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugTestProcess.delay_ms)
  return delay_ms_;
}
 void DebugTestProcess::set_delay_ms(::google::protobuf::int32 value) {
  set_has_delay_ms();
  delay_ms_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.DebugTestProcess.delay_ms)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugSetScore::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugSetScore::DebugSetScore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.DebugSetScore)
}

void DebugSetScore::InitAsDefaultInstance() {
}

DebugSetScore::DebugSetScore(const DebugSetScore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugSetScore)
}

void DebugSetScore::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugSetScore::~DebugSetScore() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugSetScore)
  SharedDtor();
}

void DebugSetScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugSetScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugSetScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugSetScore_descriptor_;
}

const DebugSetScore& DebugSetScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto();
  return *default_instance_;
}

DebugSetScore* DebugSetScore::default_instance_ = NULL;

DebugSetScore* DebugSetScore::New(::google::protobuf::Arena* arena) const {
  DebugSetScore* n = new DebugSetScore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugSetScore::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugSetScore)
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DebugSetScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.DebugSetScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float score = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.DebugSetScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.DebugSetScore)
  return false;
#undef DO_
}

void DebugSetScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.DebugSetScore)
  // optional float score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.DebugSetScore)
}

::google::protobuf::uint8* DebugSetScore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugSetScore)
  // optional float score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugSetScore)
  return target;
}

int DebugSetScore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugSetScore)
  int total_size = 0;

  // optional float score = 1;
  if (has_score()) {
    total_size += 1 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugSetScore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.DebugSetScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DebugSetScore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugSetScore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.DebugSetScore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.DebugSetScore)
    MergeFrom(*source);
  }
}

void DebugSetScore::MergeFrom(const DebugSetScore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugSetScore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DebugSetScore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.DebugSetScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugSetScore::CopyFrom(const DebugSetScore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugSetScore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugSetScore::IsInitialized() const {

  return true;
}

void DebugSetScore::Swap(DebugSetScore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugSetScore::InternalSwap(DebugSetScore* other) {
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugSetScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugSetScore_descriptor_;
  metadata.reflection = DebugSetScore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugSetScore

// optional float score = 1;
bool DebugSetScore::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DebugSetScore::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
void DebugSetScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
void DebugSetScore::clear_score() {
  score_ = 0;
  clear_has_score();
}
 float DebugSetScore::score() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugSetScore.score)
  return score_;
}
 void DebugSetScore::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.DebugSetScore.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* DebugEndGame_EndResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugEndGame_EndResult_descriptor_;
}
bool DebugEndGame_EndResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DebugEndGame_EndResult DebugEndGame::Surrender;
const DebugEndGame_EndResult DebugEndGame::DeclareVictory;
const DebugEndGame_EndResult DebugEndGame::EndResult_MIN;
const DebugEndGame_EndResult DebugEndGame::EndResult_MAX;
const int DebugEndGame::EndResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugEndGame::kEndResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugEndGame::DebugEndGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.DebugEndGame)
}

void DebugEndGame::InitAsDefaultInstance() {
}

DebugEndGame::DebugEndGame(const DebugEndGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugEndGame)
}

void DebugEndGame::SharedCtor() {
  _cached_size_ = 0;
  end_result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugEndGame::~DebugEndGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugEndGame)
  SharedDtor();
}

void DebugEndGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugEndGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugEndGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugEndGame_descriptor_;
}

const DebugEndGame& DebugEndGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto();
  return *default_instance_;
}

DebugEndGame* DebugEndGame::default_instance_ = NULL;

DebugEndGame* DebugEndGame::New(::google::protobuf::Arena* arena) const {
  DebugEndGame* n = new DebugEndGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugEndGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugEndGame)
  end_result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DebugEndGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.DebugEndGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.DebugEndGame.EndResult end_result = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::DebugEndGame_EndResult_IsValid(value)) {
            set_end_result(static_cast< ::SC2APIProtocol::DebugEndGame_EndResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.DebugEndGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.DebugEndGame)
  return false;
#undef DO_
}

void DebugEndGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.DebugEndGame)
  // optional .SC2APIProtocol.DebugEndGame.EndResult end_result = 1;
  if (has_end_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->end_result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.DebugEndGame)
}

::google::protobuf::uint8* DebugEndGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugEndGame)
  // optional .SC2APIProtocol.DebugEndGame.EndResult end_result = 1;
  if (has_end_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->end_result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugEndGame)
  return target;
}

int DebugEndGame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugEndGame)
  int total_size = 0;

  // optional .SC2APIProtocol.DebugEndGame.EndResult end_result = 1;
  if (has_end_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->end_result());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugEndGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.DebugEndGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DebugEndGame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugEndGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.DebugEndGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.DebugEndGame)
    MergeFrom(*source);
  }
}

void DebugEndGame::MergeFrom(const DebugEndGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugEndGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_end_result()) {
      set_end_result(from.end_result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DebugEndGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.DebugEndGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugEndGame::CopyFrom(const DebugEndGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugEndGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugEndGame::IsInitialized() const {

  return true;
}

void DebugEndGame::Swap(DebugEndGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugEndGame::InternalSwap(DebugEndGame* other) {
  std::swap(end_result_, other->end_result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugEndGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugEndGame_descriptor_;
  metadata.reflection = DebugEndGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugEndGame

// optional .SC2APIProtocol.DebugEndGame.EndResult end_result = 1;
bool DebugEndGame::has_end_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DebugEndGame::set_has_end_result() {
  _has_bits_[0] |= 0x00000001u;
}
void DebugEndGame::clear_has_end_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void DebugEndGame::clear_end_result() {
  end_result_ = 1;
  clear_has_end_result();
}
 ::SC2APIProtocol::DebugEndGame_EndResult DebugEndGame::end_result() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugEndGame.end_result)
  return static_cast< ::SC2APIProtocol::DebugEndGame_EndResult >(end_result_);
}
 void DebugEndGame::set_end_result(::SC2APIProtocol::DebugEndGame_EndResult value) {
  assert(::SC2APIProtocol::DebugEndGame_EndResult_IsValid(value));
  set_has_end_result();
  end_result_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.DebugEndGame.end_result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* DebugSetUnitValue_UnitValue_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugSetUnitValue_UnitValue_descriptor_;
}
bool DebugSetUnitValue_UnitValue_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DebugSetUnitValue_UnitValue DebugSetUnitValue::Energy;
const DebugSetUnitValue_UnitValue DebugSetUnitValue::Life;
const DebugSetUnitValue_UnitValue DebugSetUnitValue::Shields;
const DebugSetUnitValue_UnitValue DebugSetUnitValue::UnitValue_MIN;
const DebugSetUnitValue_UnitValue DebugSetUnitValue::UnitValue_MAX;
const int DebugSetUnitValue::UnitValue_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugSetUnitValue::kUnitValueFieldNumber;
const int DebugSetUnitValue::kValueFieldNumber;
const int DebugSetUnitValue::kUnitTagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugSetUnitValue::DebugSetUnitValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.DebugSetUnitValue)
}

void DebugSetUnitValue::InitAsDefaultInstance() {
}

DebugSetUnitValue::DebugSetUnitValue(const DebugSetUnitValue& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugSetUnitValue)
}

void DebugSetUnitValue::SharedCtor() {
  _cached_size_ = 0;
  unit_value_ = 1;
  value_ = 0;
  unit_tag_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugSetUnitValue::~DebugSetUnitValue() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugSetUnitValue)
  SharedDtor();
}

void DebugSetUnitValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DebugSetUnitValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugSetUnitValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugSetUnitValue_descriptor_;
}

const DebugSetUnitValue& DebugSetUnitValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto();
  return *default_instance_;
}

DebugSetUnitValue* DebugSetUnitValue::default_instance_ = NULL;

DebugSetUnitValue* DebugSetUnitValue::New(::google::protobuf::Arena* arena) const {
  DebugSetUnitValue* n = new DebugSetUnitValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugSetUnitValue::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugSetUnitValue)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DebugSetUnitValue, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DebugSetUnitValue*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(value_, unit_tag_);
    unit_value_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DebugSetUnitValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.DebugSetUnitValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.DebugSetUnitValue.UnitValue unit_value = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::DebugSetUnitValue_UnitValue_IsValid(value)) {
            set_unit_value(static_cast< ::SC2APIProtocol::DebugSetUnitValue_UnitValue >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }

      // optional float value = 2;
      case 2: {
        if (tag == 21) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unit_tag;
        break;
      }

      // optional uint64 unit_tag = 3;
      case 3: {
        if (tag == 24) {
         parse_unit_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unit_tag_)));
          set_has_unit_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.DebugSetUnitValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.DebugSetUnitValue)
  return false;
#undef DO_
}

void DebugSetUnitValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.DebugSetUnitValue)
  // optional .SC2APIProtocol.DebugSetUnitValue.UnitValue unit_value = 1;
  if (has_unit_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->unit_value(), output);
  }

  // optional float value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }

  // optional uint64 unit_tag = 3;
  if (has_unit_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->unit_tag(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.DebugSetUnitValue)
}

::google::protobuf::uint8* DebugSetUnitValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugSetUnitValue)
  // optional .SC2APIProtocol.DebugSetUnitValue.UnitValue unit_value = 1;
  if (has_unit_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->unit_value(), target);
  }

  // optional float value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }

  // optional uint64 unit_tag = 3;
  if (has_unit_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->unit_tag(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugSetUnitValue)
  return target;
}

int DebugSetUnitValue::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugSetUnitValue)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .SC2APIProtocol.DebugSetUnitValue.UnitValue unit_value = 1;
    if (has_unit_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit_value());
    }

    // optional float value = 2;
    if (has_value()) {
      total_size += 1 + 4;
    }

    // optional uint64 unit_tag = 3;
    if (has_unit_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unit_tag());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugSetUnitValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.DebugSetUnitValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DebugSetUnitValue* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugSetUnitValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.DebugSetUnitValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.DebugSetUnitValue)
    MergeFrom(*source);
  }
}

void DebugSetUnitValue::MergeFrom(const DebugSetUnitValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugSetUnitValue)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit_value()) {
      set_unit_value(from.unit_value());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_unit_tag()) {
      set_unit_tag(from.unit_tag());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DebugSetUnitValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.DebugSetUnitValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugSetUnitValue::CopyFrom(const DebugSetUnitValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugSetUnitValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugSetUnitValue::IsInitialized() const {

  return true;
}

void DebugSetUnitValue::Swap(DebugSetUnitValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugSetUnitValue::InternalSwap(DebugSetUnitValue* other) {
  std::swap(unit_value_, other->unit_value_);
  std::swap(value_, other->value_);
  std::swap(unit_tag_, other->unit_tag_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugSetUnitValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugSetUnitValue_descriptor_;
  metadata.reflection = DebugSetUnitValue_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugSetUnitValue

// optional .SC2APIProtocol.DebugSetUnitValue.UnitValue unit_value = 1;
bool DebugSetUnitValue::has_unit_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DebugSetUnitValue::set_has_unit_value() {
  _has_bits_[0] |= 0x00000001u;
}
void DebugSetUnitValue::clear_has_unit_value() {
  _has_bits_[0] &= ~0x00000001u;
}
void DebugSetUnitValue::clear_unit_value() {
  unit_value_ = 1;
  clear_has_unit_value();
}
 ::SC2APIProtocol::DebugSetUnitValue_UnitValue DebugSetUnitValue::unit_value() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugSetUnitValue.unit_value)
  return static_cast< ::SC2APIProtocol::DebugSetUnitValue_UnitValue >(unit_value_);
}
 void DebugSetUnitValue::set_unit_value(::SC2APIProtocol::DebugSetUnitValue_UnitValue value) {
  assert(::SC2APIProtocol::DebugSetUnitValue_UnitValue_IsValid(value));
  set_has_unit_value();
  unit_value_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.DebugSetUnitValue.unit_value)
}

// optional float value = 2;
bool DebugSetUnitValue::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DebugSetUnitValue::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void DebugSetUnitValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void DebugSetUnitValue::clear_value() {
  value_ = 0;
  clear_has_value();
}
 float DebugSetUnitValue::value() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugSetUnitValue.value)
  return value_;
}
 void DebugSetUnitValue::set_value(float value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.DebugSetUnitValue.value)
}

// optional uint64 unit_tag = 3;
bool DebugSetUnitValue::has_unit_tag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DebugSetUnitValue::set_has_unit_tag() {
  _has_bits_[0] |= 0x00000004u;
}
void DebugSetUnitValue::clear_has_unit_tag() {
  _has_bits_[0] &= ~0x00000004u;
}
void DebugSetUnitValue::clear_unit_tag() {
  unit_tag_ = GOOGLE_ULONGLONG(0);
  clear_has_unit_tag();
}
 ::google::protobuf::uint64 DebugSetUnitValue::unit_tag() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugSetUnitValue.unit_tag)
  return unit_tag_;
}
 void DebugSetUnitValue::set_unit_tag(::google::protobuf::uint64 value) {
  set_has_unit_tag();
  unit_tag_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.DebugSetUnitValue.unit_tag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DebugChat::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DebugChat::DebugChat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.DebugChat)
}

void DebugChat::InitAsDefaultInstance() {
}

DebugChat::DebugChat(const DebugChat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.DebugChat)
}

void DebugChat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebugChat::~DebugChat() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.DebugChat)
  SharedDtor();
}

void DebugChat::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DebugChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DebugChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DebugChat_descriptor_;
}

const DebugChat& DebugChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto();
  return *default_instance_;
}

DebugChat* DebugChat::default_instance_ = NULL;

DebugChat* DebugChat::New(::google::protobuf::Arena* arena) const {
  DebugChat* n = new DebugChat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DebugChat::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.DebugChat)
  if (has_message()) {
    message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DebugChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.DebugChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.DebugChat.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.DebugChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.DebugChat)
  return false;
#undef DO_
}

void DebugChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.DebugChat)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.DebugChat.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.DebugChat)
}

::google::protobuf::uint8* DebugChat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.DebugChat)
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.DebugChat.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.DebugChat)
  return target;
}

int DebugChat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.DebugChat)
  int total_size = 0;

  // optional string message = 1;
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebugChat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.DebugChat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DebugChat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DebugChat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.DebugChat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.DebugChat)
    MergeFrom(*source);
  }
}

void DebugChat::MergeFrom(const DebugChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.DebugChat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DebugChat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.DebugChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DebugChat::CopyFrom(const DebugChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.DebugChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugChat::IsInitialized() const {

  return true;
}

void DebugChat::Swap(DebugChat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DebugChat::InternalSwap(DebugChat* other) {
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DebugChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DebugChat_descriptor_;
  metadata.reflection = DebugChat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DebugChat

// optional string message = 1;
bool DebugChat::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DebugChat::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void DebugChat::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void DebugChat::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& DebugChat::message() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DebugChat.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DebugChat::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.DebugChat.message)
}
 void DebugChat::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.DebugChat.message)
}
 void DebugChat::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.DebugChat.message)
}
 ::std::string* DebugChat::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.DebugChat.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DebugChat::release_message() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.DebugChat.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DebugChat::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.DebugChat.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SC2APIProtocol

// @@protoc_insertion_point(global_scope)
