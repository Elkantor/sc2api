// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/spatial.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "s2clientprotocol/spatial.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SC2APIProtocol {

namespace {

const ::google::protobuf::Descriptor* ObservationFeatureLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObservationFeatureLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureLayers_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureLayers_reflection_ = NULL;
const ::google::protobuf::Descriptor* FeatureLayersMinimap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FeatureLayersMinimap_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObservationRender_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObservationRender_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionSpatial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionSpatial_reflection_ = NULL;
struct ActionSpatialOneofInstance {
  const ::SC2APIProtocol::ActionSpatialUnitCommand* unit_command_;
  const ::SC2APIProtocol::ActionSpatialCameraMove* camera_move_;
  const ::SC2APIProtocol::ActionSpatialUnitSelectionPoint* unit_selection_point_;
  const ::SC2APIProtocol::ActionSpatialUnitSelectionRect* unit_selection_rect_;
}* ActionSpatial_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ActionSpatialUnitCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionSpatialUnitCommand_reflection_ = NULL;
struct ActionSpatialUnitCommandOneofInstance {
  const ::SC2APIProtocol::PointI* target_screen_coord_;
  const ::SC2APIProtocol::PointI* target_minimap_coord_;
}* ActionSpatialUnitCommand_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ActionSpatialCameraMove_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionSpatialCameraMove_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionSpatialUnitSelectionPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionSpatialUnitSelectionPoint_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ActionSpatialUnitSelectionPoint_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ActionSpatialUnitSelectionRect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionSpatialUnitSelectionRect_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_s2clientprotocol_2fspatial_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_s2clientprotocol_2fspatial_2eproto() {
  protobuf_AddDesc_s2clientprotocol_2fspatial_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "s2clientprotocol/spatial.proto");
  GOOGLE_CHECK(file != NULL);
  ObservationFeatureLayer_descriptor_ = file->message_type(0);
  static const int ObservationFeatureLayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationFeatureLayer, renders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationFeatureLayer, minimap_renders_),
  };
  ObservationFeatureLayer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObservationFeatureLayer_descriptor_,
      ObservationFeatureLayer::default_instance_,
      ObservationFeatureLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationFeatureLayer, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObservationFeatureLayer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationFeatureLayer, _internal_metadata_),
      -1);
  FeatureLayers_descriptor_ = file->message_type(1);
  static const int FeatureLayers_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayers, height_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayers, visibility_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayers, creep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayers, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayers, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayers, unit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayers, selected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayers, unit_hit_points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayers, unit_hit_points_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayers, unit_energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayers, unit_shields_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayers, player_relative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayers, unit_density_aa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayers, unit_density_),
  };
  FeatureLayers_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeatureLayers_descriptor_,
      FeatureLayers::default_instance_,
      FeatureLayers_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayers, _has_bits_[0]),
      -1,
      -1,
      sizeof(FeatureLayers),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayers, _internal_metadata_),
      -1);
  FeatureLayersMinimap_descriptor_ = file->message_type(2);
  static const int FeatureLayersMinimap_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayersMinimap, height_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayersMinimap, visibility_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayersMinimap, creep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayersMinimap, camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayersMinimap, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayersMinimap, player_relative_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayersMinimap, selected_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayersMinimap, unit_type_),
  };
  FeatureLayersMinimap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FeatureLayersMinimap_descriptor_,
      FeatureLayersMinimap::default_instance_,
      FeatureLayersMinimap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayersMinimap, _has_bits_[0]),
      -1,
      -1,
      sizeof(FeatureLayersMinimap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureLayersMinimap, _internal_metadata_),
      -1);
  ObservationRender_descriptor_ = file->message_type(3);
  static const int ObservationRender_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationRender, map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationRender, minimap_),
  };
  ObservationRender_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ObservationRender_descriptor_,
      ObservationRender::default_instance_,
      ObservationRender_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationRender, _has_bits_[0]),
      -1,
      -1,
      sizeof(ObservationRender),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObservationRender, _internal_metadata_),
      -1);
  ActionSpatial_descriptor_ = file->message_type(4);
  static const int ActionSpatial_offsets_[5] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionSpatial_default_oneof_instance_, unit_command_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionSpatial_default_oneof_instance_, camera_move_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionSpatial_default_oneof_instance_, unit_selection_point_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionSpatial_default_oneof_instance_, unit_selection_rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatial, action_),
  };
  ActionSpatial_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionSpatial_descriptor_,
      ActionSpatial::default_instance_,
      ActionSpatial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatial, _has_bits_[0]),
      -1,
      -1,
      ActionSpatial_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatial, _oneof_case_[0]),
      sizeof(ActionSpatial),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatial, _internal_metadata_),
      -1);
  ActionSpatialUnitCommand_descriptor_ = file->message_type(5);
  static const int ActionSpatialUnitCommand_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatialUnitCommand, ability_id_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionSpatialUnitCommand_default_oneof_instance_, target_screen_coord_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ActionSpatialUnitCommand_default_oneof_instance_, target_minimap_coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatialUnitCommand, queue_command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatialUnitCommand, target_),
  };
  ActionSpatialUnitCommand_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionSpatialUnitCommand_descriptor_,
      ActionSpatialUnitCommand::default_instance_,
      ActionSpatialUnitCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatialUnitCommand, _has_bits_[0]),
      -1,
      -1,
      ActionSpatialUnitCommand_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatialUnitCommand, _oneof_case_[0]),
      sizeof(ActionSpatialUnitCommand),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatialUnitCommand, _internal_metadata_),
      -1);
  ActionSpatialCameraMove_descriptor_ = file->message_type(6);
  static const int ActionSpatialCameraMove_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatialCameraMove, center_minimap_),
  };
  ActionSpatialCameraMove_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionSpatialCameraMove_descriptor_,
      ActionSpatialCameraMove::default_instance_,
      ActionSpatialCameraMove_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatialCameraMove, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActionSpatialCameraMove),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatialCameraMove, _internal_metadata_),
      -1);
  ActionSpatialUnitSelectionPoint_descriptor_ = file->message_type(7);
  static const int ActionSpatialUnitSelectionPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatialUnitSelectionPoint, selection_screen_coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatialUnitSelectionPoint, type_),
  };
  ActionSpatialUnitSelectionPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionSpatialUnitSelectionPoint_descriptor_,
      ActionSpatialUnitSelectionPoint::default_instance_,
      ActionSpatialUnitSelectionPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatialUnitSelectionPoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActionSpatialUnitSelectionPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatialUnitSelectionPoint, _internal_metadata_),
      -1);
  ActionSpatialUnitSelectionPoint_Type_descriptor_ = ActionSpatialUnitSelectionPoint_descriptor_->enum_type(0);
  ActionSpatialUnitSelectionRect_descriptor_ = file->message_type(8);
  static const int ActionSpatialUnitSelectionRect_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatialUnitSelectionRect, selection_screen_coord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatialUnitSelectionRect, selection_add_),
  };
  ActionSpatialUnitSelectionRect_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionSpatialUnitSelectionRect_descriptor_,
      ActionSpatialUnitSelectionRect::default_instance_,
      ActionSpatialUnitSelectionRect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatialUnitSelectionRect, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActionSpatialUnitSelectionRect),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionSpatialUnitSelectionRect, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_s2clientprotocol_2fspatial_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObservationFeatureLayer_descriptor_, &ObservationFeatureLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeatureLayers_descriptor_, &FeatureLayers::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FeatureLayersMinimap_descriptor_, &FeatureLayersMinimap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ObservationRender_descriptor_, &ObservationRender::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionSpatial_descriptor_, &ActionSpatial::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionSpatialUnitCommand_descriptor_, &ActionSpatialUnitCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionSpatialCameraMove_descriptor_, &ActionSpatialCameraMove::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionSpatialUnitSelectionPoint_descriptor_, &ActionSpatialUnitSelectionPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionSpatialUnitSelectionRect_descriptor_, &ActionSpatialUnitSelectionRect::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_s2clientprotocol_2fspatial_2eproto() {
  delete ObservationFeatureLayer::default_instance_;
  delete ObservationFeatureLayer_reflection_;
  delete FeatureLayers::default_instance_;
  delete FeatureLayers_reflection_;
  delete FeatureLayersMinimap::default_instance_;
  delete FeatureLayersMinimap_reflection_;
  delete ObservationRender::default_instance_;
  delete ObservationRender_reflection_;
  delete ActionSpatial::default_instance_;
  delete ActionSpatial_default_oneof_instance_;
  delete ActionSpatial_reflection_;
  delete ActionSpatialUnitCommand::default_instance_;
  delete ActionSpatialUnitCommand_default_oneof_instance_;
  delete ActionSpatialUnitCommand_reflection_;
  delete ActionSpatialCameraMove::default_instance_;
  delete ActionSpatialCameraMove_reflection_;
  delete ActionSpatialUnitSelectionPoint::default_instance_;
  delete ActionSpatialUnitSelectionPoint_reflection_;
  delete ActionSpatialUnitSelectionRect::default_instance_;
  delete ActionSpatialUnitSelectionRect_reflection_;
}

void protobuf_AddDesc_s2clientprotocol_2fspatial_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_s2clientprotocol_2fspatial_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SC2APIProtocol::protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036s2clientprotocol/spatial.proto\022\016SC2API"
    "Protocol\032\035s2clientprotocol/common.proto\""
    "\210\001\n\027ObservationFeatureLayer\022.\n\007renders\030\001"
    " \001(\0132\035.SC2APIProtocol.FeatureLayers\022=\n\017m"
    "inimap_renders\030\002 \001(\0132$.SC2APIProtocol.Fe"
    "atureLayersMinimap\"\266\005\n\rFeatureLayers\022-\n\n"
    "height_map\030\001 \001(\0132\031.SC2APIProtocol.ImageD"
    "ata\0221\n\016visibility_map\030\002 \001(\0132\031.SC2APIProt"
    "ocol.ImageData\022(\n\005creep\030\003 \001(\0132\031.SC2APIPr"
    "otocol.ImageData\022(\n\005power\030\004 \001(\0132\031.SC2API"
    "Protocol.ImageData\022,\n\tplayer_id\030\005 \001(\0132\031."
    "SC2APIProtocol.ImageData\022,\n\tunit_type\030\006 "
    "\001(\0132\031.SC2APIProtocol.ImageData\022+\n\010select"
    "ed\030\007 \001(\0132\031.SC2APIProtocol.ImageData\0222\n\017u"
    "nit_hit_points\030\010 \001(\0132\031.SC2APIProtocol.Im"
    "ageData\0228\n\025unit_hit_points_ratio\030\021 \001(\0132\031"
    ".SC2APIProtocol.ImageData\022.\n\013unit_energy"
    "\030\t \001(\0132\031.SC2APIProtocol.ImageData\022/\n\014uni"
    "t_shields\030\n \001(\0132\031.SC2APIProtocol.ImageDa"
    "ta\0222\n\017player_relative\030\013 \001(\0132\031.SC2APIProt"
    "ocol.ImageData\0222\n\017unit_density_aa\030\016 \001(\0132"
    "\031.SC2APIProtocol.ImageData\022/\n\014unit_densi"
    "ty\030\017 \001(\0132\031.SC2APIProtocol.ImageData\"\212\003\n\024"
    "FeatureLayersMinimap\022-\n\nheight_map\030\001 \001(\013"
    "2\031.SC2APIProtocol.ImageData\0221\n\016visibilit"
    "y_map\030\002 \001(\0132\031.SC2APIProtocol.ImageData\022("
    "\n\005creep\030\003 \001(\0132\031.SC2APIProtocol.ImageData"
    "\022)\n\006camera\030\004 \001(\0132\031.SC2APIProtocol.ImageD"
    "ata\022,\n\tplayer_id\030\005 \001(\0132\031.SC2APIProtocol."
    "ImageData\0222\n\017player_relative\030\006 \001(\0132\031.SC2"
    "APIProtocol.ImageData\022+\n\010selected\030\007 \001(\0132"
    "\031.SC2APIProtocol.ImageData\022,\n\tunit_type\030"
    "\010 \001(\0132\031.SC2APIProtocol.ImageData\"g\n\021Obse"
    "rvationRender\022&\n\003map\030\001 \001(\0132\031.SC2APIProto"
    "col.ImageData\022*\n\007minimap\030\002 \001(\0132\031.SC2APIP"
    "rotocol.ImageData\"\273\002\n\rActionSpatial\022@\n\014u"
    "nit_command\030\001 \001(\0132(.SC2APIProtocol.Actio"
    "nSpatialUnitCommandH\000\022>\n\013camera_move\030\002 \001"
    "(\0132\'.SC2APIProtocol.ActionSpatialCameraM"
    "oveH\000\022O\n\024unit_selection_point\030\003 \001(\0132/.SC"
    "2APIProtocol.ActionSpatialUnitSelectionP"
    "ointH\000\022M\n\023unit_selection_rect\030\004 \001(\0132..SC"
    "2APIProtocol.ActionSpatialUnitSelectionR"
    "ectH\000B\010\n\006action\"\276\001\n\030ActionSpatialUnitCom"
    "mand\022\022\n\nability_id\030\001 \001(\005\0225\n\023target_scree"
    "n_coord\030\002 \001(\0132\026.SC2APIProtocol.PointIH\000\022"
    "6\n\024target_minimap_coord\030\003 \001(\0132\026.SC2APIPr"
    "otocol.PointIH\000\022\025\n\rqueue_command\030\004 \001(\010B\010"
    "\n\006target\"I\n\027ActionSpatialCameraMove\022.\n\016c"
    "enter_minimap\030\001 \001(\0132\026.SC2APIProtocol.Poi"
    "ntI\"\332\001\n\037ActionSpatialUnitSelectionPoint\022"
    "6\n\026selection_screen_coord\030\001 \001(\0132\026.SC2API"
    "Protocol.PointI\022B\n\004type\030\002 \001(\01624.SC2APIPr"
    "otocol.ActionSpatialUnitSelectionPoint.T"
    "ype\";\n\004Type\022\n\n\006Select\020\001\022\n\n\006Toggle\020\002\022\013\n\007A"
    "llType\020\003\022\016\n\nAddAllType\020\004\"s\n\036ActionSpatia"
    "lUnitSelectionRect\022:\n\026selection_screen_c"
    "oord\030\001 \003(\0132\032.SC2APIProtocol.RectangleI\022\025"
    "\n\rselection_add\030\002 \001(\010", 2341);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "s2clientprotocol/spatial.proto", &protobuf_RegisterTypes);
  ObservationFeatureLayer::default_instance_ = new ObservationFeatureLayer();
  FeatureLayers::default_instance_ = new FeatureLayers();
  FeatureLayersMinimap::default_instance_ = new FeatureLayersMinimap();
  ObservationRender::default_instance_ = new ObservationRender();
  ActionSpatial::default_instance_ = new ActionSpatial();
  ActionSpatial_default_oneof_instance_ = new ActionSpatialOneofInstance();
  ActionSpatialUnitCommand::default_instance_ = new ActionSpatialUnitCommand();
  ActionSpatialUnitCommand_default_oneof_instance_ = new ActionSpatialUnitCommandOneofInstance();
  ActionSpatialCameraMove::default_instance_ = new ActionSpatialCameraMove();
  ActionSpatialUnitSelectionPoint::default_instance_ = new ActionSpatialUnitSelectionPoint();
  ActionSpatialUnitSelectionRect::default_instance_ = new ActionSpatialUnitSelectionRect();
  ObservationFeatureLayer::default_instance_->InitAsDefaultInstance();
  FeatureLayers::default_instance_->InitAsDefaultInstance();
  FeatureLayersMinimap::default_instance_->InitAsDefaultInstance();
  ObservationRender::default_instance_->InitAsDefaultInstance();
  ActionSpatial::default_instance_->InitAsDefaultInstance();
  ActionSpatialUnitCommand::default_instance_->InitAsDefaultInstance();
  ActionSpatialCameraMove::default_instance_->InitAsDefaultInstance();
  ActionSpatialUnitSelectionPoint::default_instance_->InitAsDefaultInstance();
  ActionSpatialUnitSelectionRect::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_s2clientprotocol_2fspatial_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_s2clientprotocol_2fspatial_2eproto {
  StaticDescriptorInitializer_s2clientprotocol_2fspatial_2eproto() {
    protobuf_AddDesc_s2clientprotocol_2fspatial_2eproto();
  }
} static_descriptor_initializer_s2clientprotocol_2fspatial_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObservationFeatureLayer::kRendersFieldNumber;
const int ObservationFeatureLayer::kMinimapRendersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObservationFeatureLayer::ObservationFeatureLayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ObservationFeatureLayer)
}

void ObservationFeatureLayer::InitAsDefaultInstance() {
  renders_ = const_cast< ::SC2APIProtocol::FeatureLayers*>(&::SC2APIProtocol::FeatureLayers::default_instance());
  minimap_renders_ = const_cast< ::SC2APIProtocol::FeatureLayersMinimap*>(&::SC2APIProtocol::FeatureLayersMinimap::default_instance());
}

ObservationFeatureLayer::ObservationFeatureLayer(const ObservationFeatureLayer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ObservationFeatureLayer)
}

void ObservationFeatureLayer::SharedCtor() {
  _cached_size_ = 0;
  renders_ = NULL;
  minimap_renders_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObservationFeatureLayer::~ObservationFeatureLayer() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ObservationFeatureLayer)
  SharedDtor();
}

void ObservationFeatureLayer::SharedDtor() {
  if (this != default_instance_) {
    delete renders_;
    delete minimap_renders_;
  }
}

void ObservationFeatureLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObservationFeatureLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObservationFeatureLayer_descriptor_;
}

const ObservationFeatureLayer& ObservationFeatureLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fspatial_2eproto();
  return *default_instance_;
}

ObservationFeatureLayer* ObservationFeatureLayer::default_instance_ = NULL;

ObservationFeatureLayer* ObservationFeatureLayer::New(::google::protobuf::Arena* arena) const {
  ObservationFeatureLayer* n = new ObservationFeatureLayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObservationFeatureLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ObservationFeatureLayer)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_renders()) {
      if (renders_ != NULL) renders_->::SC2APIProtocol::FeatureLayers::Clear();
    }
    if (has_minimap_renders()) {
      if (minimap_renders_ != NULL) minimap_renders_->::SC2APIProtocol::FeatureLayersMinimap::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObservationFeatureLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ObservationFeatureLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.FeatureLayers renders = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_renders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_minimap_renders;
        break;
      }

      // optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;
      case 2: {
        if (tag == 18) {
         parse_minimap_renders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_minimap_renders()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ObservationFeatureLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ObservationFeatureLayer)
  return false;
#undef DO_
}

void ObservationFeatureLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ObservationFeatureLayer)
  // optional .SC2APIProtocol.FeatureLayers renders = 1;
  if (has_renders()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->renders_, output);
  }

  // optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;
  if (has_minimap_renders()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->minimap_renders_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ObservationFeatureLayer)
}

::google::protobuf::uint8* ObservationFeatureLayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ObservationFeatureLayer)
  // optional .SC2APIProtocol.FeatureLayers renders = 1;
  if (has_renders()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->renders_, false, target);
  }

  // optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;
  if (has_minimap_renders()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->minimap_renders_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ObservationFeatureLayer)
  return target;
}

int ObservationFeatureLayer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ObservationFeatureLayer)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .SC2APIProtocol.FeatureLayers renders = 1;
    if (has_renders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->renders_);
    }

    // optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;
    if (has_minimap_renders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->minimap_renders_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObservationFeatureLayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ObservationFeatureLayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObservationFeatureLayer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObservationFeatureLayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ObservationFeatureLayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ObservationFeatureLayer)
    MergeFrom(*source);
  }
}

void ObservationFeatureLayer::MergeFrom(const ObservationFeatureLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ObservationFeatureLayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_renders()) {
      mutable_renders()->::SC2APIProtocol::FeatureLayers::MergeFrom(from.renders());
    }
    if (from.has_minimap_renders()) {
      mutable_minimap_renders()->::SC2APIProtocol::FeatureLayersMinimap::MergeFrom(from.minimap_renders());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObservationFeatureLayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ObservationFeatureLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservationFeatureLayer::CopyFrom(const ObservationFeatureLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ObservationFeatureLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservationFeatureLayer::IsInitialized() const {

  return true;
}

void ObservationFeatureLayer::Swap(ObservationFeatureLayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObservationFeatureLayer::InternalSwap(ObservationFeatureLayer* other) {
  std::swap(renders_, other->renders_);
  std::swap(minimap_renders_, other->minimap_renders_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObservationFeatureLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObservationFeatureLayer_descriptor_;
  metadata.reflection = ObservationFeatureLayer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObservationFeatureLayer

// optional .SC2APIProtocol.FeatureLayers renders = 1;
bool ObservationFeatureLayer::has_renders() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObservationFeatureLayer::set_has_renders() {
  _has_bits_[0] |= 0x00000001u;
}
void ObservationFeatureLayer::clear_has_renders() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObservationFeatureLayer::clear_renders() {
  if (renders_ != NULL) renders_->::SC2APIProtocol::FeatureLayers::Clear();
  clear_has_renders();
}
const ::SC2APIProtocol::FeatureLayers& ObservationFeatureLayer::renders() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationFeatureLayer.renders)
  return renders_ != NULL ? *renders_ : *default_instance_->renders_;
}
::SC2APIProtocol::FeatureLayers* ObservationFeatureLayer::mutable_renders() {
  set_has_renders();
  if (renders_ == NULL) {
    renders_ = new ::SC2APIProtocol::FeatureLayers;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationFeatureLayer.renders)
  return renders_;
}
::SC2APIProtocol::FeatureLayers* ObservationFeatureLayer::release_renders() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ObservationFeatureLayer.renders)
  clear_has_renders();
  ::SC2APIProtocol::FeatureLayers* temp = renders_;
  renders_ = NULL;
  return temp;
}
void ObservationFeatureLayer::set_allocated_renders(::SC2APIProtocol::FeatureLayers* renders) {
  delete renders_;
  renders_ = renders;
  if (renders) {
    set_has_renders();
  } else {
    clear_has_renders();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObservationFeatureLayer.renders)
}

// optional .SC2APIProtocol.FeatureLayersMinimap minimap_renders = 2;
bool ObservationFeatureLayer::has_minimap_renders() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObservationFeatureLayer::set_has_minimap_renders() {
  _has_bits_[0] |= 0x00000002u;
}
void ObservationFeatureLayer::clear_has_minimap_renders() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObservationFeatureLayer::clear_minimap_renders() {
  if (minimap_renders_ != NULL) minimap_renders_->::SC2APIProtocol::FeatureLayersMinimap::Clear();
  clear_has_minimap_renders();
}
const ::SC2APIProtocol::FeatureLayersMinimap& ObservationFeatureLayer::minimap_renders() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationFeatureLayer.minimap_renders)
  return minimap_renders_ != NULL ? *minimap_renders_ : *default_instance_->minimap_renders_;
}
::SC2APIProtocol::FeatureLayersMinimap* ObservationFeatureLayer::mutable_minimap_renders() {
  set_has_minimap_renders();
  if (minimap_renders_ == NULL) {
    minimap_renders_ = new ::SC2APIProtocol::FeatureLayersMinimap;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationFeatureLayer.minimap_renders)
  return minimap_renders_;
}
::SC2APIProtocol::FeatureLayersMinimap* ObservationFeatureLayer::release_minimap_renders() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ObservationFeatureLayer.minimap_renders)
  clear_has_minimap_renders();
  ::SC2APIProtocol::FeatureLayersMinimap* temp = minimap_renders_;
  minimap_renders_ = NULL;
  return temp;
}
void ObservationFeatureLayer::set_allocated_minimap_renders(::SC2APIProtocol::FeatureLayersMinimap* minimap_renders) {
  delete minimap_renders_;
  minimap_renders_ = minimap_renders;
  if (minimap_renders) {
    set_has_minimap_renders();
  } else {
    clear_has_minimap_renders();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObservationFeatureLayer.minimap_renders)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureLayers::kHeightMapFieldNumber;
const int FeatureLayers::kVisibilityMapFieldNumber;
const int FeatureLayers::kCreepFieldNumber;
const int FeatureLayers::kPowerFieldNumber;
const int FeatureLayers::kPlayerIdFieldNumber;
const int FeatureLayers::kUnitTypeFieldNumber;
const int FeatureLayers::kSelectedFieldNumber;
const int FeatureLayers::kUnitHitPointsFieldNumber;
const int FeatureLayers::kUnitHitPointsRatioFieldNumber;
const int FeatureLayers::kUnitEnergyFieldNumber;
const int FeatureLayers::kUnitShieldsFieldNumber;
const int FeatureLayers::kPlayerRelativeFieldNumber;
const int FeatureLayers::kUnitDensityAaFieldNumber;
const int FeatureLayers::kUnitDensityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureLayers::FeatureLayers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.FeatureLayers)
}

void FeatureLayers::InitAsDefaultInstance() {
  height_map_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  visibility_map_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  creep_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  power_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  player_id_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  unit_type_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  selected_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  unit_hit_points_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  unit_hit_points_ratio_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  unit_energy_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  unit_shields_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  player_relative_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  unit_density_aa_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  unit_density_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
}

FeatureLayers::FeatureLayers(const FeatureLayers& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.FeatureLayers)
}

void FeatureLayers::SharedCtor() {
  _cached_size_ = 0;
  height_map_ = NULL;
  visibility_map_ = NULL;
  creep_ = NULL;
  power_ = NULL;
  player_id_ = NULL;
  unit_type_ = NULL;
  selected_ = NULL;
  unit_hit_points_ = NULL;
  unit_hit_points_ratio_ = NULL;
  unit_energy_ = NULL;
  unit_shields_ = NULL;
  player_relative_ = NULL;
  unit_density_aa_ = NULL;
  unit_density_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureLayers::~FeatureLayers() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.FeatureLayers)
  SharedDtor();
}

void FeatureLayers::SharedDtor() {
  if (this != default_instance_) {
    delete height_map_;
    delete visibility_map_;
    delete creep_;
    delete power_;
    delete player_id_;
    delete unit_type_;
    delete selected_;
    delete unit_hit_points_;
    delete unit_hit_points_ratio_;
    delete unit_energy_;
    delete unit_shields_;
    delete player_relative_;
    delete unit_density_aa_;
    delete unit_density_;
  }
}

void FeatureLayers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureLayers::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureLayers_descriptor_;
}

const FeatureLayers& FeatureLayers::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fspatial_2eproto();
  return *default_instance_;
}

FeatureLayers* FeatureLayers::default_instance_ = NULL;

FeatureLayers* FeatureLayers::New(::google::protobuf::Arena* arena) const {
  FeatureLayers* n = new FeatureLayers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureLayers::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.FeatureLayers)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_height_map()) {
      if (height_map_ != NULL) height_map_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_visibility_map()) {
      if (visibility_map_ != NULL) visibility_map_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_creep()) {
      if (creep_ != NULL) creep_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_power()) {
      if (power_ != NULL) power_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_unit_type()) {
      if (unit_type_ != NULL) unit_type_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_selected()) {
      if (selected_ != NULL) selected_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_unit_hit_points()) {
      if (unit_hit_points_ != NULL) unit_hit_points_->::SC2APIProtocol::ImageData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    if (has_unit_hit_points_ratio()) {
      if (unit_hit_points_ratio_ != NULL) unit_hit_points_ratio_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_unit_energy()) {
      if (unit_energy_ != NULL) unit_energy_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_unit_shields()) {
      if (unit_shields_ != NULL) unit_shields_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_player_relative()) {
      if (player_relative_ != NULL) player_relative_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_unit_density_aa()) {
      if (unit_density_aa_ != NULL) unit_density_aa_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_unit_density()) {
      if (unit_density_ != NULL) unit_density_->::SC2APIProtocol::ImageData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FeatureLayers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.FeatureLayers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ImageData height_map = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_height_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_visibility_map;
        break;
      }

      // optional .SC2APIProtocol.ImageData visibility_map = 2;
      case 2: {
        if (tag == 18) {
         parse_visibility_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visibility_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_creep;
        break;
      }

      // optional .SC2APIProtocol.ImageData creep = 3;
      case 3: {
        if (tag == 26) {
         parse_creep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creep()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_power;
        break;
      }

      // optional .SC2APIProtocol.ImageData power = 4;
      case 4: {
        if (tag == 34) {
         parse_power:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_power()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_player_id;
        break;
      }

      // optional .SC2APIProtocol.ImageData player_id = 5;
      case 5: {
        if (tag == 42) {
         parse_player_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_unit_type;
        break;
      }

      // optional .SC2APIProtocol.ImageData unit_type = 6;
      case 6: {
        if (tag == 50) {
         parse_unit_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_selected;
        break;
      }

      // optional .SC2APIProtocol.ImageData selected = 7;
      case 7: {
        if (tag == 58) {
         parse_selected:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selected()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_unit_hit_points;
        break;
      }

      // optional .SC2APIProtocol.ImageData unit_hit_points = 8;
      case 8: {
        if (tag == 66) {
         parse_unit_hit_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit_hit_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_unit_energy;
        break;
      }

      // optional .SC2APIProtocol.ImageData unit_energy = 9;
      case 9: {
        if (tag == 74) {
         parse_unit_energy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit_energy()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_unit_shields;
        break;
      }

      // optional .SC2APIProtocol.ImageData unit_shields = 10;
      case 10: {
        if (tag == 82) {
         parse_unit_shields:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit_shields()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_player_relative;
        break;
      }

      // optional .SC2APIProtocol.ImageData player_relative = 11;
      case 11: {
        if (tag == 90) {
         parse_player_relative:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_relative()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_unit_density_aa;
        break;
      }

      // optional .SC2APIProtocol.ImageData unit_density_aa = 14;
      case 14: {
        if (tag == 114) {
         parse_unit_density_aa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit_density_aa()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_unit_density;
        break;
      }

      // optional .SC2APIProtocol.ImageData unit_density = 15;
      case 15: {
        if (tag == 122) {
         parse_unit_density:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit_density()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_unit_hit_points_ratio;
        break;
      }

      // optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;
      case 17: {
        if (tag == 138) {
         parse_unit_hit_points_ratio:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit_hit_points_ratio()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.FeatureLayers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.FeatureLayers)
  return false;
#undef DO_
}

void FeatureLayers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.FeatureLayers)
  // optional .SC2APIProtocol.ImageData height_map = 1;
  if (has_height_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->height_map_, output);
  }

  // optional .SC2APIProtocol.ImageData visibility_map = 2;
  if (has_visibility_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->visibility_map_, output);
  }

  // optional .SC2APIProtocol.ImageData creep = 3;
  if (has_creep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->creep_, output);
  }

  // optional .SC2APIProtocol.ImageData power = 4;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->power_, output);
  }

  // optional .SC2APIProtocol.ImageData player_id = 5;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->player_id_, output);
  }

  // optional .SC2APIProtocol.ImageData unit_type = 6;
  if (has_unit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->unit_type_, output);
  }

  // optional .SC2APIProtocol.ImageData selected = 7;
  if (has_selected()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->selected_, output);
  }

  // optional .SC2APIProtocol.ImageData unit_hit_points = 8;
  if (has_unit_hit_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->unit_hit_points_, output);
  }

  // optional .SC2APIProtocol.ImageData unit_energy = 9;
  if (has_unit_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->unit_energy_, output);
  }

  // optional .SC2APIProtocol.ImageData unit_shields = 10;
  if (has_unit_shields()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->unit_shields_, output);
  }

  // optional .SC2APIProtocol.ImageData player_relative = 11;
  if (has_player_relative()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->player_relative_, output);
  }

  // optional .SC2APIProtocol.ImageData unit_density_aa = 14;
  if (has_unit_density_aa()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->unit_density_aa_, output);
  }

  // optional .SC2APIProtocol.ImageData unit_density = 15;
  if (has_unit_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->unit_density_, output);
  }

  // optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;
  if (has_unit_hit_points_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->unit_hit_points_ratio_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.FeatureLayers)
}

::google::protobuf::uint8* FeatureLayers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.FeatureLayers)
  // optional .SC2APIProtocol.ImageData height_map = 1;
  if (has_height_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->height_map_, false, target);
  }

  // optional .SC2APIProtocol.ImageData visibility_map = 2;
  if (has_visibility_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->visibility_map_, false, target);
  }

  // optional .SC2APIProtocol.ImageData creep = 3;
  if (has_creep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->creep_, false, target);
  }

  // optional .SC2APIProtocol.ImageData power = 4;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->power_, false, target);
  }

  // optional .SC2APIProtocol.ImageData player_id = 5;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->player_id_, false, target);
  }

  // optional .SC2APIProtocol.ImageData unit_type = 6;
  if (has_unit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->unit_type_, false, target);
  }

  // optional .SC2APIProtocol.ImageData selected = 7;
  if (has_selected()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->selected_, false, target);
  }

  // optional .SC2APIProtocol.ImageData unit_hit_points = 8;
  if (has_unit_hit_points()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->unit_hit_points_, false, target);
  }

  // optional .SC2APIProtocol.ImageData unit_energy = 9;
  if (has_unit_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->unit_energy_, false, target);
  }

  // optional .SC2APIProtocol.ImageData unit_shields = 10;
  if (has_unit_shields()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->unit_shields_, false, target);
  }

  // optional .SC2APIProtocol.ImageData player_relative = 11;
  if (has_player_relative()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->player_relative_, false, target);
  }

  // optional .SC2APIProtocol.ImageData unit_density_aa = 14;
  if (has_unit_density_aa()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->unit_density_aa_, false, target);
  }

  // optional .SC2APIProtocol.ImageData unit_density = 15;
  if (has_unit_density()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->unit_density_, false, target);
  }

  // optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;
  if (has_unit_hit_points_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->unit_hit_points_ratio_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.FeatureLayers)
  return target;
}

int FeatureLayers::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.FeatureLayers)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .SC2APIProtocol.ImageData height_map = 1;
    if (has_height_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->height_map_);
    }

    // optional .SC2APIProtocol.ImageData visibility_map = 2;
    if (has_visibility_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->visibility_map_);
    }

    // optional .SC2APIProtocol.ImageData creep = 3;
    if (has_creep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->creep_);
    }

    // optional .SC2APIProtocol.ImageData power = 4;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->power_);
    }

    // optional .SC2APIProtocol.ImageData player_id = 5;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->player_id_);
    }

    // optional .SC2APIProtocol.ImageData unit_type = 6;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unit_type_);
    }

    // optional .SC2APIProtocol.ImageData selected = 7;
    if (has_selected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->selected_);
    }

    // optional .SC2APIProtocol.ImageData unit_hit_points = 8;
    if (has_unit_hit_points()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unit_hit_points_);
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;
    if (has_unit_hit_points_ratio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unit_hit_points_ratio_);
    }

    // optional .SC2APIProtocol.ImageData unit_energy = 9;
    if (has_unit_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unit_energy_);
    }

    // optional .SC2APIProtocol.ImageData unit_shields = 10;
    if (has_unit_shields()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unit_shields_);
    }

    // optional .SC2APIProtocol.ImageData player_relative = 11;
    if (has_player_relative()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->player_relative_);
    }

    // optional .SC2APIProtocol.ImageData unit_density_aa = 14;
    if (has_unit_density_aa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unit_density_aa_);
    }

    // optional .SC2APIProtocol.ImageData unit_density = 15;
    if (has_unit_density()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unit_density_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureLayers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.FeatureLayers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FeatureLayers* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureLayers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.FeatureLayers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.FeatureLayers)
    MergeFrom(*source);
  }
}

void FeatureLayers::MergeFrom(const FeatureLayers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.FeatureLayers)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_height_map()) {
      mutable_height_map()->::SC2APIProtocol::ImageData::MergeFrom(from.height_map());
    }
    if (from.has_visibility_map()) {
      mutable_visibility_map()->::SC2APIProtocol::ImageData::MergeFrom(from.visibility_map());
    }
    if (from.has_creep()) {
      mutable_creep()->::SC2APIProtocol::ImageData::MergeFrom(from.creep());
    }
    if (from.has_power()) {
      mutable_power()->::SC2APIProtocol::ImageData::MergeFrom(from.power());
    }
    if (from.has_player_id()) {
      mutable_player_id()->::SC2APIProtocol::ImageData::MergeFrom(from.player_id());
    }
    if (from.has_unit_type()) {
      mutable_unit_type()->::SC2APIProtocol::ImageData::MergeFrom(from.unit_type());
    }
    if (from.has_selected()) {
      mutable_selected()->::SC2APIProtocol::ImageData::MergeFrom(from.selected());
    }
    if (from.has_unit_hit_points()) {
      mutable_unit_hit_points()->::SC2APIProtocol::ImageData::MergeFrom(from.unit_hit_points());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_unit_hit_points_ratio()) {
      mutable_unit_hit_points_ratio()->::SC2APIProtocol::ImageData::MergeFrom(from.unit_hit_points_ratio());
    }
    if (from.has_unit_energy()) {
      mutable_unit_energy()->::SC2APIProtocol::ImageData::MergeFrom(from.unit_energy());
    }
    if (from.has_unit_shields()) {
      mutable_unit_shields()->::SC2APIProtocol::ImageData::MergeFrom(from.unit_shields());
    }
    if (from.has_player_relative()) {
      mutable_player_relative()->::SC2APIProtocol::ImageData::MergeFrom(from.player_relative());
    }
    if (from.has_unit_density_aa()) {
      mutable_unit_density_aa()->::SC2APIProtocol::ImageData::MergeFrom(from.unit_density_aa());
    }
    if (from.has_unit_density()) {
      mutable_unit_density()->::SC2APIProtocol::ImageData::MergeFrom(from.unit_density());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FeatureLayers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.FeatureLayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureLayers::CopyFrom(const FeatureLayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.FeatureLayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureLayers::IsInitialized() const {

  return true;
}

void FeatureLayers::Swap(FeatureLayers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureLayers::InternalSwap(FeatureLayers* other) {
  std::swap(height_map_, other->height_map_);
  std::swap(visibility_map_, other->visibility_map_);
  std::swap(creep_, other->creep_);
  std::swap(power_, other->power_);
  std::swap(player_id_, other->player_id_);
  std::swap(unit_type_, other->unit_type_);
  std::swap(selected_, other->selected_);
  std::swap(unit_hit_points_, other->unit_hit_points_);
  std::swap(unit_hit_points_ratio_, other->unit_hit_points_ratio_);
  std::swap(unit_energy_, other->unit_energy_);
  std::swap(unit_shields_, other->unit_shields_);
  std::swap(player_relative_, other->player_relative_);
  std::swap(unit_density_aa_, other->unit_density_aa_);
  std::swap(unit_density_, other->unit_density_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureLayers::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureLayers_descriptor_;
  metadata.reflection = FeatureLayers_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureLayers

// optional .SC2APIProtocol.ImageData height_map = 1;
bool FeatureLayers::has_height_map() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FeatureLayers::set_has_height_map() {
  _has_bits_[0] |= 0x00000001u;
}
void FeatureLayers::clear_has_height_map() {
  _has_bits_[0] &= ~0x00000001u;
}
void FeatureLayers::clear_height_map() {
  if (height_map_ != NULL) height_map_->::SC2APIProtocol::ImageData::Clear();
  clear_has_height_map();
}
const ::SC2APIProtocol::ImageData& FeatureLayers::height_map() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayers.height_map)
  return height_map_ != NULL ? *height_map_ : *default_instance_->height_map_;
}
::SC2APIProtocol::ImageData* FeatureLayers::mutable_height_map() {
  set_has_height_map();
  if (height_map_ == NULL) {
    height_map_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayers.height_map)
  return height_map_;
}
::SC2APIProtocol::ImageData* FeatureLayers::release_height_map() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayers.height_map)
  clear_has_height_map();
  ::SC2APIProtocol::ImageData* temp = height_map_;
  height_map_ = NULL;
  return temp;
}
void FeatureLayers::set_allocated_height_map(::SC2APIProtocol::ImageData* height_map) {
  delete height_map_;
  height_map_ = height_map;
  if (height_map) {
    set_has_height_map();
  } else {
    clear_has_height_map();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayers.height_map)
}

// optional .SC2APIProtocol.ImageData visibility_map = 2;
bool FeatureLayers::has_visibility_map() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FeatureLayers::set_has_visibility_map() {
  _has_bits_[0] |= 0x00000002u;
}
void FeatureLayers::clear_has_visibility_map() {
  _has_bits_[0] &= ~0x00000002u;
}
void FeatureLayers::clear_visibility_map() {
  if (visibility_map_ != NULL) visibility_map_->::SC2APIProtocol::ImageData::Clear();
  clear_has_visibility_map();
}
const ::SC2APIProtocol::ImageData& FeatureLayers::visibility_map() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayers.visibility_map)
  return visibility_map_ != NULL ? *visibility_map_ : *default_instance_->visibility_map_;
}
::SC2APIProtocol::ImageData* FeatureLayers::mutable_visibility_map() {
  set_has_visibility_map();
  if (visibility_map_ == NULL) {
    visibility_map_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayers.visibility_map)
  return visibility_map_;
}
::SC2APIProtocol::ImageData* FeatureLayers::release_visibility_map() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayers.visibility_map)
  clear_has_visibility_map();
  ::SC2APIProtocol::ImageData* temp = visibility_map_;
  visibility_map_ = NULL;
  return temp;
}
void FeatureLayers::set_allocated_visibility_map(::SC2APIProtocol::ImageData* visibility_map) {
  delete visibility_map_;
  visibility_map_ = visibility_map;
  if (visibility_map) {
    set_has_visibility_map();
  } else {
    clear_has_visibility_map();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayers.visibility_map)
}

// optional .SC2APIProtocol.ImageData creep = 3;
bool FeatureLayers::has_creep() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FeatureLayers::set_has_creep() {
  _has_bits_[0] |= 0x00000004u;
}
void FeatureLayers::clear_has_creep() {
  _has_bits_[0] &= ~0x00000004u;
}
void FeatureLayers::clear_creep() {
  if (creep_ != NULL) creep_->::SC2APIProtocol::ImageData::Clear();
  clear_has_creep();
}
const ::SC2APIProtocol::ImageData& FeatureLayers::creep() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayers.creep)
  return creep_ != NULL ? *creep_ : *default_instance_->creep_;
}
::SC2APIProtocol::ImageData* FeatureLayers::mutable_creep() {
  set_has_creep();
  if (creep_ == NULL) {
    creep_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayers.creep)
  return creep_;
}
::SC2APIProtocol::ImageData* FeatureLayers::release_creep() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayers.creep)
  clear_has_creep();
  ::SC2APIProtocol::ImageData* temp = creep_;
  creep_ = NULL;
  return temp;
}
void FeatureLayers::set_allocated_creep(::SC2APIProtocol::ImageData* creep) {
  delete creep_;
  creep_ = creep;
  if (creep) {
    set_has_creep();
  } else {
    clear_has_creep();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayers.creep)
}

// optional .SC2APIProtocol.ImageData power = 4;
bool FeatureLayers::has_power() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FeatureLayers::set_has_power() {
  _has_bits_[0] |= 0x00000008u;
}
void FeatureLayers::clear_has_power() {
  _has_bits_[0] &= ~0x00000008u;
}
void FeatureLayers::clear_power() {
  if (power_ != NULL) power_->::SC2APIProtocol::ImageData::Clear();
  clear_has_power();
}
const ::SC2APIProtocol::ImageData& FeatureLayers::power() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayers.power)
  return power_ != NULL ? *power_ : *default_instance_->power_;
}
::SC2APIProtocol::ImageData* FeatureLayers::mutable_power() {
  set_has_power();
  if (power_ == NULL) {
    power_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayers.power)
  return power_;
}
::SC2APIProtocol::ImageData* FeatureLayers::release_power() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayers.power)
  clear_has_power();
  ::SC2APIProtocol::ImageData* temp = power_;
  power_ = NULL;
  return temp;
}
void FeatureLayers::set_allocated_power(::SC2APIProtocol::ImageData* power) {
  delete power_;
  power_ = power;
  if (power) {
    set_has_power();
  } else {
    clear_has_power();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayers.power)
}

// optional .SC2APIProtocol.ImageData player_id = 5;
bool FeatureLayers::has_player_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FeatureLayers::set_has_player_id() {
  _has_bits_[0] |= 0x00000010u;
}
void FeatureLayers::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void FeatureLayers::clear_player_id() {
  if (player_id_ != NULL) player_id_->::SC2APIProtocol::ImageData::Clear();
  clear_has_player_id();
}
const ::SC2APIProtocol::ImageData& FeatureLayers::player_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayers.player_id)
  return player_id_ != NULL ? *player_id_ : *default_instance_->player_id_;
}
::SC2APIProtocol::ImageData* FeatureLayers::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayers.player_id)
  return player_id_;
}
::SC2APIProtocol::ImageData* FeatureLayers::release_player_id() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayers.player_id)
  clear_has_player_id();
  ::SC2APIProtocol::ImageData* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void FeatureLayers::set_allocated_player_id(::SC2APIProtocol::ImageData* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayers.player_id)
}

// optional .SC2APIProtocol.ImageData unit_type = 6;
bool FeatureLayers::has_unit_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FeatureLayers::set_has_unit_type() {
  _has_bits_[0] |= 0x00000020u;
}
void FeatureLayers::clear_has_unit_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void FeatureLayers::clear_unit_type() {
  if (unit_type_ != NULL) unit_type_->::SC2APIProtocol::ImageData::Clear();
  clear_has_unit_type();
}
const ::SC2APIProtocol::ImageData& FeatureLayers::unit_type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayers.unit_type)
  return unit_type_ != NULL ? *unit_type_ : *default_instance_->unit_type_;
}
::SC2APIProtocol::ImageData* FeatureLayers::mutable_unit_type() {
  set_has_unit_type();
  if (unit_type_ == NULL) {
    unit_type_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayers.unit_type)
  return unit_type_;
}
::SC2APIProtocol::ImageData* FeatureLayers::release_unit_type() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayers.unit_type)
  clear_has_unit_type();
  ::SC2APIProtocol::ImageData* temp = unit_type_;
  unit_type_ = NULL;
  return temp;
}
void FeatureLayers::set_allocated_unit_type(::SC2APIProtocol::ImageData* unit_type) {
  delete unit_type_;
  unit_type_ = unit_type;
  if (unit_type) {
    set_has_unit_type();
  } else {
    clear_has_unit_type();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayers.unit_type)
}

// optional .SC2APIProtocol.ImageData selected = 7;
bool FeatureLayers::has_selected() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FeatureLayers::set_has_selected() {
  _has_bits_[0] |= 0x00000040u;
}
void FeatureLayers::clear_has_selected() {
  _has_bits_[0] &= ~0x00000040u;
}
void FeatureLayers::clear_selected() {
  if (selected_ != NULL) selected_->::SC2APIProtocol::ImageData::Clear();
  clear_has_selected();
}
const ::SC2APIProtocol::ImageData& FeatureLayers::selected() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayers.selected)
  return selected_ != NULL ? *selected_ : *default_instance_->selected_;
}
::SC2APIProtocol::ImageData* FeatureLayers::mutable_selected() {
  set_has_selected();
  if (selected_ == NULL) {
    selected_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayers.selected)
  return selected_;
}
::SC2APIProtocol::ImageData* FeatureLayers::release_selected() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayers.selected)
  clear_has_selected();
  ::SC2APIProtocol::ImageData* temp = selected_;
  selected_ = NULL;
  return temp;
}
void FeatureLayers::set_allocated_selected(::SC2APIProtocol::ImageData* selected) {
  delete selected_;
  selected_ = selected;
  if (selected) {
    set_has_selected();
  } else {
    clear_has_selected();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayers.selected)
}

// optional .SC2APIProtocol.ImageData unit_hit_points = 8;
bool FeatureLayers::has_unit_hit_points() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FeatureLayers::set_has_unit_hit_points() {
  _has_bits_[0] |= 0x00000080u;
}
void FeatureLayers::clear_has_unit_hit_points() {
  _has_bits_[0] &= ~0x00000080u;
}
void FeatureLayers::clear_unit_hit_points() {
  if (unit_hit_points_ != NULL) unit_hit_points_->::SC2APIProtocol::ImageData::Clear();
  clear_has_unit_hit_points();
}
const ::SC2APIProtocol::ImageData& FeatureLayers::unit_hit_points() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayers.unit_hit_points)
  return unit_hit_points_ != NULL ? *unit_hit_points_ : *default_instance_->unit_hit_points_;
}
::SC2APIProtocol::ImageData* FeatureLayers::mutable_unit_hit_points() {
  set_has_unit_hit_points();
  if (unit_hit_points_ == NULL) {
    unit_hit_points_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayers.unit_hit_points)
  return unit_hit_points_;
}
::SC2APIProtocol::ImageData* FeatureLayers::release_unit_hit_points() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayers.unit_hit_points)
  clear_has_unit_hit_points();
  ::SC2APIProtocol::ImageData* temp = unit_hit_points_;
  unit_hit_points_ = NULL;
  return temp;
}
void FeatureLayers::set_allocated_unit_hit_points(::SC2APIProtocol::ImageData* unit_hit_points) {
  delete unit_hit_points_;
  unit_hit_points_ = unit_hit_points;
  if (unit_hit_points) {
    set_has_unit_hit_points();
  } else {
    clear_has_unit_hit_points();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayers.unit_hit_points)
}

// optional .SC2APIProtocol.ImageData unit_hit_points_ratio = 17;
bool FeatureLayers::has_unit_hit_points_ratio() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FeatureLayers::set_has_unit_hit_points_ratio() {
  _has_bits_[0] |= 0x00000100u;
}
void FeatureLayers::clear_has_unit_hit_points_ratio() {
  _has_bits_[0] &= ~0x00000100u;
}
void FeatureLayers::clear_unit_hit_points_ratio() {
  if (unit_hit_points_ratio_ != NULL) unit_hit_points_ratio_->::SC2APIProtocol::ImageData::Clear();
  clear_has_unit_hit_points_ratio();
}
const ::SC2APIProtocol::ImageData& FeatureLayers::unit_hit_points_ratio() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayers.unit_hit_points_ratio)
  return unit_hit_points_ratio_ != NULL ? *unit_hit_points_ratio_ : *default_instance_->unit_hit_points_ratio_;
}
::SC2APIProtocol::ImageData* FeatureLayers::mutable_unit_hit_points_ratio() {
  set_has_unit_hit_points_ratio();
  if (unit_hit_points_ratio_ == NULL) {
    unit_hit_points_ratio_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayers.unit_hit_points_ratio)
  return unit_hit_points_ratio_;
}
::SC2APIProtocol::ImageData* FeatureLayers::release_unit_hit_points_ratio() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayers.unit_hit_points_ratio)
  clear_has_unit_hit_points_ratio();
  ::SC2APIProtocol::ImageData* temp = unit_hit_points_ratio_;
  unit_hit_points_ratio_ = NULL;
  return temp;
}
void FeatureLayers::set_allocated_unit_hit_points_ratio(::SC2APIProtocol::ImageData* unit_hit_points_ratio) {
  delete unit_hit_points_ratio_;
  unit_hit_points_ratio_ = unit_hit_points_ratio;
  if (unit_hit_points_ratio) {
    set_has_unit_hit_points_ratio();
  } else {
    clear_has_unit_hit_points_ratio();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayers.unit_hit_points_ratio)
}

// optional .SC2APIProtocol.ImageData unit_energy = 9;
bool FeatureLayers::has_unit_energy() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FeatureLayers::set_has_unit_energy() {
  _has_bits_[0] |= 0x00000200u;
}
void FeatureLayers::clear_has_unit_energy() {
  _has_bits_[0] &= ~0x00000200u;
}
void FeatureLayers::clear_unit_energy() {
  if (unit_energy_ != NULL) unit_energy_->::SC2APIProtocol::ImageData::Clear();
  clear_has_unit_energy();
}
const ::SC2APIProtocol::ImageData& FeatureLayers::unit_energy() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayers.unit_energy)
  return unit_energy_ != NULL ? *unit_energy_ : *default_instance_->unit_energy_;
}
::SC2APIProtocol::ImageData* FeatureLayers::mutable_unit_energy() {
  set_has_unit_energy();
  if (unit_energy_ == NULL) {
    unit_energy_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayers.unit_energy)
  return unit_energy_;
}
::SC2APIProtocol::ImageData* FeatureLayers::release_unit_energy() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayers.unit_energy)
  clear_has_unit_energy();
  ::SC2APIProtocol::ImageData* temp = unit_energy_;
  unit_energy_ = NULL;
  return temp;
}
void FeatureLayers::set_allocated_unit_energy(::SC2APIProtocol::ImageData* unit_energy) {
  delete unit_energy_;
  unit_energy_ = unit_energy;
  if (unit_energy) {
    set_has_unit_energy();
  } else {
    clear_has_unit_energy();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayers.unit_energy)
}

// optional .SC2APIProtocol.ImageData unit_shields = 10;
bool FeatureLayers::has_unit_shields() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FeatureLayers::set_has_unit_shields() {
  _has_bits_[0] |= 0x00000400u;
}
void FeatureLayers::clear_has_unit_shields() {
  _has_bits_[0] &= ~0x00000400u;
}
void FeatureLayers::clear_unit_shields() {
  if (unit_shields_ != NULL) unit_shields_->::SC2APIProtocol::ImageData::Clear();
  clear_has_unit_shields();
}
const ::SC2APIProtocol::ImageData& FeatureLayers::unit_shields() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayers.unit_shields)
  return unit_shields_ != NULL ? *unit_shields_ : *default_instance_->unit_shields_;
}
::SC2APIProtocol::ImageData* FeatureLayers::mutable_unit_shields() {
  set_has_unit_shields();
  if (unit_shields_ == NULL) {
    unit_shields_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayers.unit_shields)
  return unit_shields_;
}
::SC2APIProtocol::ImageData* FeatureLayers::release_unit_shields() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayers.unit_shields)
  clear_has_unit_shields();
  ::SC2APIProtocol::ImageData* temp = unit_shields_;
  unit_shields_ = NULL;
  return temp;
}
void FeatureLayers::set_allocated_unit_shields(::SC2APIProtocol::ImageData* unit_shields) {
  delete unit_shields_;
  unit_shields_ = unit_shields;
  if (unit_shields) {
    set_has_unit_shields();
  } else {
    clear_has_unit_shields();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayers.unit_shields)
}

// optional .SC2APIProtocol.ImageData player_relative = 11;
bool FeatureLayers::has_player_relative() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void FeatureLayers::set_has_player_relative() {
  _has_bits_[0] |= 0x00000800u;
}
void FeatureLayers::clear_has_player_relative() {
  _has_bits_[0] &= ~0x00000800u;
}
void FeatureLayers::clear_player_relative() {
  if (player_relative_ != NULL) player_relative_->::SC2APIProtocol::ImageData::Clear();
  clear_has_player_relative();
}
const ::SC2APIProtocol::ImageData& FeatureLayers::player_relative() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayers.player_relative)
  return player_relative_ != NULL ? *player_relative_ : *default_instance_->player_relative_;
}
::SC2APIProtocol::ImageData* FeatureLayers::mutable_player_relative() {
  set_has_player_relative();
  if (player_relative_ == NULL) {
    player_relative_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayers.player_relative)
  return player_relative_;
}
::SC2APIProtocol::ImageData* FeatureLayers::release_player_relative() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayers.player_relative)
  clear_has_player_relative();
  ::SC2APIProtocol::ImageData* temp = player_relative_;
  player_relative_ = NULL;
  return temp;
}
void FeatureLayers::set_allocated_player_relative(::SC2APIProtocol::ImageData* player_relative) {
  delete player_relative_;
  player_relative_ = player_relative;
  if (player_relative) {
    set_has_player_relative();
  } else {
    clear_has_player_relative();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayers.player_relative)
}

// optional .SC2APIProtocol.ImageData unit_density_aa = 14;
bool FeatureLayers::has_unit_density_aa() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void FeatureLayers::set_has_unit_density_aa() {
  _has_bits_[0] |= 0x00001000u;
}
void FeatureLayers::clear_has_unit_density_aa() {
  _has_bits_[0] &= ~0x00001000u;
}
void FeatureLayers::clear_unit_density_aa() {
  if (unit_density_aa_ != NULL) unit_density_aa_->::SC2APIProtocol::ImageData::Clear();
  clear_has_unit_density_aa();
}
const ::SC2APIProtocol::ImageData& FeatureLayers::unit_density_aa() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayers.unit_density_aa)
  return unit_density_aa_ != NULL ? *unit_density_aa_ : *default_instance_->unit_density_aa_;
}
::SC2APIProtocol::ImageData* FeatureLayers::mutable_unit_density_aa() {
  set_has_unit_density_aa();
  if (unit_density_aa_ == NULL) {
    unit_density_aa_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayers.unit_density_aa)
  return unit_density_aa_;
}
::SC2APIProtocol::ImageData* FeatureLayers::release_unit_density_aa() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayers.unit_density_aa)
  clear_has_unit_density_aa();
  ::SC2APIProtocol::ImageData* temp = unit_density_aa_;
  unit_density_aa_ = NULL;
  return temp;
}
void FeatureLayers::set_allocated_unit_density_aa(::SC2APIProtocol::ImageData* unit_density_aa) {
  delete unit_density_aa_;
  unit_density_aa_ = unit_density_aa;
  if (unit_density_aa) {
    set_has_unit_density_aa();
  } else {
    clear_has_unit_density_aa();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayers.unit_density_aa)
}

// optional .SC2APIProtocol.ImageData unit_density = 15;
bool FeatureLayers::has_unit_density() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void FeatureLayers::set_has_unit_density() {
  _has_bits_[0] |= 0x00002000u;
}
void FeatureLayers::clear_has_unit_density() {
  _has_bits_[0] &= ~0x00002000u;
}
void FeatureLayers::clear_unit_density() {
  if (unit_density_ != NULL) unit_density_->::SC2APIProtocol::ImageData::Clear();
  clear_has_unit_density();
}
const ::SC2APIProtocol::ImageData& FeatureLayers::unit_density() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayers.unit_density)
  return unit_density_ != NULL ? *unit_density_ : *default_instance_->unit_density_;
}
::SC2APIProtocol::ImageData* FeatureLayers::mutable_unit_density() {
  set_has_unit_density();
  if (unit_density_ == NULL) {
    unit_density_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayers.unit_density)
  return unit_density_;
}
::SC2APIProtocol::ImageData* FeatureLayers::release_unit_density() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayers.unit_density)
  clear_has_unit_density();
  ::SC2APIProtocol::ImageData* temp = unit_density_;
  unit_density_ = NULL;
  return temp;
}
void FeatureLayers::set_allocated_unit_density(::SC2APIProtocol::ImageData* unit_density) {
  delete unit_density_;
  unit_density_ = unit_density;
  if (unit_density) {
    set_has_unit_density();
  } else {
    clear_has_unit_density();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayers.unit_density)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureLayersMinimap::kHeightMapFieldNumber;
const int FeatureLayersMinimap::kVisibilityMapFieldNumber;
const int FeatureLayersMinimap::kCreepFieldNumber;
const int FeatureLayersMinimap::kCameraFieldNumber;
const int FeatureLayersMinimap::kPlayerIdFieldNumber;
const int FeatureLayersMinimap::kPlayerRelativeFieldNumber;
const int FeatureLayersMinimap::kSelectedFieldNumber;
const int FeatureLayersMinimap::kUnitTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureLayersMinimap::FeatureLayersMinimap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.FeatureLayersMinimap)
}

void FeatureLayersMinimap::InitAsDefaultInstance() {
  height_map_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  visibility_map_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  creep_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  camera_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  player_id_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  player_relative_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  selected_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  unit_type_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
}

FeatureLayersMinimap::FeatureLayersMinimap(const FeatureLayersMinimap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.FeatureLayersMinimap)
}

void FeatureLayersMinimap::SharedCtor() {
  _cached_size_ = 0;
  height_map_ = NULL;
  visibility_map_ = NULL;
  creep_ = NULL;
  camera_ = NULL;
  player_id_ = NULL;
  player_relative_ = NULL;
  selected_ = NULL;
  unit_type_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureLayersMinimap::~FeatureLayersMinimap() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.FeatureLayersMinimap)
  SharedDtor();
}

void FeatureLayersMinimap::SharedDtor() {
  if (this != default_instance_) {
    delete height_map_;
    delete visibility_map_;
    delete creep_;
    delete camera_;
    delete player_id_;
    delete player_relative_;
    delete selected_;
    delete unit_type_;
  }
}

void FeatureLayersMinimap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureLayersMinimap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FeatureLayersMinimap_descriptor_;
}

const FeatureLayersMinimap& FeatureLayersMinimap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fspatial_2eproto();
  return *default_instance_;
}

FeatureLayersMinimap* FeatureLayersMinimap::default_instance_ = NULL;

FeatureLayersMinimap* FeatureLayersMinimap::New(::google::protobuf::Arena* arena) const {
  FeatureLayersMinimap* n = new FeatureLayersMinimap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureLayersMinimap::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.FeatureLayersMinimap)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_height_map()) {
      if (height_map_ != NULL) height_map_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_visibility_map()) {
      if (visibility_map_ != NULL) visibility_map_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_creep()) {
      if (creep_ != NULL) creep_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_camera()) {
      if (camera_ != NULL) camera_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_player_relative()) {
      if (player_relative_ != NULL) player_relative_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_selected()) {
      if (selected_ != NULL) selected_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_unit_type()) {
      if (unit_type_ != NULL) unit_type_->::SC2APIProtocol::ImageData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FeatureLayersMinimap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.FeatureLayersMinimap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ImageData height_map = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_height_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_visibility_map;
        break;
      }

      // optional .SC2APIProtocol.ImageData visibility_map = 2;
      case 2: {
        if (tag == 18) {
         parse_visibility_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visibility_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_creep;
        break;
      }

      // optional .SC2APIProtocol.ImageData creep = 3;
      case 3: {
        if (tag == 26) {
         parse_creep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creep()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_camera;
        break;
      }

      // optional .SC2APIProtocol.ImageData camera = 4;
      case 4: {
        if (tag == 34) {
         parse_camera:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_player_id;
        break;
      }

      // optional .SC2APIProtocol.ImageData player_id = 5;
      case 5: {
        if (tag == 42) {
         parse_player_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_player_relative;
        break;
      }

      // optional .SC2APIProtocol.ImageData player_relative = 6;
      case 6: {
        if (tag == 50) {
         parse_player_relative:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_relative()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_selected;
        break;
      }

      // optional .SC2APIProtocol.ImageData selected = 7;
      case 7: {
        if (tag == 58) {
         parse_selected:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selected()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_unit_type;
        break;
      }

      // optional .SC2APIProtocol.ImageData unit_type = 8;
      case 8: {
        if (tag == 66) {
         parse_unit_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.FeatureLayersMinimap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.FeatureLayersMinimap)
  return false;
#undef DO_
}

void FeatureLayersMinimap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.FeatureLayersMinimap)
  // optional .SC2APIProtocol.ImageData height_map = 1;
  if (has_height_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->height_map_, output);
  }

  // optional .SC2APIProtocol.ImageData visibility_map = 2;
  if (has_visibility_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->visibility_map_, output);
  }

  // optional .SC2APIProtocol.ImageData creep = 3;
  if (has_creep()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->creep_, output);
  }

  // optional .SC2APIProtocol.ImageData camera = 4;
  if (has_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->camera_, output);
  }

  // optional .SC2APIProtocol.ImageData player_id = 5;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->player_id_, output);
  }

  // optional .SC2APIProtocol.ImageData player_relative = 6;
  if (has_player_relative()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->player_relative_, output);
  }

  // optional .SC2APIProtocol.ImageData selected = 7;
  if (has_selected()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->selected_, output);
  }

  // optional .SC2APIProtocol.ImageData unit_type = 8;
  if (has_unit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->unit_type_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.FeatureLayersMinimap)
}

::google::protobuf::uint8* FeatureLayersMinimap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.FeatureLayersMinimap)
  // optional .SC2APIProtocol.ImageData height_map = 1;
  if (has_height_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->height_map_, false, target);
  }

  // optional .SC2APIProtocol.ImageData visibility_map = 2;
  if (has_visibility_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->visibility_map_, false, target);
  }

  // optional .SC2APIProtocol.ImageData creep = 3;
  if (has_creep()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->creep_, false, target);
  }

  // optional .SC2APIProtocol.ImageData camera = 4;
  if (has_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->camera_, false, target);
  }

  // optional .SC2APIProtocol.ImageData player_id = 5;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->player_id_, false, target);
  }

  // optional .SC2APIProtocol.ImageData player_relative = 6;
  if (has_player_relative()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->player_relative_, false, target);
  }

  // optional .SC2APIProtocol.ImageData selected = 7;
  if (has_selected()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->selected_, false, target);
  }

  // optional .SC2APIProtocol.ImageData unit_type = 8;
  if (has_unit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->unit_type_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.FeatureLayersMinimap)
  return target;
}

int FeatureLayersMinimap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.FeatureLayersMinimap)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .SC2APIProtocol.ImageData height_map = 1;
    if (has_height_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->height_map_);
    }

    // optional .SC2APIProtocol.ImageData visibility_map = 2;
    if (has_visibility_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->visibility_map_);
    }

    // optional .SC2APIProtocol.ImageData creep = 3;
    if (has_creep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->creep_);
    }

    // optional .SC2APIProtocol.ImageData camera = 4;
    if (has_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->camera_);
    }

    // optional .SC2APIProtocol.ImageData player_id = 5;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->player_id_);
    }

    // optional .SC2APIProtocol.ImageData player_relative = 6;
    if (has_player_relative()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->player_relative_);
    }

    // optional .SC2APIProtocol.ImageData selected = 7;
    if (has_selected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->selected_);
    }

    // optional .SC2APIProtocol.ImageData unit_type = 8;
    if (has_unit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->unit_type_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureLayersMinimap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.FeatureLayersMinimap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FeatureLayersMinimap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureLayersMinimap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.FeatureLayersMinimap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.FeatureLayersMinimap)
    MergeFrom(*source);
  }
}

void FeatureLayersMinimap::MergeFrom(const FeatureLayersMinimap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.FeatureLayersMinimap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_height_map()) {
      mutable_height_map()->::SC2APIProtocol::ImageData::MergeFrom(from.height_map());
    }
    if (from.has_visibility_map()) {
      mutable_visibility_map()->::SC2APIProtocol::ImageData::MergeFrom(from.visibility_map());
    }
    if (from.has_creep()) {
      mutable_creep()->::SC2APIProtocol::ImageData::MergeFrom(from.creep());
    }
    if (from.has_camera()) {
      mutable_camera()->::SC2APIProtocol::ImageData::MergeFrom(from.camera());
    }
    if (from.has_player_id()) {
      mutable_player_id()->::SC2APIProtocol::ImageData::MergeFrom(from.player_id());
    }
    if (from.has_player_relative()) {
      mutable_player_relative()->::SC2APIProtocol::ImageData::MergeFrom(from.player_relative());
    }
    if (from.has_selected()) {
      mutable_selected()->::SC2APIProtocol::ImageData::MergeFrom(from.selected());
    }
    if (from.has_unit_type()) {
      mutable_unit_type()->::SC2APIProtocol::ImageData::MergeFrom(from.unit_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FeatureLayersMinimap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.FeatureLayersMinimap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureLayersMinimap::CopyFrom(const FeatureLayersMinimap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.FeatureLayersMinimap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureLayersMinimap::IsInitialized() const {

  return true;
}

void FeatureLayersMinimap::Swap(FeatureLayersMinimap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureLayersMinimap::InternalSwap(FeatureLayersMinimap* other) {
  std::swap(height_map_, other->height_map_);
  std::swap(visibility_map_, other->visibility_map_);
  std::swap(creep_, other->creep_);
  std::swap(camera_, other->camera_);
  std::swap(player_id_, other->player_id_);
  std::swap(player_relative_, other->player_relative_);
  std::swap(selected_, other->selected_);
  std::swap(unit_type_, other->unit_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureLayersMinimap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FeatureLayersMinimap_descriptor_;
  metadata.reflection = FeatureLayersMinimap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureLayersMinimap

// optional .SC2APIProtocol.ImageData height_map = 1;
bool FeatureLayersMinimap::has_height_map() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FeatureLayersMinimap::set_has_height_map() {
  _has_bits_[0] |= 0x00000001u;
}
void FeatureLayersMinimap::clear_has_height_map() {
  _has_bits_[0] &= ~0x00000001u;
}
void FeatureLayersMinimap::clear_height_map() {
  if (height_map_ != NULL) height_map_->::SC2APIProtocol::ImageData::Clear();
  clear_has_height_map();
}
const ::SC2APIProtocol::ImageData& FeatureLayersMinimap::height_map() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayersMinimap.height_map)
  return height_map_ != NULL ? *height_map_ : *default_instance_->height_map_;
}
::SC2APIProtocol::ImageData* FeatureLayersMinimap::mutable_height_map() {
  set_has_height_map();
  if (height_map_ == NULL) {
    height_map_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayersMinimap.height_map)
  return height_map_;
}
::SC2APIProtocol::ImageData* FeatureLayersMinimap::release_height_map() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayersMinimap.height_map)
  clear_has_height_map();
  ::SC2APIProtocol::ImageData* temp = height_map_;
  height_map_ = NULL;
  return temp;
}
void FeatureLayersMinimap::set_allocated_height_map(::SC2APIProtocol::ImageData* height_map) {
  delete height_map_;
  height_map_ = height_map;
  if (height_map) {
    set_has_height_map();
  } else {
    clear_has_height_map();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayersMinimap.height_map)
}

// optional .SC2APIProtocol.ImageData visibility_map = 2;
bool FeatureLayersMinimap::has_visibility_map() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FeatureLayersMinimap::set_has_visibility_map() {
  _has_bits_[0] |= 0x00000002u;
}
void FeatureLayersMinimap::clear_has_visibility_map() {
  _has_bits_[0] &= ~0x00000002u;
}
void FeatureLayersMinimap::clear_visibility_map() {
  if (visibility_map_ != NULL) visibility_map_->::SC2APIProtocol::ImageData::Clear();
  clear_has_visibility_map();
}
const ::SC2APIProtocol::ImageData& FeatureLayersMinimap::visibility_map() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayersMinimap.visibility_map)
  return visibility_map_ != NULL ? *visibility_map_ : *default_instance_->visibility_map_;
}
::SC2APIProtocol::ImageData* FeatureLayersMinimap::mutable_visibility_map() {
  set_has_visibility_map();
  if (visibility_map_ == NULL) {
    visibility_map_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayersMinimap.visibility_map)
  return visibility_map_;
}
::SC2APIProtocol::ImageData* FeatureLayersMinimap::release_visibility_map() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayersMinimap.visibility_map)
  clear_has_visibility_map();
  ::SC2APIProtocol::ImageData* temp = visibility_map_;
  visibility_map_ = NULL;
  return temp;
}
void FeatureLayersMinimap::set_allocated_visibility_map(::SC2APIProtocol::ImageData* visibility_map) {
  delete visibility_map_;
  visibility_map_ = visibility_map;
  if (visibility_map) {
    set_has_visibility_map();
  } else {
    clear_has_visibility_map();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayersMinimap.visibility_map)
}

// optional .SC2APIProtocol.ImageData creep = 3;
bool FeatureLayersMinimap::has_creep() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FeatureLayersMinimap::set_has_creep() {
  _has_bits_[0] |= 0x00000004u;
}
void FeatureLayersMinimap::clear_has_creep() {
  _has_bits_[0] &= ~0x00000004u;
}
void FeatureLayersMinimap::clear_creep() {
  if (creep_ != NULL) creep_->::SC2APIProtocol::ImageData::Clear();
  clear_has_creep();
}
const ::SC2APIProtocol::ImageData& FeatureLayersMinimap::creep() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayersMinimap.creep)
  return creep_ != NULL ? *creep_ : *default_instance_->creep_;
}
::SC2APIProtocol::ImageData* FeatureLayersMinimap::mutable_creep() {
  set_has_creep();
  if (creep_ == NULL) {
    creep_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayersMinimap.creep)
  return creep_;
}
::SC2APIProtocol::ImageData* FeatureLayersMinimap::release_creep() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayersMinimap.creep)
  clear_has_creep();
  ::SC2APIProtocol::ImageData* temp = creep_;
  creep_ = NULL;
  return temp;
}
void FeatureLayersMinimap::set_allocated_creep(::SC2APIProtocol::ImageData* creep) {
  delete creep_;
  creep_ = creep;
  if (creep) {
    set_has_creep();
  } else {
    clear_has_creep();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayersMinimap.creep)
}

// optional .SC2APIProtocol.ImageData camera = 4;
bool FeatureLayersMinimap::has_camera() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FeatureLayersMinimap::set_has_camera() {
  _has_bits_[0] |= 0x00000008u;
}
void FeatureLayersMinimap::clear_has_camera() {
  _has_bits_[0] &= ~0x00000008u;
}
void FeatureLayersMinimap::clear_camera() {
  if (camera_ != NULL) camera_->::SC2APIProtocol::ImageData::Clear();
  clear_has_camera();
}
const ::SC2APIProtocol::ImageData& FeatureLayersMinimap::camera() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayersMinimap.camera)
  return camera_ != NULL ? *camera_ : *default_instance_->camera_;
}
::SC2APIProtocol::ImageData* FeatureLayersMinimap::mutable_camera() {
  set_has_camera();
  if (camera_ == NULL) {
    camera_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayersMinimap.camera)
  return camera_;
}
::SC2APIProtocol::ImageData* FeatureLayersMinimap::release_camera() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayersMinimap.camera)
  clear_has_camera();
  ::SC2APIProtocol::ImageData* temp = camera_;
  camera_ = NULL;
  return temp;
}
void FeatureLayersMinimap::set_allocated_camera(::SC2APIProtocol::ImageData* camera) {
  delete camera_;
  camera_ = camera;
  if (camera) {
    set_has_camera();
  } else {
    clear_has_camera();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayersMinimap.camera)
}

// optional .SC2APIProtocol.ImageData player_id = 5;
bool FeatureLayersMinimap::has_player_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FeatureLayersMinimap::set_has_player_id() {
  _has_bits_[0] |= 0x00000010u;
}
void FeatureLayersMinimap::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void FeatureLayersMinimap::clear_player_id() {
  if (player_id_ != NULL) player_id_->::SC2APIProtocol::ImageData::Clear();
  clear_has_player_id();
}
const ::SC2APIProtocol::ImageData& FeatureLayersMinimap::player_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayersMinimap.player_id)
  return player_id_ != NULL ? *player_id_ : *default_instance_->player_id_;
}
::SC2APIProtocol::ImageData* FeatureLayersMinimap::mutable_player_id() {
  set_has_player_id();
  if (player_id_ == NULL) {
    player_id_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayersMinimap.player_id)
  return player_id_;
}
::SC2APIProtocol::ImageData* FeatureLayersMinimap::release_player_id() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayersMinimap.player_id)
  clear_has_player_id();
  ::SC2APIProtocol::ImageData* temp = player_id_;
  player_id_ = NULL;
  return temp;
}
void FeatureLayersMinimap::set_allocated_player_id(::SC2APIProtocol::ImageData* player_id) {
  delete player_id_;
  player_id_ = player_id;
  if (player_id) {
    set_has_player_id();
  } else {
    clear_has_player_id();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayersMinimap.player_id)
}

// optional .SC2APIProtocol.ImageData player_relative = 6;
bool FeatureLayersMinimap::has_player_relative() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FeatureLayersMinimap::set_has_player_relative() {
  _has_bits_[0] |= 0x00000020u;
}
void FeatureLayersMinimap::clear_has_player_relative() {
  _has_bits_[0] &= ~0x00000020u;
}
void FeatureLayersMinimap::clear_player_relative() {
  if (player_relative_ != NULL) player_relative_->::SC2APIProtocol::ImageData::Clear();
  clear_has_player_relative();
}
const ::SC2APIProtocol::ImageData& FeatureLayersMinimap::player_relative() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayersMinimap.player_relative)
  return player_relative_ != NULL ? *player_relative_ : *default_instance_->player_relative_;
}
::SC2APIProtocol::ImageData* FeatureLayersMinimap::mutable_player_relative() {
  set_has_player_relative();
  if (player_relative_ == NULL) {
    player_relative_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayersMinimap.player_relative)
  return player_relative_;
}
::SC2APIProtocol::ImageData* FeatureLayersMinimap::release_player_relative() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayersMinimap.player_relative)
  clear_has_player_relative();
  ::SC2APIProtocol::ImageData* temp = player_relative_;
  player_relative_ = NULL;
  return temp;
}
void FeatureLayersMinimap::set_allocated_player_relative(::SC2APIProtocol::ImageData* player_relative) {
  delete player_relative_;
  player_relative_ = player_relative;
  if (player_relative) {
    set_has_player_relative();
  } else {
    clear_has_player_relative();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayersMinimap.player_relative)
}

// optional .SC2APIProtocol.ImageData selected = 7;
bool FeatureLayersMinimap::has_selected() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FeatureLayersMinimap::set_has_selected() {
  _has_bits_[0] |= 0x00000040u;
}
void FeatureLayersMinimap::clear_has_selected() {
  _has_bits_[0] &= ~0x00000040u;
}
void FeatureLayersMinimap::clear_selected() {
  if (selected_ != NULL) selected_->::SC2APIProtocol::ImageData::Clear();
  clear_has_selected();
}
const ::SC2APIProtocol::ImageData& FeatureLayersMinimap::selected() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayersMinimap.selected)
  return selected_ != NULL ? *selected_ : *default_instance_->selected_;
}
::SC2APIProtocol::ImageData* FeatureLayersMinimap::mutable_selected() {
  set_has_selected();
  if (selected_ == NULL) {
    selected_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayersMinimap.selected)
  return selected_;
}
::SC2APIProtocol::ImageData* FeatureLayersMinimap::release_selected() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayersMinimap.selected)
  clear_has_selected();
  ::SC2APIProtocol::ImageData* temp = selected_;
  selected_ = NULL;
  return temp;
}
void FeatureLayersMinimap::set_allocated_selected(::SC2APIProtocol::ImageData* selected) {
  delete selected_;
  selected_ = selected;
  if (selected) {
    set_has_selected();
  } else {
    clear_has_selected();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayersMinimap.selected)
}

// optional .SC2APIProtocol.ImageData unit_type = 8;
bool FeatureLayersMinimap::has_unit_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FeatureLayersMinimap::set_has_unit_type() {
  _has_bits_[0] |= 0x00000080u;
}
void FeatureLayersMinimap::clear_has_unit_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void FeatureLayersMinimap::clear_unit_type() {
  if (unit_type_ != NULL) unit_type_->::SC2APIProtocol::ImageData::Clear();
  clear_has_unit_type();
}
const ::SC2APIProtocol::ImageData& FeatureLayersMinimap::unit_type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.FeatureLayersMinimap.unit_type)
  return unit_type_ != NULL ? *unit_type_ : *default_instance_->unit_type_;
}
::SC2APIProtocol::ImageData* FeatureLayersMinimap::mutable_unit_type() {
  set_has_unit_type();
  if (unit_type_ == NULL) {
    unit_type_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.FeatureLayersMinimap.unit_type)
  return unit_type_;
}
::SC2APIProtocol::ImageData* FeatureLayersMinimap::release_unit_type() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.FeatureLayersMinimap.unit_type)
  clear_has_unit_type();
  ::SC2APIProtocol::ImageData* temp = unit_type_;
  unit_type_ = NULL;
  return temp;
}
void FeatureLayersMinimap::set_allocated_unit_type(::SC2APIProtocol::ImageData* unit_type) {
  delete unit_type_;
  unit_type_ = unit_type;
  if (unit_type) {
    set_has_unit_type();
  } else {
    clear_has_unit_type();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.FeatureLayersMinimap.unit_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObservationRender::kMapFieldNumber;
const int ObservationRender::kMinimapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObservationRender::ObservationRender()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ObservationRender)
}

void ObservationRender::InitAsDefaultInstance() {
  map_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
  minimap_ = const_cast< ::SC2APIProtocol::ImageData*>(&::SC2APIProtocol::ImageData::default_instance());
}

ObservationRender::ObservationRender(const ObservationRender& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ObservationRender)
}

void ObservationRender::SharedCtor() {
  _cached_size_ = 0;
  map_ = NULL;
  minimap_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObservationRender::~ObservationRender() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ObservationRender)
  SharedDtor();
}

void ObservationRender::SharedDtor() {
  if (this != default_instance_) {
    delete map_;
    delete minimap_;
  }
}

void ObservationRender::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObservationRender::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObservationRender_descriptor_;
}

const ObservationRender& ObservationRender::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fspatial_2eproto();
  return *default_instance_;
}

ObservationRender* ObservationRender::default_instance_ = NULL;

ObservationRender* ObservationRender::New(::google::protobuf::Arena* arena) const {
  ObservationRender* n = new ObservationRender;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObservationRender::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ObservationRender)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_map()) {
      if (map_ != NULL) map_->::SC2APIProtocol::ImageData::Clear();
    }
    if (has_minimap()) {
      if (minimap_ != NULL) minimap_->::SC2APIProtocol::ImageData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ObservationRender::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ObservationRender)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ImageData map = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_minimap;
        break;
      }

      // optional .SC2APIProtocol.ImageData minimap = 2;
      case 2: {
        if (tag == 18) {
         parse_minimap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_minimap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ObservationRender)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ObservationRender)
  return false;
#undef DO_
}

void ObservationRender::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ObservationRender)
  // optional .SC2APIProtocol.ImageData map = 1;
  if (has_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->map_, output);
  }

  // optional .SC2APIProtocol.ImageData minimap = 2;
  if (has_minimap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->minimap_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ObservationRender)
}

::google::protobuf::uint8* ObservationRender::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ObservationRender)
  // optional .SC2APIProtocol.ImageData map = 1;
  if (has_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->map_, false, target);
  }

  // optional .SC2APIProtocol.ImageData minimap = 2;
  if (has_minimap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->minimap_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ObservationRender)
  return target;
}

int ObservationRender::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ObservationRender)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .SC2APIProtocol.ImageData map = 1;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->map_);
    }

    // optional .SC2APIProtocol.ImageData minimap = 2;
    if (has_minimap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->minimap_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObservationRender::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ObservationRender)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ObservationRender* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ObservationRender>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ObservationRender)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ObservationRender)
    MergeFrom(*source);
  }
}

void ObservationRender::MergeFrom(const ObservationRender& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ObservationRender)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map()) {
      mutable_map()->::SC2APIProtocol::ImageData::MergeFrom(from.map());
    }
    if (from.has_minimap()) {
      mutable_minimap()->::SC2APIProtocol::ImageData::MergeFrom(from.minimap());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ObservationRender::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ObservationRender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObservationRender::CopyFrom(const ObservationRender& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ObservationRender)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObservationRender::IsInitialized() const {

  return true;
}

void ObservationRender::Swap(ObservationRender* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObservationRender::InternalSwap(ObservationRender* other) {
  std::swap(map_, other->map_);
  std::swap(minimap_, other->minimap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ObservationRender::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObservationRender_descriptor_;
  metadata.reflection = ObservationRender_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObservationRender

// optional .SC2APIProtocol.ImageData map = 1;
bool ObservationRender::has_map() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObservationRender::set_has_map() {
  _has_bits_[0] |= 0x00000001u;
}
void ObservationRender::clear_has_map() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObservationRender::clear_map() {
  if (map_ != NULL) map_->::SC2APIProtocol::ImageData::Clear();
  clear_has_map();
}
const ::SC2APIProtocol::ImageData& ObservationRender::map() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationRender.map)
  return map_ != NULL ? *map_ : *default_instance_->map_;
}
::SC2APIProtocol::ImageData* ObservationRender::mutable_map() {
  set_has_map();
  if (map_ == NULL) {
    map_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationRender.map)
  return map_;
}
::SC2APIProtocol::ImageData* ObservationRender::release_map() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ObservationRender.map)
  clear_has_map();
  ::SC2APIProtocol::ImageData* temp = map_;
  map_ = NULL;
  return temp;
}
void ObservationRender::set_allocated_map(::SC2APIProtocol::ImageData* map) {
  delete map_;
  map_ = map;
  if (map) {
    set_has_map();
  } else {
    clear_has_map();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObservationRender.map)
}

// optional .SC2APIProtocol.ImageData minimap = 2;
bool ObservationRender::has_minimap() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObservationRender::set_has_minimap() {
  _has_bits_[0] |= 0x00000002u;
}
void ObservationRender::clear_has_minimap() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObservationRender::clear_minimap() {
  if (minimap_ != NULL) minimap_->::SC2APIProtocol::ImageData::Clear();
  clear_has_minimap();
}
const ::SC2APIProtocol::ImageData& ObservationRender::minimap() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ObservationRender.minimap)
  return minimap_ != NULL ? *minimap_ : *default_instance_->minimap_;
}
::SC2APIProtocol::ImageData* ObservationRender::mutable_minimap() {
  set_has_minimap();
  if (minimap_ == NULL) {
    minimap_ = new ::SC2APIProtocol::ImageData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ObservationRender.minimap)
  return minimap_;
}
::SC2APIProtocol::ImageData* ObservationRender::release_minimap() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ObservationRender.minimap)
  clear_has_minimap();
  ::SC2APIProtocol::ImageData* temp = minimap_;
  minimap_ = NULL;
  return temp;
}
void ObservationRender::set_allocated_minimap(::SC2APIProtocol::ImageData* minimap) {
  delete minimap_;
  minimap_ = minimap;
  if (minimap) {
    set_has_minimap();
  } else {
    clear_has_minimap();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ObservationRender.minimap)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionSpatial::kUnitCommandFieldNumber;
const int ActionSpatial::kCameraMoveFieldNumber;
const int ActionSpatial::kUnitSelectionPointFieldNumber;
const int ActionSpatial::kUnitSelectionRectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionSpatial::ActionSpatial()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionSpatial)
}

void ActionSpatial::InitAsDefaultInstance() {
  ActionSpatial_default_oneof_instance_->unit_command_ = const_cast< ::SC2APIProtocol::ActionSpatialUnitCommand*>(&::SC2APIProtocol::ActionSpatialUnitCommand::default_instance());
  ActionSpatial_default_oneof_instance_->camera_move_ = const_cast< ::SC2APIProtocol::ActionSpatialCameraMove*>(&::SC2APIProtocol::ActionSpatialCameraMove::default_instance());
  ActionSpatial_default_oneof_instance_->unit_selection_point_ = const_cast< ::SC2APIProtocol::ActionSpatialUnitSelectionPoint*>(&::SC2APIProtocol::ActionSpatialUnitSelectionPoint::default_instance());
  ActionSpatial_default_oneof_instance_->unit_selection_rect_ = const_cast< ::SC2APIProtocol::ActionSpatialUnitSelectionRect*>(&::SC2APIProtocol::ActionSpatialUnitSelectionRect::default_instance());
}

ActionSpatial::ActionSpatial(const ActionSpatial& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionSpatial)
}

void ActionSpatial::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_action();
}

ActionSpatial::~ActionSpatial() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionSpatial)
  SharedDtor();
}

void ActionSpatial::SharedDtor() {
  if (has_action()) {
    clear_action();
  }
  if (this != default_instance_) {
  }
}

void ActionSpatial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionSpatial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionSpatial_descriptor_;
}

const ActionSpatial& ActionSpatial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fspatial_2eproto();
  return *default_instance_;
}

ActionSpatial* ActionSpatial::default_instance_ = NULL;

ActionSpatial* ActionSpatial::New(::google::protobuf::Arena* arena) const {
  ActionSpatial* n = new ActionSpatial;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionSpatial::clear_action() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.ActionSpatial)
  switch(action_case()) {
    case kUnitCommand: {
      delete action_.unit_command_;
      break;
    }
    case kCameraMove: {
      delete action_.camera_move_;
      break;
    }
    case kUnitSelectionPoint: {
      delete action_.unit_selection_point_;
      break;
    }
    case kUnitSelectionRect: {
      delete action_.unit_selection_rect_;
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACTION_NOT_SET;
}


void ActionSpatial::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionSpatial)
  clear_action();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionSpatial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionSpatial)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_camera_move;
        break;
      }

      // optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;
      case 2: {
        if (tag == 18) {
         parse_camera_move:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera_move()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_unit_selection_point;
        break;
      }

      // optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;
      case 3: {
        if (tag == 26) {
         parse_unit_selection_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit_selection_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_unit_selection_rect;
        break;
      }

      // optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;
      case 4: {
        if (tag == 34) {
         parse_unit_selection_rect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unit_selection_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionSpatial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionSpatial)
  return false;
#undef DO_
}

void ActionSpatial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionSpatial)
  // optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;
  if (has_unit_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *action_.unit_command_, output);
  }

  // optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;
  if (has_camera_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *action_.camera_move_, output);
  }

  // optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;
  if (has_unit_selection_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *action_.unit_selection_point_, output);
  }

  // optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;
  if (has_unit_selection_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *action_.unit_selection_rect_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionSpatial)
}

::google::protobuf::uint8* ActionSpatial::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionSpatial)
  // optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;
  if (has_unit_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *action_.unit_command_, false, target);
  }

  // optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;
  if (has_camera_move()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *action_.camera_move_, false, target);
  }

  // optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;
  if (has_unit_selection_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *action_.unit_selection_point_, false, target);
  }

  // optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;
  if (has_unit_selection_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *action_.unit_selection_rect_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionSpatial)
  return target;
}

int ActionSpatial::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionSpatial)
  int total_size = 0;

  switch (action_case()) {
    // optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;
    case kUnitCommand: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.unit_command_);
      break;
    }
    // optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;
    case kCameraMove: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.camera_move_);
      break;
    }
    // optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;
    case kUnitSelectionPoint: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.unit_selection_point_);
      break;
    }
    // optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;
    case kUnitSelectionRect: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *action_.unit_selection_rect_);
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionSpatial::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionSpatial)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionSpatial* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionSpatial>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionSpatial)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionSpatial)
    MergeFrom(*source);
  }
}

void ActionSpatial::MergeFrom(const ActionSpatial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionSpatial)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.action_case()) {
    case kUnitCommand: {
      mutable_unit_command()->::SC2APIProtocol::ActionSpatialUnitCommand::MergeFrom(from.unit_command());
      break;
    }
    case kCameraMove: {
      mutable_camera_move()->::SC2APIProtocol::ActionSpatialCameraMove::MergeFrom(from.camera_move());
      break;
    }
    case kUnitSelectionPoint: {
      mutable_unit_selection_point()->::SC2APIProtocol::ActionSpatialUnitSelectionPoint::MergeFrom(from.unit_selection_point());
      break;
    }
    case kUnitSelectionRect: {
      mutable_unit_selection_rect()->::SC2APIProtocol::ActionSpatialUnitSelectionRect::MergeFrom(from.unit_selection_rect());
      break;
    }
    case ACTION_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionSpatial::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionSpatial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSpatial::CopyFrom(const ActionSpatial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionSpatial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSpatial::IsInitialized() const {

  return true;
}

void ActionSpatial::Swap(ActionSpatial* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionSpatial::InternalSwap(ActionSpatial* other) {
  std::swap(action_, other->action_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionSpatial::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionSpatial_descriptor_;
  metadata.reflection = ActionSpatial_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionSpatial

// optional .SC2APIProtocol.ActionSpatialUnitCommand unit_command = 1;
bool ActionSpatial::has_unit_command() const {
  return action_case() == kUnitCommand;
}
void ActionSpatial::set_has_unit_command() {
  _oneof_case_[0] = kUnitCommand;
}
void ActionSpatial::clear_unit_command() {
  if (has_unit_command()) {
    delete action_.unit_command_;
    clear_has_action();
  }
}
 const ::SC2APIProtocol::ActionSpatialUnitCommand& ActionSpatial::unit_command() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionSpatial.unit_command)
  return has_unit_command()
      ? *action_.unit_command_
      : ::SC2APIProtocol::ActionSpatialUnitCommand::default_instance();
}
::SC2APIProtocol::ActionSpatialUnitCommand* ActionSpatial::mutable_unit_command() {
  if (!has_unit_command()) {
    clear_action();
    set_has_unit_command();
    action_.unit_command_ = new ::SC2APIProtocol::ActionSpatialUnitCommand;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionSpatial.unit_command)
  return action_.unit_command_;
}
::SC2APIProtocol::ActionSpatialUnitCommand* ActionSpatial::release_unit_command() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionSpatial.unit_command)
  if (has_unit_command()) {
    clear_has_action();
    ::SC2APIProtocol::ActionSpatialUnitCommand* temp = action_.unit_command_;
    action_.unit_command_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionSpatial::set_allocated_unit_command(::SC2APIProtocol::ActionSpatialUnitCommand* unit_command) {
  clear_action();
  if (unit_command) {
    set_has_unit_command();
    action_.unit_command_ = unit_command;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionSpatial.unit_command)
}

// optional .SC2APIProtocol.ActionSpatialCameraMove camera_move = 2;
bool ActionSpatial::has_camera_move() const {
  return action_case() == kCameraMove;
}
void ActionSpatial::set_has_camera_move() {
  _oneof_case_[0] = kCameraMove;
}
void ActionSpatial::clear_camera_move() {
  if (has_camera_move()) {
    delete action_.camera_move_;
    clear_has_action();
  }
}
 const ::SC2APIProtocol::ActionSpatialCameraMove& ActionSpatial::camera_move() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionSpatial.camera_move)
  return has_camera_move()
      ? *action_.camera_move_
      : ::SC2APIProtocol::ActionSpatialCameraMove::default_instance();
}
::SC2APIProtocol::ActionSpatialCameraMove* ActionSpatial::mutable_camera_move() {
  if (!has_camera_move()) {
    clear_action();
    set_has_camera_move();
    action_.camera_move_ = new ::SC2APIProtocol::ActionSpatialCameraMove;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionSpatial.camera_move)
  return action_.camera_move_;
}
::SC2APIProtocol::ActionSpatialCameraMove* ActionSpatial::release_camera_move() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionSpatial.camera_move)
  if (has_camera_move()) {
    clear_has_action();
    ::SC2APIProtocol::ActionSpatialCameraMove* temp = action_.camera_move_;
    action_.camera_move_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionSpatial::set_allocated_camera_move(::SC2APIProtocol::ActionSpatialCameraMove* camera_move) {
  clear_action();
  if (camera_move) {
    set_has_camera_move();
    action_.camera_move_ = camera_move;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionSpatial.camera_move)
}

// optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint unit_selection_point = 3;
bool ActionSpatial::has_unit_selection_point() const {
  return action_case() == kUnitSelectionPoint;
}
void ActionSpatial::set_has_unit_selection_point() {
  _oneof_case_[0] = kUnitSelectionPoint;
}
void ActionSpatial::clear_unit_selection_point() {
  if (has_unit_selection_point()) {
    delete action_.unit_selection_point_;
    clear_has_action();
  }
}
 const ::SC2APIProtocol::ActionSpatialUnitSelectionPoint& ActionSpatial::unit_selection_point() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionSpatial.unit_selection_point)
  return has_unit_selection_point()
      ? *action_.unit_selection_point_
      : ::SC2APIProtocol::ActionSpatialUnitSelectionPoint::default_instance();
}
::SC2APIProtocol::ActionSpatialUnitSelectionPoint* ActionSpatial::mutable_unit_selection_point() {
  if (!has_unit_selection_point()) {
    clear_action();
    set_has_unit_selection_point();
    action_.unit_selection_point_ = new ::SC2APIProtocol::ActionSpatialUnitSelectionPoint;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionSpatial.unit_selection_point)
  return action_.unit_selection_point_;
}
::SC2APIProtocol::ActionSpatialUnitSelectionPoint* ActionSpatial::release_unit_selection_point() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionSpatial.unit_selection_point)
  if (has_unit_selection_point()) {
    clear_has_action();
    ::SC2APIProtocol::ActionSpatialUnitSelectionPoint* temp = action_.unit_selection_point_;
    action_.unit_selection_point_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionSpatial::set_allocated_unit_selection_point(::SC2APIProtocol::ActionSpatialUnitSelectionPoint* unit_selection_point) {
  clear_action();
  if (unit_selection_point) {
    set_has_unit_selection_point();
    action_.unit_selection_point_ = unit_selection_point;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionSpatial.unit_selection_point)
}

// optional .SC2APIProtocol.ActionSpatialUnitSelectionRect unit_selection_rect = 4;
bool ActionSpatial::has_unit_selection_rect() const {
  return action_case() == kUnitSelectionRect;
}
void ActionSpatial::set_has_unit_selection_rect() {
  _oneof_case_[0] = kUnitSelectionRect;
}
void ActionSpatial::clear_unit_selection_rect() {
  if (has_unit_selection_rect()) {
    delete action_.unit_selection_rect_;
    clear_has_action();
  }
}
 const ::SC2APIProtocol::ActionSpatialUnitSelectionRect& ActionSpatial::unit_selection_rect() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionSpatial.unit_selection_rect)
  return has_unit_selection_rect()
      ? *action_.unit_selection_rect_
      : ::SC2APIProtocol::ActionSpatialUnitSelectionRect::default_instance();
}
::SC2APIProtocol::ActionSpatialUnitSelectionRect* ActionSpatial::mutable_unit_selection_rect() {
  if (!has_unit_selection_rect()) {
    clear_action();
    set_has_unit_selection_rect();
    action_.unit_selection_rect_ = new ::SC2APIProtocol::ActionSpatialUnitSelectionRect;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionSpatial.unit_selection_rect)
  return action_.unit_selection_rect_;
}
::SC2APIProtocol::ActionSpatialUnitSelectionRect* ActionSpatial::release_unit_selection_rect() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionSpatial.unit_selection_rect)
  if (has_unit_selection_rect()) {
    clear_has_action();
    ::SC2APIProtocol::ActionSpatialUnitSelectionRect* temp = action_.unit_selection_rect_;
    action_.unit_selection_rect_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionSpatial::set_allocated_unit_selection_rect(::SC2APIProtocol::ActionSpatialUnitSelectionRect* unit_selection_rect) {
  clear_action();
  if (unit_selection_rect) {
    set_has_unit_selection_rect();
    action_.unit_selection_rect_ = unit_selection_rect;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionSpatial.unit_selection_rect)
}

bool ActionSpatial::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
void ActionSpatial::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
ActionSpatial::ActionCase ActionSpatial::action_case() const {
  return ActionSpatial::ActionCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionSpatialUnitCommand::kAbilityIdFieldNumber;
const int ActionSpatialUnitCommand::kTargetScreenCoordFieldNumber;
const int ActionSpatialUnitCommand::kTargetMinimapCoordFieldNumber;
const int ActionSpatialUnitCommand::kQueueCommandFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionSpatialUnitCommand::ActionSpatialUnitCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionSpatialUnitCommand)
}

void ActionSpatialUnitCommand::InitAsDefaultInstance() {
  ActionSpatialUnitCommand_default_oneof_instance_->target_screen_coord_ = const_cast< ::SC2APIProtocol::PointI*>(&::SC2APIProtocol::PointI::default_instance());
  ActionSpatialUnitCommand_default_oneof_instance_->target_minimap_coord_ = const_cast< ::SC2APIProtocol::PointI*>(&::SC2APIProtocol::PointI::default_instance());
}

ActionSpatialUnitCommand::ActionSpatialUnitCommand(const ActionSpatialUnitCommand& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionSpatialUnitCommand)
}

void ActionSpatialUnitCommand::SharedCtor() {
  _cached_size_ = 0;
  ability_id_ = 0;
  queue_command_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_target();
}

ActionSpatialUnitCommand::~ActionSpatialUnitCommand() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionSpatialUnitCommand)
  SharedDtor();
}

void ActionSpatialUnitCommand::SharedDtor() {
  if (has_target()) {
    clear_target();
  }
  if (this != default_instance_) {
  }
}

void ActionSpatialUnitCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionSpatialUnitCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionSpatialUnitCommand_descriptor_;
}

const ActionSpatialUnitCommand& ActionSpatialUnitCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fspatial_2eproto();
  return *default_instance_;
}

ActionSpatialUnitCommand* ActionSpatialUnitCommand::default_instance_ = NULL;

ActionSpatialUnitCommand* ActionSpatialUnitCommand::New(::google::protobuf::Arena* arena) const {
  ActionSpatialUnitCommand* n = new ActionSpatialUnitCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionSpatialUnitCommand::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.ActionSpatialUnitCommand)
  switch(target_case()) {
    case kTargetScreenCoord: {
      delete target_.target_screen_coord_;
      break;
    }
    case kTargetMinimapCoord: {
      delete target_.target_minimap_coord_;
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void ActionSpatialUnitCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionSpatialUnitCommand)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ActionSpatialUnitCommand, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ActionSpatialUnitCommand*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ability_id_, queue_command_);

#undef ZR_HELPER_
#undef ZR_

  clear_target();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionSpatialUnitCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionSpatialUnitCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ability_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_id_)));
          set_has_ability_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_target_screen_coord;
        break;
      }

      // optional .SC2APIProtocol.PointI target_screen_coord = 2;
      case 2: {
        if (tag == 18) {
         parse_target_screen_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_screen_coord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_target_minimap_coord;
        break;
      }

      // optional .SC2APIProtocol.PointI target_minimap_coord = 3;
      case 3: {
        if (tag == 26) {
         parse_target_minimap_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target_minimap_coord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_queue_command;
        break;
      }

      // optional bool queue_command = 4;
      case 4: {
        if (tag == 32) {
         parse_queue_command:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &queue_command_)));
          set_has_queue_command();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionSpatialUnitCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionSpatialUnitCommand)
  return false;
#undef DO_
}

void ActionSpatialUnitCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionSpatialUnitCommand)
  // optional int32 ability_id = 1;
  if (has_ability_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ability_id(), output);
  }

  // optional .SC2APIProtocol.PointI target_screen_coord = 2;
  if (has_target_screen_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *target_.target_screen_coord_, output);
  }

  // optional .SC2APIProtocol.PointI target_minimap_coord = 3;
  if (has_target_minimap_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *target_.target_minimap_coord_, output);
  }

  // optional bool queue_command = 4;
  if (has_queue_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->queue_command(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionSpatialUnitCommand)
}

::google::protobuf::uint8* ActionSpatialUnitCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionSpatialUnitCommand)
  // optional int32 ability_id = 1;
  if (has_ability_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ability_id(), target);
  }

  // optional .SC2APIProtocol.PointI target_screen_coord = 2;
  if (has_target_screen_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *target_.target_screen_coord_, false, target);
  }

  // optional .SC2APIProtocol.PointI target_minimap_coord = 3;
  if (has_target_minimap_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *target_.target_minimap_coord_, false, target);
  }

  // optional bool queue_command = 4;
  if (has_queue_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->queue_command(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionSpatialUnitCommand)
  return target;
}

int ActionSpatialUnitCommand::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionSpatialUnitCommand)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 9u) {
    // optional int32 ability_id = 1;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ability_id());
    }

    // optional bool queue_command = 4;
    if (has_queue_command()) {
      total_size += 1 + 1;
    }

  }
  switch (target_case()) {
    // optional .SC2APIProtocol.PointI target_screen_coord = 2;
    case kTargetScreenCoord: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *target_.target_screen_coord_);
      break;
    }
    // optional .SC2APIProtocol.PointI target_minimap_coord = 3;
    case kTargetMinimapCoord: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *target_.target_minimap_coord_);
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionSpatialUnitCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionSpatialUnitCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionSpatialUnitCommand* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionSpatialUnitCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionSpatialUnitCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionSpatialUnitCommand)
    MergeFrom(*source);
  }
}

void ActionSpatialUnitCommand::MergeFrom(const ActionSpatialUnitCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionSpatialUnitCommand)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.target_case()) {
    case kTargetScreenCoord: {
      mutable_target_screen_coord()->::SC2APIProtocol::PointI::MergeFrom(from.target_screen_coord());
      break;
    }
    case kTargetMinimapCoord: {
      mutable_target_minimap_coord()->::SC2APIProtocol::PointI::MergeFrom(from.target_minimap_coord());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ability_id()) {
      set_ability_id(from.ability_id());
    }
    if (from.has_queue_command()) {
      set_queue_command(from.queue_command());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionSpatialUnitCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionSpatialUnitCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSpatialUnitCommand::CopyFrom(const ActionSpatialUnitCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionSpatialUnitCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSpatialUnitCommand::IsInitialized() const {

  return true;
}

void ActionSpatialUnitCommand::Swap(ActionSpatialUnitCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionSpatialUnitCommand::InternalSwap(ActionSpatialUnitCommand* other) {
  std::swap(ability_id_, other->ability_id_);
  std::swap(queue_command_, other->queue_command_);
  std::swap(target_, other->target_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionSpatialUnitCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionSpatialUnitCommand_descriptor_;
  metadata.reflection = ActionSpatialUnitCommand_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionSpatialUnitCommand

// optional int32 ability_id = 1;
bool ActionSpatialUnitCommand::has_ability_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActionSpatialUnitCommand::set_has_ability_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ActionSpatialUnitCommand::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActionSpatialUnitCommand::clear_ability_id() {
  ability_id_ = 0;
  clear_has_ability_id();
}
 ::google::protobuf::int32 ActionSpatialUnitCommand::ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionSpatialUnitCommand.ability_id)
  return ability_id_;
}
 void ActionSpatialUnitCommand::set_ability_id(::google::protobuf::int32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionSpatialUnitCommand.ability_id)
}

// optional .SC2APIProtocol.PointI target_screen_coord = 2;
bool ActionSpatialUnitCommand::has_target_screen_coord() const {
  return target_case() == kTargetScreenCoord;
}
void ActionSpatialUnitCommand::set_has_target_screen_coord() {
  _oneof_case_[0] = kTargetScreenCoord;
}
void ActionSpatialUnitCommand::clear_target_screen_coord() {
  if (has_target_screen_coord()) {
    delete target_.target_screen_coord_;
    clear_has_target();
  }
}
 const ::SC2APIProtocol::PointI& ActionSpatialUnitCommand::target_screen_coord() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionSpatialUnitCommand.target_screen_coord)
  return has_target_screen_coord()
      ? *target_.target_screen_coord_
      : ::SC2APIProtocol::PointI::default_instance();
}
::SC2APIProtocol::PointI* ActionSpatialUnitCommand::mutable_target_screen_coord() {
  if (!has_target_screen_coord()) {
    clear_target();
    set_has_target_screen_coord();
    target_.target_screen_coord_ = new ::SC2APIProtocol::PointI;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionSpatialUnitCommand.target_screen_coord)
  return target_.target_screen_coord_;
}
::SC2APIProtocol::PointI* ActionSpatialUnitCommand::release_target_screen_coord() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionSpatialUnitCommand.target_screen_coord)
  if (has_target_screen_coord()) {
    clear_has_target();
    ::SC2APIProtocol::PointI* temp = target_.target_screen_coord_;
    target_.target_screen_coord_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionSpatialUnitCommand::set_allocated_target_screen_coord(::SC2APIProtocol::PointI* target_screen_coord) {
  clear_target();
  if (target_screen_coord) {
    set_has_target_screen_coord();
    target_.target_screen_coord_ = target_screen_coord;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionSpatialUnitCommand.target_screen_coord)
}

// optional .SC2APIProtocol.PointI target_minimap_coord = 3;
bool ActionSpatialUnitCommand::has_target_minimap_coord() const {
  return target_case() == kTargetMinimapCoord;
}
void ActionSpatialUnitCommand::set_has_target_minimap_coord() {
  _oneof_case_[0] = kTargetMinimapCoord;
}
void ActionSpatialUnitCommand::clear_target_minimap_coord() {
  if (has_target_minimap_coord()) {
    delete target_.target_minimap_coord_;
    clear_has_target();
  }
}
 const ::SC2APIProtocol::PointI& ActionSpatialUnitCommand::target_minimap_coord() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionSpatialUnitCommand.target_minimap_coord)
  return has_target_minimap_coord()
      ? *target_.target_minimap_coord_
      : ::SC2APIProtocol::PointI::default_instance();
}
::SC2APIProtocol::PointI* ActionSpatialUnitCommand::mutable_target_minimap_coord() {
  if (!has_target_minimap_coord()) {
    clear_target();
    set_has_target_minimap_coord();
    target_.target_minimap_coord_ = new ::SC2APIProtocol::PointI;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionSpatialUnitCommand.target_minimap_coord)
  return target_.target_minimap_coord_;
}
::SC2APIProtocol::PointI* ActionSpatialUnitCommand::release_target_minimap_coord() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionSpatialUnitCommand.target_minimap_coord)
  if (has_target_minimap_coord()) {
    clear_has_target();
    ::SC2APIProtocol::PointI* temp = target_.target_minimap_coord_;
    target_.target_minimap_coord_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ActionSpatialUnitCommand::set_allocated_target_minimap_coord(::SC2APIProtocol::PointI* target_minimap_coord) {
  clear_target();
  if (target_minimap_coord) {
    set_has_target_minimap_coord();
    target_.target_minimap_coord_ = target_minimap_coord;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionSpatialUnitCommand.target_minimap_coord)
}

// optional bool queue_command = 4;
bool ActionSpatialUnitCommand::has_queue_command() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ActionSpatialUnitCommand::set_has_queue_command() {
  _has_bits_[0] |= 0x00000008u;
}
void ActionSpatialUnitCommand::clear_has_queue_command() {
  _has_bits_[0] &= ~0x00000008u;
}
void ActionSpatialUnitCommand::clear_queue_command() {
  queue_command_ = false;
  clear_has_queue_command();
}
 bool ActionSpatialUnitCommand::queue_command() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionSpatialUnitCommand.queue_command)
  return queue_command_;
}
 void ActionSpatialUnitCommand::set_queue_command(bool value) {
  set_has_queue_command();
  queue_command_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionSpatialUnitCommand.queue_command)
}

bool ActionSpatialUnitCommand::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
void ActionSpatialUnitCommand::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
ActionSpatialUnitCommand::TargetCase ActionSpatialUnitCommand::target_case() const {
  return ActionSpatialUnitCommand::TargetCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionSpatialCameraMove::kCenterMinimapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionSpatialCameraMove::ActionSpatialCameraMove()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionSpatialCameraMove)
}

void ActionSpatialCameraMove::InitAsDefaultInstance() {
  center_minimap_ = const_cast< ::SC2APIProtocol::PointI*>(&::SC2APIProtocol::PointI::default_instance());
}

ActionSpatialCameraMove::ActionSpatialCameraMove(const ActionSpatialCameraMove& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionSpatialCameraMove)
}

void ActionSpatialCameraMove::SharedCtor() {
  _cached_size_ = 0;
  center_minimap_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionSpatialCameraMove::~ActionSpatialCameraMove() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionSpatialCameraMove)
  SharedDtor();
}

void ActionSpatialCameraMove::SharedDtor() {
  if (this != default_instance_) {
    delete center_minimap_;
  }
}

void ActionSpatialCameraMove::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionSpatialCameraMove::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionSpatialCameraMove_descriptor_;
}

const ActionSpatialCameraMove& ActionSpatialCameraMove::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fspatial_2eproto();
  return *default_instance_;
}

ActionSpatialCameraMove* ActionSpatialCameraMove::default_instance_ = NULL;

ActionSpatialCameraMove* ActionSpatialCameraMove::New(::google::protobuf::Arena* arena) const {
  ActionSpatialCameraMove* n = new ActionSpatialCameraMove;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionSpatialCameraMove::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionSpatialCameraMove)
  if (has_center_minimap()) {
    if (center_minimap_ != NULL) center_minimap_->::SC2APIProtocol::PointI::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionSpatialCameraMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionSpatialCameraMove)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.PointI center_minimap = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center_minimap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionSpatialCameraMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionSpatialCameraMove)
  return false;
#undef DO_
}

void ActionSpatialCameraMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionSpatialCameraMove)
  // optional .SC2APIProtocol.PointI center_minimap = 1;
  if (has_center_minimap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->center_minimap_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionSpatialCameraMove)
}

::google::protobuf::uint8* ActionSpatialCameraMove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionSpatialCameraMove)
  // optional .SC2APIProtocol.PointI center_minimap = 1;
  if (has_center_minimap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->center_minimap_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionSpatialCameraMove)
  return target;
}

int ActionSpatialCameraMove::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionSpatialCameraMove)
  int total_size = 0;

  // optional .SC2APIProtocol.PointI center_minimap = 1;
  if (has_center_minimap()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->center_minimap_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionSpatialCameraMove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionSpatialCameraMove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionSpatialCameraMove* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionSpatialCameraMove>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionSpatialCameraMove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionSpatialCameraMove)
    MergeFrom(*source);
  }
}

void ActionSpatialCameraMove::MergeFrom(const ActionSpatialCameraMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionSpatialCameraMove)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_center_minimap()) {
      mutable_center_minimap()->::SC2APIProtocol::PointI::MergeFrom(from.center_minimap());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionSpatialCameraMove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionSpatialCameraMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSpatialCameraMove::CopyFrom(const ActionSpatialCameraMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionSpatialCameraMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSpatialCameraMove::IsInitialized() const {

  return true;
}

void ActionSpatialCameraMove::Swap(ActionSpatialCameraMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionSpatialCameraMove::InternalSwap(ActionSpatialCameraMove* other) {
  std::swap(center_minimap_, other->center_minimap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionSpatialCameraMove::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionSpatialCameraMove_descriptor_;
  metadata.reflection = ActionSpatialCameraMove_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionSpatialCameraMove

// optional .SC2APIProtocol.PointI center_minimap = 1;
bool ActionSpatialCameraMove::has_center_minimap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActionSpatialCameraMove::set_has_center_minimap() {
  _has_bits_[0] |= 0x00000001u;
}
void ActionSpatialCameraMove::clear_has_center_minimap() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActionSpatialCameraMove::clear_center_minimap() {
  if (center_minimap_ != NULL) center_minimap_->::SC2APIProtocol::PointI::Clear();
  clear_has_center_minimap();
}
const ::SC2APIProtocol::PointI& ActionSpatialCameraMove::center_minimap() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionSpatialCameraMove.center_minimap)
  return center_minimap_ != NULL ? *center_minimap_ : *default_instance_->center_minimap_;
}
::SC2APIProtocol::PointI* ActionSpatialCameraMove::mutable_center_minimap() {
  set_has_center_minimap();
  if (center_minimap_ == NULL) {
    center_minimap_ = new ::SC2APIProtocol::PointI;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionSpatialCameraMove.center_minimap)
  return center_minimap_;
}
::SC2APIProtocol::PointI* ActionSpatialCameraMove::release_center_minimap() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionSpatialCameraMove.center_minimap)
  clear_has_center_minimap();
  ::SC2APIProtocol::PointI* temp = center_minimap_;
  center_minimap_ = NULL;
  return temp;
}
void ActionSpatialCameraMove::set_allocated_center_minimap(::SC2APIProtocol::PointI* center_minimap) {
  delete center_minimap_;
  center_minimap_ = center_minimap;
  if (center_minimap) {
    set_has_center_minimap();
  } else {
    clear_has_center_minimap();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionSpatialCameraMove.center_minimap)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ActionSpatialUnitSelectionPoint_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionSpatialUnitSelectionPoint_Type_descriptor_;
}
bool ActionSpatialUnitSelectionPoint_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ActionSpatialUnitSelectionPoint_Type ActionSpatialUnitSelectionPoint::Select;
const ActionSpatialUnitSelectionPoint_Type ActionSpatialUnitSelectionPoint::Toggle;
const ActionSpatialUnitSelectionPoint_Type ActionSpatialUnitSelectionPoint::AllType;
const ActionSpatialUnitSelectionPoint_Type ActionSpatialUnitSelectionPoint::AddAllType;
const ActionSpatialUnitSelectionPoint_Type ActionSpatialUnitSelectionPoint::Type_MIN;
const ActionSpatialUnitSelectionPoint_Type ActionSpatialUnitSelectionPoint::Type_MAX;
const int ActionSpatialUnitSelectionPoint::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionSpatialUnitSelectionPoint::kSelectionScreenCoordFieldNumber;
const int ActionSpatialUnitSelectionPoint::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionSpatialUnitSelectionPoint::ActionSpatialUnitSelectionPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
}

void ActionSpatialUnitSelectionPoint::InitAsDefaultInstance() {
  selection_screen_coord_ = const_cast< ::SC2APIProtocol::PointI*>(&::SC2APIProtocol::PointI::default_instance());
}

ActionSpatialUnitSelectionPoint::ActionSpatialUnitSelectionPoint(const ActionSpatialUnitSelectionPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
}

void ActionSpatialUnitSelectionPoint::SharedCtor() {
  _cached_size_ = 0;
  selection_screen_coord_ = NULL;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionSpatialUnitSelectionPoint::~ActionSpatialUnitSelectionPoint() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  SharedDtor();
}

void ActionSpatialUnitSelectionPoint::SharedDtor() {
  if (this != default_instance_) {
    delete selection_screen_coord_;
  }
}

void ActionSpatialUnitSelectionPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionSpatialUnitSelectionPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionSpatialUnitSelectionPoint_descriptor_;
}

const ActionSpatialUnitSelectionPoint& ActionSpatialUnitSelectionPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fspatial_2eproto();
  return *default_instance_;
}

ActionSpatialUnitSelectionPoint* ActionSpatialUnitSelectionPoint::default_instance_ = NULL;

ActionSpatialUnitSelectionPoint* ActionSpatialUnitSelectionPoint::New(::google::protobuf::Arena* arena) const {
  ActionSpatialUnitSelectionPoint* n = new ActionSpatialUnitSelectionPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionSpatialUnitSelectionPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_selection_screen_coord()) {
      if (selection_screen_coord_ != NULL) selection_screen_coord_->::SC2APIProtocol::PointI::Clear();
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionSpatialUnitSelectionPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.PointI selection_screen_coord = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selection_screen_coord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ActionSpatialUnitSelectionPoint_Type_IsValid(value)) {
            set_type(static_cast< ::SC2APIProtocol::ActionSpatialUnitSelectionPoint_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  return false;
#undef DO_
}

void ActionSpatialUnitSelectionPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  // optional .SC2APIProtocol.PointI selection_screen_coord = 1;
  if (has_selection_screen_coord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->selection_screen_coord_, output);
  }

  // optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
}

::google::protobuf::uint8* ActionSpatialUnitSelectionPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  // optional .SC2APIProtocol.PointI selection_screen_coord = 1;
  if (has_selection_screen_coord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->selection_screen_coord_, false, target);
  }

  // optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  return target;
}

int ActionSpatialUnitSelectionPoint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .SC2APIProtocol.PointI selection_screen_coord = 1;
    if (has_selection_screen_coord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->selection_screen_coord_);
    }

    // optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionSpatialUnitSelectionPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionSpatialUnitSelectionPoint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionSpatialUnitSelectionPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
    MergeFrom(*source);
  }
}

void ActionSpatialUnitSelectionPoint::MergeFrom(const ActionSpatialUnitSelectionPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selection_screen_coord()) {
      mutable_selection_screen_coord()->::SC2APIProtocol::PointI::MergeFrom(from.selection_screen_coord());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionSpatialUnitSelectionPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSpatialUnitSelectionPoint::CopyFrom(const ActionSpatialUnitSelectionPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionSpatialUnitSelectionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSpatialUnitSelectionPoint::IsInitialized() const {

  return true;
}

void ActionSpatialUnitSelectionPoint::Swap(ActionSpatialUnitSelectionPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionSpatialUnitSelectionPoint::InternalSwap(ActionSpatialUnitSelectionPoint* other) {
  std::swap(selection_screen_coord_, other->selection_screen_coord_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionSpatialUnitSelectionPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionSpatialUnitSelectionPoint_descriptor_;
  metadata.reflection = ActionSpatialUnitSelectionPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionSpatialUnitSelectionPoint

// optional .SC2APIProtocol.PointI selection_screen_coord = 1;
bool ActionSpatialUnitSelectionPoint::has_selection_screen_coord() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActionSpatialUnitSelectionPoint::set_has_selection_screen_coord() {
  _has_bits_[0] |= 0x00000001u;
}
void ActionSpatialUnitSelectionPoint::clear_has_selection_screen_coord() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActionSpatialUnitSelectionPoint::clear_selection_screen_coord() {
  if (selection_screen_coord_ != NULL) selection_screen_coord_->::SC2APIProtocol::PointI::Clear();
  clear_has_selection_screen_coord();
}
const ::SC2APIProtocol::PointI& ActionSpatialUnitSelectionPoint::selection_screen_coord() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionSpatialUnitSelectionPoint.selection_screen_coord)
  return selection_screen_coord_ != NULL ? *selection_screen_coord_ : *default_instance_->selection_screen_coord_;
}
::SC2APIProtocol::PointI* ActionSpatialUnitSelectionPoint::mutable_selection_screen_coord() {
  set_has_selection_screen_coord();
  if (selection_screen_coord_ == NULL) {
    selection_screen_coord_ = new ::SC2APIProtocol::PointI;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionSpatialUnitSelectionPoint.selection_screen_coord)
  return selection_screen_coord_;
}
::SC2APIProtocol::PointI* ActionSpatialUnitSelectionPoint::release_selection_screen_coord() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionSpatialUnitSelectionPoint.selection_screen_coord)
  clear_has_selection_screen_coord();
  ::SC2APIProtocol::PointI* temp = selection_screen_coord_;
  selection_screen_coord_ = NULL;
  return temp;
}
void ActionSpatialUnitSelectionPoint::set_allocated_selection_screen_coord(::SC2APIProtocol::PointI* selection_screen_coord) {
  delete selection_screen_coord_;
  selection_screen_coord_ = selection_screen_coord;
  if (selection_screen_coord) {
    set_has_selection_screen_coord();
  } else {
    clear_has_selection_screen_coord();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionSpatialUnitSelectionPoint.selection_screen_coord)
}

// optional .SC2APIProtocol.ActionSpatialUnitSelectionPoint.Type type = 2;
bool ActionSpatialUnitSelectionPoint::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActionSpatialUnitSelectionPoint::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ActionSpatialUnitSelectionPoint::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActionSpatialUnitSelectionPoint::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::SC2APIProtocol::ActionSpatialUnitSelectionPoint_Type ActionSpatialUnitSelectionPoint::type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionSpatialUnitSelectionPoint.type)
  return static_cast< ::SC2APIProtocol::ActionSpatialUnitSelectionPoint_Type >(type_);
}
 void ActionSpatialUnitSelectionPoint::set_type(::SC2APIProtocol::ActionSpatialUnitSelectionPoint_Type value) {
  assert(::SC2APIProtocol::ActionSpatialUnitSelectionPoint_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionSpatialUnitSelectionPoint.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionSpatialUnitSelectionRect::kSelectionScreenCoordFieldNumber;
const int ActionSpatialUnitSelectionRect::kSelectionAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionSpatialUnitSelectionRect::ActionSpatialUnitSelectionRect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionSpatialUnitSelectionRect)
}

void ActionSpatialUnitSelectionRect::InitAsDefaultInstance() {
}

ActionSpatialUnitSelectionRect::ActionSpatialUnitSelectionRect(const ActionSpatialUnitSelectionRect& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionSpatialUnitSelectionRect)
}

void ActionSpatialUnitSelectionRect::SharedCtor() {
  _cached_size_ = 0;
  selection_add_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionSpatialUnitSelectionRect::~ActionSpatialUnitSelectionRect() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  SharedDtor();
}

void ActionSpatialUnitSelectionRect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionSpatialUnitSelectionRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionSpatialUnitSelectionRect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionSpatialUnitSelectionRect_descriptor_;
}

const ActionSpatialUnitSelectionRect& ActionSpatialUnitSelectionRect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fspatial_2eproto();
  return *default_instance_;
}

ActionSpatialUnitSelectionRect* ActionSpatialUnitSelectionRect::default_instance_ = NULL;

ActionSpatialUnitSelectionRect* ActionSpatialUnitSelectionRect::New(::google::protobuf::Arena* arena) const {
  ActionSpatialUnitSelectionRect* n = new ActionSpatialUnitSelectionRect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionSpatialUnitSelectionRect::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  selection_add_ = false;
  selection_screen_coord_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionSpatialUnitSelectionRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_selection_screen_coord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_selection_screen_coord()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_selection_screen_coord;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_selection_add;
        break;
      }

      // optional bool selection_add = 2;
      case 2: {
        if (tag == 16) {
         parse_selection_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selection_add_)));
          set_has_selection_add();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  return false;
#undef DO_
}

void ActionSpatialUnitSelectionRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  // repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;
  for (unsigned int i = 0, n = this->selection_screen_coord_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->selection_screen_coord(i), output);
  }

  // optional bool selection_add = 2;
  if (has_selection_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->selection_add(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionSpatialUnitSelectionRect)
}

::google::protobuf::uint8* ActionSpatialUnitSelectionRect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  // repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;
  for (unsigned int i = 0, n = this->selection_screen_coord_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->selection_screen_coord(i), false, target);
  }

  // optional bool selection_add = 2;
  if (has_selection_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->selection_add(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  return target;
}

int ActionSpatialUnitSelectionRect::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  int total_size = 0;

  // optional bool selection_add = 2;
  if (has_selection_add()) {
    total_size += 1 + 1;
  }

  // repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;
  total_size += 1 * this->selection_screen_coord_size();
  for (int i = 0; i < this->selection_screen_coord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selection_screen_coord(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionSpatialUnitSelectionRect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionSpatialUnitSelectionRect* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionSpatialUnitSelectionRect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionSpatialUnitSelectionRect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionSpatialUnitSelectionRect)
    MergeFrom(*source);
  }
}

void ActionSpatialUnitSelectionRect::MergeFrom(const ActionSpatialUnitSelectionRect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  selection_screen_coord_.MergeFrom(from.selection_screen_coord_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_selection_add()) {
      set_selection_add(from.selection_add());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionSpatialUnitSelectionRect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionSpatialUnitSelectionRect::CopyFrom(const ActionSpatialUnitSelectionRect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionSpatialUnitSelectionRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionSpatialUnitSelectionRect::IsInitialized() const {

  return true;
}

void ActionSpatialUnitSelectionRect::Swap(ActionSpatialUnitSelectionRect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionSpatialUnitSelectionRect::InternalSwap(ActionSpatialUnitSelectionRect* other) {
  selection_screen_coord_.UnsafeArenaSwap(&other->selection_screen_coord_);
  std::swap(selection_add_, other->selection_add_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionSpatialUnitSelectionRect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionSpatialUnitSelectionRect_descriptor_;
  metadata.reflection = ActionSpatialUnitSelectionRect_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionSpatialUnitSelectionRect

// repeated .SC2APIProtocol.RectangleI selection_screen_coord = 1;
int ActionSpatialUnitSelectionRect::selection_screen_coord_size() const {
  return selection_screen_coord_.size();
}
void ActionSpatialUnitSelectionRect::clear_selection_screen_coord() {
  selection_screen_coord_.Clear();
}
const ::SC2APIProtocol::RectangleI& ActionSpatialUnitSelectionRect::selection_screen_coord(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionSpatialUnitSelectionRect.selection_screen_coord)
  return selection_screen_coord_.Get(index);
}
::SC2APIProtocol::RectangleI* ActionSpatialUnitSelectionRect::mutable_selection_screen_coord(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionSpatialUnitSelectionRect.selection_screen_coord)
  return selection_screen_coord_.Mutable(index);
}
::SC2APIProtocol::RectangleI* ActionSpatialUnitSelectionRect::add_selection_screen_coord() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ActionSpatialUnitSelectionRect.selection_screen_coord)
  return selection_screen_coord_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::RectangleI >*
ActionSpatialUnitSelectionRect::mutable_selection_screen_coord() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ActionSpatialUnitSelectionRect.selection_screen_coord)
  return &selection_screen_coord_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::RectangleI >&
ActionSpatialUnitSelectionRect::selection_screen_coord() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ActionSpatialUnitSelectionRect.selection_screen_coord)
  return selection_screen_coord_;
}

// optional bool selection_add = 2;
bool ActionSpatialUnitSelectionRect::has_selection_add() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActionSpatialUnitSelectionRect::set_has_selection_add() {
  _has_bits_[0] |= 0x00000002u;
}
void ActionSpatialUnitSelectionRect::clear_has_selection_add() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActionSpatialUnitSelectionRect::clear_selection_add() {
  selection_add_ = false;
  clear_has_selection_add();
}
 bool ActionSpatialUnitSelectionRect::selection_add() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionSpatialUnitSelectionRect.selection_add)
  return selection_add_;
}
 void ActionSpatialUnitSelectionRect::set_selection_add(bool value) {
  set_has_selection_add();
  selection_add_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionSpatialUnitSelectionRect.selection_add)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SC2APIProtocol

// @@protoc_insertion_point(global_scope)
