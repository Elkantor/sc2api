// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/data.proto

#ifndef PROTOBUF_s2clientprotocol_2fdata_2eproto__INCLUDED
#define PROTOBUF_s2clientprotocol_2fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "s2clientprotocol/common.pb.h"
// @@protoc_insertion_point(includes)

namespace SC2APIProtocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_s2clientprotocol_2fdata_2eproto();
void protobuf_AssignDesc_s2clientprotocol_2fdata_2eproto();
void protobuf_ShutdownFile_s2clientprotocol_2fdata_2eproto();

class AbilityData;
class BuffData;
class DamageBonus;
class UnitTypeData;
class UpgradeData;
class Weapon;

enum AbilityData_Target {
  AbilityData_Target_None = 1,
  AbilityData_Target_Point = 2,
  AbilityData_Target_Unit = 3,
  AbilityData_Target_PointOrUnit = 4,
  AbilityData_Target_PointOrNone = 5
};
bool AbilityData_Target_IsValid(int value);
const AbilityData_Target AbilityData_Target_Target_MIN = AbilityData_Target_None;
const AbilityData_Target AbilityData_Target_Target_MAX = AbilityData_Target_PointOrNone;
const int AbilityData_Target_Target_ARRAYSIZE = AbilityData_Target_Target_MAX + 1;

const ::google::protobuf::EnumDescriptor* AbilityData_Target_descriptor();
inline const ::std::string& AbilityData_Target_Name(AbilityData_Target value) {
  return ::google::protobuf::internal::NameOfEnum(
    AbilityData_Target_descriptor(), value);
}
inline bool AbilityData_Target_Parse(
    const ::std::string& name, AbilityData_Target* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AbilityData_Target>(
    AbilityData_Target_descriptor(), name, value);
}
enum Weapon_TargetType {
  Weapon_TargetType_Ground = 1,
  Weapon_TargetType_Air = 2,
  Weapon_TargetType_Any = 3
};
bool Weapon_TargetType_IsValid(int value);
const Weapon_TargetType Weapon_TargetType_TargetType_MIN = Weapon_TargetType_Ground;
const Weapon_TargetType Weapon_TargetType_TargetType_MAX = Weapon_TargetType_Any;
const int Weapon_TargetType_TargetType_ARRAYSIZE = Weapon_TargetType_TargetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Weapon_TargetType_descriptor();
inline const ::std::string& Weapon_TargetType_Name(Weapon_TargetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Weapon_TargetType_descriptor(), value);
}
inline bool Weapon_TargetType_Parse(
    const ::std::string& name, Weapon_TargetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Weapon_TargetType>(
    Weapon_TargetType_descriptor(), name, value);
}
enum Attribute {
  Light = 1,
  Armored = 2,
  Biological = 3,
  Mechanical = 4,
  Robotic = 5,
  Psionic = 6,
  Massive = 7,
  Structure = 8,
  Hover = 9,
  Heroic = 10,
  Summoned = 11
};
bool Attribute_IsValid(int value);
const Attribute Attribute_MIN = Light;
const Attribute Attribute_MAX = Summoned;
const int Attribute_ARRAYSIZE = Attribute_MAX + 1;

const ::google::protobuf::EnumDescriptor* Attribute_descriptor();
inline const ::std::string& Attribute_Name(Attribute value) {
  return ::google::protobuf::internal::NameOfEnum(
    Attribute_descriptor(), value);
}
inline bool Attribute_Parse(
    const ::std::string& name, Attribute* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Attribute>(
    Attribute_descriptor(), name, value);
}
// ===================================================================

class AbilityData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.AbilityData) */ {
 public:
  AbilityData();
  virtual ~AbilityData();

  AbilityData(const AbilityData& from);

  inline AbilityData& operator=(const AbilityData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AbilityData& default_instance();

  void Swap(AbilityData* other);

  // implements Message ----------------------------------------------

  inline AbilityData* New() const { return New(NULL); }

  AbilityData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AbilityData& from);
  void MergeFrom(const AbilityData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AbilityData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AbilityData_Target Target;
  static const Target None =
    AbilityData_Target_None;
  static const Target Point =
    AbilityData_Target_Point;
  static const Target Unit =
    AbilityData_Target_Unit;
  static const Target PointOrUnit =
    AbilityData_Target_PointOrUnit;
  static const Target PointOrNone =
    AbilityData_Target_PointOrNone;
  static inline bool Target_IsValid(int value) {
    return AbilityData_Target_IsValid(value);
  }
  static const Target Target_MIN =
    AbilityData_Target_Target_MIN;
  static const Target Target_MAX =
    AbilityData_Target_Target_MAX;
  static const int Target_ARRAYSIZE =
    AbilityData_Target_Target_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Target_descriptor() {
    return AbilityData_Target_descriptor();
  }
  static inline const ::std::string& Target_Name(Target value) {
    return AbilityData_Target_Name(value);
  }
  static inline bool Target_Parse(const ::std::string& name,
      Target* value) {
    return AbilityData_Target_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 ability_id = 1;
  bool has_ability_id() const;
  void clear_ability_id();
  static const int kAbilityIdFieldNumber = 1;
  ::google::protobuf::uint32 ability_id() const;
  void set_ability_id(::google::protobuf::uint32 value);

  // optional string link_name = 2;
  bool has_link_name() const;
  void clear_link_name();
  static const int kLinkNameFieldNumber = 2;
  const ::std::string& link_name() const;
  void set_link_name(const ::std::string& value);
  void set_link_name(const char* value);
  void set_link_name(const char* value, size_t size);
  ::std::string* mutable_link_name();
  ::std::string* release_link_name();
  void set_allocated_link_name(::std::string* link_name);

  // optional uint32 link_index = 3;
  bool has_link_index() const;
  void clear_link_index();
  static const int kLinkIndexFieldNumber = 3;
  ::google::protobuf::uint32 link_index() const;
  void set_link_index(::google::protobuf::uint32 value);

  // optional string button_name = 4;
  bool has_button_name() const;
  void clear_button_name();
  static const int kButtonNameFieldNumber = 4;
  const ::std::string& button_name() const;
  void set_button_name(const ::std::string& value);
  void set_button_name(const char* value);
  void set_button_name(const char* value, size_t size);
  ::std::string* mutable_button_name();
  ::std::string* release_button_name();
  void set_allocated_button_name(::std::string* button_name);

  // optional string friendly_name = 5;
  bool has_friendly_name() const;
  void clear_friendly_name();
  static const int kFriendlyNameFieldNumber = 5;
  const ::std::string& friendly_name() const;
  void set_friendly_name(const ::std::string& value);
  void set_friendly_name(const char* value);
  void set_friendly_name(const char* value, size_t size);
  ::std::string* mutable_friendly_name();
  ::std::string* release_friendly_name();
  void set_allocated_friendly_name(::std::string* friendly_name);

  // optional string hotkey = 6;
  bool has_hotkey() const;
  void clear_hotkey();
  static const int kHotkeyFieldNumber = 6;
  const ::std::string& hotkey() const;
  void set_hotkey(const ::std::string& value);
  void set_hotkey(const char* value);
  void set_hotkey(const char* value, size_t size);
  ::std::string* mutable_hotkey();
  ::std::string* release_hotkey();
  void set_allocated_hotkey(::std::string* hotkey);

  // optional uint32 remaps_to_ability_id = 7;
  bool has_remaps_to_ability_id() const;
  void clear_remaps_to_ability_id();
  static const int kRemapsToAbilityIdFieldNumber = 7;
  ::google::protobuf::uint32 remaps_to_ability_id() const;
  void set_remaps_to_ability_id(::google::protobuf::uint32 value);

  // optional bool available = 8;
  bool has_available() const;
  void clear_available();
  static const int kAvailableFieldNumber = 8;
  bool available() const;
  void set_available(bool value);

  // optional .SC2APIProtocol.AbilityData.Target target = 9;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 9;
  ::SC2APIProtocol::AbilityData_Target target() const;
  void set_target(::SC2APIProtocol::AbilityData_Target value);

  // optional bool allow_minimap = 10;
  bool has_allow_minimap() const;
  void clear_allow_minimap();
  static const int kAllowMinimapFieldNumber = 10;
  bool allow_minimap() const;
  void set_allow_minimap(bool value);

  // optional bool allow_autocast = 11;
  bool has_allow_autocast() const;
  void clear_allow_autocast();
  static const int kAllowAutocastFieldNumber = 11;
  bool allow_autocast() const;
  void set_allow_autocast(bool value);

  // optional bool is_building = 12;
  bool has_is_building() const;
  void clear_is_building();
  static const int kIsBuildingFieldNumber = 12;
  bool is_building() const;
  void set_is_building(bool value);

  // optional float footprint_radius = 13;
  bool has_footprint_radius() const;
  void clear_footprint_radius();
  static const int kFootprintRadiusFieldNumber = 13;
  float footprint_radius() const;
  void set_footprint_radius(float value);

  // optional bool is_instant_placement = 14;
  bool has_is_instant_placement() const;
  void clear_is_instant_placement();
  static const int kIsInstantPlacementFieldNumber = 14;
  bool is_instant_placement() const;
  void set_is_instant_placement(bool value);

  // optional float cast_range = 15;
  bool has_cast_range() const;
  void clear_cast_range();
  static const int kCastRangeFieldNumber = 15;
  float cast_range() const;
  void set_cast_range(float value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.AbilityData)
 private:
  inline void set_has_ability_id();
  inline void clear_has_ability_id();
  inline void set_has_link_name();
  inline void clear_has_link_name();
  inline void set_has_link_index();
  inline void clear_has_link_index();
  inline void set_has_button_name();
  inline void clear_has_button_name();
  inline void set_has_friendly_name();
  inline void clear_has_friendly_name();
  inline void set_has_hotkey();
  inline void clear_has_hotkey();
  inline void set_has_remaps_to_ability_id();
  inline void clear_has_remaps_to_ability_id();
  inline void set_has_available();
  inline void clear_has_available();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_allow_minimap();
  inline void clear_has_allow_minimap();
  inline void set_has_allow_autocast();
  inline void clear_has_allow_autocast();
  inline void set_has_is_building();
  inline void clear_has_is_building();
  inline void set_has_footprint_radius();
  inline void clear_has_footprint_radius();
  inline void set_has_is_instant_placement();
  inline void clear_has_is_instant_placement();
  inline void set_has_cast_range();
  inline void clear_has_cast_range();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr link_name_;
  ::google::protobuf::uint32 ability_id_;
  ::google::protobuf::uint32 link_index_;
  ::google::protobuf::internal::ArenaStringPtr button_name_;
  ::google::protobuf::internal::ArenaStringPtr friendly_name_;
  ::google::protobuf::internal::ArenaStringPtr hotkey_;
  ::google::protobuf::uint32 remaps_to_ability_id_;
  int target_;
  bool available_;
  bool allow_minimap_;
  bool allow_autocast_;
  bool is_building_;
  float footprint_radius_;
  bool is_instant_placement_;
  float cast_range_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fdata_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fdata_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fdata_2eproto();

  void InitAsDefaultInstance();
  static AbilityData* default_instance_;
};
// -------------------------------------------------------------------

class DamageBonus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.DamageBonus) */ {
 public:
  DamageBonus();
  virtual ~DamageBonus();

  DamageBonus(const DamageBonus& from);

  inline DamageBonus& operator=(const DamageBonus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DamageBonus& default_instance();

  void Swap(DamageBonus* other);

  // implements Message ----------------------------------------------

  inline DamageBonus* New() const { return New(NULL); }

  DamageBonus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DamageBonus& from);
  void MergeFrom(const DamageBonus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DamageBonus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SC2APIProtocol.Attribute attribute = 1;
  bool has_attribute() const;
  void clear_attribute();
  static const int kAttributeFieldNumber = 1;
  ::SC2APIProtocol::Attribute attribute() const;
  void set_attribute(::SC2APIProtocol::Attribute value);

  // optional float bonus = 2;
  bool has_bonus() const;
  void clear_bonus();
  static const int kBonusFieldNumber = 2;
  float bonus() const;
  void set_bonus(float value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.DamageBonus)
 private:
  inline void set_has_attribute();
  inline void clear_has_attribute();
  inline void set_has_bonus();
  inline void clear_has_bonus();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int attribute_;
  float bonus_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fdata_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fdata_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fdata_2eproto();

  void InitAsDefaultInstance();
  static DamageBonus* default_instance_;
};
// -------------------------------------------------------------------

class Weapon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.Weapon) */ {
 public:
  Weapon();
  virtual ~Weapon();

  Weapon(const Weapon& from);

  inline Weapon& operator=(const Weapon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Weapon& default_instance();

  void Swap(Weapon* other);

  // implements Message ----------------------------------------------

  inline Weapon* New() const { return New(NULL); }

  Weapon* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Weapon& from);
  void MergeFrom(const Weapon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Weapon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Weapon_TargetType TargetType;
  static const TargetType Ground =
    Weapon_TargetType_Ground;
  static const TargetType Air =
    Weapon_TargetType_Air;
  static const TargetType Any =
    Weapon_TargetType_Any;
  static inline bool TargetType_IsValid(int value) {
    return Weapon_TargetType_IsValid(value);
  }
  static const TargetType TargetType_MIN =
    Weapon_TargetType_TargetType_MIN;
  static const TargetType TargetType_MAX =
    Weapon_TargetType_TargetType_MAX;
  static const int TargetType_ARRAYSIZE =
    Weapon_TargetType_TargetType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TargetType_descriptor() {
    return Weapon_TargetType_descriptor();
  }
  static inline const ::std::string& TargetType_Name(TargetType value) {
    return Weapon_TargetType_Name(value);
  }
  static inline bool TargetType_Parse(const ::std::string& name,
      TargetType* value) {
    return Weapon_TargetType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SC2APIProtocol.Weapon.TargetType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::SC2APIProtocol::Weapon_TargetType type() const;
  void set_type(::SC2APIProtocol::Weapon_TargetType value);

  // optional float damage = 2;
  bool has_damage() const;
  void clear_damage();
  static const int kDamageFieldNumber = 2;
  float damage() const;
  void set_damage(float value);

  // repeated .SC2APIProtocol.DamageBonus damage_bonus = 3;
  int damage_bonus_size() const;
  void clear_damage_bonus();
  static const int kDamageBonusFieldNumber = 3;
  const ::SC2APIProtocol::DamageBonus& damage_bonus(int index) const;
  ::SC2APIProtocol::DamageBonus* mutable_damage_bonus(int index);
  ::SC2APIProtocol::DamageBonus* add_damage_bonus();
  ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::DamageBonus >*
      mutable_damage_bonus();
  const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::DamageBonus >&
      damage_bonus() const;

  // optional uint32 attacks = 4;
  bool has_attacks() const;
  void clear_attacks();
  static const int kAttacksFieldNumber = 4;
  ::google::protobuf::uint32 attacks() const;
  void set_attacks(::google::protobuf::uint32 value);

  // optional float range = 5;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 5;
  float range() const;
  void set_range(float value);

  // optional float speed = 6;
  bool has_speed() const;
  void clear_speed();
  static const int kSpeedFieldNumber = 6;
  float speed() const;
  void set_speed(float value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.Weapon)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_attacks();
  inline void clear_has_attacks();
  inline void set_has_range();
  inline void clear_has_range();
  inline void set_has_speed();
  inline void clear_has_speed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  float damage_;
  ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::DamageBonus > damage_bonus_;
  ::google::protobuf::uint32 attacks_;
  float range_;
  float speed_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fdata_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fdata_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fdata_2eproto();

  void InitAsDefaultInstance();
  static Weapon* default_instance_;
};
// -------------------------------------------------------------------

class UnitTypeData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.UnitTypeData) */ {
 public:
  UnitTypeData();
  virtual ~UnitTypeData();

  UnitTypeData(const UnitTypeData& from);

  inline UnitTypeData& operator=(const UnitTypeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnitTypeData& default_instance();

  void Swap(UnitTypeData* other);

  // implements Message ----------------------------------------------

  inline UnitTypeData* New() const { return New(NULL); }

  UnitTypeData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnitTypeData& from);
  void MergeFrom(const UnitTypeData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnitTypeData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 unit_id = 1;
  bool has_unit_id() const;
  void clear_unit_id();
  static const int kUnitIdFieldNumber = 1;
  ::google::protobuf::uint32 unit_id() const;
  void set_unit_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bool available = 3;
  bool has_available() const;
  void clear_available();
  static const int kAvailableFieldNumber = 3;
  bool available() const;
  void set_available(bool value);

  // optional uint32 cargo_size = 4;
  bool has_cargo_size() const;
  void clear_cargo_size();
  static const int kCargoSizeFieldNumber = 4;
  ::google::protobuf::uint32 cargo_size() const;
  void set_cargo_size(::google::protobuf::uint32 value);

  // optional uint32 mineral_cost = 12;
  bool has_mineral_cost() const;
  void clear_mineral_cost();
  static const int kMineralCostFieldNumber = 12;
  ::google::protobuf::uint32 mineral_cost() const;
  void set_mineral_cost(::google::protobuf::uint32 value);

  // optional uint32 vespene_cost = 13;
  bool has_vespene_cost() const;
  void clear_vespene_cost();
  static const int kVespeneCostFieldNumber = 13;
  ::google::protobuf::uint32 vespene_cost() const;
  void set_vespene_cost(::google::protobuf::uint32 value);

  // optional float food_required = 14;
  bool has_food_required() const;
  void clear_food_required();
  static const int kFoodRequiredFieldNumber = 14;
  float food_required() const;
  void set_food_required(float value);

  // optional float food_provided = 18;
  bool has_food_provided() const;
  void clear_food_provided();
  static const int kFoodProvidedFieldNumber = 18;
  float food_provided() const;
  void set_food_provided(float value);

  // optional uint32 ability_id = 15;
  bool has_ability_id() const;
  void clear_ability_id();
  static const int kAbilityIdFieldNumber = 15;
  ::google::protobuf::uint32 ability_id() const;
  void set_ability_id(::google::protobuf::uint32 value);

  // optional .SC2APIProtocol.Race race = 16;
  bool has_race() const;
  void clear_race();
  static const int kRaceFieldNumber = 16;
  ::SC2APIProtocol::Race race() const;
  void set_race(::SC2APIProtocol::Race value);

  // optional float build_time = 17;
  bool has_build_time() const;
  void clear_build_time();
  static const int kBuildTimeFieldNumber = 17;
  float build_time() const;
  void set_build_time(float value);

  // optional bool has_vespene = 19;
  bool has_has_vespene() const;
  void clear_has_vespene();
  static const int kHasVespeneFieldNumber = 19;
  bool has_vespene() const;
  void set_has_vespene(bool value);

  // optional bool has_minerals = 20;
  bool has_has_minerals() const;
  void clear_has_minerals();
  static const int kHasMineralsFieldNumber = 20;
  bool has_minerals() const;
  void set_has_minerals(bool value);

  // repeated uint32 tech_alias = 21;
  int tech_alias_size() const;
  void clear_tech_alias();
  static const int kTechAliasFieldNumber = 21;
  ::google::protobuf::uint32 tech_alias(int index) const;
  void set_tech_alias(int index, ::google::protobuf::uint32 value);
  void add_tech_alias(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tech_alias() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tech_alias();

  // optional uint32 unit_alias = 22;
  bool has_unit_alias() const;
  void clear_unit_alias();
  static const int kUnitAliasFieldNumber = 22;
  ::google::protobuf::uint32 unit_alias() const;
  void set_unit_alias(::google::protobuf::uint32 value);

  // optional uint32 tech_requirement = 23;
  bool has_tech_requirement() const;
  void clear_tech_requirement();
  static const int kTechRequirementFieldNumber = 23;
  ::google::protobuf::uint32 tech_requirement() const;
  void set_tech_requirement(::google::protobuf::uint32 value);

  // optional bool require_attached = 24;
  bool has_require_attached() const;
  void clear_require_attached();
  static const int kRequireAttachedFieldNumber = 24;
  bool require_attached() const;
  void set_require_attached(bool value);

  // repeated .SC2APIProtocol.Attribute attributes = 8;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 8;
  ::SC2APIProtocol::Attribute attributes(int index) const;
  void set_attributes(int index, ::SC2APIProtocol::Attribute value);
  void add_attributes(::SC2APIProtocol::Attribute value);
  const ::google::protobuf::RepeatedField<int>& attributes() const;
  ::google::protobuf::RepeatedField<int>* mutable_attributes();

  // optional float movement_speed = 9;
  bool has_movement_speed() const;
  void clear_movement_speed();
  static const int kMovementSpeedFieldNumber = 9;
  float movement_speed() const;
  void set_movement_speed(float value);

  // optional float armor = 10;
  bool has_armor() const;
  void clear_armor();
  static const int kArmorFieldNumber = 10;
  float armor() const;
  void set_armor(float value);

  // repeated .SC2APIProtocol.Weapon weapons = 11;
  int weapons_size() const;
  void clear_weapons();
  static const int kWeaponsFieldNumber = 11;
  const ::SC2APIProtocol::Weapon& weapons(int index) const;
  ::SC2APIProtocol::Weapon* mutable_weapons(int index);
  ::SC2APIProtocol::Weapon* add_weapons();
  ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::Weapon >*
      mutable_weapons();
  const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::Weapon >&
      weapons() const;

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.UnitTypeData)
 private:
  inline void set_has_unit_id();
  inline void clear_has_unit_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_available();
  inline void clear_has_available();
  inline void set_has_cargo_size();
  inline void clear_has_cargo_size();
  inline void set_has_mineral_cost();
  inline void clear_has_mineral_cost();
  inline void set_has_vespene_cost();
  inline void clear_has_vespene_cost();
  inline void set_has_food_required();
  inline void clear_has_food_required();
  inline void set_has_food_provided();
  inline void clear_has_food_provided();
  inline void set_has_ability_id();
  inline void clear_has_ability_id();
  inline void set_has_race();
  inline void clear_has_race();
  inline void set_has_build_time();
  inline void clear_has_build_time();
  inline void set_has_has_vespene();
  inline void clear_has_has_vespene();
  inline void set_has_has_minerals();
  inline void clear_has_has_minerals();
  inline void set_has_unit_alias();
  inline void clear_has_unit_alias();
  inline void set_has_tech_requirement();
  inline void clear_has_tech_requirement();
  inline void set_has_require_attached();
  inline void clear_has_require_attached();
  inline void set_has_movement_speed();
  inline void clear_has_movement_speed();
  inline void set_has_armor();
  inline void clear_has_armor();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 unit_id_;
  ::google::protobuf::uint32 cargo_size_;
  ::google::protobuf::uint32 mineral_cost_;
  ::google::protobuf::uint32 vespene_cost_;
  float food_required_;
  float food_provided_;
  ::google::protobuf::uint32 ability_id_;
  int race_;
  float build_time_;
  bool available_;
  bool has_vespene_;
  bool has_minerals_;
  bool require_attached_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tech_alias_;
  ::google::protobuf::uint32 unit_alias_;
  ::google::protobuf::uint32 tech_requirement_;
  ::google::protobuf::RepeatedField<int> attributes_;
  float movement_speed_;
  float armor_;
  ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::Weapon > weapons_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fdata_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fdata_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fdata_2eproto();

  void InitAsDefaultInstance();
  static UnitTypeData* default_instance_;
};
// -------------------------------------------------------------------

class UpgradeData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.UpgradeData) */ {
 public:
  UpgradeData();
  virtual ~UpgradeData();

  UpgradeData(const UpgradeData& from);

  inline UpgradeData& operator=(const UpgradeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpgradeData& default_instance();

  void Swap(UpgradeData* other);

  // implements Message ----------------------------------------------

  inline UpgradeData* New() const { return New(NULL); }

  UpgradeData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpgradeData& from);
  void MergeFrom(const UpgradeData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpgradeData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 upgrade_id = 1;
  bool has_upgrade_id() const;
  void clear_upgrade_id();
  static const int kUpgradeIdFieldNumber = 1;
  ::google::protobuf::uint32 upgrade_id() const;
  void set_upgrade_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional uint32 mineral_cost = 3;
  bool has_mineral_cost() const;
  void clear_mineral_cost();
  static const int kMineralCostFieldNumber = 3;
  ::google::protobuf::uint32 mineral_cost() const;
  void set_mineral_cost(::google::protobuf::uint32 value);

  // optional uint32 vespene_cost = 4;
  bool has_vespene_cost() const;
  void clear_vespene_cost();
  static const int kVespeneCostFieldNumber = 4;
  ::google::protobuf::uint32 vespene_cost() const;
  void set_vespene_cost(::google::protobuf::uint32 value);

  // optional float research_time = 5;
  bool has_research_time() const;
  void clear_research_time();
  static const int kResearchTimeFieldNumber = 5;
  float research_time() const;
  void set_research_time(float value);

  // optional uint32 ability_id = 6;
  bool has_ability_id() const;
  void clear_ability_id();
  static const int kAbilityIdFieldNumber = 6;
  ::google::protobuf::uint32 ability_id() const;
  void set_ability_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.UpgradeData)
 private:
  inline void set_has_upgrade_id();
  inline void clear_has_upgrade_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_mineral_cost();
  inline void clear_has_mineral_cost();
  inline void set_has_vespene_cost();
  inline void clear_has_vespene_cost();
  inline void set_has_research_time();
  inline void clear_has_research_time();
  inline void set_has_ability_id();
  inline void clear_has_ability_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 upgrade_id_;
  ::google::protobuf::uint32 mineral_cost_;
  ::google::protobuf::uint32 vespene_cost_;
  float research_time_;
  ::google::protobuf::uint32 ability_id_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fdata_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fdata_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fdata_2eproto();

  void InitAsDefaultInstance();
  static UpgradeData* default_instance_;
};
// -------------------------------------------------------------------

class BuffData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.BuffData) */ {
 public:
  BuffData();
  virtual ~BuffData();

  BuffData(const BuffData& from);

  inline BuffData& operator=(const BuffData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffData& default_instance();

  void Swap(BuffData* other);

  // implements Message ----------------------------------------------

  inline BuffData* New() const { return New(NULL); }

  BuffData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffData& from);
  void MergeFrom(const BuffData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BuffData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 buff_id = 1;
  bool has_buff_id() const;
  void clear_buff_id();
  static const int kBuffIdFieldNumber = 1;
  ::google::protobuf::uint32 buff_id() const;
  void set_buff_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.BuffData)
 private:
  inline void set_has_buff_id();
  inline void clear_has_buff_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint32 buff_id_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fdata_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fdata_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fdata_2eproto();

  void InitAsDefaultInstance();
  static BuffData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AbilityData

// optional uint32 ability_id = 1;
inline bool AbilityData::has_ability_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AbilityData::set_has_ability_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AbilityData::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AbilityData::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
inline ::google::protobuf::uint32 AbilityData::ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.ability_id)
  return ability_id_;
}
inline void AbilityData::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.ability_id)
}

// optional string link_name = 2;
inline bool AbilityData::has_link_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AbilityData::set_has_link_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AbilityData::clear_has_link_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AbilityData::clear_link_name() {
  link_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_link_name();
}
inline const ::std::string& AbilityData::link_name() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.link_name)
  return link_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AbilityData::set_link_name(const ::std::string& value) {
  set_has_link_name();
  link_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.link_name)
}
inline void AbilityData::set_link_name(const char* value) {
  set_has_link_name();
  link_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.AbilityData.link_name)
}
inline void AbilityData::set_link_name(const char* value, size_t size) {
  set_has_link_name();
  link_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.AbilityData.link_name)
}
inline ::std::string* AbilityData::mutable_link_name() {
  set_has_link_name();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.AbilityData.link_name)
  return link_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AbilityData::release_link_name() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.AbilityData.link_name)
  clear_has_link_name();
  return link_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AbilityData::set_allocated_link_name(::std::string* link_name) {
  if (link_name != NULL) {
    set_has_link_name();
  } else {
    clear_has_link_name();
  }
  link_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), link_name);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.AbilityData.link_name)
}

// optional uint32 link_index = 3;
inline bool AbilityData::has_link_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AbilityData::set_has_link_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AbilityData::clear_has_link_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AbilityData::clear_link_index() {
  link_index_ = 0u;
  clear_has_link_index();
}
inline ::google::protobuf::uint32 AbilityData::link_index() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.link_index)
  return link_index_;
}
inline void AbilityData::set_link_index(::google::protobuf::uint32 value) {
  set_has_link_index();
  link_index_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.link_index)
}

// optional string button_name = 4;
inline bool AbilityData::has_button_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AbilityData::set_has_button_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AbilityData::clear_has_button_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AbilityData::clear_button_name() {
  button_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_button_name();
}
inline const ::std::string& AbilityData::button_name() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.button_name)
  return button_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AbilityData::set_button_name(const ::std::string& value) {
  set_has_button_name();
  button_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.button_name)
}
inline void AbilityData::set_button_name(const char* value) {
  set_has_button_name();
  button_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.AbilityData.button_name)
}
inline void AbilityData::set_button_name(const char* value, size_t size) {
  set_has_button_name();
  button_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.AbilityData.button_name)
}
inline ::std::string* AbilityData::mutable_button_name() {
  set_has_button_name();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.AbilityData.button_name)
  return button_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AbilityData::release_button_name() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.AbilityData.button_name)
  clear_has_button_name();
  return button_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AbilityData::set_allocated_button_name(::std::string* button_name) {
  if (button_name != NULL) {
    set_has_button_name();
  } else {
    clear_has_button_name();
  }
  button_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), button_name);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.AbilityData.button_name)
}

// optional string friendly_name = 5;
inline bool AbilityData::has_friendly_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AbilityData::set_has_friendly_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AbilityData::clear_has_friendly_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AbilityData::clear_friendly_name() {
  friendly_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_friendly_name();
}
inline const ::std::string& AbilityData::friendly_name() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.friendly_name)
  return friendly_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AbilityData::set_friendly_name(const ::std::string& value) {
  set_has_friendly_name();
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.friendly_name)
}
inline void AbilityData::set_friendly_name(const char* value) {
  set_has_friendly_name();
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.AbilityData.friendly_name)
}
inline void AbilityData::set_friendly_name(const char* value, size_t size) {
  set_has_friendly_name();
  friendly_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.AbilityData.friendly_name)
}
inline ::std::string* AbilityData::mutable_friendly_name() {
  set_has_friendly_name();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.AbilityData.friendly_name)
  return friendly_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AbilityData::release_friendly_name() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.AbilityData.friendly_name)
  clear_has_friendly_name();
  return friendly_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AbilityData::set_allocated_friendly_name(::std::string* friendly_name) {
  if (friendly_name != NULL) {
    set_has_friendly_name();
  } else {
    clear_has_friendly_name();
  }
  friendly_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), friendly_name);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.AbilityData.friendly_name)
}

// optional string hotkey = 6;
inline bool AbilityData::has_hotkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AbilityData::set_has_hotkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AbilityData::clear_has_hotkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AbilityData::clear_hotkey() {
  hotkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hotkey();
}
inline const ::std::string& AbilityData::hotkey() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.hotkey)
  return hotkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AbilityData::set_hotkey(const ::std::string& value) {
  set_has_hotkey();
  hotkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.hotkey)
}
inline void AbilityData::set_hotkey(const char* value) {
  set_has_hotkey();
  hotkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.AbilityData.hotkey)
}
inline void AbilityData::set_hotkey(const char* value, size_t size) {
  set_has_hotkey();
  hotkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.AbilityData.hotkey)
}
inline ::std::string* AbilityData::mutable_hotkey() {
  set_has_hotkey();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.AbilityData.hotkey)
  return hotkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AbilityData::release_hotkey() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.AbilityData.hotkey)
  clear_has_hotkey();
  return hotkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AbilityData::set_allocated_hotkey(::std::string* hotkey) {
  if (hotkey != NULL) {
    set_has_hotkey();
  } else {
    clear_has_hotkey();
  }
  hotkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hotkey);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.AbilityData.hotkey)
}

// optional uint32 remaps_to_ability_id = 7;
inline bool AbilityData::has_remaps_to_ability_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AbilityData::set_has_remaps_to_ability_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AbilityData::clear_has_remaps_to_ability_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AbilityData::clear_remaps_to_ability_id() {
  remaps_to_ability_id_ = 0u;
  clear_has_remaps_to_ability_id();
}
inline ::google::protobuf::uint32 AbilityData::remaps_to_ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.remaps_to_ability_id)
  return remaps_to_ability_id_;
}
inline void AbilityData::set_remaps_to_ability_id(::google::protobuf::uint32 value) {
  set_has_remaps_to_ability_id();
  remaps_to_ability_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.remaps_to_ability_id)
}

// optional bool available = 8;
inline bool AbilityData::has_available() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AbilityData::set_has_available() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AbilityData::clear_has_available() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AbilityData::clear_available() {
  available_ = false;
  clear_has_available();
}
inline bool AbilityData::available() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.available)
  return available_;
}
inline void AbilityData::set_available(bool value) {
  set_has_available();
  available_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.available)
}

// optional .SC2APIProtocol.AbilityData.Target target = 9;
inline bool AbilityData::has_target() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AbilityData::set_has_target() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AbilityData::clear_has_target() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AbilityData::clear_target() {
  target_ = 1;
  clear_has_target();
}
inline ::SC2APIProtocol::AbilityData_Target AbilityData::target() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.target)
  return static_cast< ::SC2APIProtocol::AbilityData_Target >(target_);
}
inline void AbilityData::set_target(::SC2APIProtocol::AbilityData_Target value) {
  assert(::SC2APIProtocol::AbilityData_Target_IsValid(value));
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.target)
}

// optional bool allow_minimap = 10;
inline bool AbilityData::has_allow_minimap() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AbilityData::set_has_allow_minimap() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AbilityData::clear_has_allow_minimap() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AbilityData::clear_allow_minimap() {
  allow_minimap_ = false;
  clear_has_allow_minimap();
}
inline bool AbilityData::allow_minimap() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.allow_minimap)
  return allow_minimap_;
}
inline void AbilityData::set_allow_minimap(bool value) {
  set_has_allow_minimap();
  allow_minimap_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.allow_minimap)
}

// optional bool allow_autocast = 11;
inline bool AbilityData::has_allow_autocast() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AbilityData::set_has_allow_autocast() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AbilityData::clear_has_allow_autocast() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AbilityData::clear_allow_autocast() {
  allow_autocast_ = false;
  clear_has_allow_autocast();
}
inline bool AbilityData::allow_autocast() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.allow_autocast)
  return allow_autocast_;
}
inline void AbilityData::set_allow_autocast(bool value) {
  set_has_allow_autocast();
  allow_autocast_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.allow_autocast)
}

// optional bool is_building = 12;
inline bool AbilityData::has_is_building() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AbilityData::set_has_is_building() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AbilityData::clear_has_is_building() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AbilityData::clear_is_building() {
  is_building_ = false;
  clear_has_is_building();
}
inline bool AbilityData::is_building() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.is_building)
  return is_building_;
}
inline void AbilityData::set_is_building(bool value) {
  set_has_is_building();
  is_building_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.is_building)
}

// optional float footprint_radius = 13;
inline bool AbilityData::has_footprint_radius() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AbilityData::set_has_footprint_radius() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AbilityData::clear_has_footprint_radius() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AbilityData::clear_footprint_radius() {
  footprint_radius_ = 0;
  clear_has_footprint_radius();
}
inline float AbilityData::footprint_radius() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.footprint_radius)
  return footprint_radius_;
}
inline void AbilityData::set_footprint_radius(float value) {
  set_has_footprint_radius();
  footprint_radius_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.footprint_radius)
}

// optional bool is_instant_placement = 14;
inline bool AbilityData::has_is_instant_placement() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AbilityData::set_has_is_instant_placement() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AbilityData::clear_has_is_instant_placement() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AbilityData::clear_is_instant_placement() {
  is_instant_placement_ = false;
  clear_has_is_instant_placement();
}
inline bool AbilityData::is_instant_placement() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.is_instant_placement)
  return is_instant_placement_;
}
inline void AbilityData::set_is_instant_placement(bool value) {
  set_has_is_instant_placement();
  is_instant_placement_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.is_instant_placement)
}

// optional float cast_range = 15;
inline bool AbilityData::has_cast_range() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void AbilityData::set_has_cast_range() {
  _has_bits_[0] |= 0x00004000u;
}
inline void AbilityData::clear_has_cast_range() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void AbilityData::clear_cast_range() {
  cast_range_ = 0;
  clear_has_cast_range();
}
inline float AbilityData::cast_range() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AbilityData.cast_range)
  return cast_range_;
}
inline void AbilityData::set_cast_range(float value) {
  set_has_cast_range();
  cast_range_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AbilityData.cast_range)
}

// -------------------------------------------------------------------

// DamageBonus

// optional .SC2APIProtocol.Attribute attribute = 1;
inline bool DamageBonus::has_attribute() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DamageBonus::set_has_attribute() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DamageBonus::clear_has_attribute() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DamageBonus::clear_attribute() {
  attribute_ = 1;
  clear_has_attribute();
}
inline ::SC2APIProtocol::Attribute DamageBonus::attribute() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DamageBonus.attribute)
  return static_cast< ::SC2APIProtocol::Attribute >(attribute_);
}
inline void DamageBonus::set_attribute(::SC2APIProtocol::Attribute value) {
  assert(::SC2APIProtocol::Attribute_IsValid(value));
  set_has_attribute();
  attribute_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.DamageBonus.attribute)
}

// optional float bonus = 2;
inline bool DamageBonus::has_bonus() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DamageBonus::set_has_bonus() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DamageBonus::clear_has_bonus() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DamageBonus::clear_bonus() {
  bonus_ = 0;
  clear_has_bonus();
}
inline float DamageBonus::bonus() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.DamageBonus.bonus)
  return bonus_;
}
inline void DamageBonus::set_bonus(float value) {
  set_has_bonus();
  bonus_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.DamageBonus.bonus)
}

// -------------------------------------------------------------------

// Weapon

// optional .SC2APIProtocol.Weapon.TargetType type = 1;
inline bool Weapon::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Weapon::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Weapon::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Weapon::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::SC2APIProtocol::Weapon_TargetType Weapon::type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Weapon.type)
  return static_cast< ::SC2APIProtocol::Weapon_TargetType >(type_);
}
inline void Weapon::set_type(::SC2APIProtocol::Weapon_TargetType value) {
  assert(::SC2APIProtocol::Weapon_TargetType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Weapon.type)
}

// optional float damage = 2;
inline bool Weapon::has_damage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Weapon::set_has_damage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Weapon::clear_has_damage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Weapon::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline float Weapon::damage() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Weapon.damage)
  return damage_;
}
inline void Weapon::set_damage(float value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Weapon.damage)
}

// repeated .SC2APIProtocol.DamageBonus damage_bonus = 3;
inline int Weapon::damage_bonus_size() const {
  return damage_bonus_.size();
}
inline void Weapon::clear_damage_bonus() {
  damage_bonus_.Clear();
}
inline const ::SC2APIProtocol::DamageBonus& Weapon::damage_bonus(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Weapon.damage_bonus)
  return damage_bonus_.Get(index);
}
inline ::SC2APIProtocol::DamageBonus* Weapon::mutable_damage_bonus(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Weapon.damage_bonus)
  return damage_bonus_.Mutable(index);
}
inline ::SC2APIProtocol::DamageBonus* Weapon::add_damage_bonus() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.Weapon.damage_bonus)
  return damage_bonus_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::DamageBonus >*
Weapon::mutable_damage_bonus() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.Weapon.damage_bonus)
  return &damage_bonus_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::DamageBonus >&
Weapon::damage_bonus() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.Weapon.damage_bonus)
  return damage_bonus_;
}

// optional uint32 attacks = 4;
inline bool Weapon::has_attacks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Weapon::set_has_attacks() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Weapon::clear_has_attacks() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Weapon::clear_attacks() {
  attacks_ = 0u;
  clear_has_attacks();
}
inline ::google::protobuf::uint32 Weapon::attacks() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Weapon.attacks)
  return attacks_;
}
inline void Weapon::set_attacks(::google::protobuf::uint32 value) {
  set_has_attacks();
  attacks_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Weapon.attacks)
}

// optional float range = 5;
inline bool Weapon::has_range() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Weapon::set_has_range() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Weapon::clear_has_range() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Weapon::clear_range() {
  range_ = 0;
  clear_has_range();
}
inline float Weapon::range() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Weapon.range)
  return range_;
}
inline void Weapon::set_range(float value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Weapon.range)
}

// optional float speed = 6;
inline bool Weapon::has_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Weapon::set_has_speed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Weapon::clear_has_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Weapon::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline float Weapon::speed() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Weapon.speed)
  return speed_;
}
inline void Weapon::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Weapon.speed)
}

// -------------------------------------------------------------------

// UnitTypeData

// optional uint32 unit_id = 1;
inline bool UnitTypeData::has_unit_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnitTypeData::set_has_unit_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnitTypeData::clear_has_unit_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnitTypeData::clear_unit_id() {
  unit_id_ = 0u;
  clear_has_unit_id();
}
inline ::google::protobuf::uint32 UnitTypeData::unit_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.unit_id)
  return unit_id_;
}
inline void UnitTypeData::set_unit_id(::google::protobuf::uint32 value) {
  set_has_unit_id();
  unit_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.unit_id)
}

// optional string name = 2;
inline bool UnitTypeData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnitTypeData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnitTypeData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnitTypeData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& UnitTypeData::name() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnitTypeData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.name)
}
inline void UnitTypeData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.UnitTypeData.name)
}
inline void UnitTypeData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.UnitTypeData.name)
}
inline ::std::string* UnitTypeData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.UnitTypeData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UnitTypeData::release_name() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.UnitTypeData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UnitTypeData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.UnitTypeData.name)
}

// optional bool available = 3;
inline bool UnitTypeData::has_available() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnitTypeData::set_has_available() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnitTypeData::clear_has_available() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnitTypeData::clear_available() {
  available_ = false;
  clear_has_available();
}
inline bool UnitTypeData::available() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.available)
  return available_;
}
inline void UnitTypeData::set_available(bool value) {
  set_has_available();
  available_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.available)
}

// optional uint32 cargo_size = 4;
inline bool UnitTypeData::has_cargo_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnitTypeData::set_has_cargo_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnitTypeData::clear_has_cargo_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnitTypeData::clear_cargo_size() {
  cargo_size_ = 0u;
  clear_has_cargo_size();
}
inline ::google::protobuf::uint32 UnitTypeData::cargo_size() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.cargo_size)
  return cargo_size_;
}
inline void UnitTypeData::set_cargo_size(::google::protobuf::uint32 value) {
  set_has_cargo_size();
  cargo_size_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.cargo_size)
}

// optional uint32 mineral_cost = 12;
inline bool UnitTypeData::has_mineral_cost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UnitTypeData::set_has_mineral_cost() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UnitTypeData::clear_has_mineral_cost() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UnitTypeData::clear_mineral_cost() {
  mineral_cost_ = 0u;
  clear_has_mineral_cost();
}
inline ::google::protobuf::uint32 UnitTypeData::mineral_cost() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.mineral_cost)
  return mineral_cost_;
}
inline void UnitTypeData::set_mineral_cost(::google::protobuf::uint32 value) {
  set_has_mineral_cost();
  mineral_cost_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.mineral_cost)
}

// optional uint32 vespene_cost = 13;
inline bool UnitTypeData::has_vespene_cost() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UnitTypeData::set_has_vespene_cost() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UnitTypeData::clear_has_vespene_cost() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UnitTypeData::clear_vespene_cost() {
  vespene_cost_ = 0u;
  clear_has_vespene_cost();
}
inline ::google::protobuf::uint32 UnitTypeData::vespene_cost() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.vespene_cost)
  return vespene_cost_;
}
inline void UnitTypeData::set_vespene_cost(::google::protobuf::uint32 value) {
  set_has_vespene_cost();
  vespene_cost_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.vespene_cost)
}

// optional float food_required = 14;
inline bool UnitTypeData::has_food_required() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UnitTypeData::set_has_food_required() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UnitTypeData::clear_has_food_required() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UnitTypeData::clear_food_required() {
  food_required_ = 0;
  clear_has_food_required();
}
inline float UnitTypeData::food_required() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.food_required)
  return food_required_;
}
inline void UnitTypeData::set_food_required(float value) {
  set_has_food_required();
  food_required_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.food_required)
}

// optional float food_provided = 18;
inline bool UnitTypeData::has_food_provided() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UnitTypeData::set_has_food_provided() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UnitTypeData::clear_has_food_provided() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UnitTypeData::clear_food_provided() {
  food_provided_ = 0;
  clear_has_food_provided();
}
inline float UnitTypeData::food_provided() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.food_provided)
  return food_provided_;
}
inline void UnitTypeData::set_food_provided(float value) {
  set_has_food_provided();
  food_provided_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.food_provided)
}

// optional uint32 ability_id = 15;
inline bool UnitTypeData::has_ability_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UnitTypeData::set_has_ability_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UnitTypeData::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UnitTypeData::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
inline ::google::protobuf::uint32 UnitTypeData::ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.ability_id)
  return ability_id_;
}
inline void UnitTypeData::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.ability_id)
}

// optional .SC2APIProtocol.Race race = 16;
inline bool UnitTypeData::has_race() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UnitTypeData::set_has_race() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UnitTypeData::clear_has_race() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UnitTypeData::clear_race() {
  race_ = 0;
  clear_has_race();
}
inline ::SC2APIProtocol::Race UnitTypeData::race() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.race)
  return static_cast< ::SC2APIProtocol::Race >(race_);
}
inline void UnitTypeData::set_race(::SC2APIProtocol::Race value) {
  assert(::SC2APIProtocol::Race_IsValid(value));
  set_has_race();
  race_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.race)
}

// optional float build_time = 17;
inline bool UnitTypeData::has_build_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UnitTypeData::set_has_build_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UnitTypeData::clear_has_build_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UnitTypeData::clear_build_time() {
  build_time_ = 0;
  clear_has_build_time();
}
inline float UnitTypeData::build_time() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.build_time)
  return build_time_;
}
inline void UnitTypeData::set_build_time(float value) {
  set_has_build_time();
  build_time_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.build_time)
}

// optional bool has_vespene = 19;
inline bool UnitTypeData::has_has_vespene() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UnitTypeData::set_has_has_vespene() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UnitTypeData::clear_has_has_vespene() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UnitTypeData::clear_has_vespene() {
  has_vespene_ = false;
  clear_has_has_vespene();
}
inline bool UnitTypeData::has_vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.has_vespene)
  return has_vespene_;
}
inline void UnitTypeData::set_has_vespene(bool value) {
  set_has_has_vespene();
  has_vespene_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.has_vespene)
}

// optional bool has_minerals = 20;
inline bool UnitTypeData::has_has_minerals() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UnitTypeData::set_has_has_minerals() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UnitTypeData::clear_has_has_minerals() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UnitTypeData::clear_has_minerals() {
  has_minerals_ = false;
  clear_has_has_minerals();
}
inline bool UnitTypeData::has_minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.has_minerals)
  return has_minerals_;
}
inline void UnitTypeData::set_has_minerals(bool value) {
  set_has_has_minerals();
  has_minerals_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.has_minerals)
}

// repeated uint32 tech_alias = 21;
inline int UnitTypeData::tech_alias_size() const {
  return tech_alias_.size();
}
inline void UnitTypeData::clear_tech_alias() {
  tech_alias_.Clear();
}
inline ::google::protobuf::uint32 UnitTypeData::tech_alias(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.tech_alias)
  return tech_alias_.Get(index);
}
inline void UnitTypeData::set_tech_alias(int index, ::google::protobuf::uint32 value) {
  tech_alias_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.tech_alias)
}
inline void UnitTypeData::add_tech_alias(::google::protobuf::uint32 value) {
  tech_alias_.Add(value);
  // @@protoc_insertion_point(field_add:SC2APIProtocol.UnitTypeData.tech_alias)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
UnitTypeData::tech_alias() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.UnitTypeData.tech_alias)
  return tech_alias_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
UnitTypeData::mutable_tech_alias() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.UnitTypeData.tech_alias)
  return &tech_alias_;
}

// optional uint32 unit_alias = 22;
inline bool UnitTypeData::has_unit_alias() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void UnitTypeData::set_has_unit_alias() {
  _has_bits_[0] |= 0x00004000u;
}
inline void UnitTypeData::clear_has_unit_alias() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void UnitTypeData::clear_unit_alias() {
  unit_alias_ = 0u;
  clear_has_unit_alias();
}
inline ::google::protobuf::uint32 UnitTypeData::unit_alias() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.unit_alias)
  return unit_alias_;
}
inline void UnitTypeData::set_unit_alias(::google::protobuf::uint32 value) {
  set_has_unit_alias();
  unit_alias_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.unit_alias)
}

// optional uint32 tech_requirement = 23;
inline bool UnitTypeData::has_tech_requirement() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void UnitTypeData::set_has_tech_requirement() {
  _has_bits_[0] |= 0x00008000u;
}
inline void UnitTypeData::clear_has_tech_requirement() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void UnitTypeData::clear_tech_requirement() {
  tech_requirement_ = 0u;
  clear_has_tech_requirement();
}
inline ::google::protobuf::uint32 UnitTypeData::tech_requirement() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.tech_requirement)
  return tech_requirement_;
}
inline void UnitTypeData::set_tech_requirement(::google::protobuf::uint32 value) {
  set_has_tech_requirement();
  tech_requirement_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.tech_requirement)
}

// optional bool require_attached = 24;
inline bool UnitTypeData::has_require_attached() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void UnitTypeData::set_has_require_attached() {
  _has_bits_[0] |= 0x00010000u;
}
inline void UnitTypeData::clear_has_require_attached() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void UnitTypeData::clear_require_attached() {
  require_attached_ = false;
  clear_has_require_attached();
}
inline bool UnitTypeData::require_attached() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.require_attached)
  return require_attached_;
}
inline void UnitTypeData::set_require_attached(bool value) {
  set_has_require_attached();
  require_attached_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.require_attached)
}

// repeated .SC2APIProtocol.Attribute attributes = 8;
inline int UnitTypeData::attributes_size() const {
  return attributes_.size();
}
inline void UnitTypeData::clear_attributes() {
  attributes_.Clear();
}
inline ::SC2APIProtocol::Attribute UnitTypeData::attributes(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.attributes)
  return static_cast< ::SC2APIProtocol::Attribute >(attributes_.Get(index));
}
inline void UnitTypeData::set_attributes(int index, ::SC2APIProtocol::Attribute value) {
  assert(::SC2APIProtocol::Attribute_IsValid(value));
  attributes_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.attributes)
}
inline void UnitTypeData::add_attributes(::SC2APIProtocol::Attribute value) {
  assert(::SC2APIProtocol::Attribute_IsValid(value));
  attributes_.Add(value);
  // @@protoc_insertion_point(field_add:SC2APIProtocol.UnitTypeData.attributes)
}
inline const ::google::protobuf::RepeatedField<int>&
UnitTypeData::attributes() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.UnitTypeData.attributes)
  return attributes_;
}
inline ::google::protobuf::RepeatedField<int>*
UnitTypeData::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.UnitTypeData.attributes)
  return &attributes_;
}

// optional float movement_speed = 9;
inline bool UnitTypeData::has_movement_speed() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void UnitTypeData::set_has_movement_speed() {
  _has_bits_[0] |= 0x00040000u;
}
inline void UnitTypeData::clear_has_movement_speed() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void UnitTypeData::clear_movement_speed() {
  movement_speed_ = 0;
  clear_has_movement_speed();
}
inline float UnitTypeData::movement_speed() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.movement_speed)
  return movement_speed_;
}
inline void UnitTypeData::set_movement_speed(float value) {
  set_has_movement_speed();
  movement_speed_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.movement_speed)
}

// optional float armor = 10;
inline bool UnitTypeData::has_armor() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void UnitTypeData::set_has_armor() {
  _has_bits_[0] |= 0x00080000u;
}
inline void UnitTypeData::clear_has_armor() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void UnitTypeData::clear_armor() {
  armor_ = 0;
  clear_has_armor();
}
inline float UnitTypeData::armor() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.armor)
  return armor_;
}
inline void UnitTypeData::set_armor(float value) {
  set_has_armor();
  armor_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UnitTypeData.armor)
}

// repeated .SC2APIProtocol.Weapon weapons = 11;
inline int UnitTypeData::weapons_size() const {
  return weapons_.size();
}
inline void UnitTypeData::clear_weapons() {
  weapons_.Clear();
}
inline const ::SC2APIProtocol::Weapon& UnitTypeData::weapons(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UnitTypeData.weapons)
  return weapons_.Get(index);
}
inline ::SC2APIProtocol::Weapon* UnitTypeData::mutable_weapons(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.UnitTypeData.weapons)
  return weapons_.Mutable(index);
}
inline ::SC2APIProtocol::Weapon* UnitTypeData::add_weapons() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.UnitTypeData.weapons)
  return weapons_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::Weapon >*
UnitTypeData::mutable_weapons() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.UnitTypeData.weapons)
  return &weapons_;
}
inline const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::Weapon >&
UnitTypeData::weapons() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.UnitTypeData.weapons)
  return weapons_;
}

// -------------------------------------------------------------------

// UpgradeData

// optional uint32 upgrade_id = 1;
inline bool UpgradeData::has_upgrade_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpgradeData::set_has_upgrade_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpgradeData::clear_has_upgrade_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpgradeData::clear_upgrade_id() {
  upgrade_id_ = 0u;
  clear_has_upgrade_id();
}
inline ::google::protobuf::uint32 UpgradeData::upgrade_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UpgradeData.upgrade_id)
  return upgrade_id_;
}
inline void UpgradeData::set_upgrade_id(::google::protobuf::uint32 value) {
  set_has_upgrade_id();
  upgrade_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UpgradeData.upgrade_id)
}

// optional string name = 2;
inline bool UpgradeData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpgradeData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpgradeData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpgradeData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& UpgradeData::name() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UpgradeData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpgradeData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UpgradeData.name)
}
inline void UpgradeData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.UpgradeData.name)
}
inline void UpgradeData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.UpgradeData.name)
}
inline ::std::string* UpgradeData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.UpgradeData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpgradeData::release_name() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.UpgradeData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpgradeData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.UpgradeData.name)
}

// optional uint32 mineral_cost = 3;
inline bool UpgradeData::has_mineral_cost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpgradeData::set_has_mineral_cost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpgradeData::clear_has_mineral_cost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpgradeData::clear_mineral_cost() {
  mineral_cost_ = 0u;
  clear_has_mineral_cost();
}
inline ::google::protobuf::uint32 UpgradeData::mineral_cost() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UpgradeData.mineral_cost)
  return mineral_cost_;
}
inline void UpgradeData::set_mineral_cost(::google::protobuf::uint32 value) {
  set_has_mineral_cost();
  mineral_cost_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UpgradeData.mineral_cost)
}

// optional uint32 vespene_cost = 4;
inline bool UpgradeData::has_vespene_cost() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpgradeData::set_has_vespene_cost() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpgradeData::clear_has_vespene_cost() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpgradeData::clear_vespene_cost() {
  vespene_cost_ = 0u;
  clear_has_vespene_cost();
}
inline ::google::protobuf::uint32 UpgradeData::vespene_cost() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UpgradeData.vespene_cost)
  return vespene_cost_;
}
inline void UpgradeData::set_vespene_cost(::google::protobuf::uint32 value) {
  set_has_vespene_cost();
  vespene_cost_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UpgradeData.vespene_cost)
}

// optional float research_time = 5;
inline bool UpgradeData::has_research_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpgradeData::set_has_research_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpgradeData::clear_has_research_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpgradeData::clear_research_time() {
  research_time_ = 0;
  clear_has_research_time();
}
inline float UpgradeData::research_time() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UpgradeData.research_time)
  return research_time_;
}
inline void UpgradeData::set_research_time(float value) {
  set_has_research_time();
  research_time_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UpgradeData.research_time)
}

// optional uint32 ability_id = 6;
inline bool UpgradeData::has_ability_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpgradeData::set_has_ability_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpgradeData::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpgradeData::clear_ability_id() {
  ability_id_ = 0u;
  clear_has_ability_id();
}
inline ::google::protobuf::uint32 UpgradeData::ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.UpgradeData.ability_id)
  return ability_id_;
}
inline void UpgradeData::set_ability_id(::google::protobuf::uint32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.UpgradeData.ability_id)
}

// -------------------------------------------------------------------

// BuffData

// optional uint32 buff_id = 1;
inline bool BuffData::has_buff_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffData::set_has_buff_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffData::clear_has_buff_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffData::clear_buff_id() {
  buff_id_ = 0u;
  clear_has_buff_id();
}
inline ::google::protobuf::uint32 BuffData::buff_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.BuffData.buff_id)
  return buff_id_;
}
inline void BuffData::set_buff_id(::google::protobuf::uint32 value) {
  set_has_buff_id();
  buff_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.BuffData.buff_id)
}

// optional string name = 2;
inline bool BuffData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& BuffData::name() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.BuffData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuffData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.BuffData.name)
}
inline void BuffData::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.BuffData.name)
}
inline void BuffData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.BuffData.name)
}
inline ::std::string* BuffData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.BuffData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BuffData::release_name() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.BuffData.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BuffData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.BuffData.name)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SC2APIProtocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SC2APIProtocol::AbilityData_Target> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC2APIProtocol::AbilityData_Target>() {
  return ::SC2APIProtocol::AbilityData_Target_descriptor();
}
template <> struct is_proto_enum< ::SC2APIProtocol::Weapon_TargetType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC2APIProtocol::Weapon_TargetType>() {
  return ::SC2APIProtocol::Weapon_TargetType_descriptor();
}
template <> struct is_proto_enum< ::SC2APIProtocol::Attribute> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC2APIProtocol::Attribute>() {
  return ::SC2APIProtocol::Attribute_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_s2clientprotocol_2fdata_2eproto__INCLUDED
