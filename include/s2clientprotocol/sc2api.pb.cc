// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/sc2api.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "s2clientprotocol/sc2api.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SC2APIProtocol {

namespace {

const ::google::protobuf::Descriptor* Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Request_reflection_ = NULL;
struct RequestOneofInstance {
  const ::SC2APIProtocol::RequestCreateGame* create_game_;
  const ::SC2APIProtocol::RequestJoinGame* join_game_;
  const ::SC2APIProtocol::RequestRestartGame* restart_game_;
  const ::SC2APIProtocol::RequestStartReplay* start_replay_;
  const ::SC2APIProtocol::RequestLeaveGame* leave_game_;
  const ::SC2APIProtocol::RequestQuickSave* quick_save_;
  const ::SC2APIProtocol::RequestQuickLoad* quick_load_;
  const ::SC2APIProtocol::RequestQuit* quit_;
  const ::SC2APIProtocol::RequestGameInfo* game_info_;
  const ::SC2APIProtocol::RequestObservation* observation_;
  const ::SC2APIProtocol::RequestAction* action_;
  const ::SC2APIProtocol::RequestStep* step_;
  const ::SC2APIProtocol::RequestData* data_;
  const ::SC2APIProtocol::RequestQuery* query_;
  const ::SC2APIProtocol::RequestSaveReplay* save_replay_;
  const ::SC2APIProtocol::RequestReplayInfo* replay_info_;
  const ::SC2APIProtocol::RequestAvailableMaps* available_maps_;
  const ::SC2APIProtocol::RequestSaveMap* save_map_;
  const ::SC2APIProtocol::RequestPing* ping_;
  const ::SC2APIProtocol::RequestDebug* debug_;
}* Request_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
struct ResponseOneofInstance {
  const ::SC2APIProtocol::ResponseCreateGame* create_game_;
  const ::SC2APIProtocol::ResponseJoinGame* join_game_;
  const ::SC2APIProtocol::ResponseRestartGame* restart_game_;
  const ::SC2APIProtocol::ResponseStartReplay* start_replay_;
  const ::SC2APIProtocol::ResponseLeaveGame* leave_game_;
  const ::SC2APIProtocol::ResponseQuickSave* quick_save_;
  const ::SC2APIProtocol::ResponseQuickLoad* quick_load_;
  const ::SC2APIProtocol::ResponseQuit* quit_;
  const ::SC2APIProtocol::ResponseGameInfo* game_info_;
  const ::SC2APIProtocol::ResponseObservation* observation_;
  const ::SC2APIProtocol::ResponseAction* action_;
  const ::SC2APIProtocol::ResponseStep* step_;
  const ::SC2APIProtocol::ResponseData* data_;
  const ::SC2APIProtocol::ResponseQuery* query_;
  const ::SC2APIProtocol::ResponseSaveReplay* save_replay_;
  const ::SC2APIProtocol::ResponseReplayInfo* replay_info_;
  const ::SC2APIProtocol::ResponseAvailableMaps* available_maps_;
  const ::SC2APIProtocol::ResponseSaveMap* save_map_;
  const ::SC2APIProtocol::ResponsePing* ping_;
  const ::SC2APIProtocol::ResponseDebug* debug_;
}* Response_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* RequestCreateGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestCreateGame_reflection_ = NULL;
struct RequestCreateGameOneofInstance {
  const ::SC2APIProtocol::LocalMap* local_map_;
  ::google::protobuf::internal::ArenaStringPtr battlenet_map_name_;
}* RequestCreateGame_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* LocalMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocalMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseCreateGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseCreateGame_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseCreateGame_Error_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RequestJoinGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestJoinGame_reflection_ = NULL;
struct RequestJoinGameOneofInstance {
  int race_;
  ::google::protobuf::uint32 observed_player_id_;
}* RequestJoinGame_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* PortSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PortSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseJoinGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseJoinGame_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseJoinGame_Error_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RequestRestartGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestRestartGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseRestartGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseRestartGame_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseRestartGame_Error_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RequestStartReplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestStartReplay_reflection_ = NULL;
struct RequestStartReplayOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr replay_path_;
  ::google::protobuf::internal::ArenaStringPtr replay_data_;
}* RequestStartReplay_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* ResponseStartReplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseStartReplay_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseStartReplay_Error_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RequestLeaveGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestLeaveGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseLeaveGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseLeaveGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestQuickSave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestQuickSave_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseQuickSave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseQuickSave_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestQuickLoad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestQuickLoad_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseQuickLoad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseQuickLoad_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestQuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestQuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseQuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseQuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestGameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestGameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseGameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseGameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestObservation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestObservation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseObservation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseObservation_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatReceived_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatReceived_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseAction_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestSaveReplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSaveReplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseSaveReplay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseSaveReplay_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestReplayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestReplayInfo_reflection_ = NULL;
struct RequestReplayInfoOneofInstance {
  ::google::protobuf::internal::ArenaStringPtr replay_path_;
  ::google::protobuf::internal::ArenaStringPtr replay_data_;
}* RequestReplayInfo_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfoExtra_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfoExtra_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseReplayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseReplayInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseReplayInfo_Error_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RequestAvailableMaps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAvailableMaps_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseAvailableMaps_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseAvailableMaps_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestSaveMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestSaveMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseSaveMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseSaveMap_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ResponseSaveMap_Error_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RequestPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponsePing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponsePing_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestDebug_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResponseDebug_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResponseDebug_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerSetup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerSetup_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpatialCameraSetup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpatialCameraSetup_reflection_ = NULL;
const ::google::protobuf::Descriptor* InterfaceOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InterfaceOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerCommon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerCommon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Observation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Observation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Action_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActionChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionChat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ActionChat_Channel_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ActionError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActionError_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Difficulty_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PlayerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Alert_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Result_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_s2clientprotocol_2fsc2api_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_s2clientprotocol_2fsc2api_2eproto() {
  protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "s2clientprotocol/sc2api.proto");
  GOOGLE_CHECK(file != NULL);
  Request_descriptor_ = file->message_type(0);
  static const int Request_offsets_[21] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, create_game_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, join_game_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, restart_game_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, start_replay_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, leave_game_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, quick_save_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, quick_load_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, quit_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, game_info_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, observation_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, action_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, step_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, query_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, save_replay_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, replay_info_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, available_maps_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, save_map_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, ping_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Request_default_oneof_instance_, debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, request_),
  };
  Request_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Request_descriptor_,
      Request::default_instance_,
      Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _has_bits_[0]),
      -1,
      -1,
      Request_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _oneof_case_[0]),
      sizeof(Request),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Request, _internal_metadata_),
      -1);
  Response_descriptor_ = file->message_type(1);
  static const int Response_offsets_[23] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, create_game_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, join_game_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, restart_game_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, start_replay_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, leave_game_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, quick_save_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, quick_load_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, quit_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, game_info_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, observation_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, action_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, step_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, data_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, query_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, save_replay_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, replay_info_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, available_maps_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, save_map_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, ping_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Response_default_oneof_instance_, debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, response_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _has_bits_[0]),
      -1,
      -1,
      Response_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _oneof_case_[0]),
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      -1);
  RequestCreateGame_descriptor_ = file->message_type(2);
  static const int RequestCreateGame_offsets_[7] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RequestCreateGame_default_oneof_instance_, local_map_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RequestCreateGame_default_oneof_instance_, battlenet_map_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCreateGame, player_setup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCreateGame, disable_fog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCreateGame, random_seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCreateGame, realtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCreateGame, Map_),
  };
  RequestCreateGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestCreateGame_descriptor_,
      RequestCreateGame::default_instance_,
      RequestCreateGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCreateGame, _has_bits_[0]),
      -1,
      -1,
      RequestCreateGame_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCreateGame, _oneof_case_[0]),
      sizeof(RequestCreateGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestCreateGame, _internal_metadata_),
      -1);
  LocalMap_descriptor_ = file->message_type(3);
  static const int LocalMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalMap, map_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalMap, map_data_),
  };
  LocalMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LocalMap_descriptor_,
      LocalMap::default_instance_,
      LocalMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalMap, _has_bits_[0]),
      -1,
      -1,
      sizeof(LocalMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocalMap, _internal_metadata_),
      -1);
  ResponseCreateGame_descriptor_ = file->message_type(4);
  static const int ResponseCreateGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCreateGame, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCreateGame, error_details_),
  };
  ResponseCreateGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseCreateGame_descriptor_,
      ResponseCreateGame::default_instance_,
      ResponseCreateGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCreateGame, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseCreateGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseCreateGame, _internal_metadata_),
      -1);
  ResponseCreateGame_Error_descriptor_ = ResponseCreateGame_descriptor_->enum_type(0);
  RequestJoinGame_descriptor_ = file->message_type(5);
  static const int RequestJoinGame_offsets_[7] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RequestJoinGame_default_oneof_instance_, race_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RequestJoinGame_default_oneof_instance_, observed_player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestJoinGame, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestJoinGame, server_ports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestJoinGame, client_ports_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestJoinGame, shared_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestJoinGame, participation_),
  };
  RequestJoinGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestJoinGame_descriptor_,
      RequestJoinGame::default_instance_,
      RequestJoinGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestJoinGame, _has_bits_[0]),
      -1,
      -1,
      RequestJoinGame_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestJoinGame, _oneof_case_[0]),
      sizeof(RequestJoinGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestJoinGame, _internal_metadata_),
      -1);
  PortSet_descriptor_ = file->message_type(6);
  static const int PortSet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortSet, game_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortSet, base_port_),
  };
  PortSet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PortSet_descriptor_,
      PortSet::default_instance_,
      PortSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortSet, _has_bits_[0]),
      -1,
      -1,
      sizeof(PortSet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PortSet, _internal_metadata_),
      -1);
  ResponseJoinGame_descriptor_ = file->message_type(7);
  static const int ResponseJoinGame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseJoinGame, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseJoinGame, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseJoinGame, error_details_),
  };
  ResponseJoinGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseJoinGame_descriptor_,
      ResponseJoinGame::default_instance_,
      ResponseJoinGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseJoinGame, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseJoinGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseJoinGame, _internal_metadata_),
      -1);
  ResponseJoinGame_Error_descriptor_ = ResponseJoinGame_descriptor_->enum_type(0);
  RequestRestartGame_descriptor_ = file->message_type(8);
  static const int RequestRestartGame_offsets_[1] = {
  };
  RequestRestartGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestRestartGame_descriptor_,
      RequestRestartGame::default_instance_,
      RequestRestartGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRestartGame, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestRestartGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRestartGame, _internal_metadata_),
      -1);
  ResponseRestartGame_descriptor_ = file->message_type(9);
  static const int ResponseRestartGame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRestartGame, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRestartGame, error_details_),
  };
  ResponseRestartGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseRestartGame_descriptor_,
      ResponseRestartGame::default_instance_,
      ResponseRestartGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRestartGame, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseRestartGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRestartGame, _internal_metadata_),
      -1);
  ResponseRestartGame_Error_descriptor_ = ResponseRestartGame_descriptor_->enum_type(0);
  RequestStartReplay_descriptor_ = file->message_type(10);
  static const int RequestStartReplay_offsets_[7] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RequestStartReplay_default_oneof_instance_, replay_path_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RequestStartReplay_default_oneof_instance_, replay_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartReplay, map_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartReplay, observed_player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartReplay, options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartReplay, disable_fog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartReplay, replay_),
  };
  RequestStartReplay_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestStartReplay_descriptor_,
      RequestStartReplay::default_instance_,
      RequestStartReplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartReplay, _has_bits_[0]),
      -1,
      -1,
      RequestStartReplay_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartReplay, _oneof_case_[0]),
      sizeof(RequestStartReplay),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStartReplay, _internal_metadata_),
      -1);
  ResponseStartReplay_descriptor_ = file->message_type(11);
  static const int ResponseStartReplay_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStartReplay, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStartReplay, error_details_),
  };
  ResponseStartReplay_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseStartReplay_descriptor_,
      ResponseStartReplay::default_instance_,
      ResponseStartReplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStartReplay, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseStartReplay),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStartReplay, _internal_metadata_),
      -1);
  ResponseStartReplay_Error_descriptor_ = ResponseStartReplay_descriptor_->enum_type(0);
  RequestLeaveGame_descriptor_ = file->message_type(12);
  static const int RequestLeaveGame_offsets_[1] = {
  };
  RequestLeaveGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestLeaveGame_descriptor_,
      RequestLeaveGame::default_instance_,
      RequestLeaveGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLeaveGame, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestLeaveGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestLeaveGame, _internal_metadata_),
      -1);
  ResponseLeaveGame_descriptor_ = file->message_type(13);
  static const int ResponseLeaveGame_offsets_[1] = {
  };
  ResponseLeaveGame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseLeaveGame_descriptor_,
      ResponseLeaveGame::default_instance_,
      ResponseLeaveGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLeaveGame, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseLeaveGame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseLeaveGame, _internal_metadata_),
      -1);
  RequestQuickSave_descriptor_ = file->message_type(14);
  static const int RequestQuickSave_offsets_[1] = {
  };
  RequestQuickSave_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestQuickSave_descriptor_,
      RequestQuickSave::default_instance_,
      RequestQuickSave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuickSave, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestQuickSave),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuickSave, _internal_metadata_),
      -1);
  ResponseQuickSave_descriptor_ = file->message_type(15);
  static const int ResponseQuickSave_offsets_[1] = {
  };
  ResponseQuickSave_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseQuickSave_descriptor_,
      ResponseQuickSave::default_instance_,
      ResponseQuickSave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuickSave, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseQuickSave),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuickSave, _internal_metadata_),
      -1);
  RequestQuickLoad_descriptor_ = file->message_type(16);
  static const int RequestQuickLoad_offsets_[1] = {
  };
  RequestQuickLoad_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestQuickLoad_descriptor_,
      RequestQuickLoad::default_instance_,
      RequestQuickLoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuickLoad, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestQuickLoad),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuickLoad, _internal_metadata_),
      -1);
  ResponseQuickLoad_descriptor_ = file->message_type(17);
  static const int ResponseQuickLoad_offsets_[1] = {
  };
  ResponseQuickLoad_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseQuickLoad_descriptor_,
      ResponseQuickLoad::default_instance_,
      ResponseQuickLoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuickLoad, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseQuickLoad),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuickLoad, _internal_metadata_),
      -1);
  RequestQuit_descriptor_ = file->message_type(18);
  static const int RequestQuit_offsets_[1] = {
  };
  RequestQuit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestQuit_descriptor_,
      RequestQuit::default_instance_,
      RequestQuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuit, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestQuit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestQuit, _internal_metadata_),
      -1);
  ResponseQuit_descriptor_ = file->message_type(19);
  static const int ResponseQuit_offsets_[1] = {
  };
  ResponseQuit_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseQuit_descriptor_,
      ResponseQuit::default_instance_,
      ResponseQuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuit, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseQuit),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseQuit, _internal_metadata_),
      -1);
  RequestGameInfo_descriptor_ = file->message_type(20);
  static const int RequestGameInfo_offsets_[1] = {
  };
  RequestGameInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestGameInfo_descriptor_,
      RequestGameInfo::default_instance_,
      RequestGameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGameInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestGameInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestGameInfo, _internal_metadata_),
      -1);
  ResponseGameInfo_descriptor_ = file->message_type(21);
  static const int ResponseGameInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGameInfo, map_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGameInfo, mod_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGameInfo, local_map_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGameInfo, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGameInfo, start_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGameInfo, options_),
  };
  ResponseGameInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseGameInfo_descriptor_,
      ResponseGameInfo::default_instance_,
      ResponseGameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGameInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseGameInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseGameInfo, _internal_metadata_),
      -1);
  RequestObservation_descriptor_ = file->message_type(22);
  static const int RequestObservation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestObservation, disable_fog_),
  };
  RequestObservation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestObservation_descriptor_,
      RequestObservation::default_instance_,
      RequestObservation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestObservation, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestObservation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestObservation, _internal_metadata_),
      -1);
  ResponseObservation_descriptor_ = file->message_type(23);
  static const int ResponseObservation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseObservation, actions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseObservation, action_errors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseObservation, observation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseObservation, player_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseObservation, chat_),
  };
  ResponseObservation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseObservation_descriptor_,
      ResponseObservation::default_instance_,
      ResponseObservation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseObservation, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseObservation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseObservation, _internal_metadata_),
      -1);
  ChatReceived_descriptor_ = file->message_type(24);
  static const int ChatReceived_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReceived, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReceived, message_),
  };
  ChatReceived_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ChatReceived_descriptor_,
      ChatReceived::default_instance_,
      ChatReceived_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReceived, _has_bits_[0]),
      -1,
      -1,
      sizeof(ChatReceived),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatReceived, _internal_metadata_),
      -1);
  RequestAction_descriptor_ = file->message_type(25);
  static const int RequestAction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAction, actions_),
  };
  RequestAction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestAction_descriptor_,
      RequestAction::default_instance_,
      RequestAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAction, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestAction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAction, _internal_metadata_),
      -1);
  ResponseAction_descriptor_ = file->message_type(26);
  static const int ResponseAction_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAction, result_),
  };
  ResponseAction_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseAction_descriptor_,
      ResponseAction::default_instance_,
      ResponseAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAction, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseAction),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAction, _internal_metadata_),
      -1);
  RequestStep_descriptor_ = file->message_type(27);
  static const int RequestStep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStep, count_),
  };
  RequestStep_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestStep_descriptor_,
      RequestStep::default_instance_,
      RequestStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStep, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestStep),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestStep, _internal_metadata_),
      -1);
  ResponseStep_descriptor_ = file->message_type(28);
  static const int ResponseStep_offsets_[1] = {
  };
  ResponseStep_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseStep_descriptor_,
      ResponseStep::default_instance_,
      ResponseStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStep, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseStep),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseStep, _internal_metadata_),
      -1);
  RequestData_descriptor_ = file->message_type(29);
  static const int RequestData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestData, ability_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestData, unit_type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestData, upgrade_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestData, buff_id_),
  };
  RequestData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestData_descriptor_,
      RequestData::default_instance_,
      RequestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestData, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestData, _internal_metadata_),
      -1);
  ResponseData_descriptor_ = file->message_type(30);
  static const int ResponseData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseData, abilities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseData, units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseData, upgrades_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseData, buffs_),
  };
  ResponseData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseData_descriptor_,
      ResponseData::default_instance_,
      ResponseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseData, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseData, _internal_metadata_),
      -1);
  RequestSaveReplay_descriptor_ = file->message_type(31);
  static const int RequestSaveReplay_offsets_[1] = {
  };
  RequestSaveReplay_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestSaveReplay_descriptor_,
      RequestSaveReplay::default_instance_,
      RequestSaveReplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSaveReplay, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestSaveReplay),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSaveReplay, _internal_metadata_),
      -1);
  ResponseSaveReplay_descriptor_ = file->message_type(32);
  static const int ResponseSaveReplay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSaveReplay, data_),
  };
  ResponseSaveReplay_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseSaveReplay_descriptor_,
      ResponseSaveReplay::default_instance_,
      ResponseSaveReplay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSaveReplay, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseSaveReplay),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSaveReplay, _internal_metadata_),
      -1);
  RequestReplayInfo_descriptor_ = file->message_type(33);
  static const int RequestReplayInfo_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RequestReplayInfo_default_oneof_instance_, replay_path_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(RequestReplayInfo_default_oneof_instance_, replay_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestReplayInfo, download_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestReplayInfo, replay_),
  };
  RequestReplayInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestReplayInfo_descriptor_,
      RequestReplayInfo::default_instance_,
      RequestReplayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestReplayInfo, _has_bits_[0]),
      -1,
      -1,
      RequestReplayInfo_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestReplayInfo, _oneof_case_[0]),
      sizeof(RequestReplayInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestReplayInfo, _internal_metadata_),
      -1);
  PlayerInfoExtra_descriptor_ = file->message_type(34);
  static const int PlayerInfoExtra_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoExtra, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoExtra, player_result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoExtra, player_mmr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoExtra, player_apm_),
  };
  PlayerInfoExtra_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerInfoExtra_descriptor_,
      PlayerInfoExtra::default_instance_,
      PlayerInfoExtra_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoExtra, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayerInfoExtra),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfoExtra, _internal_metadata_),
      -1);
  ResponseReplayInfo_descriptor_ = file->message_type(35);
  static const int ResponseReplayInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseReplayInfo, map_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseReplayInfo, local_map_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseReplayInfo, player_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseReplayInfo, game_duration_loops_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseReplayInfo, game_duration_seconds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseReplayInfo, game_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseReplayInfo, data_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseReplayInfo, data_build_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseReplayInfo, base_build_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseReplayInfo, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseReplayInfo, error_details_),
  };
  ResponseReplayInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseReplayInfo_descriptor_,
      ResponseReplayInfo::default_instance_,
      ResponseReplayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseReplayInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseReplayInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseReplayInfo, _internal_metadata_),
      -1);
  ResponseReplayInfo_Error_descriptor_ = ResponseReplayInfo_descriptor_->enum_type(0);
  RequestAvailableMaps_descriptor_ = file->message_type(36);
  static const int RequestAvailableMaps_offsets_[1] = {
  };
  RequestAvailableMaps_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestAvailableMaps_descriptor_,
      RequestAvailableMaps::default_instance_,
      RequestAvailableMaps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAvailableMaps, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestAvailableMaps),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAvailableMaps, _internal_metadata_),
      -1);
  ResponseAvailableMaps_descriptor_ = file->message_type(37);
  static const int ResponseAvailableMaps_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAvailableMaps, local_map_paths_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAvailableMaps, battlenet_map_names_),
  };
  ResponseAvailableMaps_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseAvailableMaps_descriptor_,
      ResponseAvailableMaps::default_instance_,
      ResponseAvailableMaps_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAvailableMaps, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseAvailableMaps),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAvailableMaps, _internal_metadata_),
      -1);
  RequestSaveMap_descriptor_ = file->message_type(38);
  static const int RequestSaveMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSaveMap, map_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSaveMap, map_data_),
  };
  RequestSaveMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestSaveMap_descriptor_,
      RequestSaveMap::default_instance_,
      RequestSaveMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSaveMap, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestSaveMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestSaveMap, _internal_metadata_),
      -1);
  ResponseSaveMap_descriptor_ = file->message_type(39);
  static const int ResponseSaveMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSaveMap, error_),
  };
  ResponseSaveMap_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseSaveMap_descriptor_,
      ResponseSaveMap::default_instance_,
      ResponseSaveMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSaveMap, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseSaveMap),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseSaveMap, _internal_metadata_),
      -1);
  ResponseSaveMap_Error_descriptor_ = ResponseSaveMap_descriptor_->enum_type(0);
  RequestPing_descriptor_ = file->message_type(40);
  static const int RequestPing_offsets_[1] = {
  };
  RequestPing_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestPing_descriptor_,
      RequestPing::default_instance_,
      RequestPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPing, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestPing),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestPing, _internal_metadata_),
      -1);
  ResponsePing_descriptor_ = file->message_type(41);
  static const int ResponsePing_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePing, game_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePing, data_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePing, data_build_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePing, base_build_),
  };
  ResponsePing_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponsePing_descriptor_,
      ResponsePing::default_instance_,
      ResponsePing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePing, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponsePing),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponsePing, _internal_metadata_),
      -1);
  RequestDebug_descriptor_ = file->message_type(42);
  static const int RequestDebug_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDebug, debug_),
  };
  RequestDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RequestDebug_descriptor_,
      RequestDebug::default_instance_,
      RequestDebug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDebug, _has_bits_[0]),
      -1,
      -1,
      sizeof(RequestDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestDebug, _internal_metadata_),
      -1);
  ResponseDebug_descriptor_ = file->message_type(43);
  static const int ResponseDebug_offsets_[1] = {
  };
  ResponseDebug_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResponseDebug_descriptor_,
      ResponseDebug::default_instance_,
      ResponseDebug_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDebug, _has_bits_[0]),
      -1,
      -1,
      sizeof(ResponseDebug),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseDebug, _internal_metadata_),
      -1);
  PlayerSetup_descriptor_ = file->message_type(44);
  static const int PlayerSetup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetup, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetup, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetup, difficulty_),
  };
  PlayerSetup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerSetup_descriptor_,
      PlayerSetup::default_instance_,
      PlayerSetup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetup, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayerSetup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerSetup, _internal_metadata_),
      -1);
  SpatialCameraSetup_descriptor_ = file->message_type(45);
  static const int SpatialCameraSetup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialCameraSetup, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialCameraSetup, resolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialCameraSetup, minimap_resolution_),
  };
  SpatialCameraSetup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SpatialCameraSetup_descriptor_,
      SpatialCameraSetup::default_instance_,
      SpatialCameraSetup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialCameraSetup, _has_bits_[0]),
      -1,
      -1,
      sizeof(SpatialCameraSetup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpatialCameraSetup, _internal_metadata_),
      -1);
  InterfaceOptions_descriptor_ = file->message_type(46);
  static const int InterfaceOptions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfaceOptions, raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfaceOptions, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfaceOptions, feature_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfaceOptions, render_),
  };
  InterfaceOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InterfaceOptions_descriptor_,
      InterfaceOptions::default_instance_,
      InterfaceOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfaceOptions, _has_bits_[0]),
      -1,
      -1,
      sizeof(InterfaceOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InterfaceOptions, _internal_metadata_),
      -1);
  PlayerInfo_descriptor_ = file->message_type(47);
  static const int PlayerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, race_requested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, race_actual_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, difficulty_),
  };
  PlayerInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayerInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _internal_metadata_),
      -1);
  PlayerCommon_descriptor_ = file->message_type(48);
  static const int PlayerCommon_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCommon, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCommon, minerals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCommon, vespene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCommon, food_cap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCommon, food_used_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCommon, food_army_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCommon, food_workers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCommon, idle_worker_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCommon, army_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCommon, warp_gate_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCommon, larva_count_),
  };
  PlayerCommon_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerCommon_descriptor_,
      PlayerCommon::default_instance_,
      PlayerCommon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCommon, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayerCommon),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCommon, _internal_metadata_),
      -1);
  Observation_descriptor_ = file->message_type(49);
  static const int Observation_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Observation, game_loop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Observation, player_common_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Observation, alerts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Observation, abilities_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Observation, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Observation, raw_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Observation, feature_layer_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Observation, render_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Observation, ui_data_),
  };
  Observation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Observation_descriptor_,
      Observation::default_instance_,
      Observation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Observation, _has_bits_[0]),
      -1,
      -1,
      sizeof(Observation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Observation, _internal_metadata_),
      -1);
  Action_descriptor_ = file->message_type(50);
  static const int Action_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, action_raw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, action_feature_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, action_render_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, action_ui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, chat_),
  };
  Action_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Action_descriptor_,
      Action::default_instance_,
      Action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _has_bits_[0]),
      -1,
      -1,
      sizeof(Action),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _internal_metadata_),
      -1);
  ActionChat_descriptor_ = file->message_type(51);
  static const int ActionChat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionChat, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionChat, message_),
  };
  ActionChat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionChat_descriptor_,
      ActionChat::default_instance_,
      ActionChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionChat, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActionChat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionChat, _internal_metadata_),
      -1);
  ActionChat_Channel_descriptor_ = ActionChat_descriptor_->enum_type(0);
  ActionError_descriptor_ = file->message_type(52);
  static const int ActionError_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionError, unit_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionError, ability_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionError, result_),
  };
  ActionError_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ActionError_descriptor_,
      ActionError::default_instance_,
      ActionError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionError, _has_bits_[0]),
      -1,
      -1,
      sizeof(ActionError),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActionError, _internal_metadata_),
      -1);
  PlayerResult_descriptor_ = file->message_type(53);
  static const int PlayerResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, result_),
  };
  PlayerResult_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PlayerResult_descriptor_,
      PlayerResult::default_instance_,
      PlayerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, _has_bits_[0]),
      -1,
      -1,
      sizeof(PlayerResult),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerResult, _internal_metadata_),
      -1);
  Status_descriptor_ = file->enum_type(0);
  Difficulty_descriptor_ = file->enum_type(1);
  PlayerType_descriptor_ = file->enum_type(2);
  Alert_descriptor_ = file->enum_type(3);
  Result_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_s2clientprotocol_2fsc2api_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Request_descriptor_, &Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestCreateGame_descriptor_, &RequestCreateGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LocalMap_descriptor_, &LocalMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseCreateGame_descriptor_, &ResponseCreateGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestJoinGame_descriptor_, &RequestJoinGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PortSet_descriptor_, &PortSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseJoinGame_descriptor_, &ResponseJoinGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestRestartGame_descriptor_, &RequestRestartGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseRestartGame_descriptor_, &ResponseRestartGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestStartReplay_descriptor_, &RequestStartReplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseStartReplay_descriptor_, &ResponseStartReplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestLeaveGame_descriptor_, &RequestLeaveGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseLeaveGame_descriptor_, &ResponseLeaveGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestQuickSave_descriptor_, &RequestQuickSave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseQuickSave_descriptor_, &ResponseQuickSave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestQuickLoad_descriptor_, &RequestQuickLoad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseQuickLoad_descriptor_, &ResponseQuickLoad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestQuit_descriptor_, &RequestQuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseQuit_descriptor_, &ResponseQuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestGameInfo_descriptor_, &RequestGameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseGameInfo_descriptor_, &ResponseGameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestObservation_descriptor_, &RequestObservation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseObservation_descriptor_, &ResponseObservation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ChatReceived_descriptor_, &ChatReceived::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestAction_descriptor_, &RequestAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseAction_descriptor_, &ResponseAction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestStep_descriptor_, &RequestStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseStep_descriptor_, &ResponseStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestData_descriptor_, &RequestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseData_descriptor_, &ResponseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestSaveReplay_descriptor_, &RequestSaveReplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseSaveReplay_descriptor_, &ResponseSaveReplay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestReplayInfo_descriptor_, &RequestReplayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerInfoExtra_descriptor_, &PlayerInfoExtra::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseReplayInfo_descriptor_, &ResponseReplayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestAvailableMaps_descriptor_, &RequestAvailableMaps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseAvailableMaps_descriptor_, &ResponseAvailableMaps::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestSaveMap_descriptor_, &RequestSaveMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseSaveMap_descriptor_, &ResponseSaveMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestPing_descriptor_, &RequestPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponsePing_descriptor_, &ResponsePing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RequestDebug_descriptor_, &RequestDebug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResponseDebug_descriptor_, &ResponseDebug::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerSetup_descriptor_, &PlayerSetup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SpatialCameraSetup_descriptor_, &SpatialCameraSetup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InterfaceOptions_descriptor_, &InterfaceOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerCommon_descriptor_, &PlayerCommon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Observation_descriptor_, &Observation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Action_descriptor_, &Action::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionChat_descriptor_, &ActionChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ActionError_descriptor_, &ActionError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PlayerResult_descriptor_, &PlayerResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_s2clientprotocol_2fsc2api_2eproto() {
  delete Request::default_instance_;
  delete Request_default_oneof_instance_;
  delete Request_reflection_;
  delete Response::default_instance_;
  delete Response_default_oneof_instance_;
  delete Response_reflection_;
  delete RequestCreateGame::default_instance_;
  delete RequestCreateGame_default_oneof_instance_;
  delete RequestCreateGame_reflection_;
  delete LocalMap::default_instance_;
  delete LocalMap_reflection_;
  delete ResponseCreateGame::default_instance_;
  delete ResponseCreateGame_reflection_;
  delete RequestJoinGame::default_instance_;
  delete RequestJoinGame_default_oneof_instance_;
  delete RequestJoinGame_reflection_;
  delete PortSet::default_instance_;
  delete PortSet_reflection_;
  delete ResponseJoinGame::default_instance_;
  delete ResponseJoinGame_reflection_;
  delete RequestRestartGame::default_instance_;
  delete RequestRestartGame_reflection_;
  delete ResponseRestartGame::default_instance_;
  delete ResponseRestartGame_reflection_;
  delete RequestStartReplay::default_instance_;
  delete RequestStartReplay_default_oneof_instance_;
  delete RequestStartReplay_reflection_;
  delete ResponseStartReplay::default_instance_;
  delete ResponseStartReplay_reflection_;
  delete RequestLeaveGame::default_instance_;
  delete RequestLeaveGame_reflection_;
  delete ResponseLeaveGame::default_instance_;
  delete ResponseLeaveGame_reflection_;
  delete RequestQuickSave::default_instance_;
  delete RequestQuickSave_reflection_;
  delete ResponseQuickSave::default_instance_;
  delete ResponseQuickSave_reflection_;
  delete RequestQuickLoad::default_instance_;
  delete RequestQuickLoad_reflection_;
  delete ResponseQuickLoad::default_instance_;
  delete ResponseQuickLoad_reflection_;
  delete RequestQuit::default_instance_;
  delete RequestQuit_reflection_;
  delete ResponseQuit::default_instance_;
  delete ResponseQuit_reflection_;
  delete RequestGameInfo::default_instance_;
  delete RequestGameInfo_reflection_;
  delete ResponseGameInfo::default_instance_;
  delete ResponseGameInfo_reflection_;
  delete RequestObservation::default_instance_;
  delete RequestObservation_reflection_;
  delete ResponseObservation::default_instance_;
  delete ResponseObservation_reflection_;
  delete ChatReceived::default_instance_;
  delete ChatReceived_reflection_;
  delete RequestAction::default_instance_;
  delete RequestAction_reflection_;
  delete ResponseAction::default_instance_;
  delete ResponseAction_reflection_;
  delete RequestStep::default_instance_;
  delete RequestStep_reflection_;
  delete ResponseStep::default_instance_;
  delete ResponseStep_reflection_;
  delete RequestData::default_instance_;
  delete RequestData_reflection_;
  delete ResponseData::default_instance_;
  delete ResponseData_reflection_;
  delete RequestSaveReplay::default_instance_;
  delete RequestSaveReplay_reflection_;
  delete ResponseSaveReplay::default_instance_;
  delete ResponseSaveReplay_reflection_;
  delete RequestReplayInfo::default_instance_;
  delete RequestReplayInfo_default_oneof_instance_;
  delete RequestReplayInfo_reflection_;
  delete PlayerInfoExtra::default_instance_;
  delete PlayerInfoExtra_reflection_;
  delete ResponseReplayInfo::default_instance_;
  delete ResponseReplayInfo_reflection_;
  delete RequestAvailableMaps::default_instance_;
  delete RequestAvailableMaps_reflection_;
  delete ResponseAvailableMaps::default_instance_;
  delete ResponseAvailableMaps_reflection_;
  delete RequestSaveMap::default_instance_;
  delete RequestSaveMap_reflection_;
  delete ResponseSaveMap::default_instance_;
  delete ResponseSaveMap_reflection_;
  delete RequestPing::default_instance_;
  delete RequestPing_reflection_;
  delete ResponsePing::default_instance_;
  delete ResponsePing_reflection_;
  delete RequestDebug::default_instance_;
  delete RequestDebug_reflection_;
  delete ResponseDebug::default_instance_;
  delete ResponseDebug_reflection_;
  delete PlayerSetup::default_instance_;
  delete PlayerSetup_reflection_;
  delete SpatialCameraSetup::default_instance_;
  delete SpatialCameraSetup_reflection_;
  delete InterfaceOptions::default_instance_;
  delete InterfaceOptions_reflection_;
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete PlayerCommon::default_instance_;
  delete PlayerCommon_reflection_;
  delete Observation::default_instance_;
  delete Observation_reflection_;
  delete Action::default_instance_;
  delete Action_reflection_;
  delete ActionChat::default_instance_;
  delete ActionChat_reflection_;
  delete ActionError::default_instance_;
  delete ActionError_reflection_;
  delete PlayerResult::default_instance_;
  delete PlayerResult_reflection_;
}

void protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::SC2APIProtocol::protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  ::SC2APIProtocol::protobuf_AddDesc_s2clientprotocol_2fdata_2eproto();
  ::SC2APIProtocol::protobuf_AddDesc_s2clientprotocol_2fdebug_2eproto();
  ::SC2APIProtocol::protobuf_AddDesc_s2clientprotocol_2ferror_2eproto();
  ::SC2APIProtocol::protobuf_AddDesc_s2clientprotocol_2fquery_2eproto();
  ::SC2APIProtocol::protobuf_AddDesc_s2clientprotocol_2fraw_2eproto();
  ::SC2APIProtocol::protobuf_AddDesc_s2clientprotocol_2fscore_2eproto();
  ::SC2APIProtocol::protobuf_AddDesc_s2clientprotocol_2fspatial_2eproto();
  ::SC2APIProtocol::protobuf_AddDesc_s2clientprotocol_2fui_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035s2clientprotocol/sc2api.proto\022\016SC2APIP"
    "rotocol\032\035s2clientprotocol/common.proto\032\033"
    "s2clientprotocol/data.proto\032\034s2clientpro"
    "tocol/debug.proto\032\034s2clientprotocol/erro"
    "r.proto\032\034s2clientprotocol/query.proto\032\032s"
    "2clientprotocol/raw.proto\032\034s2clientproto"
    "col/score.proto\032\036s2clientprotocol/spatia"
    "l.proto\032\031s2clientprotocol/ui.proto\"\300\010\n\007R"
    "equest\0228\n\013create_game\030\001 \001(\0132!.SC2APIProt"
    "ocol.RequestCreateGameH\000\0224\n\tjoin_game\030\002 "
    "\001(\0132\037.SC2APIProtocol.RequestJoinGameH\000\022:"
    "\n\014restart_game\030\003 \001(\0132\".SC2APIProtocol.Re"
    "questRestartGameH\000\022:\n\014start_replay\030\004 \001(\013"
    "2\".SC2APIProtocol.RequestStartReplayH\000\0226"
    "\n\nleave_game\030\005 \001(\0132 .SC2APIProtocol.Requ"
    "estLeaveGameH\000\0226\n\nquick_save\030\006 \001(\0132 .SC2"
    "APIProtocol.RequestQuickSaveH\000\0226\n\nquick_"
    "load\030\007 \001(\0132 .SC2APIProtocol.RequestQuick"
    "LoadH\000\022+\n\004quit\030\010 \001(\0132\033.SC2APIProtocol.Re"
    "questQuitH\000\0224\n\tgame_info\030\t \001(\0132\037.SC2APIP"
    "rotocol.RequestGameInfoH\000\0229\n\013observation"
    "\030\n \001(\0132\".SC2APIProtocol.RequestObservati"
    "onH\000\022/\n\006action\030\013 \001(\0132\035.SC2APIProtocol.Re"
    "questActionH\000\022+\n\004step\030\014 \001(\0132\033.SC2APIProt"
    "ocol.RequestStepH\000\022+\n\004data\030\r \001(\0132\033.SC2AP"
    "IProtocol.RequestDataH\000\022-\n\005query\030\016 \001(\0132\034"
    ".SC2APIProtocol.RequestQueryH\000\0228\n\013save_r"
    "eplay\030\017 \001(\0132!.SC2APIProtocol.RequestSave"
    "ReplayH\000\0228\n\013replay_info\030\020 \001(\0132!.SC2APIPr"
    "otocol.RequestReplayInfoH\000\022>\n\016available_"
    "maps\030\021 \001(\0132$.SC2APIProtocol.RequestAvail"
    "ableMapsH\000\0222\n\010save_map\030\022 \001(\0132\036.SC2APIPro"
    "tocol.RequestSaveMapH\000\022+\n\004ping\030\023 \001(\0132\033.S"
    "C2APIProtocol.RequestPingH\000\022-\n\005debug\030\024 \001"
    "(\0132\034.SC2APIProtocol.RequestDebugH\000B\t\n\007re"
    "quest\"\215\t\n\010Response\0229\n\013create_game\030\001 \001(\0132"
    "\".SC2APIProtocol.ResponseCreateGameH\000\0225\n"
    "\tjoin_game\030\002 \001(\0132 .SC2APIProtocol.Respon"
    "seJoinGameH\000\022;\n\014restart_game\030\003 \001(\0132#.SC2"
    "APIProtocol.ResponseRestartGameH\000\022;\n\014sta"
    "rt_replay\030\004 \001(\0132#.SC2APIProtocol.Respons"
    "eStartReplayH\000\0227\n\nleave_game\030\005 \001(\0132!.SC2"
    "APIProtocol.ResponseLeaveGameH\000\0227\n\nquick"
    "_save\030\006 \001(\0132!.SC2APIProtocol.ResponseQui"
    "ckSaveH\000\0227\n\nquick_load\030\007 \001(\0132!.SC2APIPro"
    "tocol.ResponseQuickLoadH\000\022,\n\004quit\030\010 \001(\0132"
    "\034.SC2APIProtocol.ResponseQuitH\000\0225\n\tgame_"
    "info\030\t \001(\0132 .SC2APIProtocol.ResponseGame"
    "InfoH\000\022:\n\013observation\030\n \001(\0132#.SC2APIProt"
    "ocol.ResponseObservationH\000\0220\n\006action\030\013 \001"
    "(\0132\036.SC2APIProtocol.ResponseActionH\000\022,\n\004"
    "step\030\014 \001(\0132\034.SC2APIProtocol.ResponseStep"
    "H\000\022,\n\004data\030\r \001(\0132\034.SC2APIProtocol.Respon"
    "seDataH\000\022.\n\005query\030\016 \001(\0132\035.SC2APIProtocol"
    ".ResponseQueryH\000\0229\n\013save_replay\030\017 \001(\0132\"."
    "SC2APIProtocol.ResponseSaveReplayH\000\0229\n\013r"
    "eplay_info\030\020 \001(\0132\".SC2APIProtocol.Respon"
    "seReplayInfoH\000\022\?\n\016available_maps\030\021 \001(\0132%"
    ".SC2APIProtocol.ResponseAvailableMapsH\000\022"
    "3\n\010save_map\030\022 \001(\0132\037.SC2APIProtocol.Respo"
    "nseSaveMapH\000\022,\n\004ping\030\023 \001(\0132\034.SC2APIProto"
    "col.ResponsePingH\000\022.\n\005debug\030\024 \001(\0132\035.SC2A"
    "PIProtocol.ResponseDebugH\000\022\r\n\005error\030b \003("
    "\t\022&\n\006status\030c \001(\0162\026.SC2APIProtocol.Statu"
    "sB\n\n\010response\"\326\001\n\021RequestCreateGame\022-\n\tl"
    "ocal_map\030\001 \001(\0132\030.SC2APIProtocol.LocalMap"
    "H\000\022\034\n\022battlenet_map_name\030\002 \001(\tH\000\0221\n\014play"
    "er_setup\030\003 \003(\0132\033.SC2APIProtocol.PlayerSe"
    "tup\022\023\n\013disable_fog\030\004 \001(\010\022\023\n\013random_seed\030"
    "\005 \001(\r\022\020\n\010realtime\030\006 \001(\010B\005\n\003Map\".\n\010LocalM"
    "ap\022\020\n\010map_path\030\001 \001(\t\022\020\n\010map_data\030\007 \001(\014\"\234"
    "\002\n\022ResponseCreateGame\0227\n\005error\030\001 \001(\0162(.S"
    "C2APIProtocol.ResponseCreateGame.Error\022\025"
    "\n\rerror_details\030\002 \001(\t\"\265\001\n\005Error\022\016\n\nMissi"
    "ngMap\020\001\022\022\n\016InvalidMapPath\020\002\022\022\n\016InvalidMa"
    "pData\020\003\022\022\n\016InvalidMapName\020\004\022\024\n\020InvalidMa"
    "pHandle\020\005\022\026\n\022MissingPlayerSetup\020\006\022\026\n\022Inv"
    "alidPlayerSetup\020\007\022\032\n\026MultiplayerUnsuppor"
    "ted\020\010\"\214\002\n\017RequestJoinGame\022$\n\004race\030\001 \001(\0162"
    "\024.SC2APIProtocol.RaceH\000\022\034\n\022observed_play"
    "er_id\030\002 \001(\rH\000\0221\n\007options\030\003 \001(\0132 .SC2APIP"
    "rotocol.InterfaceOptions\022-\n\014server_ports"
    "\030\004 \001(\0132\027.SC2APIProtocol.PortSet\022-\n\014clien"
    "t_ports\030\005 \003(\0132\027.SC2APIProtocol.PortSet\022\023"
    "\n\013shared_port\030\006 \001(\005B\017\n\rparticipation\"/\n\007"
    "PortSet\022\021\n\tgame_port\030\001 \001(\005\022\021\n\tbase_port\030"
    "\002 \001(\005\"\202\003\n\020ResponseJoinGame\022\021\n\tplayer_id\030"
    "\001 \001(\r\0225\n\005error\030\002 \001(\0162&.SC2APIProtocol.Re"
    "sponseJoinGame.Error\022\025\n\rerror_details\030\003 "
    "\001(\t\"\214\002\n\005Error\022\030\n\024MissingParticipation\020\001\022"
    "\033\n\027InvalidObservedPlayerId\020\002\022\022\n\016MissingO"
    "ptions\020\003\022\020\n\014MissingPorts\020\004\022\014\n\010GameFull\020\005"
    "\022\017\n\013LaunchError\020\006\022\026\n\022FeatureUnsupported\020"
    "\007\022\022\n\016NoSpaceForUser\020\010\022\023\n\017MapDoesNotExist"
    "\020\t\022\021\n\rCannotOpenMap\020\n\022\021\n\rChecksumError\020\013"
    "\022\020\n\014NetworkError\020\014\022\016\n\nOtherError\020\r\"\024\n\022Re"
    "questRestartGame\"\200\001\n\023ResponseRestartGame"
    "\0228\n\005error\030\001 \001(\0162).SC2APIProtocol.Respons"
    "eRestartGame.Error\022\025\n\rerror_details\030\002 \001("
    "\t\"\030\n\005Error\022\017\n\013LaunchError\020\001\"\302\001\n\022RequestS"
    "tartReplay\022\025\n\013replay_path\030\001 \001(\tH\000\022\025\n\013rep"
    "lay_data\030\005 \001(\014H\000\022\020\n\010map_data\030\006 \001(\014\022\032\n\022ob"
    "served_player_id\030\002 \001(\005\0221\n\007options\030\003 \001(\0132"
    " .SC2APIProtocol.InterfaceOptions\022\023\n\013dis"
    "able_fog\030\004 \001(\010B\010\n\006replay\"\207\002\n\023ResponseSta"
    "rtReplay\0228\n\005error\030\001 \001(\0162).SC2APIProtocol"
    ".ResponseStartReplay.Error\022\025\n\rerror_deta"
    "ils\030\002 \001(\t\"\236\001\n\005Error\022\021\n\rMissingReplay\020\001\022\025"
    "\n\021InvalidReplayPath\020\002\022\025\n\021InvalidReplayDa"
    "ta\020\003\022\022\n\016InvalidMapData\020\004\022\033\n\027InvalidObser"
    "vedPlayerId\020\005\022\022\n\016MissingOptions\020\006\022\017\n\013Lau"
    "nchError\020\007\"\022\n\020RequestLeaveGame\"\023\n\021Respon"
    "seLeaveGame\"\022\n\020RequestQuickSave\"\023\n\021Respo"
    "nseQuickSave\"\022\n\020RequestQuickLoad\"\023\n\021Resp"
    "onseQuickLoad\"\r\n\013RequestQuit\"\016\n\014Response"
    "Quit\"\021\n\017RequestGameInfo\"\340\001\n\020ResponseGame"
    "Info\022\020\n\010map_name\030\001 \001(\t\022\021\n\tmod_names\030\006 \003("
    "\t\022\026\n\016local_map_path\030\002 \001(\t\022/\n\013player_info"
    "\030\003 \003(\0132\032.SC2APIProtocol.PlayerInfo\022+\n\tst"
    "art_raw\030\004 \001(\0132\030.SC2APIProtocol.StartRaw\022"
    "1\n\007options\030\005 \001(\0132 .SC2APIProtocol.Interf"
    "aceOptions\")\n\022RequestObservation\022\023\n\013disa"
    "ble_fog\030\001 \001(\010\"\205\002\n\023ResponseObservation\022\'\n"
    "\007actions\030\001 \003(\0132\026.SC2APIProtocol.Action\0222"
    "\n\raction_errors\030\002 \003(\0132\033.SC2APIProtocol.A"
    "ctionError\0220\n\013observation\030\003 \001(\0132\033.SC2API"
    "Protocol.Observation\0223\n\rplayer_result\030\004 "
    "\003(\0132\034.SC2APIProtocol.PlayerResult\022*\n\004cha"
    "t\030\005 \003(\0132\034.SC2APIProtocol.ChatReceived\"2\n"
    "\014ChatReceived\022\021\n\tplayer_id\030\001 \001(\005\022\017\n\007mess"
    "age\030\002 \001(\t\"8\n\rRequestAction\022\'\n\007actions\030\001 "
    "\003(\0132\026.SC2APIProtocol.Action\">\n\016ResponseA"
    "ction\022,\n\006result\030\001 \003(\0162\034.SC2APIProtocol.A"
    "ctionResult\"\034\n\013RequestStep\022\r\n\005count\030\001 \001("
    "\r\"\016\n\014ResponseStep\"\\\n\013RequestData\022\022\n\nabil"
    "ity_id\030\001 \001(\010\022\024\n\014unit_type_id\030\002 \001(\010\022\022\n\nup"
    "grade_id\030\003 \001(\010\022\017\n\007buff_id\030\004 \001(\010\"\303\001\n\014Resp"
    "onseData\022.\n\tabilities\030\001 \003(\0132\033.SC2APIProt"
    "ocol.AbilityData\022+\n\005units\030\002 \003(\0132\034.SC2API"
    "Protocol.UnitTypeData\022-\n\010upgrades\030\003 \003(\0132"
    "\033.SC2APIProtocol.UpgradeData\022\'\n\005buffs\030\004 "
    "\003(\0132\030.SC2APIProtocol.BuffData\"\023\n\021Request"
    "SaveReplay\"\"\n\022ResponseSaveReplay\022\014\n\004data"
    "\030\001 \001(\014\"b\n\021RequestReplayInfo\022\025\n\013replay_pa"
    "th\030\001 \001(\tH\000\022\025\n\013replay_data\030\002 \001(\014H\000\022\025\n\rdow"
    "nload_data\030\003 \001(\010B\010\n\006replay\"\237\001\n\017PlayerInf"
    "oExtra\022/\n\013player_info\030\001 \001(\0132\032.SC2APIProt"
    "ocol.PlayerInfo\0223\n\rplayer_result\030\002 \001(\0132\034"
    ".SC2APIProtocol.PlayerResult\022\022\n\nplayer_m"
    "mr\030\003 \001(\005\022\022\n\nplayer_apm\030\004 \001(\005\"\303\003\n\022Respons"
    "eReplayInfo\022\020\n\010map_name\030\001 \001(\t\022\026\n\016local_m"
    "ap_path\030\002 \001(\t\0224\n\013player_info\030\003 \003(\0132\037.SC2"
    "APIProtocol.PlayerInfoExtra\022\033\n\023game_dura"
    "tion_loops\030\004 \001(\r\022\035\n\025game_duration_second"
    "s\030\005 \001(\002\022\024\n\014game_version\030\006 \001(\t\022\024\n\014data_ve"
    "rsion\030\013 \001(\t\022\022\n\ndata_build\030\007 \001(\r\022\022\n\nbase_"
    "build\030\010 \001(\r\0227\n\005error\030\t \001(\0162(.SC2APIProto"
    "col.ResponseReplayInfo.Error\022\025\n\rerror_de"
    "tails\030\n \001(\t\"m\n\005Error\022\021\n\rMissingReplay\020\001\022"
    "\025\n\021InvalidReplayPath\020\002\022\025\n\021InvalidReplayD"
    "ata\020\003\022\020\n\014ParsingError\020\004\022\021\n\rDownloadError"
    "\020\005\"\026\n\024RequestAvailableMaps\"M\n\025ResponseAv"
    "ailableMaps\022\027\n\017local_map_paths\030\001 \003(\t\022\033\n\023"
    "battlenet_map_names\030\002 \003(\t\"4\n\016RequestSave"
    "Map\022\020\n\010map_path\030\001 \001(\t\022\020\n\010map_data\030\002 \001(\014\""
    "d\n\017ResponseSaveMap\0224\n\005error\030\001 \001(\0162%.SC2A"
    "PIProtocol.ResponseSaveMap.Error\"\033\n\005Erro"
    "r\022\022\n\016InvalidMapData\020\001\"\r\n\013RequestPing\"b\n\014"
    "ResponsePing\022\024\n\014game_version\030\001 \001(\t\022\024\n\014da"
    "ta_version\030\002 \001(\t\022\022\n\ndata_build\030\003 \001(\r\022\022\n\n"
    "base_build\030\004 \001(\r\";\n\014RequestDebug\022+\n\005debu"
    "g\030\001 \003(\0132\034.SC2APIProtocol.DebugCommand\"\017\n"
    "\rResponseDebug\"\213\001\n\013PlayerSetup\022(\n\004type\030\001"
    " \001(\0162\032.SC2APIProtocol.PlayerType\022\"\n\004race"
    "\030\002 \001(\0162\024.SC2APIProtocol.Race\022.\n\ndifficul"
    "ty\030\003 \001(\0162\032.SC2APIProtocol.Difficulty\"\205\001\n"
    "\022SpatialCameraSetup\022\r\n\005width\030\001 \001(\002\022+\n\nre"
    "solution\030\002 \001(\0132\027.SC2APIProtocol.Size2DI\022"
    "3\n\022minimap_resolution\030\003 \001(\0132\027.SC2APIProt"
    "ocol.Size2DI\"\235\001\n\020InterfaceOptions\022\013\n\003raw"
    "\030\001 \001(\010\022\r\n\005score\030\002 \001(\010\0229\n\rfeature_layer\030\003"
    " \001(\0132\".SC2APIProtocol.SpatialCameraSetup"
    "\0222\n\006render\030\004 \001(\0132\".SC2APIProtocol.Spatia"
    "lCameraSetup\"\322\001\n\nPlayerInfo\022\021\n\tplayer_id"
    "\030\001 \001(\r\022(\n\004type\030\002 \001(\0162\032.SC2APIProtocol.Pl"
    "ayerType\022,\n\016race_requested\030\003 \001(\0162\024.SC2AP"
    "IProtocol.Race\022)\n\013race_actual\030\004 \001(\0162\024.SC"
    "2APIProtocol.Race\022.\n\ndifficulty\030\005 \001(\0162\032."
    "SC2APIProtocol.Difficulty\"\357\001\n\014PlayerComm"
    "on\022\021\n\tplayer_id\030\001 \001(\r\022\020\n\010minerals\030\002 \001(\r\022"
    "\017\n\007vespene\030\003 \001(\r\022\020\n\010food_cap\030\004 \001(\r\022\021\n\tfo"
    "od_used\030\005 \001(\r\022\021\n\tfood_army\030\006 \001(\r\022\024\n\014food"
    "_workers\030\007 \001(\r\022\031\n\021idle_worker_count\030\010 \001("
    "\r\022\022\n\narmy_count\030\t \001(\r\022\027\n\017warp_gate_count"
    "\030\n \001(\r\022\023\n\013larva_count\030\013 \001(\r\"\266\003\n\013Observat"
    "ion\022\021\n\tgame_loop\030\t \001(\r\0223\n\rplayer_common\030"
    "\001 \001(\0132\034.SC2APIProtocol.PlayerCommon\022%\n\006a"
    "lerts\030\n \003(\0162\025.SC2APIProtocol.Alert\0223\n\tab"
    "ilities\030\003 \003(\0132 .SC2APIProtocol.Available"
    "Ability\022$\n\005score\030\004 \001(\0132\025.SC2APIProtocol."
    "Score\0220\n\010raw_data\030\005 \001(\0132\036.SC2APIProtocol"
    ".ObservationRaw\022C\n\022feature_layer_data\030\006 "
    "\001(\0132\'.SC2APIProtocol.ObservationFeatureL"
    "ayer\0226\n\013render_data\030\007 \001(\0132!.SC2APIProtoc"
    "ol.ObservationRender\022.\n\007ui_data\030\010 \001(\0132\035."
    "SC2APIProtocol.ObservationUI\"\201\002\n\006Action\022"
    "-\n\naction_raw\030\001 \001(\0132\031.SC2APIProtocol.Act"
    "ionRaw\022;\n\024action_feature_layer\030\002 \001(\0132\035.S"
    "C2APIProtocol.ActionSpatial\0224\n\raction_re"
    "nder\030\003 \001(\0132\035.SC2APIProtocol.ActionSpatia"
    "l\022+\n\taction_ui\030\004 \001(\0132\030.SC2APIProtocol.Ac"
    "tionUI\022(\n\004chat\030\005 \003(\0132\032.SC2APIProtocol.Ac"
    "tionChat\"v\n\nActionChat\0223\n\007channel\030\001 \001(\0162"
    "\".SC2APIProtocol.ActionChat.Channel\022\017\n\007m"
    "essage\030\002 \001(\t\"\"\n\007Channel\022\r\n\tBroadcast\020\001\022\010"
    "\n\004Team\020\002\"a\n\013ActionError\022\020\n\010unit_tag\030\001 \001("
    "\004\022\022\n\nability_id\030\002 \001(\004\022,\n\006result\030\003 \001(\0162\034."
    "SC2APIProtocol.ActionResult\"I\n\014PlayerRes"
    "ult\022\021\n\tplayer_id\030\001 \001(\r\022&\n\006result\030\002 \001(\0162\026"
    ".SC2APIProtocol.Result*c\n\006Status\022\014\n\010laun"
    "ched\020\001\022\r\n\tinit_game\020\002\022\013\n\007in_game\020\003\022\r\n\tin"
    "_replay\020\004\022\t\n\005ended\020\005\022\010\n\004quit\020\006\022\013\n\007unknow"
    "n\020c*\226\001\n\nDifficulty\022\014\n\010VeryEasy\020\001\022\010\n\004Easy"
    "\020\002\022\n\n\006Medium\020\003\022\016\n\nMediumHard\020\004\022\010\n\004Hard\020\005"
    "\022\n\n\006Harder\020\006\022\014\n\010VeryHard\020\007\022\017\n\013CheatVisio"
    "n\020\010\022\016\n\nCheatMoney\020\t\022\017\n\013CheatInsane\020\n*9\n\n"
    "PlayerType\022\017\n\013Participant\020\001\022\014\n\010Computer\020"
    "\002\022\014\n\010Observer\020\003*9\n\005Alert\022\031\n\025NuclearLaunc"
    "hDetected\020\001\022\025\n\021NydusWormDetected\020\002*9\n\006Re"
    "sult\022\013\n\007Victory\020\001\022\n\n\006Defeat\020\002\022\007\n\003Tie\020\003\022\r"
    "\n\tUndecided\020\004", 9213);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "s2clientprotocol/sc2api.proto", &protobuf_RegisterTypes);
  Request::default_instance_ = new Request();
  Request_default_oneof_instance_ = new RequestOneofInstance();
  Response::default_instance_ = new Response();
  Response_default_oneof_instance_ = new ResponseOneofInstance();
  RequestCreateGame::default_instance_ = new RequestCreateGame();
  RequestCreateGame_default_oneof_instance_ = new RequestCreateGameOneofInstance();
  LocalMap::default_instance_ = new LocalMap();
  ResponseCreateGame::default_instance_ = new ResponseCreateGame();
  RequestJoinGame::default_instance_ = new RequestJoinGame();
  RequestJoinGame_default_oneof_instance_ = new RequestJoinGameOneofInstance();
  PortSet::default_instance_ = new PortSet();
  ResponseJoinGame::default_instance_ = new ResponseJoinGame();
  RequestRestartGame::default_instance_ = new RequestRestartGame();
  ResponseRestartGame::default_instance_ = new ResponseRestartGame();
  RequestStartReplay::default_instance_ = new RequestStartReplay();
  RequestStartReplay_default_oneof_instance_ = new RequestStartReplayOneofInstance();
  ResponseStartReplay::default_instance_ = new ResponseStartReplay();
  RequestLeaveGame::default_instance_ = new RequestLeaveGame();
  ResponseLeaveGame::default_instance_ = new ResponseLeaveGame();
  RequestQuickSave::default_instance_ = new RequestQuickSave();
  ResponseQuickSave::default_instance_ = new ResponseQuickSave();
  RequestQuickLoad::default_instance_ = new RequestQuickLoad();
  ResponseQuickLoad::default_instance_ = new ResponseQuickLoad();
  RequestQuit::default_instance_ = new RequestQuit();
  ResponseQuit::default_instance_ = new ResponseQuit();
  RequestGameInfo::default_instance_ = new RequestGameInfo();
  ResponseGameInfo::default_instance_ = new ResponseGameInfo();
  RequestObservation::default_instance_ = new RequestObservation();
  ResponseObservation::default_instance_ = new ResponseObservation();
  ChatReceived::default_instance_ = new ChatReceived();
  RequestAction::default_instance_ = new RequestAction();
  ResponseAction::default_instance_ = new ResponseAction();
  RequestStep::default_instance_ = new RequestStep();
  ResponseStep::default_instance_ = new ResponseStep();
  RequestData::default_instance_ = new RequestData();
  ResponseData::default_instance_ = new ResponseData();
  RequestSaveReplay::default_instance_ = new RequestSaveReplay();
  ResponseSaveReplay::default_instance_ = new ResponseSaveReplay();
  RequestReplayInfo::default_instance_ = new RequestReplayInfo();
  RequestReplayInfo_default_oneof_instance_ = new RequestReplayInfoOneofInstance();
  PlayerInfoExtra::default_instance_ = new PlayerInfoExtra();
  ResponseReplayInfo::default_instance_ = new ResponseReplayInfo();
  RequestAvailableMaps::default_instance_ = new RequestAvailableMaps();
  ResponseAvailableMaps::default_instance_ = new ResponseAvailableMaps();
  RequestSaveMap::default_instance_ = new RequestSaveMap();
  ResponseSaveMap::default_instance_ = new ResponseSaveMap();
  RequestPing::default_instance_ = new RequestPing();
  ResponsePing::default_instance_ = new ResponsePing();
  RequestDebug::default_instance_ = new RequestDebug();
  ResponseDebug::default_instance_ = new ResponseDebug();
  PlayerSetup::default_instance_ = new PlayerSetup();
  SpatialCameraSetup::default_instance_ = new SpatialCameraSetup();
  InterfaceOptions::default_instance_ = new InterfaceOptions();
  PlayerInfo::default_instance_ = new PlayerInfo();
  PlayerCommon::default_instance_ = new PlayerCommon();
  Observation::default_instance_ = new Observation();
  Action::default_instance_ = new Action();
  ActionChat::default_instance_ = new ActionChat();
  ActionError::default_instance_ = new ActionError();
  PlayerResult::default_instance_ = new PlayerResult();
  Request::default_instance_->InitAsDefaultInstance();
  Response::default_instance_->InitAsDefaultInstance();
  RequestCreateGame::default_instance_->InitAsDefaultInstance();
  LocalMap::default_instance_->InitAsDefaultInstance();
  ResponseCreateGame::default_instance_->InitAsDefaultInstance();
  RequestJoinGame::default_instance_->InitAsDefaultInstance();
  PortSet::default_instance_->InitAsDefaultInstance();
  ResponseJoinGame::default_instance_->InitAsDefaultInstance();
  RequestRestartGame::default_instance_->InitAsDefaultInstance();
  ResponseRestartGame::default_instance_->InitAsDefaultInstance();
  RequestStartReplay::default_instance_->InitAsDefaultInstance();
  ResponseStartReplay::default_instance_->InitAsDefaultInstance();
  RequestLeaveGame::default_instance_->InitAsDefaultInstance();
  ResponseLeaveGame::default_instance_->InitAsDefaultInstance();
  RequestQuickSave::default_instance_->InitAsDefaultInstance();
  ResponseQuickSave::default_instance_->InitAsDefaultInstance();
  RequestQuickLoad::default_instance_->InitAsDefaultInstance();
  ResponseQuickLoad::default_instance_->InitAsDefaultInstance();
  RequestQuit::default_instance_->InitAsDefaultInstance();
  ResponseQuit::default_instance_->InitAsDefaultInstance();
  RequestGameInfo::default_instance_->InitAsDefaultInstance();
  ResponseGameInfo::default_instance_->InitAsDefaultInstance();
  RequestObservation::default_instance_->InitAsDefaultInstance();
  ResponseObservation::default_instance_->InitAsDefaultInstance();
  ChatReceived::default_instance_->InitAsDefaultInstance();
  RequestAction::default_instance_->InitAsDefaultInstance();
  ResponseAction::default_instance_->InitAsDefaultInstance();
  RequestStep::default_instance_->InitAsDefaultInstance();
  ResponseStep::default_instance_->InitAsDefaultInstance();
  RequestData::default_instance_->InitAsDefaultInstance();
  ResponseData::default_instance_->InitAsDefaultInstance();
  RequestSaveReplay::default_instance_->InitAsDefaultInstance();
  ResponseSaveReplay::default_instance_->InitAsDefaultInstance();
  RequestReplayInfo::default_instance_->InitAsDefaultInstance();
  PlayerInfoExtra::default_instance_->InitAsDefaultInstance();
  ResponseReplayInfo::default_instance_->InitAsDefaultInstance();
  RequestAvailableMaps::default_instance_->InitAsDefaultInstance();
  ResponseAvailableMaps::default_instance_->InitAsDefaultInstance();
  RequestSaveMap::default_instance_->InitAsDefaultInstance();
  ResponseSaveMap::default_instance_->InitAsDefaultInstance();
  RequestPing::default_instance_->InitAsDefaultInstance();
  ResponsePing::default_instance_->InitAsDefaultInstance();
  RequestDebug::default_instance_->InitAsDefaultInstance();
  ResponseDebug::default_instance_->InitAsDefaultInstance();
  PlayerSetup::default_instance_->InitAsDefaultInstance();
  SpatialCameraSetup::default_instance_->InitAsDefaultInstance();
  InterfaceOptions::default_instance_->InitAsDefaultInstance();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  PlayerCommon::default_instance_->InitAsDefaultInstance();
  Observation::default_instance_->InitAsDefaultInstance();
  Action::default_instance_->InitAsDefaultInstance();
  ActionChat::default_instance_->InitAsDefaultInstance();
  ActionError::default_instance_->InitAsDefaultInstance();
  PlayerResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_s2clientprotocol_2fsc2api_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_s2clientprotocol_2fsc2api_2eproto {
  StaticDescriptorInitializer_s2clientprotocol_2fsc2api_2eproto() {
    protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  }
} static_descriptor_initializer_s2clientprotocol_2fsc2api_2eproto_;
const ::google::protobuf::EnumDescriptor* Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}
bool Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 99:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Difficulty_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Difficulty_descriptor_;
}
bool Difficulty_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlayerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerType_descriptor_;
}
bool PlayerType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Alert_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Alert_descriptor_;
}
bool Alert_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}
bool Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Request::kCreateGameFieldNumber;
const int Request::kJoinGameFieldNumber;
const int Request::kRestartGameFieldNumber;
const int Request::kStartReplayFieldNumber;
const int Request::kLeaveGameFieldNumber;
const int Request::kQuickSaveFieldNumber;
const int Request::kQuickLoadFieldNumber;
const int Request::kQuitFieldNumber;
const int Request::kGameInfoFieldNumber;
const int Request::kObservationFieldNumber;
const int Request::kActionFieldNumber;
const int Request::kStepFieldNumber;
const int Request::kDataFieldNumber;
const int Request::kQueryFieldNumber;
const int Request::kSaveReplayFieldNumber;
const int Request::kReplayInfoFieldNumber;
const int Request::kAvailableMapsFieldNumber;
const int Request::kSaveMapFieldNumber;
const int Request::kPingFieldNumber;
const int Request::kDebugFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Request::Request()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.Request)
}

void Request::InitAsDefaultInstance() {
  Request_default_oneof_instance_->create_game_ = const_cast< ::SC2APIProtocol::RequestCreateGame*>(&::SC2APIProtocol::RequestCreateGame::default_instance());
  Request_default_oneof_instance_->join_game_ = const_cast< ::SC2APIProtocol::RequestJoinGame*>(&::SC2APIProtocol::RequestJoinGame::default_instance());
  Request_default_oneof_instance_->restart_game_ = const_cast< ::SC2APIProtocol::RequestRestartGame*>(&::SC2APIProtocol::RequestRestartGame::default_instance());
  Request_default_oneof_instance_->start_replay_ = const_cast< ::SC2APIProtocol::RequestStartReplay*>(&::SC2APIProtocol::RequestStartReplay::default_instance());
  Request_default_oneof_instance_->leave_game_ = const_cast< ::SC2APIProtocol::RequestLeaveGame*>(&::SC2APIProtocol::RequestLeaveGame::default_instance());
  Request_default_oneof_instance_->quick_save_ = const_cast< ::SC2APIProtocol::RequestQuickSave*>(&::SC2APIProtocol::RequestQuickSave::default_instance());
  Request_default_oneof_instance_->quick_load_ = const_cast< ::SC2APIProtocol::RequestQuickLoad*>(&::SC2APIProtocol::RequestQuickLoad::default_instance());
  Request_default_oneof_instance_->quit_ = const_cast< ::SC2APIProtocol::RequestQuit*>(&::SC2APIProtocol::RequestQuit::default_instance());
  Request_default_oneof_instance_->game_info_ = const_cast< ::SC2APIProtocol::RequestGameInfo*>(&::SC2APIProtocol::RequestGameInfo::default_instance());
  Request_default_oneof_instance_->observation_ = const_cast< ::SC2APIProtocol::RequestObservation*>(&::SC2APIProtocol::RequestObservation::default_instance());
  Request_default_oneof_instance_->action_ = const_cast< ::SC2APIProtocol::RequestAction*>(&::SC2APIProtocol::RequestAction::default_instance());
  Request_default_oneof_instance_->step_ = const_cast< ::SC2APIProtocol::RequestStep*>(&::SC2APIProtocol::RequestStep::default_instance());
  Request_default_oneof_instance_->data_ = const_cast< ::SC2APIProtocol::RequestData*>(&::SC2APIProtocol::RequestData::default_instance());
  Request_default_oneof_instance_->query_ = const_cast< ::SC2APIProtocol::RequestQuery*>(&::SC2APIProtocol::RequestQuery::default_instance());
  Request_default_oneof_instance_->save_replay_ = const_cast< ::SC2APIProtocol::RequestSaveReplay*>(&::SC2APIProtocol::RequestSaveReplay::default_instance());
  Request_default_oneof_instance_->replay_info_ = const_cast< ::SC2APIProtocol::RequestReplayInfo*>(&::SC2APIProtocol::RequestReplayInfo::default_instance());
  Request_default_oneof_instance_->available_maps_ = const_cast< ::SC2APIProtocol::RequestAvailableMaps*>(&::SC2APIProtocol::RequestAvailableMaps::default_instance());
  Request_default_oneof_instance_->save_map_ = const_cast< ::SC2APIProtocol::RequestSaveMap*>(&::SC2APIProtocol::RequestSaveMap::default_instance());
  Request_default_oneof_instance_->ping_ = const_cast< ::SC2APIProtocol::RequestPing*>(&::SC2APIProtocol::RequestPing::default_instance());
  Request_default_oneof_instance_->debug_ = const_cast< ::SC2APIProtocol::RequestDebug*>(&::SC2APIProtocol::RequestDebug::default_instance());
}

Request::Request(const Request& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Request)
}

void Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_request();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Request)
  SharedDtor();
}

void Request::SharedDtor() {
  if (has_request()) {
    clear_request();
  }
  if (this != default_instance_) {
  }
}

void Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Request_descriptor_;
}

const Request& Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

Request* Request::default_instance_ = NULL;

Request* Request::New(::google::protobuf::Arena* arena) const {
  Request* n = new Request;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Request::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.Request)
  switch(request_case()) {
    case kCreateGame: {
      delete request_.create_game_;
      break;
    }
    case kJoinGame: {
      delete request_.join_game_;
      break;
    }
    case kRestartGame: {
      delete request_.restart_game_;
      break;
    }
    case kStartReplay: {
      delete request_.start_replay_;
      break;
    }
    case kLeaveGame: {
      delete request_.leave_game_;
      break;
    }
    case kQuickSave: {
      delete request_.quick_save_;
      break;
    }
    case kQuickLoad: {
      delete request_.quick_load_;
      break;
    }
    case kQuit: {
      delete request_.quit_;
      break;
    }
    case kGameInfo: {
      delete request_.game_info_;
      break;
    }
    case kObservation: {
      delete request_.observation_;
      break;
    }
    case kAction: {
      delete request_.action_;
      break;
    }
    case kStep: {
      delete request_.step_;
      break;
    }
    case kData: {
      delete request_.data_;
      break;
    }
    case kQuery: {
      delete request_.query_;
      break;
    }
    case kSaveReplay: {
      delete request_.save_replay_;
      break;
    }
    case kReplayInfo: {
      delete request_.replay_info_;
      break;
    }
    case kAvailableMaps: {
      delete request_.available_maps_;
      break;
    }
    case kSaveMap: {
      delete request_.save_map_;
      break;
    }
    case kPing: {
      delete request_.ping_;
      break;
    }
    case kDebug: {
      delete request_.debug_;
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Request)
  clear_request();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.Request)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.RequestCreateGame create_game = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_game()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_join_game;
        break;
      }

      // optional .SC2APIProtocol.RequestJoinGame join_game = 2;
      case 2: {
        if (tag == 18) {
         parse_join_game:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_join_game()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_restart_game;
        break;
      }

      // optional .SC2APIProtocol.RequestRestartGame restart_game = 3;
      case 3: {
        if (tag == 26) {
         parse_restart_game:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_restart_game()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_start_replay;
        break;
      }

      // optional .SC2APIProtocol.RequestStartReplay start_replay = 4;
      case 4: {
        if (tag == 34) {
         parse_start_replay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_replay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_leave_game;
        break;
      }

      // optional .SC2APIProtocol.RequestLeaveGame leave_game = 5;
      case 5: {
        if (tag == 42) {
         parse_leave_game:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leave_game()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_quick_save;
        break;
      }

      // optional .SC2APIProtocol.RequestQuickSave quick_save = 6;
      case 6: {
        if (tag == 50) {
         parse_quick_save:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quick_save()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_quick_load;
        break;
      }

      // optional .SC2APIProtocol.RequestQuickLoad quick_load = 7;
      case 7: {
        if (tag == 58) {
         parse_quick_load:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quick_load()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_quit;
        break;
      }

      // optional .SC2APIProtocol.RequestQuit quit = 8;
      case 8: {
        if (tag == 66) {
         parse_quit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_game_info;
        break;
      }

      // optional .SC2APIProtocol.RequestGameInfo game_info = 9;
      case 9: {
        if (tag == 74) {
         parse_game_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_observation;
        break;
      }

      // optional .SC2APIProtocol.RequestObservation observation = 10;
      case 10: {
        if (tag == 82) {
         parse_observation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_observation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_action;
        break;
      }

      // optional .SC2APIProtocol.RequestAction action = 11;
      case 11: {
        if (tag == 90) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_step;
        break;
      }

      // optional .SC2APIProtocol.RequestStep step = 12;
      case 12: {
        if (tag == 98) {
         parse_step:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_step()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_data;
        break;
      }

      // optional .SC2APIProtocol.RequestData data = 13;
      case 13: {
        if (tag == 106) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_query;
        break;
      }

      // optional .SC2APIProtocol.RequestQuery query = 14;
      case 14: {
        if (tag == 114) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_save_replay;
        break;
      }

      // optional .SC2APIProtocol.RequestSaveReplay save_replay = 15;
      case 15: {
        if (tag == 122) {
         parse_save_replay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_save_replay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_replay_info;
        break;
      }

      // optional .SC2APIProtocol.RequestReplayInfo replay_info = 16;
      case 16: {
        if (tag == 130) {
         parse_replay_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replay_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_available_maps;
        break;
      }

      // optional .SC2APIProtocol.RequestAvailableMaps available_maps = 17;
      case 17: {
        if (tag == 138) {
         parse_available_maps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_available_maps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_save_map;
        break;
      }

      // optional .SC2APIProtocol.RequestSaveMap save_map = 18;
      case 18: {
        if (tag == 146) {
         parse_save_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_save_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_ping;
        break;
      }

      // optional .SC2APIProtocol.RequestPing ping = 19;
      case 19: {
        if (tag == 154) {
         parse_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_debug;
        break;
      }

      // optional .SC2APIProtocol.RequestDebug debug = 20;
      case 20: {
        if (tag == 162) {
         parse_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.Request)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.Request)
  return false;
#undef DO_
}

void Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.Request)
  // optional .SC2APIProtocol.RequestCreateGame create_game = 1;
  if (has_create_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *request_.create_game_, output);
  }

  // optional .SC2APIProtocol.RequestJoinGame join_game = 2;
  if (has_join_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *request_.join_game_, output);
  }

  // optional .SC2APIProtocol.RequestRestartGame restart_game = 3;
  if (has_restart_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *request_.restart_game_, output);
  }

  // optional .SC2APIProtocol.RequestStartReplay start_replay = 4;
  if (has_start_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *request_.start_replay_, output);
  }

  // optional .SC2APIProtocol.RequestLeaveGame leave_game = 5;
  if (has_leave_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *request_.leave_game_, output);
  }

  // optional .SC2APIProtocol.RequestQuickSave quick_save = 6;
  if (has_quick_save()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *request_.quick_save_, output);
  }

  // optional .SC2APIProtocol.RequestQuickLoad quick_load = 7;
  if (has_quick_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *request_.quick_load_, output);
  }

  // optional .SC2APIProtocol.RequestQuit quit = 8;
  if (has_quit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *request_.quit_, output);
  }

  // optional .SC2APIProtocol.RequestGameInfo game_info = 9;
  if (has_game_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *request_.game_info_, output);
  }

  // optional .SC2APIProtocol.RequestObservation observation = 10;
  if (has_observation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *request_.observation_, output);
  }

  // optional .SC2APIProtocol.RequestAction action = 11;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *request_.action_, output);
  }

  // optional .SC2APIProtocol.RequestStep step = 12;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *request_.step_, output);
  }

  // optional .SC2APIProtocol.RequestData data = 13;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *request_.data_, output);
  }

  // optional .SC2APIProtocol.RequestQuery query = 14;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *request_.query_, output);
  }

  // optional .SC2APIProtocol.RequestSaveReplay save_replay = 15;
  if (has_save_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *request_.save_replay_, output);
  }

  // optional .SC2APIProtocol.RequestReplayInfo replay_info = 16;
  if (has_replay_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *request_.replay_info_, output);
  }

  // optional .SC2APIProtocol.RequestAvailableMaps available_maps = 17;
  if (has_available_maps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *request_.available_maps_, output);
  }

  // optional .SC2APIProtocol.RequestSaveMap save_map = 18;
  if (has_save_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *request_.save_map_, output);
  }

  // optional .SC2APIProtocol.RequestPing ping = 19;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *request_.ping_, output);
  }

  // optional .SC2APIProtocol.RequestDebug debug = 20;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *request_.debug_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.Request)
}

::google::protobuf::uint8* Request::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Request)
  // optional .SC2APIProtocol.RequestCreateGame create_game = 1;
  if (has_create_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *request_.create_game_, false, target);
  }

  // optional .SC2APIProtocol.RequestJoinGame join_game = 2;
  if (has_join_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *request_.join_game_, false, target);
  }

  // optional .SC2APIProtocol.RequestRestartGame restart_game = 3;
  if (has_restart_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *request_.restart_game_, false, target);
  }

  // optional .SC2APIProtocol.RequestStartReplay start_replay = 4;
  if (has_start_replay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *request_.start_replay_, false, target);
  }

  // optional .SC2APIProtocol.RequestLeaveGame leave_game = 5;
  if (has_leave_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *request_.leave_game_, false, target);
  }

  // optional .SC2APIProtocol.RequestQuickSave quick_save = 6;
  if (has_quick_save()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *request_.quick_save_, false, target);
  }

  // optional .SC2APIProtocol.RequestQuickLoad quick_load = 7;
  if (has_quick_load()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *request_.quick_load_, false, target);
  }

  // optional .SC2APIProtocol.RequestQuit quit = 8;
  if (has_quit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *request_.quit_, false, target);
  }

  // optional .SC2APIProtocol.RequestGameInfo game_info = 9;
  if (has_game_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *request_.game_info_, false, target);
  }

  // optional .SC2APIProtocol.RequestObservation observation = 10;
  if (has_observation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *request_.observation_, false, target);
  }

  // optional .SC2APIProtocol.RequestAction action = 11;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *request_.action_, false, target);
  }

  // optional .SC2APIProtocol.RequestStep step = 12;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *request_.step_, false, target);
  }

  // optional .SC2APIProtocol.RequestData data = 13;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *request_.data_, false, target);
  }

  // optional .SC2APIProtocol.RequestQuery query = 14;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *request_.query_, false, target);
  }

  // optional .SC2APIProtocol.RequestSaveReplay save_replay = 15;
  if (has_save_replay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *request_.save_replay_, false, target);
  }

  // optional .SC2APIProtocol.RequestReplayInfo replay_info = 16;
  if (has_replay_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *request_.replay_info_, false, target);
  }

  // optional .SC2APIProtocol.RequestAvailableMaps available_maps = 17;
  if (has_available_maps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *request_.available_maps_, false, target);
  }

  // optional .SC2APIProtocol.RequestSaveMap save_map = 18;
  if (has_save_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *request_.save_map_, false, target);
  }

  // optional .SC2APIProtocol.RequestPing ping = 19;
  if (has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *request_.ping_, false, target);
  }

  // optional .SC2APIProtocol.RequestDebug debug = 20;
  if (has_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *request_.debug_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Request)
  return target;
}

int Request::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Request)
  int total_size = 0;

  switch (request_case()) {
    // optional .SC2APIProtocol.RequestCreateGame create_game = 1;
    case kCreateGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.create_game_);
      break;
    }
    // optional .SC2APIProtocol.RequestJoinGame join_game = 2;
    case kJoinGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.join_game_);
      break;
    }
    // optional .SC2APIProtocol.RequestRestartGame restart_game = 3;
    case kRestartGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.restart_game_);
      break;
    }
    // optional .SC2APIProtocol.RequestStartReplay start_replay = 4;
    case kStartReplay: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.start_replay_);
      break;
    }
    // optional .SC2APIProtocol.RequestLeaveGame leave_game = 5;
    case kLeaveGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.leave_game_);
      break;
    }
    // optional .SC2APIProtocol.RequestQuickSave quick_save = 6;
    case kQuickSave: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.quick_save_);
      break;
    }
    // optional .SC2APIProtocol.RequestQuickLoad quick_load = 7;
    case kQuickLoad: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.quick_load_);
      break;
    }
    // optional .SC2APIProtocol.RequestQuit quit = 8;
    case kQuit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.quit_);
      break;
    }
    // optional .SC2APIProtocol.RequestGameInfo game_info = 9;
    case kGameInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.game_info_);
      break;
    }
    // optional .SC2APIProtocol.RequestObservation observation = 10;
    case kObservation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.observation_);
      break;
    }
    // optional .SC2APIProtocol.RequestAction action = 11;
    case kAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.action_);
      break;
    }
    // optional .SC2APIProtocol.RequestStep step = 12;
    case kStep: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.step_);
      break;
    }
    // optional .SC2APIProtocol.RequestData data = 13;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.data_);
      break;
    }
    // optional .SC2APIProtocol.RequestQuery query = 14;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.query_);
      break;
    }
    // optional .SC2APIProtocol.RequestSaveReplay save_replay = 15;
    case kSaveReplay: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.save_replay_);
      break;
    }
    // optional .SC2APIProtocol.RequestReplayInfo replay_info = 16;
    case kReplayInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.replay_info_);
      break;
    }
    // optional .SC2APIProtocol.RequestAvailableMaps available_maps = 17;
    case kAvailableMaps: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.available_maps_);
      break;
    }
    // optional .SC2APIProtocol.RequestSaveMap save_map = 18;
    case kSaveMap: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.save_map_);
      break;
    }
    // optional .SC2APIProtocol.RequestPing ping = 19;
    case kPing: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.ping_);
      break;
    }
    // optional .SC2APIProtocol.RequestDebug debug = 20;
    case kDebug: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *request_.debug_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Request::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Request* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Request>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.Request)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Request)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.request_case()) {
    case kCreateGame: {
      mutable_create_game()->::SC2APIProtocol::RequestCreateGame::MergeFrom(from.create_game());
      break;
    }
    case kJoinGame: {
      mutable_join_game()->::SC2APIProtocol::RequestJoinGame::MergeFrom(from.join_game());
      break;
    }
    case kRestartGame: {
      mutable_restart_game()->::SC2APIProtocol::RequestRestartGame::MergeFrom(from.restart_game());
      break;
    }
    case kStartReplay: {
      mutable_start_replay()->::SC2APIProtocol::RequestStartReplay::MergeFrom(from.start_replay());
      break;
    }
    case kLeaveGame: {
      mutable_leave_game()->::SC2APIProtocol::RequestLeaveGame::MergeFrom(from.leave_game());
      break;
    }
    case kQuickSave: {
      mutable_quick_save()->::SC2APIProtocol::RequestQuickSave::MergeFrom(from.quick_save());
      break;
    }
    case kQuickLoad: {
      mutable_quick_load()->::SC2APIProtocol::RequestQuickLoad::MergeFrom(from.quick_load());
      break;
    }
    case kQuit: {
      mutable_quit()->::SC2APIProtocol::RequestQuit::MergeFrom(from.quit());
      break;
    }
    case kGameInfo: {
      mutable_game_info()->::SC2APIProtocol::RequestGameInfo::MergeFrom(from.game_info());
      break;
    }
    case kObservation: {
      mutable_observation()->::SC2APIProtocol::RequestObservation::MergeFrom(from.observation());
      break;
    }
    case kAction: {
      mutable_action()->::SC2APIProtocol::RequestAction::MergeFrom(from.action());
      break;
    }
    case kStep: {
      mutable_step()->::SC2APIProtocol::RequestStep::MergeFrom(from.step());
      break;
    }
    case kData: {
      mutable_data()->::SC2APIProtocol::RequestData::MergeFrom(from.data());
      break;
    }
    case kQuery: {
      mutable_query()->::SC2APIProtocol::RequestQuery::MergeFrom(from.query());
      break;
    }
    case kSaveReplay: {
      mutable_save_replay()->::SC2APIProtocol::RequestSaveReplay::MergeFrom(from.save_replay());
      break;
    }
    case kReplayInfo: {
      mutable_replay_info()->::SC2APIProtocol::RequestReplayInfo::MergeFrom(from.replay_info());
      break;
    }
    case kAvailableMaps: {
      mutable_available_maps()->::SC2APIProtocol::RequestAvailableMaps::MergeFrom(from.available_maps());
      break;
    }
    case kSaveMap: {
      mutable_save_map()->::SC2APIProtocol::RequestSaveMap::MergeFrom(from.save_map());
      break;
    }
    case kPing: {
      mutable_ping()->::SC2APIProtocol::RequestPing::MergeFrom(from.ping());
      break;
    }
    case kDebug: {
      mutable_debug()->::SC2APIProtocol::RequestDebug::MergeFrom(from.debug());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Request::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {

  return true;
}

void Request::Swap(Request* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Request::InternalSwap(Request* other) {
  std::swap(request_, other->request_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Request_descriptor_;
  metadata.reflection = Request_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Request

// optional .SC2APIProtocol.RequestCreateGame create_game = 1;
bool Request::has_create_game() const {
  return request_case() == kCreateGame;
}
void Request::set_has_create_game() {
  _oneof_case_[0] = kCreateGame;
}
void Request::clear_create_game() {
  if (has_create_game()) {
    delete request_.create_game_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestCreateGame& Request::create_game() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.create_game)
  return has_create_game()
      ? *request_.create_game_
      : ::SC2APIProtocol::RequestCreateGame::default_instance();
}
::SC2APIProtocol::RequestCreateGame* Request::mutable_create_game() {
  if (!has_create_game()) {
    clear_request();
    set_has_create_game();
    request_.create_game_ = new ::SC2APIProtocol::RequestCreateGame;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.create_game)
  return request_.create_game_;
}
::SC2APIProtocol::RequestCreateGame* Request::release_create_game() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.create_game)
  if (has_create_game()) {
    clear_has_request();
    ::SC2APIProtocol::RequestCreateGame* temp = request_.create_game_;
    request_.create_game_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_create_game(::SC2APIProtocol::RequestCreateGame* create_game) {
  clear_request();
  if (create_game) {
    set_has_create_game();
    request_.create_game_ = create_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.create_game)
}

// optional .SC2APIProtocol.RequestJoinGame join_game = 2;
bool Request::has_join_game() const {
  return request_case() == kJoinGame;
}
void Request::set_has_join_game() {
  _oneof_case_[0] = kJoinGame;
}
void Request::clear_join_game() {
  if (has_join_game()) {
    delete request_.join_game_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestJoinGame& Request::join_game() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.join_game)
  return has_join_game()
      ? *request_.join_game_
      : ::SC2APIProtocol::RequestJoinGame::default_instance();
}
::SC2APIProtocol::RequestJoinGame* Request::mutable_join_game() {
  if (!has_join_game()) {
    clear_request();
    set_has_join_game();
    request_.join_game_ = new ::SC2APIProtocol::RequestJoinGame;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.join_game)
  return request_.join_game_;
}
::SC2APIProtocol::RequestJoinGame* Request::release_join_game() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.join_game)
  if (has_join_game()) {
    clear_has_request();
    ::SC2APIProtocol::RequestJoinGame* temp = request_.join_game_;
    request_.join_game_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_join_game(::SC2APIProtocol::RequestJoinGame* join_game) {
  clear_request();
  if (join_game) {
    set_has_join_game();
    request_.join_game_ = join_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.join_game)
}

// optional .SC2APIProtocol.RequestRestartGame restart_game = 3;
bool Request::has_restart_game() const {
  return request_case() == kRestartGame;
}
void Request::set_has_restart_game() {
  _oneof_case_[0] = kRestartGame;
}
void Request::clear_restart_game() {
  if (has_restart_game()) {
    delete request_.restart_game_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestRestartGame& Request::restart_game() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.restart_game)
  return has_restart_game()
      ? *request_.restart_game_
      : ::SC2APIProtocol::RequestRestartGame::default_instance();
}
::SC2APIProtocol::RequestRestartGame* Request::mutable_restart_game() {
  if (!has_restart_game()) {
    clear_request();
    set_has_restart_game();
    request_.restart_game_ = new ::SC2APIProtocol::RequestRestartGame;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.restart_game)
  return request_.restart_game_;
}
::SC2APIProtocol::RequestRestartGame* Request::release_restart_game() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.restart_game)
  if (has_restart_game()) {
    clear_has_request();
    ::SC2APIProtocol::RequestRestartGame* temp = request_.restart_game_;
    request_.restart_game_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_restart_game(::SC2APIProtocol::RequestRestartGame* restart_game) {
  clear_request();
  if (restart_game) {
    set_has_restart_game();
    request_.restart_game_ = restart_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.restart_game)
}

// optional .SC2APIProtocol.RequestStartReplay start_replay = 4;
bool Request::has_start_replay() const {
  return request_case() == kStartReplay;
}
void Request::set_has_start_replay() {
  _oneof_case_[0] = kStartReplay;
}
void Request::clear_start_replay() {
  if (has_start_replay()) {
    delete request_.start_replay_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestStartReplay& Request::start_replay() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.start_replay)
  return has_start_replay()
      ? *request_.start_replay_
      : ::SC2APIProtocol::RequestStartReplay::default_instance();
}
::SC2APIProtocol::RequestStartReplay* Request::mutable_start_replay() {
  if (!has_start_replay()) {
    clear_request();
    set_has_start_replay();
    request_.start_replay_ = new ::SC2APIProtocol::RequestStartReplay;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.start_replay)
  return request_.start_replay_;
}
::SC2APIProtocol::RequestStartReplay* Request::release_start_replay() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.start_replay)
  if (has_start_replay()) {
    clear_has_request();
    ::SC2APIProtocol::RequestStartReplay* temp = request_.start_replay_;
    request_.start_replay_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_start_replay(::SC2APIProtocol::RequestStartReplay* start_replay) {
  clear_request();
  if (start_replay) {
    set_has_start_replay();
    request_.start_replay_ = start_replay;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.start_replay)
}

// optional .SC2APIProtocol.RequestLeaveGame leave_game = 5;
bool Request::has_leave_game() const {
  return request_case() == kLeaveGame;
}
void Request::set_has_leave_game() {
  _oneof_case_[0] = kLeaveGame;
}
void Request::clear_leave_game() {
  if (has_leave_game()) {
    delete request_.leave_game_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestLeaveGame& Request::leave_game() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.leave_game)
  return has_leave_game()
      ? *request_.leave_game_
      : ::SC2APIProtocol::RequestLeaveGame::default_instance();
}
::SC2APIProtocol::RequestLeaveGame* Request::mutable_leave_game() {
  if (!has_leave_game()) {
    clear_request();
    set_has_leave_game();
    request_.leave_game_ = new ::SC2APIProtocol::RequestLeaveGame;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.leave_game)
  return request_.leave_game_;
}
::SC2APIProtocol::RequestLeaveGame* Request::release_leave_game() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.leave_game)
  if (has_leave_game()) {
    clear_has_request();
    ::SC2APIProtocol::RequestLeaveGame* temp = request_.leave_game_;
    request_.leave_game_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_leave_game(::SC2APIProtocol::RequestLeaveGame* leave_game) {
  clear_request();
  if (leave_game) {
    set_has_leave_game();
    request_.leave_game_ = leave_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.leave_game)
}

// optional .SC2APIProtocol.RequestQuickSave quick_save = 6;
bool Request::has_quick_save() const {
  return request_case() == kQuickSave;
}
void Request::set_has_quick_save() {
  _oneof_case_[0] = kQuickSave;
}
void Request::clear_quick_save() {
  if (has_quick_save()) {
    delete request_.quick_save_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestQuickSave& Request::quick_save() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.quick_save)
  return has_quick_save()
      ? *request_.quick_save_
      : ::SC2APIProtocol::RequestQuickSave::default_instance();
}
::SC2APIProtocol::RequestQuickSave* Request::mutable_quick_save() {
  if (!has_quick_save()) {
    clear_request();
    set_has_quick_save();
    request_.quick_save_ = new ::SC2APIProtocol::RequestQuickSave;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.quick_save)
  return request_.quick_save_;
}
::SC2APIProtocol::RequestQuickSave* Request::release_quick_save() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.quick_save)
  if (has_quick_save()) {
    clear_has_request();
    ::SC2APIProtocol::RequestQuickSave* temp = request_.quick_save_;
    request_.quick_save_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_quick_save(::SC2APIProtocol::RequestQuickSave* quick_save) {
  clear_request();
  if (quick_save) {
    set_has_quick_save();
    request_.quick_save_ = quick_save;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.quick_save)
}

// optional .SC2APIProtocol.RequestQuickLoad quick_load = 7;
bool Request::has_quick_load() const {
  return request_case() == kQuickLoad;
}
void Request::set_has_quick_load() {
  _oneof_case_[0] = kQuickLoad;
}
void Request::clear_quick_load() {
  if (has_quick_load()) {
    delete request_.quick_load_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestQuickLoad& Request::quick_load() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.quick_load)
  return has_quick_load()
      ? *request_.quick_load_
      : ::SC2APIProtocol::RequestQuickLoad::default_instance();
}
::SC2APIProtocol::RequestQuickLoad* Request::mutable_quick_load() {
  if (!has_quick_load()) {
    clear_request();
    set_has_quick_load();
    request_.quick_load_ = new ::SC2APIProtocol::RequestQuickLoad;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.quick_load)
  return request_.quick_load_;
}
::SC2APIProtocol::RequestQuickLoad* Request::release_quick_load() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.quick_load)
  if (has_quick_load()) {
    clear_has_request();
    ::SC2APIProtocol::RequestQuickLoad* temp = request_.quick_load_;
    request_.quick_load_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_quick_load(::SC2APIProtocol::RequestQuickLoad* quick_load) {
  clear_request();
  if (quick_load) {
    set_has_quick_load();
    request_.quick_load_ = quick_load;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.quick_load)
}

// optional .SC2APIProtocol.RequestQuit quit = 8;
bool Request::has_quit() const {
  return request_case() == kQuit;
}
void Request::set_has_quit() {
  _oneof_case_[0] = kQuit;
}
void Request::clear_quit() {
  if (has_quit()) {
    delete request_.quit_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestQuit& Request::quit() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.quit)
  return has_quit()
      ? *request_.quit_
      : ::SC2APIProtocol::RequestQuit::default_instance();
}
::SC2APIProtocol::RequestQuit* Request::mutable_quit() {
  if (!has_quit()) {
    clear_request();
    set_has_quit();
    request_.quit_ = new ::SC2APIProtocol::RequestQuit;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.quit)
  return request_.quit_;
}
::SC2APIProtocol::RequestQuit* Request::release_quit() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.quit)
  if (has_quit()) {
    clear_has_request();
    ::SC2APIProtocol::RequestQuit* temp = request_.quit_;
    request_.quit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_quit(::SC2APIProtocol::RequestQuit* quit) {
  clear_request();
  if (quit) {
    set_has_quit();
    request_.quit_ = quit;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.quit)
}

// optional .SC2APIProtocol.RequestGameInfo game_info = 9;
bool Request::has_game_info() const {
  return request_case() == kGameInfo;
}
void Request::set_has_game_info() {
  _oneof_case_[0] = kGameInfo;
}
void Request::clear_game_info() {
  if (has_game_info()) {
    delete request_.game_info_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestGameInfo& Request::game_info() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.game_info)
  return has_game_info()
      ? *request_.game_info_
      : ::SC2APIProtocol::RequestGameInfo::default_instance();
}
::SC2APIProtocol::RequestGameInfo* Request::mutable_game_info() {
  if (!has_game_info()) {
    clear_request();
    set_has_game_info();
    request_.game_info_ = new ::SC2APIProtocol::RequestGameInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.game_info)
  return request_.game_info_;
}
::SC2APIProtocol::RequestGameInfo* Request::release_game_info() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.game_info)
  if (has_game_info()) {
    clear_has_request();
    ::SC2APIProtocol::RequestGameInfo* temp = request_.game_info_;
    request_.game_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_game_info(::SC2APIProtocol::RequestGameInfo* game_info) {
  clear_request();
  if (game_info) {
    set_has_game_info();
    request_.game_info_ = game_info;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.game_info)
}

// optional .SC2APIProtocol.RequestObservation observation = 10;
bool Request::has_observation() const {
  return request_case() == kObservation;
}
void Request::set_has_observation() {
  _oneof_case_[0] = kObservation;
}
void Request::clear_observation() {
  if (has_observation()) {
    delete request_.observation_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestObservation& Request::observation() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.observation)
  return has_observation()
      ? *request_.observation_
      : ::SC2APIProtocol::RequestObservation::default_instance();
}
::SC2APIProtocol::RequestObservation* Request::mutable_observation() {
  if (!has_observation()) {
    clear_request();
    set_has_observation();
    request_.observation_ = new ::SC2APIProtocol::RequestObservation;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.observation)
  return request_.observation_;
}
::SC2APIProtocol::RequestObservation* Request::release_observation() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.observation)
  if (has_observation()) {
    clear_has_request();
    ::SC2APIProtocol::RequestObservation* temp = request_.observation_;
    request_.observation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_observation(::SC2APIProtocol::RequestObservation* observation) {
  clear_request();
  if (observation) {
    set_has_observation();
    request_.observation_ = observation;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.observation)
}

// optional .SC2APIProtocol.RequestAction action = 11;
bool Request::has_action() const {
  return request_case() == kAction;
}
void Request::set_has_action() {
  _oneof_case_[0] = kAction;
}
void Request::clear_action() {
  if (has_action()) {
    delete request_.action_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestAction& Request::action() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.action)
  return has_action()
      ? *request_.action_
      : ::SC2APIProtocol::RequestAction::default_instance();
}
::SC2APIProtocol::RequestAction* Request::mutable_action() {
  if (!has_action()) {
    clear_request();
    set_has_action();
    request_.action_ = new ::SC2APIProtocol::RequestAction;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.action)
  return request_.action_;
}
::SC2APIProtocol::RequestAction* Request::release_action() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.action)
  if (has_action()) {
    clear_has_request();
    ::SC2APIProtocol::RequestAction* temp = request_.action_;
    request_.action_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_action(::SC2APIProtocol::RequestAction* action) {
  clear_request();
  if (action) {
    set_has_action();
    request_.action_ = action;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.action)
}

// optional .SC2APIProtocol.RequestStep step = 12;
bool Request::has_step() const {
  return request_case() == kStep;
}
void Request::set_has_step() {
  _oneof_case_[0] = kStep;
}
void Request::clear_step() {
  if (has_step()) {
    delete request_.step_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestStep& Request::step() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.step)
  return has_step()
      ? *request_.step_
      : ::SC2APIProtocol::RequestStep::default_instance();
}
::SC2APIProtocol::RequestStep* Request::mutable_step() {
  if (!has_step()) {
    clear_request();
    set_has_step();
    request_.step_ = new ::SC2APIProtocol::RequestStep;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.step)
  return request_.step_;
}
::SC2APIProtocol::RequestStep* Request::release_step() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.step)
  if (has_step()) {
    clear_has_request();
    ::SC2APIProtocol::RequestStep* temp = request_.step_;
    request_.step_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_step(::SC2APIProtocol::RequestStep* step) {
  clear_request();
  if (step) {
    set_has_step();
    request_.step_ = step;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.step)
}

// optional .SC2APIProtocol.RequestData data = 13;
bool Request::has_data() const {
  return request_case() == kData;
}
void Request::set_has_data() {
  _oneof_case_[0] = kData;
}
void Request::clear_data() {
  if (has_data()) {
    delete request_.data_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestData& Request::data() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.data)
  return has_data()
      ? *request_.data_
      : ::SC2APIProtocol::RequestData::default_instance();
}
::SC2APIProtocol::RequestData* Request::mutable_data() {
  if (!has_data()) {
    clear_request();
    set_has_data();
    request_.data_ = new ::SC2APIProtocol::RequestData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.data)
  return request_.data_;
}
::SC2APIProtocol::RequestData* Request::release_data() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.data)
  if (has_data()) {
    clear_has_request();
    ::SC2APIProtocol::RequestData* temp = request_.data_;
    request_.data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_data(::SC2APIProtocol::RequestData* data) {
  clear_request();
  if (data) {
    set_has_data();
    request_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.data)
}

// optional .SC2APIProtocol.RequestQuery query = 14;
bool Request::has_query() const {
  return request_case() == kQuery;
}
void Request::set_has_query() {
  _oneof_case_[0] = kQuery;
}
void Request::clear_query() {
  if (has_query()) {
    delete request_.query_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestQuery& Request::query() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.query)
  return has_query()
      ? *request_.query_
      : ::SC2APIProtocol::RequestQuery::default_instance();
}
::SC2APIProtocol::RequestQuery* Request::mutable_query() {
  if (!has_query()) {
    clear_request();
    set_has_query();
    request_.query_ = new ::SC2APIProtocol::RequestQuery;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.query)
  return request_.query_;
}
::SC2APIProtocol::RequestQuery* Request::release_query() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.query)
  if (has_query()) {
    clear_has_request();
    ::SC2APIProtocol::RequestQuery* temp = request_.query_;
    request_.query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_query(::SC2APIProtocol::RequestQuery* query) {
  clear_request();
  if (query) {
    set_has_query();
    request_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.query)
}

// optional .SC2APIProtocol.RequestSaveReplay save_replay = 15;
bool Request::has_save_replay() const {
  return request_case() == kSaveReplay;
}
void Request::set_has_save_replay() {
  _oneof_case_[0] = kSaveReplay;
}
void Request::clear_save_replay() {
  if (has_save_replay()) {
    delete request_.save_replay_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestSaveReplay& Request::save_replay() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.save_replay)
  return has_save_replay()
      ? *request_.save_replay_
      : ::SC2APIProtocol::RequestSaveReplay::default_instance();
}
::SC2APIProtocol::RequestSaveReplay* Request::mutable_save_replay() {
  if (!has_save_replay()) {
    clear_request();
    set_has_save_replay();
    request_.save_replay_ = new ::SC2APIProtocol::RequestSaveReplay;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.save_replay)
  return request_.save_replay_;
}
::SC2APIProtocol::RequestSaveReplay* Request::release_save_replay() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.save_replay)
  if (has_save_replay()) {
    clear_has_request();
    ::SC2APIProtocol::RequestSaveReplay* temp = request_.save_replay_;
    request_.save_replay_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_save_replay(::SC2APIProtocol::RequestSaveReplay* save_replay) {
  clear_request();
  if (save_replay) {
    set_has_save_replay();
    request_.save_replay_ = save_replay;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.save_replay)
}

// optional .SC2APIProtocol.RequestReplayInfo replay_info = 16;
bool Request::has_replay_info() const {
  return request_case() == kReplayInfo;
}
void Request::set_has_replay_info() {
  _oneof_case_[0] = kReplayInfo;
}
void Request::clear_replay_info() {
  if (has_replay_info()) {
    delete request_.replay_info_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestReplayInfo& Request::replay_info() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.replay_info)
  return has_replay_info()
      ? *request_.replay_info_
      : ::SC2APIProtocol::RequestReplayInfo::default_instance();
}
::SC2APIProtocol::RequestReplayInfo* Request::mutable_replay_info() {
  if (!has_replay_info()) {
    clear_request();
    set_has_replay_info();
    request_.replay_info_ = new ::SC2APIProtocol::RequestReplayInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.replay_info)
  return request_.replay_info_;
}
::SC2APIProtocol::RequestReplayInfo* Request::release_replay_info() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.replay_info)
  if (has_replay_info()) {
    clear_has_request();
    ::SC2APIProtocol::RequestReplayInfo* temp = request_.replay_info_;
    request_.replay_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_replay_info(::SC2APIProtocol::RequestReplayInfo* replay_info) {
  clear_request();
  if (replay_info) {
    set_has_replay_info();
    request_.replay_info_ = replay_info;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.replay_info)
}

// optional .SC2APIProtocol.RequestAvailableMaps available_maps = 17;
bool Request::has_available_maps() const {
  return request_case() == kAvailableMaps;
}
void Request::set_has_available_maps() {
  _oneof_case_[0] = kAvailableMaps;
}
void Request::clear_available_maps() {
  if (has_available_maps()) {
    delete request_.available_maps_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestAvailableMaps& Request::available_maps() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.available_maps)
  return has_available_maps()
      ? *request_.available_maps_
      : ::SC2APIProtocol::RequestAvailableMaps::default_instance();
}
::SC2APIProtocol::RequestAvailableMaps* Request::mutable_available_maps() {
  if (!has_available_maps()) {
    clear_request();
    set_has_available_maps();
    request_.available_maps_ = new ::SC2APIProtocol::RequestAvailableMaps;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.available_maps)
  return request_.available_maps_;
}
::SC2APIProtocol::RequestAvailableMaps* Request::release_available_maps() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.available_maps)
  if (has_available_maps()) {
    clear_has_request();
    ::SC2APIProtocol::RequestAvailableMaps* temp = request_.available_maps_;
    request_.available_maps_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_available_maps(::SC2APIProtocol::RequestAvailableMaps* available_maps) {
  clear_request();
  if (available_maps) {
    set_has_available_maps();
    request_.available_maps_ = available_maps;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.available_maps)
}

// optional .SC2APIProtocol.RequestSaveMap save_map = 18;
bool Request::has_save_map() const {
  return request_case() == kSaveMap;
}
void Request::set_has_save_map() {
  _oneof_case_[0] = kSaveMap;
}
void Request::clear_save_map() {
  if (has_save_map()) {
    delete request_.save_map_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestSaveMap& Request::save_map() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.save_map)
  return has_save_map()
      ? *request_.save_map_
      : ::SC2APIProtocol::RequestSaveMap::default_instance();
}
::SC2APIProtocol::RequestSaveMap* Request::mutable_save_map() {
  if (!has_save_map()) {
    clear_request();
    set_has_save_map();
    request_.save_map_ = new ::SC2APIProtocol::RequestSaveMap;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.save_map)
  return request_.save_map_;
}
::SC2APIProtocol::RequestSaveMap* Request::release_save_map() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.save_map)
  if (has_save_map()) {
    clear_has_request();
    ::SC2APIProtocol::RequestSaveMap* temp = request_.save_map_;
    request_.save_map_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_save_map(::SC2APIProtocol::RequestSaveMap* save_map) {
  clear_request();
  if (save_map) {
    set_has_save_map();
    request_.save_map_ = save_map;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.save_map)
}

// optional .SC2APIProtocol.RequestPing ping = 19;
bool Request::has_ping() const {
  return request_case() == kPing;
}
void Request::set_has_ping() {
  _oneof_case_[0] = kPing;
}
void Request::clear_ping() {
  if (has_ping()) {
    delete request_.ping_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestPing& Request::ping() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.ping)
  return has_ping()
      ? *request_.ping_
      : ::SC2APIProtocol::RequestPing::default_instance();
}
::SC2APIProtocol::RequestPing* Request::mutable_ping() {
  if (!has_ping()) {
    clear_request();
    set_has_ping();
    request_.ping_ = new ::SC2APIProtocol::RequestPing;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.ping)
  return request_.ping_;
}
::SC2APIProtocol::RequestPing* Request::release_ping() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.ping)
  if (has_ping()) {
    clear_has_request();
    ::SC2APIProtocol::RequestPing* temp = request_.ping_;
    request_.ping_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_ping(::SC2APIProtocol::RequestPing* ping) {
  clear_request();
  if (ping) {
    set_has_ping();
    request_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.ping)
}

// optional .SC2APIProtocol.RequestDebug debug = 20;
bool Request::has_debug() const {
  return request_case() == kDebug;
}
void Request::set_has_debug() {
  _oneof_case_[0] = kDebug;
}
void Request::clear_debug() {
  if (has_debug()) {
    delete request_.debug_;
    clear_has_request();
  }
}
 const ::SC2APIProtocol::RequestDebug& Request::debug() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Request.debug)
  return has_debug()
      ? *request_.debug_
      : ::SC2APIProtocol::RequestDebug::default_instance();
}
::SC2APIProtocol::RequestDebug* Request::mutable_debug() {
  if (!has_debug()) {
    clear_request();
    set_has_debug();
    request_.debug_ = new ::SC2APIProtocol::RequestDebug;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Request.debug)
  return request_.debug_;
}
::SC2APIProtocol::RequestDebug* Request::release_debug() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Request.debug)
  if (has_debug()) {
    clear_has_request();
    ::SC2APIProtocol::RequestDebug* temp = request_.debug_;
    request_.debug_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Request::set_allocated_debug(::SC2APIProtocol::RequestDebug* debug) {
  clear_request();
  if (debug) {
    set_has_debug();
    request_.debug_ = debug;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Request.debug)
}

bool Request::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
void Request::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
Request::RequestCase Request::request_case() const {
  return Request::RequestCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kCreateGameFieldNumber;
const int Response::kJoinGameFieldNumber;
const int Response::kRestartGameFieldNumber;
const int Response::kStartReplayFieldNumber;
const int Response::kLeaveGameFieldNumber;
const int Response::kQuickSaveFieldNumber;
const int Response::kQuickLoadFieldNumber;
const int Response::kQuitFieldNumber;
const int Response::kGameInfoFieldNumber;
const int Response::kObservationFieldNumber;
const int Response::kActionFieldNumber;
const int Response::kStepFieldNumber;
const int Response::kDataFieldNumber;
const int Response::kQueryFieldNumber;
const int Response::kSaveReplayFieldNumber;
const int Response::kReplayInfoFieldNumber;
const int Response::kAvailableMapsFieldNumber;
const int Response::kSaveMapFieldNumber;
const int Response::kPingFieldNumber;
const int Response::kDebugFieldNumber;
const int Response::kErrorFieldNumber;
const int Response::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.Response)
}

void Response::InitAsDefaultInstance() {
  Response_default_oneof_instance_->create_game_ = const_cast< ::SC2APIProtocol::ResponseCreateGame*>(&::SC2APIProtocol::ResponseCreateGame::default_instance());
  Response_default_oneof_instance_->join_game_ = const_cast< ::SC2APIProtocol::ResponseJoinGame*>(&::SC2APIProtocol::ResponseJoinGame::default_instance());
  Response_default_oneof_instance_->restart_game_ = const_cast< ::SC2APIProtocol::ResponseRestartGame*>(&::SC2APIProtocol::ResponseRestartGame::default_instance());
  Response_default_oneof_instance_->start_replay_ = const_cast< ::SC2APIProtocol::ResponseStartReplay*>(&::SC2APIProtocol::ResponseStartReplay::default_instance());
  Response_default_oneof_instance_->leave_game_ = const_cast< ::SC2APIProtocol::ResponseLeaveGame*>(&::SC2APIProtocol::ResponseLeaveGame::default_instance());
  Response_default_oneof_instance_->quick_save_ = const_cast< ::SC2APIProtocol::ResponseQuickSave*>(&::SC2APIProtocol::ResponseQuickSave::default_instance());
  Response_default_oneof_instance_->quick_load_ = const_cast< ::SC2APIProtocol::ResponseQuickLoad*>(&::SC2APIProtocol::ResponseQuickLoad::default_instance());
  Response_default_oneof_instance_->quit_ = const_cast< ::SC2APIProtocol::ResponseQuit*>(&::SC2APIProtocol::ResponseQuit::default_instance());
  Response_default_oneof_instance_->game_info_ = const_cast< ::SC2APIProtocol::ResponseGameInfo*>(&::SC2APIProtocol::ResponseGameInfo::default_instance());
  Response_default_oneof_instance_->observation_ = const_cast< ::SC2APIProtocol::ResponseObservation*>(&::SC2APIProtocol::ResponseObservation::default_instance());
  Response_default_oneof_instance_->action_ = const_cast< ::SC2APIProtocol::ResponseAction*>(&::SC2APIProtocol::ResponseAction::default_instance());
  Response_default_oneof_instance_->step_ = const_cast< ::SC2APIProtocol::ResponseStep*>(&::SC2APIProtocol::ResponseStep::default_instance());
  Response_default_oneof_instance_->data_ = const_cast< ::SC2APIProtocol::ResponseData*>(&::SC2APIProtocol::ResponseData::default_instance());
  Response_default_oneof_instance_->query_ = const_cast< ::SC2APIProtocol::ResponseQuery*>(&::SC2APIProtocol::ResponseQuery::default_instance());
  Response_default_oneof_instance_->save_replay_ = const_cast< ::SC2APIProtocol::ResponseSaveReplay*>(&::SC2APIProtocol::ResponseSaveReplay::default_instance());
  Response_default_oneof_instance_->replay_info_ = const_cast< ::SC2APIProtocol::ResponseReplayInfo*>(&::SC2APIProtocol::ResponseReplayInfo::default_instance());
  Response_default_oneof_instance_->available_maps_ = const_cast< ::SC2APIProtocol::ResponseAvailableMaps*>(&::SC2APIProtocol::ResponseAvailableMaps::default_instance());
  Response_default_oneof_instance_->save_map_ = const_cast< ::SC2APIProtocol::ResponseSaveMap*>(&::SC2APIProtocol::ResponseSaveMap::default_instance());
  Response_default_oneof_instance_->ping_ = const_cast< ::SC2APIProtocol::ResponsePing*>(&::SC2APIProtocol::ResponsePing::default_instance());
  Response_default_oneof_instance_->debug_ = const_cast< ::SC2APIProtocol::ResponseDebug*>(&::SC2APIProtocol::ResponseDebug::default_instance());
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Response)
}

void Response::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_response();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  if (has_response()) {
    clear_response();
  }
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.Response)
  switch(response_case()) {
    case kCreateGame: {
      delete response_.create_game_;
      break;
    }
    case kJoinGame: {
      delete response_.join_game_;
      break;
    }
    case kRestartGame: {
      delete response_.restart_game_;
      break;
    }
    case kStartReplay: {
      delete response_.start_replay_;
      break;
    }
    case kLeaveGame: {
      delete response_.leave_game_;
      break;
    }
    case kQuickSave: {
      delete response_.quick_save_;
      break;
    }
    case kQuickLoad: {
      delete response_.quick_load_;
      break;
    }
    case kQuit: {
      delete response_.quit_;
      break;
    }
    case kGameInfo: {
      delete response_.game_info_;
      break;
    }
    case kObservation: {
      delete response_.observation_;
      break;
    }
    case kAction: {
      delete response_.action_;
      break;
    }
    case kStep: {
      delete response_.step_;
      break;
    }
    case kData: {
      delete response_.data_;
      break;
    }
    case kQuery: {
      delete response_.query_;
      break;
    }
    case kSaveReplay: {
      delete response_.save_replay_;
      break;
    }
    case kReplayInfo: {
      delete response_.replay_info_;
      break;
    }
    case kAvailableMaps: {
      delete response_.available_maps_;
      break;
    }
    case kSaveMap: {
      delete response_.save_map_;
      break;
    }
    case kPing: {
      delete response_.ping_;
      break;
    }
    case kDebug: {
      delete response_.debug_;
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Response)
  status_ = 1;
  error_.Clear();
  clear_response();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.Response)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ResponseCreateGame create_game = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_game()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_join_game;
        break;
      }

      // optional .SC2APIProtocol.ResponseJoinGame join_game = 2;
      case 2: {
        if (tag == 18) {
         parse_join_game:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_join_game()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_restart_game;
        break;
      }

      // optional .SC2APIProtocol.ResponseRestartGame restart_game = 3;
      case 3: {
        if (tag == 26) {
         parse_restart_game:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_restart_game()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_start_replay;
        break;
      }

      // optional .SC2APIProtocol.ResponseStartReplay start_replay = 4;
      case 4: {
        if (tag == 34) {
         parse_start_replay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_replay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_leave_game;
        break;
      }

      // optional .SC2APIProtocol.ResponseLeaveGame leave_game = 5;
      case 5: {
        if (tag == 42) {
         parse_leave_game:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leave_game()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_quick_save;
        break;
      }

      // optional .SC2APIProtocol.ResponseQuickSave quick_save = 6;
      case 6: {
        if (tag == 50) {
         parse_quick_save:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quick_save()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_quick_load;
        break;
      }

      // optional .SC2APIProtocol.ResponseQuickLoad quick_load = 7;
      case 7: {
        if (tag == 58) {
         parse_quick_load:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quick_load()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_quit;
        break;
      }

      // optional .SC2APIProtocol.ResponseQuit quit = 8;
      case 8: {
        if (tag == 66) {
         parse_quit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_game_info;
        break;
      }

      // optional .SC2APIProtocol.ResponseGameInfo game_info = 9;
      case 9: {
        if (tag == 74) {
         parse_game_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_observation;
        break;
      }

      // optional .SC2APIProtocol.ResponseObservation observation = 10;
      case 10: {
        if (tag == 82) {
         parse_observation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_observation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_action;
        break;
      }

      // optional .SC2APIProtocol.ResponseAction action = 11;
      case 11: {
        if (tag == 90) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_step;
        break;
      }

      // optional .SC2APIProtocol.ResponseStep step = 12;
      case 12: {
        if (tag == 98) {
         parse_step:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_step()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_data;
        break;
      }

      // optional .SC2APIProtocol.ResponseData data = 13;
      case 13: {
        if (tag == 106) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_query;
        break;
      }

      // optional .SC2APIProtocol.ResponseQuery query = 14;
      case 14: {
        if (tag == 114) {
         parse_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_query()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_save_replay;
        break;
      }

      // optional .SC2APIProtocol.ResponseSaveReplay save_replay = 15;
      case 15: {
        if (tag == 122) {
         parse_save_replay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_save_replay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_replay_info;
        break;
      }

      // optional .SC2APIProtocol.ResponseReplayInfo replay_info = 16;
      case 16: {
        if (tag == 130) {
         parse_replay_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replay_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_available_maps;
        break;
      }

      // optional .SC2APIProtocol.ResponseAvailableMaps available_maps = 17;
      case 17: {
        if (tag == 138) {
         parse_available_maps:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_available_maps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_save_map;
        break;
      }

      // optional .SC2APIProtocol.ResponseSaveMap save_map = 18;
      case 18: {
        if (tag == 146) {
         parse_save_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_save_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_ping;
        break;
      }

      // optional .SC2APIProtocol.ResponsePing ping = 19;
      case 19: {
        if (tag == 154) {
         parse_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ping()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_debug;
        break;
      }

      // optional .SC2APIProtocol.ResponseDebug debug = 20;
      case 20: {
        if (tag == 162) {
         parse_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(786)) goto parse_error;
        break;
      }

      // repeated string error = 98;
      case 98: {
        if (tag == 786) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error(this->error_size() - 1).data(),
            this->error(this->error_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.Response.error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(786)) goto parse_error;
        if (input->ExpectTag(792)) goto parse_status;
        break;
      }

      // optional .SC2APIProtocol.Status status = 99;
      case 99: {
        if (tag == 792) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Status_IsValid(value)) {
            set_status(static_cast< ::SC2APIProtocol::Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(99, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.Response)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.Response)
  return false;
#undef DO_
}

void Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.Response)
  // optional .SC2APIProtocol.ResponseCreateGame create_game = 1;
  if (has_create_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *response_.create_game_, output);
  }

  // optional .SC2APIProtocol.ResponseJoinGame join_game = 2;
  if (has_join_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *response_.join_game_, output);
  }

  // optional .SC2APIProtocol.ResponseRestartGame restart_game = 3;
  if (has_restart_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *response_.restart_game_, output);
  }

  // optional .SC2APIProtocol.ResponseStartReplay start_replay = 4;
  if (has_start_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *response_.start_replay_, output);
  }

  // optional .SC2APIProtocol.ResponseLeaveGame leave_game = 5;
  if (has_leave_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *response_.leave_game_, output);
  }

  // optional .SC2APIProtocol.ResponseQuickSave quick_save = 6;
  if (has_quick_save()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *response_.quick_save_, output);
  }

  // optional .SC2APIProtocol.ResponseQuickLoad quick_load = 7;
  if (has_quick_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *response_.quick_load_, output);
  }

  // optional .SC2APIProtocol.ResponseQuit quit = 8;
  if (has_quit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *response_.quit_, output);
  }

  // optional .SC2APIProtocol.ResponseGameInfo game_info = 9;
  if (has_game_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *response_.game_info_, output);
  }

  // optional .SC2APIProtocol.ResponseObservation observation = 10;
  if (has_observation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *response_.observation_, output);
  }

  // optional .SC2APIProtocol.ResponseAction action = 11;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *response_.action_, output);
  }

  // optional .SC2APIProtocol.ResponseStep step = 12;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *response_.step_, output);
  }

  // optional .SC2APIProtocol.ResponseData data = 13;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *response_.data_, output);
  }

  // optional .SC2APIProtocol.ResponseQuery query = 14;
  if (has_query()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *response_.query_, output);
  }

  // optional .SC2APIProtocol.ResponseSaveReplay save_replay = 15;
  if (has_save_replay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *response_.save_replay_, output);
  }

  // optional .SC2APIProtocol.ResponseReplayInfo replay_info = 16;
  if (has_replay_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *response_.replay_info_, output);
  }

  // optional .SC2APIProtocol.ResponseAvailableMaps available_maps = 17;
  if (has_available_maps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *response_.available_maps_, output);
  }

  // optional .SC2APIProtocol.ResponseSaveMap save_map = 18;
  if (has_save_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *response_.save_map_, output);
  }

  // optional .SC2APIProtocol.ResponsePing ping = 19;
  if (has_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *response_.ping_, output);
  }

  // optional .SC2APIProtocol.ResponseDebug debug = 20;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *response_.debug_, output);
  }

  // repeated string error = 98;
  for (int i = 0; i < this->error_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error(i).data(), this->error(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.Response.error");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      98, this->error(i), output);
  }

  // optional .SC2APIProtocol.Status status = 99;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      99, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.Response)
}

::google::protobuf::uint8* Response::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Response)
  // optional .SC2APIProtocol.ResponseCreateGame create_game = 1;
  if (has_create_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *response_.create_game_, false, target);
  }

  // optional .SC2APIProtocol.ResponseJoinGame join_game = 2;
  if (has_join_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *response_.join_game_, false, target);
  }

  // optional .SC2APIProtocol.ResponseRestartGame restart_game = 3;
  if (has_restart_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *response_.restart_game_, false, target);
  }

  // optional .SC2APIProtocol.ResponseStartReplay start_replay = 4;
  if (has_start_replay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *response_.start_replay_, false, target);
  }

  // optional .SC2APIProtocol.ResponseLeaveGame leave_game = 5;
  if (has_leave_game()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *response_.leave_game_, false, target);
  }

  // optional .SC2APIProtocol.ResponseQuickSave quick_save = 6;
  if (has_quick_save()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *response_.quick_save_, false, target);
  }

  // optional .SC2APIProtocol.ResponseQuickLoad quick_load = 7;
  if (has_quick_load()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *response_.quick_load_, false, target);
  }

  // optional .SC2APIProtocol.ResponseQuit quit = 8;
  if (has_quit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *response_.quit_, false, target);
  }

  // optional .SC2APIProtocol.ResponseGameInfo game_info = 9;
  if (has_game_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *response_.game_info_, false, target);
  }

  // optional .SC2APIProtocol.ResponseObservation observation = 10;
  if (has_observation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *response_.observation_, false, target);
  }

  // optional .SC2APIProtocol.ResponseAction action = 11;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *response_.action_, false, target);
  }

  // optional .SC2APIProtocol.ResponseStep step = 12;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *response_.step_, false, target);
  }

  // optional .SC2APIProtocol.ResponseData data = 13;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *response_.data_, false, target);
  }

  // optional .SC2APIProtocol.ResponseQuery query = 14;
  if (has_query()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *response_.query_, false, target);
  }

  // optional .SC2APIProtocol.ResponseSaveReplay save_replay = 15;
  if (has_save_replay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *response_.save_replay_, false, target);
  }

  // optional .SC2APIProtocol.ResponseReplayInfo replay_info = 16;
  if (has_replay_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *response_.replay_info_, false, target);
  }

  // optional .SC2APIProtocol.ResponseAvailableMaps available_maps = 17;
  if (has_available_maps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *response_.available_maps_, false, target);
  }

  // optional .SC2APIProtocol.ResponseSaveMap save_map = 18;
  if (has_save_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *response_.save_map_, false, target);
  }

  // optional .SC2APIProtocol.ResponsePing ping = 19;
  if (has_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *response_.ping_, false, target);
  }

  // optional .SC2APIProtocol.ResponseDebug debug = 20;
  if (has_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *response_.debug_, false, target);
  }

  // repeated string error = 98;
  for (int i = 0; i < this->error_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error(i).data(), this->error(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.Response.error");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(98, this->error(i), target);
  }

  // optional .SC2APIProtocol.Status status = 99;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      99, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Response)
  return target;
}

int Response::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Response)
  int total_size = 0;

  // optional .SC2APIProtocol.Status status = 99;
  if (has_status()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  // repeated string error = 98;
  total_size += 2 * this->error_size();
  for (int i = 0; i < this->error_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->error(i));
  }

  switch (response_case()) {
    // optional .SC2APIProtocol.ResponseCreateGame create_game = 1;
    case kCreateGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.create_game_);
      break;
    }
    // optional .SC2APIProtocol.ResponseJoinGame join_game = 2;
    case kJoinGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.join_game_);
      break;
    }
    // optional .SC2APIProtocol.ResponseRestartGame restart_game = 3;
    case kRestartGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.restart_game_);
      break;
    }
    // optional .SC2APIProtocol.ResponseStartReplay start_replay = 4;
    case kStartReplay: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.start_replay_);
      break;
    }
    // optional .SC2APIProtocol.ResponseLeaveGame leave_game = 5;
    case kLeaveGame: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.leave_game_);
      break;
    }
    // optional .SC2APIProtocol.ResponseQuickSave quick_save = 6;
    case kQuickSave: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.quick_save_);
      break;
    }
    // optional .SC2APIProtocol.ResponseQuickLoad quick_load = 7;
    case kQuickLoad: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.quick_load_);
      break;
    }
    // optional .SC2APIProtocol.ResponseQuit quit = 8;
    case kQuit: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.quit_);
      break;
    }
    // optional .SC2APIProtocol.ResponseGameInfo game_info = 9;
    case kGameInfo: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.game_info_);
      break;
    }
    // optional .SC2APIProtocol.ResponseObservation observation = 10;
    case kObservation: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.observation_);
      break;
    }
    // optional .SC2APIProtocol.ResponseAction action = 11;
    case kAction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.action_);
      break;
    }
    // optional .SC2APIProtocol.ResponseStep step = 12;
    case kStep: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.step_);
      break;
    }
    // optional .SC2APIProtocol.ResponseData data = 13;
    case kData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.data_);
      break;
    }
    // optional .SC2APIProtocol.ResponseQuery query = 14;
    case kQuery: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.query_);
      break;
    }
    // optional .SC2APIProtocol.ResponseSaveReplay save_replay = 15;
    case kSaveReplay: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.save_replay_);
      break;
    }
    // optional .SC2APIProtocol.ResponseReplayInfo replay_info = 16;
    case kReplayInfo: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.replay_info_);
      break;
    }
    // optional .SC2APIProtocol.ResponseAvailableMaps available_maps = 17;
    case kAvailableMaps: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.available_maps_);
      break;
    }
    // optional .SC2APIProtocol.ResponseSaveMap save_map = 18;
    case kSaveMap: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.save_map_);
      break;
    }
    // optional .SC2APIProtocol.ResponsePing ping = 19;
    case kPing: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.ping_);
      break;
    }
    // optional .SC2APIProtocol.ResponseDebug debug = 20;
    case kDebug: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *response_.debug_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Response::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Response* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Response>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.Response)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Response)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  error_.MergeFrom(from.error_);
  switch (from.response_case()) {
    case kCreateGame: {
      mutable_create_game()->::SC2APIProtocol::ResponseCreateGame::MergeFrom(from.create_game());
      break;
    }
    case kJoinGame: {
      mutable_join_game()->::SC2APIProtocol::ResponseJoinGame::MergeFrom(from.join_game());
      break;
    }
    case kRestartGame: {
      mutable_restart_game()->::SC2APIProtocol::ResponseRestartGame::MergeFrom(from.restart_game());
      break;
    }
    case kStartReplay: {
      mutable_start_replay()->::SC2APIProtocol::ResponseStartReplay::MergeFrom(from.start_replay());
      break;
    }
    case kLeaveGame: {
      mutable_leave_game()->::SC2APIProtocol::ResponseLeaveGame::MergeFrom(from.leave_game());
      break;
    }
    case kQuickSave: {
      mutable_quick_save()->::SC2APIProtocol::ResponseQuickSave::MergeFrom(from.quick_save());
      break;
    }
    case kQuickLoad: {
      mutable_quick_load()->::SC2APIProtocol::ResponseQuickLoad::MergeFrom(from.quick_load());
      break;
    }
    case kQuit: {
      mutable_quit()->::SC2APIProtocol::ResponseQuit::MergeFrom(from.quit());
      break;
    }
    case kGameInfo: {
      mutable_game_info()->::SC2APIProtocol::ResponseGameInfo::MergeFrom(from.game_info());
      break;
    }
    case kObservation: {
      mutable_observation()->::SC2APIProtocol::ResponseObservation::MergeFrom(from.observation());
      break;
    }
    case kAction: {
      mutable_action()->::SC2APIProtocol::ResponseAction::MergeFrom(from.action());
      break;
    }
    case kStep: {
      mutable_step()->::SC2APIProtocol::ResponseStep::MergeFrom(from.step());
      break;
    }
    case kData: {
      mutable_data()->::SC2APIProtocol::ResponseData::MergeFrom(from.data());
      break;
    }
    case kQuery: {
      mutable_query()->::SC2APIProtocol::ResponseQuery::MergeFrom(from.query());
      break;
    }
    case kSaveReplay: {
      mutable_save_replay()->::SC2APIProtocol::ResponseSaveReplay::MergeFrom(from.save_replay());
      break;
    }
    case kReplayInfo: {
      mutable_replay_info()->::SC2APIProtocol::ResponseReplayInfo::MergeFrom(from.replay_info());
      break;
    }
    case kAvailableMaps: {
      mutable_available_maps()->::SC2APIProtocol::ResponseAvailableMaps::MergeFrom(from.available_maps());
      break;
    }
    case kSaveMap: {
      mutable_save_map()->::SC2APIProtocol::ResponseSaveMap::MergeFrom(from.save_map());
      break;
    }
    case kPing: {
      mutable_ping()->::SC2APIProtocol::ResponsePing::MergeFrom(from.ping());
      break;
    }
    case kDebug: {
      mutable_debug()->::SC2APIProtocol::ResponseDebug::MergeFrom(from.debug());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[21 / 32] & (0xffu << (21 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Response::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {

  return true;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  error_.UnsafeArenaSwap(&other->error_);
  std::swap(status_, other->status_);
  std::swap(response_, other->response_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional .SC2APIProtocol.ResponseCreateGame create_game = 1;
bool Response::has_create_game() const {
  return response_case() == kCreateGame;
}
void Response::set_has_create_game() {
  _oneof_case_[0] = kCreateGame;
}
void Response::clear_create_game() {
  if (has_create_game()) {
    delete response_.create_game_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponseCreateGame& Response::create_game() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.create_game)
  return has_create_game()
      ? *response_.create_game_
      : ::SC2APIProtocol::ResponseCreateGame::default_instance();
}
::SC2APIProtocol::ResponseCreateGame* Response::mutable_create_game() {
  if (!has_create_game()) {
    clear_response();
    set_has_create_game();
    response_.create_game_ = new ::SC2APIProtocol::ResponseCreateGame;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.create_game)
  return response_.create_game_;
}
::SC2APIProtocol::ResponseCreateGame* Response::release_create_game() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.create_game)
  if (has_create_game()) {
    clear_has_response();
    ::SC2APIProtocol::ResponseCreateGame* temp = response_.create_game_;
    response_.create_game_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_create_game(::SC2APIProtocol::ResponseCreateGame* create_game) {
  clear_response();
  if (create_game) {
    set_has_create_game();
    response_.create_game_ = create_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.create_game)
}

// optional .SC2APIProtocol.ResponseJoinGame join_game = 2;
bool Response::has_join_game() const {
  return response_case() == kJoinGame;
}
void Response::set_has_join_game() {
  _oneof_case_[0] = kJoinGame;
}
void Response::clear_join_game() {
  if (has_join_game()) {
    delete response_.join_game_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponseJoinGame& Response::join_game() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.join_game)
  return has_join_game()
      ? *response_.join_game_
      : ::SC2APIProtocol::ResponseJoinGame::default_instance();
}
::SC2APIProtocol::ResponseJoinGame* Response::mutable_join_game() {
  if (!has_join_game()) {
    clear_response();
    set_has_join_game();
    response_.join_game_ = new ::SC2APIProtocol::ResponseJoinGame;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.join_game)
  return response_.join_game_;
}
::SC2APIProtocol::ResponseJoinGame* Response::release_join_game() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.join_game)
  if (has_join_game()) {
    clear_has_response();
    ::SC2APIProtocol::ResponseJoinGame* temp = response_.join_game_;
    response_.join_game_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_join_game(::SC2APIProtocol::ResponseJoinGame* join_game) {
  clear_response();
  if (join_game) {
    set_has_join_game();
    response_.join_game_ = join_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.join_game)
}

// optional .SC2APIProtocol.ResponseRestartGame restart_game = 3;
bool Response::has_restart_game() const {
  return response_case() == kRestartGame;
}
void Response::set_has_restart_game() {
  _oneof_case_[0] = kRestartGame;
}
void Response::clear_restart_game() {
  if (has_restart_game()) {
    delete response_.restart_game_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponseRestartGame& Response::restart_game() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.restart_game)
  return has_restart_game()
      ? *response_.restart_game_
      : ::SC2APIProtocol::ResponseRestartGame::default_instance();
}
::SC2APIProtocol::ResponseRestartGame* Response::mutable_restart_game() {
  if (!has_restart_game()) {
    clear_response();
    set_has_restart_game();
    response_.restart_game_ = new ::SC2APIProtocol::ResponseRestartGame;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.restart_game)
  return response_.restart_game_;
}
::SC2APIProtocol::ResponseRestartGame* Response::release_restart_game() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.restart_game)
  if (has_restart_game()) {
    clear_has_response();
    ::SC2APIProtocol::ResponseRestartGame* temp = response_.restart_game_;
    response_.restart_game_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_restart_game(::SC2APIProtocol::ResponseRestartGame* restart_game) {
  clear_response();
  if (restart_game) {
    set_has_restart_game();
    response_.restart_game_ = restart_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.restart_game)
}

// optional .SC2APIProtocol.ResponseStartReplay start_replay = 4;
bool Response::has_start_replay() const {
  return response_case() == kStartReplay;
}
void Response::set_has_start_replay() {
  _oneof_case_[0] = kStartReplay;
}
void Response::clear_start_replay() {
  if (has_start_replay()) {
    delete response_.start_replay_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponseStartReplay& Response::start_replay() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.start_replay)
  return has_start_replay()
      ? *response_.start_replay_
      : ::SC2APIProtocol::ResponseStartReplay::default_instance();
}
::SC2APIProtocol::ResponseStartReplay* Response::mutable_start_replay() {
  if (!has_start_replay()) {
    clear_response();
    set_has_start_replay();
    response_.start_replay_ = new ::SC2APIProtocol::ResponseStartReplay;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.start_replay)
  return response_.start_replay_;
}
::SC2APIProtocol::ResponseStartReplay* Response::release_start_replay() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.start_replay)
  if (has_start_replay()) {
    clear_has_response();
    ::SC2APIProtocol::ResponseStartReplay* temp = response_.start_replay_;
    response_.start_replay_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_start_replay(::SC2APIProtocol::ResponseStartReplay* start_replay) {
  clear_response();
  if (start_replay) {
    set_has_start_replay();
    response_.start_replay_ = start_replay;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.start_replay)
}

// optional .SC2APIProtocol.ResponseLeaveGame leave_game = 5;
bool Response::has_leave_game() const {
  return response_case() == kLeaveGame;
}
void Response::set_has_leave_game() {
  _oneof_case_[0] = kLeaveGame;
}
void Response::clear_leave_game() {
  if (has_leave_game()) {
    delete response_.leave_game_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponseLeaveGame& Response::leave_game() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.leave_game)
  return has_leave_game()
      ? *response_.leave_game_
      : ::SC2APIProtocol::ResponseLeaveGame::default_instance();
}
::SC2APIProtocol::ResponseLeaveGame* Response::mutable_leave_game() {
  if (!has_leave_game()) {
    clear_response();
    set_has_leave_game();
    response_.leave_game_ = new ::SC2APIProtocol::ResponseLeaveGame;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.leave_game)
  return response_.leave_game_;
}
::SC2APIProtocol::ResponseLeaveGame* Response::release_leave_game() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.leave_game)
  if (has_leave_game()) {
    clear_has_response();
    ::SC2APIProtocol::ResponseLeaveGame* temp = response_.leave_game_;
    response_.leave_game_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_leave_game(::SC2APIProtocol::ResponseLeaveGame* leave_game) {
  clear_response();
  if (leave_game) {
    set_has_leave_game();
    response_.leave_game_ = leave_game;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.leave_game)
}

// optional .SC2APIProtocol.ResponseQuickSave quick_save = 6;
bool Response::has_quick_save() const {
  return response_case() == kQuickSave;
}
void Response::set_has_quick_save() {
  _oneof_case_[0] = kQuickSave;
}
void Response::clear_quick_save() {
  if (has_quick_save()) {
    delete response_.quick_save_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponseQuickSave& Response::quick_save() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.quick_save)
  return has_quick_save()
      ? *response_.quick_save_
      : ::SC2APIProtocol::ResponseQuickSave::default_instance();
}
::SC2APIProtocol::ResponseQuickSave* Response::mutable_quick_save() {
  if (!has_quick_save()) {
    clear_response();
    set_has_quick_save();
    response_.quick_save_ = new ::SC2APIProtocol::ResponseQuickSave;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.quick_save)
  return response_.quick_save_;
}
::SC2APIProtocol::ResponseQuickSave* Response::release_quick_save() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.quick_save)
  if (has_quick_save()) {
    clear_has_response();
    ::SC2APIProtocol::ResponseQuickSave* temp = response_.quick_save_;
    response_.quick_save_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_quick_save(::SC2APIProtocol::ResponseQuickSave* quick_save) {
  clear_response();
  if (quick_save) {
    set_has_quick_save();
    response_.quick_save_ = quick_save;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.quick_save)
}

// optional .SC2APIProtocol.ResponseQuickLoad quick_load = 7;
bool Response::has_quick_load() const {
  return response_case() == kQuickLoad;
}
void Response::set_has_quick_load() {
  _oneof_case_[0] = kQuickLoad;
}
void Response::clear_quick_load() {
  if (has_quick_load()) {
    delete response_.quick_load_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponseQuickLoad& Response::quick_load() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.quick_load)
  return has_quick_load()
      ? *response_.quick_load_
      : ::SC2APIProtocol::ResponseQuickLoad::default_instance();
}
::SC2APIProtocol::ResponseQuickLoad* Response::mutable_quick_load() {
  if (!has_quick_load()) {
    clear_response();
    set_has_quick_load();
    response_.quick_load_ = new ::SC2APIProtocol::ResponseQuickLoad;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.quick_load)
  return response_.quick_load_;
}
::SC2APIProtocol::ResponseQuickLoad* Response::release_quick_load() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.quick_load)
  if (has_quick_load()) {
    clear_has_response();
    ::SC2APIProtocol::ResponseQuickLoad* temp = response_.quick_load_;
    response_.quick_load_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_quick_load(::SC2APIProtocol::ResponseQuickLoad* quick_load) {
  clear_response();
  if (quick_load) {
    set_has_quick_load();
    response_.quick_load_ = quick_load;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.quick_load)
}

// optional .SC2APIProtocol.ResponseQuit quit = 8;
bool Response::has_quit() const {
  return response_case() == kQuit;
}
void Response::set_has_quit() {
  _oneof_case_[0] = kQuit;
}
void Response::clear_quit() {
  if (has_quit()) {
    delete response_.quit_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponseQuit& Response::quit() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.quit)
  return has_quit()
      ? *response_.quit_
      : ::SC2APIProtocol::ResponseQuit::default_instance();
}
::SC2APIProtocol::ResponseQuit* Response::mutable_quit() {
  if (!has_quit()) {
    clear_response();
    set_has_quit();
    response_.quit_ = new ::SC2APIProtocol::ResponseQuit;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.quit)
  return response_.quit_;
}
::SC2APIProtocol::ResponseQuit* Response::release_quit() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.quit)
  if (has_quit()) {
    clear_has_response();
    ::SC2APIProtocol::ResponseQuit* temp = response_.quit_;
    response_.quit_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_quit(::SC2APIProtocol::ResponseQuit* quit) {
  clear_response();
  if (quit) {
    set_has_quit();
    response_.quit_ = quit;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.quit)
}

// optional .SC2APIProtocol.ResponseGameInfo game_info = 9;
bool Response::has_game_info() const {
  return response_case() == kGameInfo;
}
void Response::set_has_game_info() {
  _oneof_case_[0] = kGameInfo;
}
void Response::clear_game_info() {
  if (has_game_info()) {
    delete response_.game_info_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponseGameInfo& Response::game_info() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.game_info)
  return has_game_info()
      ? *response_.game_info_
      : ::SC2APIProtocol::ResponseGameInfo::default_instance();
}
::SC2APIProtocol::ResponseGameInfo* Response::mutable_game_info() {
  if (!has_game_info()) {
    clear_response();
    set_has_game_info();
    response_.game_info_ = new ::SC2APIProtocol::ResponseGameInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.game_info)
  return response_.game_info_;
}
::SC2APIProtocol::ResponseGameInfo* Response::release_game_info() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.game_info)
  if (has_game_info()) {
    clear_has_response();
    ::SC2APIProtocol::ResponseGameInfo* temp = response_.game_info_;
    response_.game_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_game_info(::SC2APIProtocol::ResponseGameInfo* game_info) {
  clear_response();
  if (game_info) {
    set_has_game_info();
    response_.game_info_ = game_info;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.game_info)
}

// optional .SC2APIProtocol.ResponseObservation observation = 10;
bool Response::has_observation() const {
  return response_case() == kObservation;
}
void Response::set_has_observation() {
  _oneof_case_[0] = kObservation;
}
void Response::clear_observation() {
  if (has_observation()) {
    delete response_.observation_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponseObservation& Response::observation() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.observation)
  return has_observation()
      ? *response_.observation_
      : ::SC2APIProtocol::ResponseObservation::default_instance();
}
::SC2APIProtocol::ResponseObservation* Response::mutable_observation() {
  if (!has_observation()) {
    clear_response();
    set_has_observation();
    response_.observation_ = new ::SC2APIProtocol::ResponseObservation;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.observation)
  return response_.observation_;
}
::SC2APIProtocol::ResponseObservation* Response::release_observation() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.observation)
  if (has_observation()) {
    clear_has_response();
    ::SC2APIProtocol::ResponseObservation* temp = response_.observation_;
    response_.observation_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_observation(::SC2APIProtocol::ResponseObservation* observation) {
  clear_response();
  if (observation) {
    set_has_observation();
    response_.observation_ = observation;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.observation)
}

// optional .SC2APIProtocol.ResponseAction action = 11;
bool Response::has_action() const {
  return response_case() == kAction;
}
void Response::set_has_action() {
  _oneof_case_[0] = kAction;
}
void Response::clear_action() {
  if (has_action()) {
    delete response_.action_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponseAction& Response::action() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.action)
  return has_action()
      ? *response_.action_
      : ::SC2APIProtocol::ResponseAction::default_instance();
}
::SC2APIProtocol::ResponseAction* Response::mutable_action() {
  if (!has_action()) {
    clear_response();
    set_has_action();
    response_.action_ = new ::SC2APIProtocol::ResponseAction;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.action)
  return response_.action_;
}
::SC2APIProtocol::ResponseAction* Response::release_action() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.action)
  if (has_action()) {
    clear_has_response();
    ::SC2APIProtocol::ResponseAction* temp = response_.action_;
    response_.action_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_action(::SC2APIProtocol::ResponseAction* action) {
  clear_response();
  if (action) {
    set_has_action();
    response_.action_ = action;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.action)
}

// optional .SC2APIProtocol.ResponseStep step = 12;
bool Response::has_step() const {
  return response_case() == kStep;
}
void Response::set_has_step() {
  _oneof_case_[0] = kStep;
}
void Response::clear_step() {
  if (has_step()) {
    delete response_.step_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponseStep& Response::step() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.step)
  return has_step()
      ? *response_.step_
      : ::SC2APIProtocol::ResponseStep::default_instance();
}
::SC2APIProtocol::ResponseStep* Response::mutable_step() {
  if (!has_step()) {
    clear_response();
    set_has_step();
    response_.step_ = new ::SC2APIProtocol::ResponseStep;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.step)
  return response_.step_;
}
::SC2APIProtocol::ResponseStep* Response::release_step() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.step)
  if (has_step()) {
    clear_has_response();
    ::SC2APIProtocol::ResponseStep* temp = response_.step_;
    response_.step_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_step(::SC2APIProtocol::ResponseStep* step) {
  clear_response();
  if (step) {
    set_has_step();
    response_.step_ = step;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.step)
}

// optional .SC2APIProtocol.ResponseData data = 13;
bool Response::has_data() const {
  return response_case() == kData;
}
void Response::set_has_data() {
  _oneof_case_[0] = kData;
}
void Response::clear_data() {
  if (has_data()) {
    delete response_.data_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponseData& Response::data() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.data)
  return has_data()
      ? *response_.data_
      : ::SC2APIProtocol::ResponseData::default_instance();
}
::SC2APIProtocol::ResponseData* Response::mutable_data() {
  if (!has_data()) {
    clear_response();
    set_has_data();
    response_.data_ = new ::SC2APIProtocol::ResponseData;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.data)
  return response_.data_;
}
::SC2APIProtocol::ResponseData* Response::release_data() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.data)
  if (has_data()) {
    clear_has_response();
    ::SC2APIProtocol::ResponseData* temp = response_.data_;
    response_.data_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_data(::SC2APIProtocol::ResponseData* data) {
  clear_response();
  if (data) {
    set_has_data();
    response_.data_ = data;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.data)
}

// optional .SC2APIProtocol.ResponseQuery query = 14;
bool Response::has_query() const {
  return response_case() == kQuery;
}
void Response::set_has_query() {
  _oneof_case_[0] = kQuery;
}
void Response::clear_query() {
  if (has_query()) {
    delete response_.query_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponseQuery& Response::query() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.query)
  return has_query()
      ? *response_.query_
      : ::SC2APIProtocol::ResponseQuery::default_instance();
}
::SC2APIProtocol::ResponseQuery* Response::mutable_query() {
  if (!has_query()) {
    clear_response();
    set_has_query();
    response_.query_ = new ::SC2APIProtocol::ResponseQuery;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.query)
  return response_.query_;
}
::SC2APIProtocol::ResponseQuery* Response::release_query() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.query)
  if (has_query()) {
    clear_has_response();
    ::SC2APIProtocol::ResponseQuery* temp = response_.query_;
    response_.query_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_query(::SC2APIProtocol::ResponseQuery* query) {
  clear_response();
  if (query) {
    set_has_query();
    response_.query_ = query;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.query)
}

// optional .SC2APIProtocol.ResponseSaveReplay save_replay = 15;
bool Response::has_save_replay() const {
  return response_case() == kSaveReplay;
}
void Response::set_has_save_replay() {
  _oneof_case_[0] = kSaveReplay;
}
void Response::clear_save_replay() {
  if (has_save_replay()) {
    delete response_.save_replay_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponseSaveReplay& Response::save_replay() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.save_replay)
  return has_save_replay()
      ? *response_.save_replay_
      : ::SC2APIProtocol::ResponseSaveReplay::default_instance();
}
::SC2APIProtocol::ResponseSaveReplay* Response::mutable_save_replay() {
  if (!has_save_replay()) {
    clear_response();
    set_has_save_replay();
    response_.save_replay_ = new ::SC2APIProtocol::ResponseSaveReplay;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.save_replay)
  return response_.save_replay_;
}
::SC2APIProtocol::ResponseSaveReplay* Response::release_save_replay() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.save_replay)
  if (has_save_replay()) {
    clear_has_response();
    ::SC2APIProtocol::ResponseSaveReplay* temp = response_.save_replay_;
    response_.save_replay_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_save_replay(::SC2APIProtocol::ResponseSaveReplay* save_replay) {
  clear_response();
  if (save_replay) {
    set_has_save_replay();
    response_.save_replay_ = save_replay;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.save_replay)
}

// optional .SC2APIProtocol.ResponseReplayInfo replay_info = 16;
bool Response::has_replay_info() const {
  return response_case() == kReplayInfo;
}
void Response::set_has_replay_info() {
  _oneof_case_[0] = kReplayInfo;
}
void Response::clear_replay_info() {
  if (has_replay_info()) {
    delete response_.replay_info_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponseReplayInfo& Response::replay_info() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.replay_info)
  return has_replay_info()
      ? *response_.replay_info_
      : ::SC2APIProtocol::ResponseReplayInfo::default_instance();
}
::SC2APIProtocol::ResponseReplayInfo* Response::mutable_replay_info() {
  if (!has_replay_info()) {
    clear_response();
    set_has_replay_info();
    response_.replay_info_ = new ::SC2APIProtocol::ResponseReplayInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.replay_info)
  return response_.replay_info_;
}
::SC2APIProtocol::ResponseReplayInfo* Response::release_replay_info() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.replay_info)
  if (has_replay_info()) {
    clear_has_response();
    ::SC2APIProtocol::ResponseReplayInfo* temp = response_.replay_info_;
    response_.replay_info_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_replay_info(::SC2APIProtocol::ResponseReplayInfo* replay_info) {
  clear_response();
  if (replay_info) {
    set_has_replay_info();
    response_.replay_info_ = replay_info;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.replay_info)
}

// optional .SC2APIProtocol.ResponseAvailableMaps available_maps = 17;
bool Response::has_available_maps() const {
  return response_case() == kAvailableMaps;
}
void Response::set_has_available_maps() {
  _oneof_case_[0] = kAvailableMaps;
}
void Response::clear_available_maps() {
  if (has_available_maps()) {
    delete response_.available_maps_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponseAvailableMaps& Response::available_maps() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.available_maps)
  return has_available_maps()
      ? *response_.available_maps_
      : ::SC2APIProtocol::ResponseAvailableMaps::default_instance();
}
::SC2APIProtocol::ResponseAvailableMaps* Response::mutable_available_maps() {
  if (!has_available_maps()) {
    clear_response();
    set_has_available_maps();
    response_.available_maps_ = new ::SC2APIProtocol::ResponseAvailableMaps;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.available_maps)
  return response_.available_maps_;
}
::SC2APIProtocol::ResponseAvailableMaps* Response::release_available_maps() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.available_maps)
  if (has_available_maps()) {
    clear_has_response();
    ::SC2APIProtocol::ResponseAvailableMaps* temp = response_.available_maps_;
    response_.available_maps_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_available_maps(::SC2APIProtocol::ResponseAvailableMaps* available_maps) {
  clear_response();
  if (available_maps) {
    set_has_available_maps();
    response_.available_maps_ = available_maps;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.available_maps)
}

// optional .SC2APIProtocol.ResponseSaveMap save_map = 18;
bool Response::has_save_map() const {
  return response_case() == kSaveMap;
}
void Response::set_has_save_map() {
  _oneof_case_[0] = kSaveMap;
}
void Response::clear_save_map() {
  if (has_save_map()) {
    delete response_.save_map_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponseSaveMap& Response::save_map() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.save_map)
  return has_save_map()
      ? *response_.save_map_
      : ::SC2APIProtocol::ResponseSaveMap::default_instance();
}
::SC2APIProtocol::ResponseSaveMap* Response::mutable_save_map() {
  if (!has_save_map()) {
    clear_response();
    set_has_save_map();
    response_.save_map_ = new ::SC2APIProtocol::ResponseSaveMap;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.save_map)
  return response_.save_map_;
}
::SC2APIProtocol::ResponseSaveMap* Response::release_save_map() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.save_map)
  if (has_save_map()) {
    clear_has_response();
    ::SC2APIProtocol::ResponseSaveMap* temp = response_.save_map_;
    response_.save_map_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_save_map(::SC2APIProtocol::ResponseSaveMap* save_map) {
  clear_response();
  if (save_map) {
    set_has_save_map();
    response_.save_map_ = save_map;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.save_map)
}

// optional .SC2APIProtocol.ResponsePing ping = 19;
bool Response::has_ping() const {
  return response_case() == kPing;
}
void Response::set_has_ping() {
  _oneof_case_[0] = kPing;
}
void Response::clear_ping() {
  if (has_ping()) {
    delete response_.ping_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponsePing& Response::ping() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.ping)
  return has_ping()
      ? *response_.ping_
      : ::SC2APIProtocol::ResponsePing::default_instance();
}
::SC2APIProtocol::ResponsePing* Response::mutable_ping() {
  if (!has_ping()) {
    clear_response();
    set_has_ping();
    response_.ping_ = new ::SC2APIProtocol::ResponsePing;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.ping)
  return response_.ping_;
}
::SC2APIProtocol::ResponsePing* Response::release_ping() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.ping)
  if (has_ping()) {
    clear_has_response();
    ::SC2APIProtocol::ResponsePing* temp = response_.ping_;
    response_.ping_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_ping(::SC2APIProtocol::ResponsePing* ping) {
  clear_response();
  if (ping) {
    set_has_ping();
    response_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.ping)
}

// optional .SC2APIProtocol.ResponseDebug debug = 20;
bool Response::has_debug() const {
  return response_case() == kDebug;
}
void Response::set_has_debug() {
  _oneof_case_[0] = kDebug;
}
void Response::clear_debug() {
  if (has_debug()) {
    delete response_.debug_;
    clear_has_response();
  }
}
 const ::SC2APIProtocol::ResponseDebug& Response::debug() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.debug)
  return has_debug()
      ? *response_.debug_
      : ::SC2APIProtocol::ResponseDebug::default_instance();
}
::SC2APIProtocol::ResponseDebug* Response::mutable_debug() {
  if (!has_debug()) {
    clear_response();
    set_has_debug();
    response_.debug_ = new ::SC2APIProtocol::ResponseDebug;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.debug)
  return response_.debug_;
}
::SC2APIProtocol::ResponseDebug* Response::release_debug() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Response.debug)
  if (has_debug()) {
    clear_has_response();
    ::SC2APIProtocol::ResponseDebug* temp = response_.debug_;
    response_.debug_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Response::set_allocated_debug(::SC2APIProtocol::ResponseDebug* debug) {
  clear_response();
  if (debug) {
    set_has_debug();
    response_.debug_ = debug;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Response.debug)
}

// repeated string error = 98;
int Response::error_size() const {
  return error_.size();
}
void Response::clear_error() {
  error_.Clear();
}
 const ::std::string& Response::error(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.error)
  return error_.Get(index);
}
 ::std::string* Response::mutable_error(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Response.error)
  return error_.Mutable(index);
}
 void Response::set_error(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Response.error)
  error_.Mutable(index)->assign(value);
}
 void Response::set_error(int index, const char* value) {
  error_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.Response.error)
}
 void Response::set_error(int index, const char* value, size_t size) {
  error_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.Response.error)
}
 ::std::string* Response::add_error() {
  // @@protoc_insertion_point(field_add_mutable:SC2APIProtocol.Response.error)
  return error_.Add();
}
 void Response::add_error(const ::std::string& value) {
  error_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SC2APIProtocol.Response.error)
}
 void Response::add_error(const char* value) {
  error_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SC2APIProtocol.Response.error)
}
 void Response::add_error(const char* value, size_t size) {
  error_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SC2APIProtocol.Response.error)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Response::error() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.Response.error)
  return error_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Response::mutable_error() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.Response.error)
  return &error_;
}

// optional .SC2APIProtocol.Status status = 99;
bool Response::has_status() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Response::set_has_status() {
  _has_bits_[0] |= 0x00200000u;
}
void Response::clear_has_status() {
  _has_bits_[0] &= ~0x00200000u;
}
void Response::clear_status() {
  status_ = 1;
  clear_has_status();
}
 ::SC2APIProtocol::Status Response::status() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Response.status)
  return static_cast< ::SC2APIProtocol::Status >(status_);
}
 void Response::set_status(::SC2APIProtocol::Status value) {
  assert(::SC2APIProtocol::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Response.status)
}

bool Response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
void Response::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
Response::ResponseCase Response::response_case() const {
  return Response::ResponseCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestCreateGame::kLocalMapFieldNumber;
const int RequestCreateGame::kBattlenetMapNameFieldNumber;
const int RequestCreateGame::kPlayerSetupFieldNumber;
const int RequestCreateGame::kDisableFogFieldNumber;
const int RequestCreateGame::kRandomSeedFieldNumber;
const int RequestCreateGame::kRealtimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestCreateGame::RequestCreateGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestCreateGame)
}

void RequestCreateGame::InitAsDefaultInstance() {
  RequestCreateGame_default_oneof_instance_->local_map_ = const_cast< ::SC2APIProtocol::LocalMap*>(&::SC2APIProtocol::LocalMap::default_instance());
  RequestCreateGame_default_oneof_instance_->battlenet_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestCreateGame::RequestCreateGame(const RequestCreateGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestCreateGame)
}

void RequestCreateGame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  disable_fog_ = false;
  random_seed_ = 0u;
  realtime_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_Map();
}

RequestCreateGame::~RequestCreateGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestCreateGame)
  SharedDtor();
}

void RequestCreateGame::SharedDtor() {
  if (has_Map()) {
    clear_Map();
  }
  if (this != default_instance_) {
  }
}

void RequestCreateGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestCreateGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestCreateGame_descriptor_;
}

const RequestCreateGame& RequestCreateGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

RequestCreateGame* RequestCreateGame::default_instance_ = NULL;

RequestCreateGame* RequestCreateGame::New(::google::protobuf::Arena* arena) const {
  RequestCreateGame* n = new RequestCreateGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestCreateGame::clear_Map() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.RequestCreateGame)
  switch(Map_case()) {
    case kLocalMap: {
      delete Map_.local_map_;
      break;
    }
    case kBattlenetMapName: {
      Map_.battlenet_map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case MAP_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MAP_NOT_SET;
}


void RequestCreateGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestCreateGame)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RequestCreateGame, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RequestCreateGame*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(random_seed_, realtime_);

#undef ZR_HELPER_
#undef ZR_

  player_setup_.Clear();
  clear_Map();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestCreateGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestCreateGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.LocalMap local_map = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_local_map()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_battlenet_map_name;
        break;
      }

      // optional string battlenet_map_name = 2;
      case 2: {
        if (tag == 18) {
         parse_battlenet_map_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battlenet_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->battlenet_map_name().data(), this->battlenet_map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.RequestCreateGame.battlenet_map_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_setup;
        break;
      }

      // repeated .SC2APIProtocol.PlayerSetup player_setup = 3;
      case 3: {
        if (tag == 26) {
         parse_player_setup:
          DO_(input->IncrementRecursionDepth());
         parse_loop_player_setup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_player_setup()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_player_setup;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_disable_fog;
        break;
      }

      // optional bool disable_fog = 4;
      case 4: {
        if (tag == 32) {
         parse_disable_fog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_fog_)));
          set_has_disable_fog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_random_seed;
        break;
      }

      // optional uint32 random_seed = 5;
      case 5: {
        if (tag == 40) {
         parse_random_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_seed_)));
          set_has_random_seed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_realtime;
        break;
      }

      // optional bool realtime = 6;
      case 6: {
        if (tag == 48) {
         parse_realtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &realtime_)));
          set_has_realtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestCreateGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestCreateGame)
  return false;
#undef DO_
}

void RequestCreateGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestCreateGame)
  // optional .SC2APIProtocol.LocalMap local_map = 1;
  if (has_local_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *Map_.local_map_, output);
  }

  // optional string battlenet_map_name = 2;
  if (has_battlenet_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battlenet_map_name().data(), this->battlenet_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.RequestCreateGame.battlenet_map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->battlenet_map_name(), output);
  }

  // repeated .SC2APIProtocol.PlayerSetup player_setup = 3;
  for (unsigned int i = 0, n = this->player_setup_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_setup(i), output);
  }

  // optional bool disable_fog = 4;
  if (has_disable_fog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->disable_fog(), output);
  }

  // optional uint32 random_seed = 5;
  if (has_random_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->random_seed(), output);
  }

  // optional bool realtime = 6;
  if (has_realtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->realtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestCreateGame)
}

::google::protobuf::uint8* RequestCreateGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestCreateGame)
  // optional .SC2APIProtocol.LocalMap local_map = 1;
  if (has_local_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *Map_.local_map_, false, target);
  }

  // optional string battlenet_map_name = 2;
  if (has_battlenet_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battlenet_map_name().data(), this->battlenet_map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.RequestCreateGame.battlenet_map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->battlenet_map_name(), target);
  }

  // repeated .SC2APIProtocol.PlayerSetup player_setup = 3;
  for (unsigned int i = 0, n = this->player_setup_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->player_setup(i), false, target);
  }

  // optional bool disable_fog = 4;
  if (has_disable_fog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->disable_fog(), target);
  }

  // optional uint32 random_seed = 5;
  if (has_random_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->random_seed(), target);
  }

  // optional bool realtime = 6;
  if (has_realtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->realtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestCreateGame)
  return target;
}

int RequestCreateGame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestCreateGame)
  int total_size = 0;

  if (_has_bits_[3 / 32] & 56u) {
    // optional bool disable_fog = 4;
    if (has_disable_fog()) {
      total_size += 1 + 1;
    }

    // optional uint32 random_seed = 5;
    if (has_random_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->random_seed());
    }

    // optional bool realtime = 6;
    if (has_realtime()) {
      total_size += 1 + 1;
    }

  }
  // repeated .SC2APIProtocol.PlayerSetup player_setup = 3;
  total_size += 1 * this->player_setup_size();
  for (int i = 0; i < this->player_setup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_setup(i));
  }

  switch (Map_case()) {
    // optional .SC2APIProtocol.LocalMap local_map = 1;
    case kLocalMap: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *Map_.local_map_);
      break;
    }
    // optional string battlenet_map_name = 2;
    case kBattlenetMapName: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battlenet_map_name());
      break;
    }
    case MAP_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestCreateGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestCreateGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestCreateGame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestCreateGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestCreateGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestCreateGame)
    MergeFrom(*source);
  }
}

void RequestCreateGame::MergeFrom(const RequestCreateGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestCreateGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  player_setup_.MergeFrom(from.player_setup_);
  switch (from.Map_case()) {
    case kLocalMap: {
      mutable_local_map()->::SC2APIProtocol::LocalMap::MergeFrom(from.local_map());
      break;
    }
    case kBattlenetMapName: {
      set_battlenet_map_name(from.battlenet_map_name());
      break;
    }
    case MAP_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_disable_fog()) {
      set_disable_fog(from.disable_fog());
    }
    if (from.has_random_seed()) {
      set_random_seed(from.random_seed());
    }
    if (from.has_realtime()) {
      set_realtime(from.realtime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestCreateGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestCreateGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestCreateGame::CopyFrom(const RequestCreateGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestCreateGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestCreateGame::IsInitialized() const {

  return true;
}

void RequestCreateGame::Swap(RequestCreateGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestCreateGame::InternalSwap(RequestCreateGame* other) {
  player_setup_.UnsafeArenaSwap(&other->player_setup_);
  std::swap(disable_fog_, other->disable_fog_);
  std::swap(random_seed_, other->random_seed_);
  std::swap(realtime_, other->realtime_);
  std::swap(Map_, other->Map_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestCreateGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestCreateGame_descriptor_;
  metadata.reflection = RequestCreateGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestCreateGame

// optional .SC2APIProtocol.LocalMap local_map = 1;
bool RequestCreateGame::has_local_map() const {
  return Map_case() == kLocalMap;
}
void RequestCreateGame::set_has_local_map() {
  _oneof_case_[0] = kLocalMap;
}
void RequestCreateGame::clear_local_map() {
  if (has_local_map()) {
    delete Map_.local_map_;
    clear_has_Map();
  }
}
 const ::SC2APIProtocol::LocalMap& RequestCreateGame::local_map() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestCreateGame.local_map)
  return has_local_map()
      ? *Map_.local_map_
      : ::SC2APIProtocol::LocalMap::default_instance();
}
::SC2APIProtocol::LocalMap* RequestCreateGame::mutable_local_map() {
  if (!has_local_map()) {
    clear_Map();
    set_has_local_map();
    Map_.local_map_ = new ::SC2APIProtocol::LocalMap;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestCreateGame.local_map)
  return Map_.local_map_;
}
::SC2APIProtocol::LocalMap* RequestCreateGame::release_local_map() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RequestCreateGame.local_map)
  if (has_local_map()) {
    clear_has_Map();
    ::SC2APIProtocol::LocalMap* temp = Map_.local_map_;
    Map_.local_map_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void RequestCreateGame::set_allocated_local_map(::SC2APIProtocol::LocalMap* local_map) {
  clear_Map();
  if (local_map) {
    set_has_local_map();
    Map_.local_map_ = local_map;
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestCreateGame.local_map)
}

// optional string battlenet_map_name = 2;
bool RequestCreateGame::has_battlenet_map_name() const {
  return Map_case() == kBattlenetMapName;
}
void RequestCreateGame::set_has_battlenet_map_name() {
  _oneof_case_[0] = kBattlenetMapName;
}
void RequestCreateGame::clear_battlenet_map_name() {
  if (has_battlenet_map_name()) {
    Map_.battlenet_map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_Map();
  }
}
 const ::std::string& RequestCreateGame::battlenet_map_name() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestCreateGame.battlenet_map_name)
  if (has_battlenet_map_name()) {
    return Map_.battlenet_map_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void RequestCreateGame::set_battlenet_map_name(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestCreateGame.battlenet_map_name)
  if (!has_battlenet_map_name()) {
    clear_Map();
    set_has_battlenet_map_name();
    Map_.battlenet_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Map_.battlenet_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestCreateGame.battlenet_map_name)
}
 void RequestCreateGame::set_battlenet_map_name(const char* value) {
  if (!has_battlenet_map_name()) {
    clear_Map();
    set_has_battlenet_map_name();
    Map_.battlenet_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Map_.battlenet_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.RequestCreateGame.battlenet_map_name)
}
 void RequestCreateGame::set_battlenet_map_name(const char* value, size_t size) {
  if (!has_battlenet_map_name()) {
    clear_Map();
    set_has_battlenet_map_name();
    Map_.battlenet_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  Map_.battlenet_map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.RequestCreateGame.battlenet_map_name)
}
 ::std::string* RequestCreateGame::mutable_battlenet_map_name() {
  if (!has_battlenet_map_name()) {
    clear_Map();
    set_has_battlenet_map_name();
    Map_.battlenet_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestCreateGame.battlenet_map_name)
  return Map_.battlenet_map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestCreateGame::release_battlenet_map_name() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RequestCreateGame.battlenet_map_name)
  if (has_battlenet_map_name()) {
    clear_has_Map();
    return Map_.battlenet_map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void RequestCreateGame::set_allocated_battlenet_map_name(::std::string* battlenet_map_name) {
  if (!has_battlenet_map_name()) {
    Map_.battlenet_map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_Map();
  if (battlenet_map_name != NULL) {
    set_has_battlenet_map_name();
    Map_.battlenet_map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        battlenet_map_name);
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestCreateGame.battlenet_map_name)
}

// repeated .SC2APIProtocol.PlayerSetup player_setup = 3;
int RequestCreateGame::player_setup_size() const {
  return player_setup_.size();
}
void RequestCreateGame::clear_player_setup() {
  player_setup_.Clear();
}
const ::SC2APIProtocol::PlayerSetup& RequestCreateGame::player_setup(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestCreateGame.player_setup)
  return player_setup_.Get(index);
}
::SC2APIProtocol::PlayerSetup* RequestCreateGame::mutable_player_setup(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestCreateGame.player_setup)
  return player_setup_.Mutable(index);
}
::SC2APIProtocol::PlayerSetup* RequestCreateGame::add_player_setup() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.RequestCreateGame.player_setup)
  return player_setup_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::PlayerSetup >*
RequestCreateGame::mutable_player_setup() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.RequestCreateGame.player_setup)
  return &player_setup_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::PlayerSetup >&
RequestCreateGame::player_setup() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.RequestCreateGame.player_setup)
  return player_setup_;
}

// optional bool disable_fog = 4;
bool RequestCreateGame::has_disable_fog() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RequestCreateGame::set_has_disable_fog() {
  _has_bits_[0] |= 0x00000008u;
}
void RequestCreateGame::clear_has_disable_fog() {
  _has_bits_[0] &= ~0x00000008u;
}
void RequestCreateGame::clear_disable_fog() {
  disable_fog_ = false;
  clear_has_disable_fog();
}
 bool RequestCreateGame::disable_fog() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestCreateGame.disable_fog)
  return disable_fog_;
}
 void RequestCreateGame::set_disable_fog(bool value) {
  set_has_disable_fog();
  disable_fog_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestCreateGame.disable_fog)
}

// optional uint32 random_seed = 5;
bool RequestCreateGame::has_random_seed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RequestCreateGame::set_has_random_seed() {
  _has_bits_[0] |= 0x00000010u;
}
void RequestCreateGame::clear_has_random_seed() {
  _has_bits_[0] &= ~0x00000010u;
}
void RequestCreateGame::clear_random_seed() {
  random_seed_ = 0u;
  clear_has_random_seed();
}
 ::google::protobuf::uint32 RequestCreateGame::random_seed() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestCreateGame.random_seed)
  return random_seed_;
}
 void RequestCreateGame::set_random_seed(::google::protobuf::uint32 value) {
  set_has_random_seed();
  random_seed_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestCreateGame.random_seed)
}

// optional bool realtime = 6;
bool RequestCreateGame::has_realtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RequestCreateGame::set_has_realtime() {
  _has_bits_[0] |= 0x00000020u;
}
void RequestCreateGame::clear_has_realtime() {
  _has_bits_[0] &= ~0x00000020u;
}
void RequestCreateGame::clear_realtime() {
  realtime_ = false;
  clear_has_realtime();
}
 bool RequestCreateGame::realtime() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestCreateGame.realtime)
  return realtime_;
}
 void RequestCreateGame::set_realtime(bool value) {
  set_has_realtime();
  realtime_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestCreateGame.realtime)
}

bool RequestCreateGame::has_Map() const {
  return Map_case() != MAP_NOT_SET;
}
void RequestCreateGame::clear_has_Map() {
  _oneof_case_[0] = MAP_NOT_SET;
}
RequestCreateGame::MapCase RequestCreateGame::Map_case() const {
  return RequestCreateGame::MapCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalMap::kMapPathFieldNumber;
const int LocalMap::kMapDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalMap::LocalMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.LocalMap)
}

void LocalMap::InitAsDefaultInstance() {
}

LocalMap::LocalMap(const LocalMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.LocalMap)
}

void LocalMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  map_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocalMap::~LocalMap() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.LocalMap)
  SharedDtor();
}

void LocalMap::SharedDtor() {
  map_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LocalMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocalMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocalMap_descriptor_;
}

const LocalMap& LocalMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

LocalMap* LocalMap::default_instance_ = NULL;

LocalMap* LocalMap::New(::google::protobuf::Arena* arena) const {
  LocalMap* n = new LocalMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.LocalMap)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_map_path()) {
      map_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_map_data()) {
      map_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LocalMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.LocalMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string map_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_path().data(), this->map_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.LocalMap.map_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_map_data;
        break;
      }

      // optional bytes map_data = 7;
      case 7: {
        if (tag == 58) {
         parse_map_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.LocalMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.LocalMap)
  return false;
#undef DO_
}

void LocalMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.LocalMap)
  // optional string map_path = 1;
  if (has_map_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_path().data(), this->map_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.LocalMap.map_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->map_path(), output);
  }

  // optional bytes map_data = 7;
  if (has_map_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->map_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.LocalMap)
}

::google::protobuf::uint8* LocalMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.LocalMap)
  // optional string map_path = 1;
  if (has_map_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_path().data(), this->map_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.LocalMap.map_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->map_path(), target);
  }

  // optional bytes map_data = 7;
  if (has_map_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->map_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.LocalMap)
  return target;
}

int LocalMap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.LocalMap)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string map_path = 1;
    if (has_map_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_path());
    }

    // optional bytes map_data = 7;
    if (has_map_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.LocalMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LocalMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LocalMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.LocalMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.LocalMap)
    MergeFrom(*source);
  }
}

void LocalMap::MergeFrom(const LocalMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.LocalMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_path()) {
      set_has_map_path();
      map_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_path_);
    }
    if (from.has_map_data()) {
      set_has_map_data();
      map_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LocalMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.LocalMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalMap::CopyFrom(const LocalMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.LocalMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalMap::IsInitialized() const {

  return true;
}

void LocalMap::Swap(LocalMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalMap::InternalSwap(LocalMap* other) {
  map_path_.Swap(&other->map_path_);
  map_data_.Swap(&other->map_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LocalMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocalMap_descriptor_;
  metadata.reflection = LocalMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalMap

// optional string map_path = 1;
bool LocalMap::has_map_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LocalMap::set_has_map_path() {
  _has_bits_[0] |= 0x00000001u;
}
void LocalMap::clear_has_map_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void LocalMap::clear_map_path() {
  map_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_path();
}
 const ::std::string& LocalMap::map_path() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.LocalMap.map_path)
  return map_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LocalMap::set_map_path(const ::std::string& value) {
  set_has_map_path();
  map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.LocalMap.map_path)
}
 void LocalMap::set_map_path(const char* value) {
  set_has_map_path();
  map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.LocalMap.map_path)
}
 void LocalMap::set_map_path(const char* value, size_t size) {
  set_has_map_path();
  map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.LocalMap.map_path)
}
 ::std::string* LocalMap::mutable_map_path() {
  set_has_map_path();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.LocalMap.map_path)
  return map_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LocalMap::release_map_path() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.LocalMap.map_path)
  clear_has_map_path();
  return map_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LocalMap::set_allocated_map_path(::std::string* map_path) {
  if (map_path != NULL) {
    set_has_map_path();
  } else {
    clear_has_map_path();
  }
  map_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_path);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.LocalMap.map_path)
}

// optional bytes map_data = 7;
bool LocalMap::has_map_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LocalMap::set_has_map_data() {
  _has_bits_[0] |= 0x00000002u;
}
void LocalMap::clear_has_map_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void LocalMap::clear_map_data() {
  map_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_data();
}
 const ::std::string& LocalMap::map_data() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.LocalMap.map_data)
  return map_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LocalMap::set_map_data(const ::std::string& value) {
  set_has_map_data();
  map_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.LocalMap.map_data)
}
 void LocalMap::set_map_data(const char* value) {
  set_has_map_data();
  map_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.LocalMap.map_data)
}
 void LocalMap::set_map_data(const void* value, size_t size) {
  set_has_map_data();
  map_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.LocalMap.map_data)
}
 ::std::string* LocalMap::mutable_map_data() {
  set_has_map_data();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.LocalMap.map_data)
  return map_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LocalMap::release_map_data() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.LocalMap.map_data)
  clear_has_map_data();
  return map_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LocalMap::set_allocated_map_data(::std::string* map_data) {
  if (map_data != NULL) {
    set_has_map_data();
  } else {
    clear_has_map_data();
  }
  map_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_data);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.LocalMap.map_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ResponseCreateGame_Error_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseCreateGame_Error_descriptor_;
}
bool ResponseCreateGame_Error_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseCreateGame_Error ResponseCreateGame::MissingMap;
const ResponseCreateGame_Error ResponseCreateGame::InvalidMapPath;
const ResponseCreateGame_Error ResponseCreateGame::InvalidMapData;
const ResponseCreateGame_Error ResponseCreateGame::InvalidMapName;
const ResponseCreateGame_Error ResponseCreateGame::InvalidMapHandle;
const ResponseCreateGame_Error ResponseCreateGame::MissingPlayerSetup;
const ResponseCreateGame_Error ResponseCreateGame::InvalidPlayerSetup;
const ResponseCreateGame_Error ResponseCreateGame::MultiplayerUnsupported;
const ResponseCreateGame_Error ResponseCreateGame::Error_MIN;
const ResponseCreateGame_Error ResponseCreateGame::Error_MAX;
const int ResponseCreateGame::Error_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseCreateGame::kErrorFieldNumber;
const int ResponseCreateGame::kErrorDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseCreateGame::ResponseCreateGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseCreateGame)
}

void ResponseCreateGame::InitAsDefaultInstance() {
}

ResponseCreateGame::ResponseCreateGame(const ResponseCreateGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseCreateGame)
}

void ResponseCreateGame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = 1;
  error_details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseCreateGame::~ResponseCreateGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseCreateGame)
  SharedDtor();
}

void ResponseCreateGame::SharedDtor() {
  error_details_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseCreateGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseCreateGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseCreateGame_descriptor_;
}

const ResponseCreateGame& ResponseCreateGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ResponseCreateGame* ResponseCreateGame::default_instance_ = NULL;

ResponseCreateGame* ResponseCreateGame::New(::google::protobuf::Arena* arena) const {
  ResponseCreateGame* n = new ResponseCreateGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseCreateGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseCreateGame)
  if (_has_bits_[0 / 32] & 3u) {
    error_ = 1;
    if (has_error_details()) {
      error_details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseCreateGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseCreateGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ResponseCreateGame.Error error = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ResponseCreateGame_Error_IsValid(value)) {
            set_error(static_cast< ::SC2APIProtocol::ResponseCreateGame_Error >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_details;
        break;
      }

      // optional string error_details = 2;
      case 2: {
        if (tag == 18) {
         parse_error_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_details()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_details().data(), this->error_details().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseCreateGame.error_details");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseCreateGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseCreateGame)
  return false;
#undef DO_
}

void ResponseCreateGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseCreateGame)
  // optional .SC2APIProtocol.ResponseCreateGame.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  // optional string error_details = 2;
  if (has_error_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), this->error_details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseCreateGame.error_details");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_details(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseCreateGame)
}

::google::protobuf::uint8* ResponseCreateGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseCreateGame)
  // optional .SC2APIProtocol.ResponseCreateGame.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error(), target);
  }

  // optional string error_details = 2;
  if (has_error_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), this->error_details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseCreateGame.error_details");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_details(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseCreateGame)
  return target;
}

int ResponseCreateGame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseCreateGame)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .SC2APIProtocol.ResponseCreateGame.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional string error_details = 2;
    if (has_error_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_details());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseCreateGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseCreateGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseCreateGame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseCreateGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseCreateGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseCreateGame)
    MergeFrom(*source);
  }
}

void ResponseCreateGame::MergeFrom(const ResponseCreateGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseCreateGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_error_details()) {
      set_has_error_details();
      error_details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_details_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseCreateGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseCreateGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseCreateGame::CopyFrom(const ResponseCreateGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseCreateGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseCreateGame::IsInitialized() const {

  return true;
}

void ResponseCreateGame::Swap(ResponseCreateGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseCreateGame::InternalSwap(ResponseCreateGame* other) {
  std::swap(error_, other->error_);
  error_details_.Swap(&other->error_details_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseCreateGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseCreateGame_descriptor_;
  metadata.reflection = ResponseCreateGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseCreateGame

// optional .SC2APIProtocol.ResponseCreateGame.Error error = 1;
bool ResponseCreateGame::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseCreateGame::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseCreateGame::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseCreateGame::clear_error() {
  error_ = 1;
  clear_has_error();
}
 ::SC2APIProtocol::ResponseCreateGame_Error ResponseCreateGame::error() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseCreateGame.error)
  return static_cast< ::SC2APIProtocol::ResponseCreateGame_Error >(error_);
}
 void ResponseCreateGame::set_error(::SC2APIProtocol::ResponseCreateGame_Error value) {
  assert(::SC2APIProtocol::ResponseCreateGame_Error_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseCreateGame.error)
}

// optional string error_details = 2;
bool ResponseCreateGame::has_error_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResponseCreateGame::set_has_error_details() {
  _has_bits_[0] |= 0x00000002u;
}
void ResponseCreateGame::clear_has_error_details() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResponseCreateGame::clear_error_details() {
  error_details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_details();
}
 const ::std::string& ResponseCreateGame::error_details() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseCreateGame.error_details)
  return error_details_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseCreateGame::set_error_details(const ::std::string& value) {
  set_has_error_details();
  error_details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseCreateGame.error_details)
}
 void ResponseCreateGame::set_error_details(const char* value) {
  set_has_error_details();
  error_details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ResponseCreateGame.error_details)
}
 void ResponseCreateGame::set_error_details(const char* value, size_t size) {
  set_has_error_details();
  error_details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ResponseCreateGame.error_details)
}
 ::std::string* ResponseCreateGame::mutable_error_details() {
  set_has_error_details();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseCreateGame.error_details)
  return error_details_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseCreateGame::release_error_details() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ResponseCreateGame.error_details)
  clear_has_error_details();
  return error_details_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseCreateGame::set_allocated_error_details(::std::string* error_details) {
  if (error_details != NULL) {
    set_has_error_details();
  } else {
    clear_has_error_details();
  }
  error_details_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_details);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ResponseCreateGame.error_details)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestJoinGame::kRaceFieldNumber;
const int RequestJoinGame::kObservedPlayerIdFieldNumber;
const int RequestJoinGame::kOptionsFieldNumber;
const int RequestJoinGame::kServerPortsFieldNumber;
const int RequestJoinGame::kClientPortsFieldNumber;
const int RequestJoinGame::kSharedPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestJoinGame::RequestJoinGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestJoinGame)
}

void RequestJoinGame::InitAsDefaultInstance() {
  RequestJoinGame_default_oneof_instance_->race_ = 0;
  RequestJoinGame_default_oneof_instance_->observed_player_id_ = 0u;
  options_ = const_cast< ::SC2APIProtocol::InterfaceOptions*>(&::SC2APIProtocol::InterfaceOptions::default_instance());
  server_ports_ = const_cast< ::SC2APIProtocol::PortSet*>(&::SC2APIProtocol::PortSet::default_instance());
}

RequestJoinGame::RequestJoinGame(const RequestJoinGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestJoinGame)
}

void RequestJoinGame::SharedCtor() {
  _cached_size_ = 0;
  options_ = NULL;
  server_ports_ = NULL;
  shared_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_participation();
}

RequestJoinGame::~RequestJoinGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestJoinGame)
  SharedDtor();
}

void RequestJoinGame::SharedDtor() {
  if (has_participation()) {
    clear_participation();
  }
  if (this != default_instance_) {
    delete options_;
    delete server_ports_;
  }
}

void RequestJoinGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestJoinGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestJoinGame_descriptor_;
}

const RequestJoinGame& RequestJoinGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

RequestJoinGame* RequestJoinGame::default_instance_ = NULL;

RequestJoinGame* RequestJoinGame::New(::google::protobuf::Arena* arena) const {
  RequestJoinGame* n = new RequestJoinGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestJoinGame::clear_participation() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.RequestJoinGame)
  switch(participation_case()) {
    case kRace: {
      // No need to clear
      break;
    }
    case kObservedPlayerId: {
      // No need to clear
      break;
    }
    case PARTICIPATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARTICIPATION_NOT_SET;
}


void RequestJoinGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestJoinGame)
  if (_has_bits_[0 / 32] & 44u) {
    if (has_options()) {
      if (options_ != NULL) options_->::SC2APIProtocol::InterfaceOptions::Clear();
    }
    if (has_server_ports()) {
      if (server_ports_ != NULL) server_ports_->::SC2APIProtocol::PortSet::Clear();
    }
    shared_port_ = 0;
  }
  client_ports_.Clear();
  clear_participation();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestJoinGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestJoinGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.Race race = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Race_IsValid(value)) {
            set_race(static_cast< ::SC2APIProtocol::Race >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_observed_player_id;
        break;
      }

      // optional uint32 observed_player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_observed_player_id:
          clear_participation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &participation_.observed_player_id_)));
          set_has_observed_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_options;
        break;
      }

      // optional .SC2APIProtocol.InterfaceOptions options = 3;
      case 3: {
        if (tag == 26) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_server_ports;
        break;
      }

      // optional .SC2APIProtocol.PortSet server_ports = 4;
      case 4: {
        if (tag == 34) {
         parse_server_ports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_ports()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_client_ports;
        break;
      }

      // repeated .SC2APIProtocol.PortSet client_ports = 5;
      case 5: {
        if (tag == 42) {
         parse_client_ports:
          DO_(input->IncrementRecursionDepth());
         parse_loop_client_ports:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_client_ports()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_client_ports;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(48)) goto parse_shared_port;
        break;
      }

      // optional int32 shared_port = 6;
      case 6: {
        if (tag == 48) {
         parse_shared_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shared_port_)));
          set_has_shared_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestJoinGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestJoinGame)
  return false;
#undef DO_
}

void RequestJoinGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestJoinGame)
  // optional .SC2APIProtocol.Race race = 1;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->race(), output);
  }

  // optional uint32 observed_player_id = 2;
  if (has_observed_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->observed_player_id(), output);
  }

  // optional .SC2APIProtocol.InterfaceOptions options = 3;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->options_, output);
  }

  // optional .SC2APIProtocol.PortSet server_ports = 4;
  if (has_server_ports()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->server_ports_, output);
  }

  // repeated .SC2APIProtocol.PortSet client_ports = 5;
  for (unsigned int i = 0, n = this->client_ports_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->client_ports(i), output);
  }

  // optional int32 shared_port = 6;
  if (has_shared_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->shared_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestJoinGame)
}

::google::protobuf::uint8* RequestJoinGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestJoinGame)
  // optional .SC2APIProtocol.Race race = 1;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->race(), target);
  }

  // optional uint32 observed_player_id = 2;
  if (has_observed_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->observed_player_id(), target);
  }

  // optional .SC2APIProtocol.InterfaceOptions options = 3;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->options_, false, target);
  }

  // optional .SC2APIProtocol.PortSet server_ports = 4;
  if (has_server_ports()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->server_ports_, false, target);
  }

  // repeated .SC2APIProtocol.PortSet client_ports = 5;
  for (unsigned int i = 0, n = this->client_ports_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->client_ports(i), false, target);
  }

  // optional int32 shared_port = 6;
  if (has_shared_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->shared_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestJoinGame)
  return target;
}

int RequestJoinGame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestJoinGame)
  int total_size = 0;

  if (_has_bits_[2 / 32] & 44u) {
    // optional .SC2APIProtocol.InterfaceOptions options = 3;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->options_);
    }

    // optional .SC2APIProtocol.PortSet server_ports = 4;
    if (has_server_ports()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->server_ports_);
    }

    // optional int32 shared_port = 6;
    if (has_shared_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shared_port());
    }

  }
  // repeated .SC2APIProtocol.PortSet client_ports = 5;
  total_size += 1 * this->client_ports_size();
  for (int i = 0; i < this->client_ports_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->client_ports(i));
  }

  switch (participation_case()) {
    // optional .SC2APIProtocol.Race race = 1;
    case kRace: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->race());
      break;
    }
    // optional uint32 observed_player_id = 2;
    case kObservedPlayerId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->observed_player_id());
      break;
    }
    case PARTICIPATION_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestJoinGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestJoinGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestJoinGame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestJoinGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestJoinGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestJoinGame)
    MergeFrom(*source);
  }
}

void RequestJoinGame::MergeFrom(const RequestJoinGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestJoinGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  client_ports_.MergeFrom(from.client_ports_);
  switch (from.participation_case()) {
    case kRace: {
      set_race(from.race());
      break;
    }
    case kObservedPlayerId: {
      set_observed_player_id(from.observed_player_id());
      break;
    }
    case PARTICIPATION_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_options()) {
      mutable_options()->::SC2APIProtocol::InterfaceOptions::MergeFrom(from.options());
    }
    if (from.has_server_ports()) {
      mutable_server_ports()->::SC2APIProtocol::PortSet::MergeFrom(from.server_ports());
    }
    if (from.has_shared_port()) {
      set_shared_port(from.shared_port());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestJoinGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestJoinGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestJoinGame::CopyFrom(const RequestJoinGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestJoinGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestJoinGame::IsInitialized() const {

  return true;
}

void RequestJoinGame::Swap(RequestJoinGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestJoinGame::InternalSwap(RequestJoinGame* other) {
  std::swap(options_, other->options_);
  std::swap(server_ports_, other->server_ports_);
  client_ports_.UnsafeArenaSwap(&other->client_ports_);
  std::swap(shared_port_, other->shared_port_);
  std::swap(participation_, other->participation_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestJoinGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestJoinGame_descriptor_;
  metadata.reflection = RequestJoinGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestJoinGame

// optional .SC2APIProtocol.Race race = 1;
bool RequestJoinGame::has_race() const {
  return participation_case() == kRace;
}
void RequestJoinGame::set_has_race() {
  _oneof_case_[0] = kRace;
}
void RequestJoinGame::clear_race() {
  if (has_race()) {
    participation_.race_ = 0;
    clear_has_participation();
  }
}
 ::SC2APIProtocol::Race RequestJoinGame::race() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestJoinGame.race)
  if (has_race()) {
    return static_cast< ::SC2APIProtocol::Race >(participation_.race_);
  }
  return static_cast< ::SC2APIProtocol::Race >(0);
}
 void RequestJoinGame::set_race(::SC2APIProtocol::Race value) {
  assert(::SC2APIProtocol::Race_IsValid(value));
  if (!has_race()) {
    clear_participation();
    set_has_race();
  }
  participation_.race_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestJoinGame.race)
}

// optional uint32 observed_player_id = 2;
bool RequestJoinGame::has_observed_player_id() const {
  return participation_case() == kObservedPlayerId;
}
void RequestJoinGame::set_has_observed_player_id() {
  _oneof_case_[0] = kObservedPlayerId;
}
void RequestJoinGame::clear_observed_player_id() {
  if (has_observed_player_id()) {
    participation_.observed_player_id_ = 0u;
    clear_has_participation();
  }
}
 ::google::protobuf::uint32 RequestJoinGame::observed_player_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestJoinGame.observed_player_id)
  if (has_observed_player_id()) {
    return participation_.observed_player_id_;
  }
  return 0u;
}
 void RequestJoinGame::set_observed_player_id(::google::protobuf::uint32 value) {
  if (!has_observed_player_id()) {
    clear_participation();
    set_has_observed_player_id();
  }
  participation_.observed_player_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestJoinGame.observed_player_id)
}

// optional .SC2APIProtocol.InterfaceOptions options = 3;
bool RequestJoinGame::has_options() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RequestJoinGame::set_has_options() {
  _has_bits_[0] |= 0x00000004u;
}
void RequestJoinGame::clear_has_options() {
  _has_bits_[0] &= ~0x00000004u;
}
void RequestJoinGame::clear_options() {
  if (options_ != NULL) options_->::SC2APIProtocol::InterfaceOptions::Clear();
  clear_has_options();
}
const ::SC2APIProtocol::InterfaceOptions& RequestJoinGame::options() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestJoinGame.options)
  return options_ != NULL ? *options_ : *default_instance_->options_;
}
::SC2APIProtocol::InterfaceOptions* RequestJoinGame::mutable_options() {
  set_has_options();
  if (options_ == NULL) {
    options_ = new ::SC2APIProtocol::InterfaceOptions;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestJoinGame.options)
  return options_;
}
::SC2APIProtocol::InterfaceOptions* RequestJoinGame::release_options() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RequestJoinGame.options)
  clear_has_options();
  ::SC2APIProtocol::InterfaceOptions* temp = options_;
  options_ = NULL;
  return temp;
}
void RequestJoinGame::set_allocated_options(::SC2APIProtocol::InterfaceOptions* options) {
  delete options_;
  options_ = options;
  if (options) {
    set_has_options();
  } else {
    clear_has_options();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestJoinGame.options)
}

// optional .SC2APIProtocol.PortSet server_ports = 4;
bool RequestJoinGame::has_server_ports() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RequestJoinGame::set_has_server_ports() {
  _has_bits_[0] |= 0x00000008u;
}
void RequestJoinGame::clear_has_server_ports() {
  _has_bits_[0] &= ~0x00000008u;
}
void RequestJoinGame::clear_server_ports() {
  if (server_ports_ != NULL) server_ports_->::SC2APIProtocol::PortSet::Clear();
  clear_has_server_ports();
}
const ::SC2APIProtocol::PortSet& RequestJoinGame::server_ports() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestJoinGame.server_ports)
  return server_ports_ != NULL ? *server_ports_ : *default_instance_->server_ports_;
}
::SC2APIProtocol::PortSet* RequestJoinGame::mutable_server_ports() {
  set_has_server_ports();
  if (server_ports_ == NULL) {
    server_ports_ = new ::SC2APIProtocol::PortSet;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestJoinGame.server_ports)
  return server_ports_;
}
::SC2APIProtocol::PortSet* RequestJoinGame::release_server_ports() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RequestJoinGame.server_ports)
  clear_has_server_ports();
  ::SC2APIProtocol::PortSet* temp = server_ports_;
  server_ports_ = NULL;
  return temp;
}
void RequestJoinGame::set_allocated_server_ports(::SC2APIProtocol::PortSet* server_ports) {
  delete server_ports_;
  server_ports_ = server_ports;
  if (server_ports) {
    set_has_server_ports();
  } else {
    clear_has_server_ports();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestJoinGame.server_ports)
}

// repeated .SC2APIProtocol.PortSet client_ports = 5;
int RequestJoinGame::client_ports_size() const {
  return client_ports_.size();
}
void RequestJoinGame::clear_client_ports() {
  client_ports_.Clear();
}
const ::SC2APIProtocol::PortSet& RequestJoinGame::client_ports(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestJoinGame.client_ports)
  return client_ports_.Get(index);
}
::SC2APIProtocol::PortSet* RequestJoinGame::mutable_client_ports(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestJoinGame.client_ports)
  return client_ports_.Mutable(index);
}
::SC2APIProtocol::PortSet* RequestJoinGame::add_client_ports() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.RequestJoinGame.client_ports)
  return client_ports_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::PortSet >*
RequestJoinGame::mutable_client_ports() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.RequestJoinGame.client_ports)
  return &client_ports_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::PortSet >&
RequestJoinGame::client_ports() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.RequestJoinGame.client_ports)
  return client_ports_;
}

// optional int32 shared_port = 6;
bool RequestJoinGame::has_shared_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RequestJoinGame::set_has_shared_port() {
  _has_bits_[0] |= 0x00000020u;
}
void RequestJoinGame::clear_has_shared_port() {
  _has_bits_[0] &= ~0x00000020u;
}
void RequestJoinGame::clear_shared_port() {
  shared_port_ = 0;
  clear_has_shared_port();
}
 ::google::protobuf::int32 RequestJoinGame::shared_port() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestJoinGame.shared_port)
  return shared_port_;
}
 void RequestJoinGame::set_shared_port(::google::protobuf::int32 value) {
  set_has_shared_port();
  shared_port_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestJoinGame.shared_port)
}

bool RequestJoinGame::has_participation() const {
  return participation_case() != PARTICIPATION_NOT_SET;
}
void RequestJoinGame::clear_has_participation() {
  _oneof_case_[0] = PARTICIPATION_NOT_SET;
}
RequestJoinGame::ParticipationCase RequestJoinGame::participation_case() const {
  return RequestJoinGame::ParticipationCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PortSet::kGamePortFieldNumber;
const int PortSet::kBasePortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PortSet::PortSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.PortSet)
}

void PortSet::InitAsDefaultInstance() {
}

PortSet::PortSet(const PortSet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PortSet)
}

void PortSet::SharedCtor() {
  _cached_size_ = 0;
  game_port_ = 0;
  base_port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PortSet::~PortSet() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PortSet)
  SharedDtor();
}

void PortSet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PortSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PortSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PortSet_descriptor_;
}

const PortSet& PortSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

PortSet* PortSet::default_instance_ = NULL;

PortSet* PortSet::New(::google::protobuf::Arena* arena) const {
  PortSet* n = new PortSet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PortSet::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PortSet)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PortSet, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PortSet*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(game_port_, base_port_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PortSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.PortSet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 game_port = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_port_)));
          set_has_game_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_base_port;
        break;
      }

      // optional int32 base_port = 2;
      case 2: {
        if (tag == 16) {
         parse_base_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &base_port_)));
          set_has_base_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.PortSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.PortSet)
  return false;
#undef DO_
}

void PortSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.PortSet)
  // optional int32 game_port = 1;
  if (has_game_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->game_port(), output);
  }

  // optional int32 base_port = 2;
  if (has_base_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->base_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.PortSet)
}

::google::protobuf::uint8* PortSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PortSet)
  // optional int32 game_port = 1;
  if (has_game_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->game_port(), target);
  }

  // optional int32 base_port = 2;
  if (has_base_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->base_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PortSet)
  return target;
}

int PortSet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PortSet)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 game_port = 1;
    if (has_game_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_port());
    }

    // optional int32 base_port = 2;
    if (has_base_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->base_port());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PortSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.PortSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PortSet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PortSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.PortSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.PortSet)
    MergeFrom(*source);
  }
}

void PortSet::MergeFrom(const PortSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PortSet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_port()) {
      set_game_port(from.game_port());
    }
    if (from.has_base_port()) {
      set_base_port(from.base_port());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PortSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.PortSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortSet::CopyFrom(const PortSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PortSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortSet::IsInitialized() const {

  return true;
}

void PortSet::Swap(PortSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PortSet::InternalSwap(PortSet* other) {
  std::swap(game_port_, other->game_port_);
  std::swap(base_port_, other->base_port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PortSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PortSet_descriptor_;
  metadata.reflection = PortSet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PortSet

// optional int32 game_port = 1;
bool PortSet::has_game_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PortSet::set_has_game_port() {
  _has_bits_[0] |= 0x00000001u;
}
void PortSet::clear_has_game_port() {
  _has_bits_[0] &= ~0x00000001u;
}
void PortSet::clear_game_port() {
  game_port_ = 0;
  clear_has_game_port();
}
 ::google::protobuf::int32 PortSet::game_port() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PortSet.game_port)
  return game_port_;
}
 void PortSet::set_game_port(::google::protobuf::int32 value) {
  set_has_game_port();
  game_port_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PortSet.game_port)
}

// optional int32 base_port = 2;
bool PortSet::has_base_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PortSet::set_has_base_port() {
  _has_bits_[0] |= 0x00000002u;
}
void PortSet::clear_has_base_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void PortSet::clear_base_port() {
  base_port_ = 0;
  clear_has_base_port();
}
 ::google::protobuf::int32 PortSet::base_port() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PortSet.base_port)
  return base_port_;
}
 void PortSet::set_base_port(::google::protobuf::int32 value) {
  set_has_base_port();
  base_port_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PortSet.base_port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ResponseJoinGame_Error_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseJoinGame_Error_descriptor_;
}
bool ResponseJoinGame_Error_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseJoinGame_Error ResponseJoinGame::MissingParticipation;
const ResponseJoinGame_Error ResponseJoinGame::InvalidObservedPlayerId;
const ResponseJoinGame_Error ResponseJoinGame::MissingOptions;
const ResponseJoinGame_Error ResponseJoinGame::MissingPorts;
const ResponseJoinGame_Error ResponseJoinGame::GameFull;
const ResponseJoinGame_Error ResponseJoinGame::LaunchError;
const ResponseJoinGame_Error ResponseJoinGame::FeatureUnsupported;
const ResponseJoinGame_Error ResponseJoinGame::NoSpaceForUser;
const ResponseJoinGame_Error ResponseJoinGame::MapDoesNotExist;
const ResponseJoinGame_Error ResponseJoinGame::CannotOpenMap;
const ResponseJoinGame_Error ResponseJoinGame::ChecksumError;
const ResponseJoinGame_Error ResponseJoinGame::NetworkError;
const ResponseJoinGame_Error ResponseJoinGame::OtherError;
const ResponseJoinGame_Error ResponseJoinGame::Error_MIN;
const ResponseJoinGame_Error ResponseJoinGame::Error_MAX;
const int ResponseJoinGame::Error_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseJoinGame::kPlayerIdFieldNumber;
const int ResponseJoinGame::kErrorFieldNumber;
const int ResponseJoinGame::kErrorDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseJoinGame::ResponseJoinGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseJoinGame)
}

void ResponseJoinGame::InitAsDefaultInstance() {
}

ResponseJoinGame::ResponseJoinGame(const ResponseJoinGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseJoinGame)
}

void ResponseJoinGame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0u;
  error_ = 1;
  error_details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseJoinGame::~ResponseJoinGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseJoinGame)
  SharedDtor();
}

void ResponseJoinGame::SharedDtor() {
  error_details_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseJoinGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseJoinGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseJoinGame_descriptor_;
}

const ResponseJoinGame& ResponseJoinGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ResponseJoinGame* ResponseJoinGame::default_instance_ = NULL;

ResponseJoinGame* ResponseJoinGame::New(::google::protobuf::Arena* arena) const {
  ResponseJoinGame* n = new ResponseJoinGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseJoinGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseJoinGame)
  if (_has_bits_[0 / 32] & 7u) {
    player_id_ = 0u;
    error_ = 1;
    if (has_error_details()) {
      error_details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseJoinGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseJoinGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional .SC2APIProtocol.ResponseJoinGame.Error error = 2;
      case 2: {
        if (tag == 16) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ResponseJoinGame_Error_IsValid(value)) {
            set_error(static_cast< ::SC2APIProtocol::ResponseJoinGame_Error >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error_details;
        break;
      }

      // optional string error_details = 3;
      case 3: {
        if (tag == 26) {
         parse_error_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_details()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_details().data(), this->error_details().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseJoinGame.error_details");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseJoinGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseJoinGame)
  return false;
#undef DO_
}

void ResponseJoinGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseJoinGame)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional .SC2APIProtocol.ResponseJoinGame.Error error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error(), output);
  }

  // optional string error_details = 3;
  if (has_error_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), this->error_details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseJoinGame.error_details");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_details(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseJoinGame)
}

::google::protobuf::uint8* ResponseJoinGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseJoinGame)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional .SC2APIProtocol.ResponseJoinGame.Error error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->error(), target);
  }

  // optional string error_details = 3;
  if (has_error_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), this->error_details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseJoinGame.error_details");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_details(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseJoinGame)
  return target;
}

int ResponseJoinGame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseJoinGame)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional .SC2APIProtocol.ResponseJoinGame.Error error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional string error_details = 3;
    if (has_error_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_details());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseJoinGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseJoinGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseJoinGame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseJoinGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseJoinGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseJoinGame)
    MergeFrom(*source);
  }
}

void ResponseJoinGame::MergeFrom(const ResponseJoinGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseJoinGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_error_details()) {
      set_has_error_details();
      error_details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_details_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseJoinGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseJoinGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseJoinGame::CopyFrom(const ResponseJoinGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseJoinGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseJoinGame::IsInitialized() const {

  return true;
}

void ResponseJoinGame::Swap(ResponseJoinGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseJoinGame::InternalSwap(ResponseJoinGame* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(error_, other->error_);
  error_details_.Swap(&other->error_details_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseJoinGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseJoinGame_descriptor_;
  metadata.reflection = ResponseJoinGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseJoinGame

// optional uint32 player_id = 1;
bool ResponseJoinGame::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseJoinGame::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseJoinGame::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseJoinGame::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
 ::google::protobuf::uint32 ResponseJoinGame::player_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseJoinGame.player_id)
  return player_id_;
}
 void ResponseJoinGame::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseJoinGame.player_id)
}

// optional .SC2APIProtocol.ResponseJoinGame.Error error = 2;
bool ResponseJoinGame::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResponseJoinGame::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
void ResponseJoinGame::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResponseJoinGame::clear_error() {
  error_ = 1;
  clear_has_error();
}
 ::SC2APIProtocol::ResponseJoinGame_Error ResponseJoinGame::error() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseJoinGame.error)
  return static_cast< ::SC2APIProtocol::ResponseJoinGame_Error >(error_);
}
 void ResponseJoinGame::set_error(::SC2APIProtocol::ResponseJoinGame_Error value) {
  assert(::SC2APIProtocol::ResponseJoinGame_Error_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseJoinGame.error)
}

// optional string error_details = 3;
bool ResponseJoinGame::has_error_details() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResponseJoinGame::set_has_error_details() {
  _has_bits_[0] |= 0x00000004u;
}
void ResponseJoinGame::clear_has_error_details() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResponseJoinGame::clear_error_details() {
  error_details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_details();
}
 const ::std::string& ResponseJoinGame::error_details() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseJoinGame.error_details)
  return error_details_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseJoinGame::set_error_details(const ::std::string& value) {
  set_has_error_details();
  error_details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseJoinGame.error_details)
}
 void ResponseJoinGame::set_error_details(const char* value) {
  set_has_error_details();
  error_details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ResponseJoinGame.error_details)
}
 void ResponseJoinGame::set_error_details(const char* value, size_t size) {
  set_has_error_details();
  error_details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ResponseJoinGame.error_details)
}
 ::std::string* ResponseJoinGame::mutable_error_details() {
  set_has_error_details();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseJoinGame.error_details)
  return error_details_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseJoinGame::release_error_details() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ResponseJoinGame.error_details)
  clear_has_error_details();
  return error_details_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseJoinGame::set_allocated_error_details(::std::string* error_details) {
  if (error_details != NULL) {
    set_has_error_details();
  } else {
    clear_has_error_details();
  }
  error_details_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_details);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ResponseJoinGame.error_details)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestRestartGame::RequestRestartGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestRestartGame)
}

void RequestRestartGame::InitAsDefaultInstance() {
}

RequestRestartGame::RequestRestartGame(const RequestRestartGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestRestartGame)
}

void RequestRestartGame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestRestartGame::~RequestRestartGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestRestartGame)
  SharedDtor();
}

void RequestRestartGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestRestartGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRestartGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestRestartGame_descriptor_;
}

const RequestRestartGame& RequestRestartGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

RequestRestartGame* RequestRestartGame::default_instance_ = NULL;

RequestRestartGame* RequestRestartGame::New(::google::protobuf::Arena* arena) const {
  RequestRestartGame* n = new RequestRestartGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestRestartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestRestartGame)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestRestartGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestRestartGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestRestartGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestRestartGame)
  return false;
#undef DO_
}

void RequestRestartGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestRestartGame)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestRestartGame)
}

::google::protobuf::uint8* RequestRestartGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestRestartGame)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestRestartGame)
  return target;
}

int RequestRestartGame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestRestartGame)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRestartGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestRestartGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestRestartGame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestRestartGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestRestartGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestRestartGame)
    MergeFrom(*source);
  }
}

void RequestRestartGame::MergeFrom(const RequestRestartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestRestartGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestRestartGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestRestartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRestartGame::CopyFrom(const RequestRestartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestRestartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRestartGame::IsInitialized() const {

  return true;
}

void RequestRestartGame::Swap(RequestRestartGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestRestartGame::InternalSwap(RequestRestartGame* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestRestartGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestRestartGame_descriptor_;
  metadata.reflection = RequestRestartGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestRestartGame

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ResponseRestartGame_Error_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseRestartGame_Error_descriptor_;
}
bool ResponseRestartGame_Error_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseRestartGame_Error ResponseRestartGame::LaunchError;
const ResponseRestartGame_Error ResponseRestartGame::Error_MIN;
const ResponseRestartGame_Error ResponseRestartGame::Error_MAX;
const int ResponseRestartGame::Error_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseRestartGame::kErrorFieldNumber;
const int ResponseRestartGame::kErrorDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseRestartGame::ResponseRestartGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseRestartGame)
}

void ResponseRestartGame::InitAsDefaultInstance() {
}

ResponseRestartGame::ResponseRestartGame(const ResponseRestartGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseRestartGame)
}

void ResponseRestartGame::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = 1;
  error_details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseRestartGame::~ResponseRestartGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseRestartGame)
  SharedDtor();
}

void ResponseRestartGame::SharedDtor() {
  error_details_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseRestartGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseRestartGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseRestartGame_descriptor_;
}

const ResponseRestartGame& ResponseRestartGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ResponseRestartGame* ResponseRestartGame::default_instance_ = NULL;

ResponseRestartGame* ResponseRestartGame::New(::google::protobuf::Arena* arena) const {
  ResponseRestartGame* n = new ResponseRestartGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseRestartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseRestartGame)
  if (_has_bits_[0 / 32] & 3u) {
    error_ = 1;
    if (has_error_details()) {
      error_details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseRestartGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseRestartGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ResponseRestartGame.Error error = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ResponseRestartGame_Error_IsValid(value)) {
            set_error(static_cast< ::SC2APIProtocol::ResponseRestartGame_Error >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_details;
        break;
      }

      // optional string error_details = 2;
      case 2: {
        if (tag == 18) {
         parse_error_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_details()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_details().data(), this->error_details().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseRestartGame.error_details");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseRestartGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseRestartGame)
  return false;
#undef DO_
}

void ResponseRestartGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseRestartGame)
  // optional .SC2APIProtocol.ResponseRestartGame.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  // optional string error_details = 2;
  if (has_error_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), this->error_details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseRestartGame.error_details");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_details(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseRestartGame)
}

::google::protobuf::uint8* ResponseRestartGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseRestartGame)
  // optional .SC2APIProtocol.ResponseRestartGame.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error(), target);
  }

  // optional string error_details = 2;
  if (has_error_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), this->error_details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseRestartGame.error_details");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_details(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseRestartGame)
  return target;
}

int ResponseRestartGame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseRestartGame)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .SC2APIProtocol.ResponseRestartGame.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional string error_details = 2;
    if (has_error_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_details());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseRestartGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseRestartGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseRestartGame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseRestartGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseRestartGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseRestartGame)
    MergeFrom(*source);
  }
}

void ResponseRestartGame::MergeFrom(const ResponseRestartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseRestartGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_error_details()) {
      set_has_error_details();
      error_details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_details_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseRestartGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseRestartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRestartGame::CopyFrom(const ResponseRestartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseRestartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRestartGame::IsInitialized() const {

  return true;
}

void ResponseRestartGame::Swap(ResponseRestartGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseRestartGame::InternalSwap(ResponseRestartGame* other) {
  std::swap(error_, other->error_);
  error_details_.Swap(&other->error_details_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseRestartGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseRestartGame_descriptor_;
  metadata.reflection = ResponseRestartGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseRestartGame

// optional .SC2APIProtocol.ResponseRestartGame.Error error = 1;
bool ResponseRestartGame::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseRestartGame::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseRestartGame::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseRestartGame::clear_error() {
  error_ = 1;
  clear_has_error();
}
 ::SC2APIProtocol::ResponseRestartGame_Error ResponseRestartGame::error() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseRestartGame.error)
  return static_cast< ::SC2APIProtocol::ResponseRestartGame_Error >(error_);
}
 void ResponseRestartGame::set_error(::SC2APIProtocol::ResponseRestartGame_Error value) {
  assert(::SC2APIProtocol::ResponseRestartGame_Error_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseRestartGame.error)
}

// optional string error_details = 2;
bool ResponseRestartGame::has_error_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResponseRestartGame::set_has_error_details() {
  _has_bits_[0] |= 0x00000002u;
}
void ResponseRestartGame::clear_has_error_details() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResponseRestartGame::clear_error_details() {
  error_details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_details();
}
 const ::std::string& ResponseRestartGame::error_details() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseRestartGame.error_details)
  return error_details_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseRestartGame::set_error_details(const ::std::string& value) {
  set_has_error_details();
  error_details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseRestartGame.error_details)
}
 void ResponseRestartGame::set_error_details(const char* value) {
  set_has_error_details();
  error_details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ResponseRestartGame.error_details)
}
 void ResponseRestartGame::set_error_details(const char* value, size_t size) {
  set_has_error_details();
  error_details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ResponseRestartGame.error_details)
}
 ::std::string* ResponseRestartGame::mutable_error_details() {
  set_has_error_details();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseRestartGame.error_details)
  return error_details_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseRestartGame::release_error_details() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ResponseRestartGame.error_details)
  clear_has_error_details();
  return error_details_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseRestartGame::set_allocated_error_details(::std::string* error_details) {
  if (error_details != NULL) {
    set_has_error_details();
  } else {
    clear_has_error_details();
  }
  error_details_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_details);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ResponseRestartGame.error_details)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestStartReplay::kReplayPathFieldNumber;
const int RequestStartReplay::kReplayDataFieldNumber;
const int RequestStartReplay::kMapDataFieldNumber;
const int RequestStartReplay::kObservedPlayerIdFieldNumber;
const int RequestStartReplay::kOptionsFieldNumber;
const int RequestStartReplay::kDisableFogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestStartReplay::RequestStartReplay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestStartReplay)
}

void RequestStartReplay::InitAsDefaultInstance() {
  RequestStartReplay_default_oneof_instance_->replay_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  RequestStartReplay_default_oneof_instance_->replay_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  options_ = const_cast< ::SC2APIProtocol::InterfaceOptions*>(&::SC2APIProtocol::InterfaceOptions::default_instance());
}

RequestStartReplay::RequestStartReplay(const RequestStartReplay& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestStartReplay)
}

void RequestStartReplay::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  map_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  observed_player_id_ = 0;
  options_ = NULL;
  disable_fog_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_replay();
}

RequestStartReplay::~RequestStartReplay() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestStartReplay)
  SharedDtor();
}

void RequestStartReplay::SharedDtor() {
  map_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_replay()) {
    clear_replay();
  }
  if (this != default_instance_) {
    delete options_;
  }
}

void RequestStartReplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestStartReplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestStartReplay_descriptor_;
}

const RequestStartReplay& RequestStartReplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

RequestStartReplay* RequestStartReplay::default_instance_ = NULL;

RequestStartReplay* RequestStartReplay::New(::google::protobuf::Arena* arena) const {
  RequestStartReplay* n = new RequestStartReplay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestStartReplay::clear_replay() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.RequestStartReplay)
  switch(replay_case()) {
    case kReplayPath: {
      replay_.replay_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kReplayData: {
      replay_.replay_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REPLAY_NOT_SET;
}


void RequestStartReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestStartReplay)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RequestStartReplay, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RequestStartReplay*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 60u) {
    ZR_(observed_player_id_, disable_fog_);
    if (has_map_data()) {
      map_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_options()) {
      if (options_ != NULL) options_->::SC2APIProtocol::InterfaceOptions::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  clear_replay();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestStartReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestStartReplay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string replay_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replay_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->replay_path().data(), this->replay_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.RequestStartReplay.replay_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_observed_player_id;
        break;
      }

      // optional int32 observed_player_id = 2;
      case 2: {
        if (tag == 16) {
         parse_observed_player_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &observed_player_id_)));
          set_has_observed_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_options;
        break;
      }

      // optional .SC2APIProtocol.InterfaceOptions options = 3;
      case 3: {
        if (tag == 26) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_disable_fog;
        break;
      }

      // optional bool disable_fog = 4;
      case 4: {
        if (tag == 32) {
         parse_disable_fog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_fog_)));
          set_has_disable_fog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_replay_data;
        break;
      }

      // optional bytes replay_data = 5;
      case 5: {
        if (tag == 42) {
         parse_replay_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_replay_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_map_data;
        break;
      }

      // optional bytes map_data = 6;
      case 6: {
        if (tag == 50) {
         parse_map_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestStartReplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestStartReplay)
  return false;
#undef DO_
}

void RequestStartReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestStartReplay)
  // optional string replay_path = 1;
  if (has_replay_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replay_path().data(), this->replay_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.RequestStartReplay.replay_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->replay_path(), output);
  }

  // optional int32 observed_player_id = 2;
  if (has_observed_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->observed_player_id(), output);
  }

  // optional .SC2APIProtocol.InterfaceOptions options = 3;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->options_, output);
  }

  // optional bool disable_fog = 4;
  if (has_disable_fog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->disable_fog(), output);
  }

  // optional bytes replay_data = 5;
  if (has_replay_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->replay_data(), output);
  }

  // optional bytes map_data = 6;
  if (has_map_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->map_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestStartReplay)
}

::google::protobuf::uint8* RequestStartReplay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestStartReplay)
  // optional string replay_path = 1;
  if (has_replay_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replay_path().data(), this->replay_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.RequestStartReplay.replay_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->replay_path(), target);
  }

  // optional int32 observed_player_id = 2;
  if (has_observed_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->observed_player_id(), target);
  }

  // optional .SC2APIProtocol.InterfaceOptions options = 3;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->options_, false, target);
  }

  // optional bool disable_fog = 4;
  if (has_disable_fog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->disable_fog(), target);
  }

  // optional bytes replay_data = 5;
  if (has_replay_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->replay_data(), target);
  }

  // optional bytes map_data = 6;
  if (has_map_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->map_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestStartReplay)
  return target;
}

int RequestStartReplay::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestStartReplay)
  int total_size = 0;

  if (_has_bits_[2 / 32] & 60u) {
    // optional bytes map_data = 6;
    if (has_map_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_data());
    }

    // optional int32 observed_player_id = 2;
    if (has_observed_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->observed_player_id());
    }

    // optional .SC2APIProtocol.InterfaceOptions options = 3;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->options_);
    }

    // optional bool disable_fog = 4;
    if (has_disable_fog()) {
      total_size += 1 + 1;
    }

  }
  switch (replay_case()) {
    // optional string replay_path = 1;
    case kReplayPath: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->replay_path());
      break;
    }
    // optional bytes replay_data = 5;
    case kReplayData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->replay_data());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestStartReplay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestStartReplay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestStartReplay* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestStartReplay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestStartReplay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestStartReplay)
    MergeFrom(*source);
  }
}

void RequestStartReplay::MergeFrom(const RequestStartReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestStartReplay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.replay_case()) {
    case kReplayPath: {
      set_replay_path(from.replay_path());
      break;
    }
    case kReplayData: {
      set_replay_data(from.replay_data());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_map_data()) {
      set_has_map_data();
      map_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_data_);
    }
    if (from.has_observed_player_id()) {
      set_observed_player_id(from.observed_player_id());
    }
    if (from.has_options()) {
      mutable_options()->::SC2APIProtocol::InterfaceOptions::MergeFrom(from.options());
    }
    if (from.has_disable_fog()) {
      set_disable_fog(from.disable_fog());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestStartReplay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestStartReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestStartReplay::CopyFrom(const RequestStartReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestStartReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStartReplay::IsInitialized() const {

  return true;
}

void RequestStartReplay::Swap(RequestStartReplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestStartReplay::InternalSwap(RequestStartReplay* other) {
  map_data_.Swap(&other->map_data_);
  std::swap(observed_player_id_, other->observed_player_id_);
  std::swap(options_, other->options_);
  std::swap(disable_fog_, other->disable_fog_);
  std::swap(replay_, other->replay_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestStartReplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestStartReplay_descriptor_;
  metadata.reflection = RequestStartReplay_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestStartReplay

// optional string replay_path = 1;
bool RequestStartReplay::has_replay_path() const {
  return replay_case() == kReplayPath;
}
void RequestStartReplay::set_has_replay_path() {
  _oneof_case_[0] = kReplayPath;
}
void RequestStartReplay::clear_replay_path() {
  if (has_replay_path()) {
    replay_.replay_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_replay();
  }
}
 const ::std::string& RequestStartReplay::replay_path() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestStartReplay.replay_path)
  if (has_replay_path()) {
    return replay_.replay_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void RequestStartReplay::set_replay_path(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestStartReplay.replay_path)
  if (!has_replay_path()) {
    clear_replay();
    set_has_replay_path();
    replay_.replay_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  replay_.replay_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestStartReplay.replay_path)
}
 void RequestStartReplay::set_replay_path(const char* value) {
  if (!has_replay_path()) {
    clear_replay();
    set_has_replay_path();
    replay_.replay_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  replay_.replay_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.RequestStartReplay.replay_path)
}
 void RequestStartReplay::set_replay_path(const char* value, size_t size) {
  if (!has_replay_path()) {
    clear_replay();
    set_has_replay_path();
    replay_.replay_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  replay_.replay_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.RequestStartReplay.replay_path)
}
 ::std::string* RequestStartReplay::mutable_replay_path() {
  if (!has_replay_path()) {
    clear_replay();
    set_has_replay_path();
    replay_.replay_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestStartReplay.replay_path)
  return replay_.replay_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestStartReplay::release_replay_path() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RequestStartReplay.replay_path)
  if (has_replay_path()) {
    clear_has_replay();
    return replay_.replay_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void RequestStartReplay::set_allocated_replay_path(::std::string* replay_path) {
  if (!has_replay_path()) {
    replay_.replay_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_replay();
  if (replay_path != NULL) {
    set_has_replay_path();
    replay_.replay_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        replay_path);
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestStartReplay.replay_path)
}

// optional bytes replay_data = 5;
bool RequestStartReplay::has_replay_data() const {
  return replay_case() == kReplayData;
}
void RequestStartReplay::set_has_replay_data() {
  _oneof_case_[0] = kReplayData;
}
void RequestStartReplay::clear_replay_data() {
  if (has_replay_data()) {
    replay_.replay_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_replay();
  }
}
 const ::std::string& RequestStartReplay::replay_data() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestStartReplay.replay_data)
  if (has_replay_data()) {
    return replay_.replay_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void RequestStartReplay::set_replay_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestStartReplay.replay_data)
  if (!has_replay_data()) {
    clear_replay();
    set_has_replay_data();
    replay_.replay_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  replay_.replay_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestStartReplay.replay_data)
}
 void RequestStartReplay::set_replay_data(const char* value) {
  if (!has_replay_data()) {
    clear_replay();
    set_has_replay_data();
    replay_.replay_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  replay_.replay_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.RequestStartReplay.replay_data)
}
 void RequestStartReplay::set_replay_data(const void* value, size_t size) {
  if (!has_replay_data()) {
    clear_replay();
    set_has_replay_data();
    replay_.replay_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  replay_.replay_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.RequestStartReplay.replay_data)
}
 ::std::string* RequestStartReplay::mutable_replay_data() {
  if (!has_replay_data()) {
    clear_replay();
    set_has_replay_data();
    replay_.replay_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestStartReplay.replay_data)
  return replay_.replay_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestStartReplay::release_replay_data() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RequestStartReplay.replay_data)
  if (has_replay_data()) {
    clear_has_replay();
    return replay_.replay_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void RequestStartReplay::set_allocated_replay_data(::std::string* replay_data) {
  if (!has_replay_data()) {
    replay_.replay_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_replay();
  if (replay_data != NULL) {
    set_has_replay_data();
    replay_.replay_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        replay_data);
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestStartReplay.replay_data)
}

// optional bytes map_data = 6;
bool RequestStartReplay::has_map_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RequestStartReplay::set_has_map_data() {
  _has_bits_[0] |= 0x00000004u;
}
void RequestStartReplay::clear_has_map_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void RequestStartReplay::clear_map_data() {
  map_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_data();
}
 const ::std::string& RequestStartReplay::map_data() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestStartReplay.map_data)
  return map_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestStartReplay::set_map_data(const ::std::string& value) {
  set_has_map_data();
  map_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestStartReplay.map_data)
}
 void RequestStartReplay::set_map_data(const char* value) {
  set_has_map_data();
  map_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.RequestStartReplay.map_data)
}
 void RequestStartReplay::set_map_data(const void* value, size_t size) {
  set_has_map_data();
  map_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.RequestStartReplay.map_data)
}
 ::std::string* RequestStartReplay::mutable_map_data() {
  set_has_map_data();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestStartReplay.map_data)
  return map_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestStartReplay::release_map_data() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RequestStartReplay.map_data)
  clear_has_map_data();
  return map_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestStartReplay::set_allocated_map_data(::std::string* map_data) {
  if (map_data != NULL) {
    set_has_map_data();
  } else {
    clear_has_map_data();
  }
  map_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_data);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestStartReplay.map_data)
}

// optional int32 observed_player_id = 2;
bool RequestStartReplay::has_observed_player_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RequestStartReplay::set_has_observed_player_id() {
  _has_bits_[0] |= 0x00000008u;
}
void RequestStartReplay::clear_has_observed_player_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void RequestStartReplay::clear_observed_player_id() {
  observed_player_id_ = 0;
  clear_has_observed_player_id();
}
 ::google::protobuf::int32 RequestStartReplay::observed_player_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestStartReplay.observed_player_id)
  return observed_player_id_;
}
 void RequestStartReplay::set_observed_player_id(::google::protobuf::int32 value) {
  set_has_observed_player_id();
  observed_player_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestStartReplay.observed_player_id)
}

// optional .SC2APIProtocol.InterfaceOptions options = 3;
bool RequestStartReplay::has_options() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RequestStartReplay::set_has_options() {
  _has_bits_[0] |= 0x00000010u;
}
void RequestStartReplay::clear_has_options() {
  _has_bits_[0] &= ~0x00000010u;
}
void RequestStartReplay::clear_options() {
  if (options_ != NULL) options_->::SC2APIProtocol::InterfaceOptions::Clear();
  clear_has_options();
}
const ::SC2APIProtocol::InterfaceOptions& RequestStartReplay::options() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestStartReplay.options)
  return options_ != NULL ? *options_ : *default_instance_->options_;
}
::SC2APIProtocol::InterfaceOptions* RequestStartReplay::mutable_options() {
  set_has_options();
  if (options_ == NULL) {
    options_ = new ::SC2APIProtocol::InterfaceOptions;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestStartReplay.options)
  return options_;
}
::SC2APIProtocol::InterfaceOptions* RequestStartReplay::release_options() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RequestStartReplay.options)
  clear_has_options();
  ::SC2APIProtocol::InterfaceOptions* temp = options_;
  options_ = NULL;
  return temp;
}
void RequestStartReplay::set_allocated_options(::SC2APIProtocol::InterfaceOptions* options) {
  delete options_;
  options_ = options;
  if (options) {
    set_has_options();
  } else {
    clear_has_options();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestStartReplay.options)
}

// optional bool disable_fog = 4;
bool RequestStartReplay::has_disable_fog() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RequestStartReplay::set_has_disable_fog() {
  _has_bits_[0] |= 0x00000020u;
}
void RequestStartReplay::clear_has_disable_fog() {
  _has_bits_[0] &= ~0x00000020u;
}
void RequestStartReplay::clear_disable_fog() {
  disable_fog_ = false;
  clear_has_disable_fog();
}
 bool RequestStartReplay::disable_fog() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestStartReplay.disable_fog)
  return disable_fog_;
}
 void RequestStartReplay::set_disable_fog(bool value) {
  set_has_disable_fog();
  disable_fog_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestStartReplay.disable_fog)
}

bool RequestStartReplay::has_replay() const {
  return replay_case() != REPLAY_NOT_SET;
}
void RequestStartReplay::clear_has_replay() {
  _oneof_case_[0] = REPLAY_NOT_SET;
}
RequestStartReplay::ReplayCase RequestStartReplay::replay_case() const {
  return RequestStartReplay::ReplayCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ResponseStartReplay_Error_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseStartReplay_Error_descriptor_;
}
bool ResponseStartReplay_Error_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseStartReplay_Error ResponseStartReplay::MissingReplay;
const ResponseStartReplay_Error ResponseStartReplay::InvalidReplayPath;
const ResponseStartReplay_Error ResponseStartReplay::InvalidReplayData;
const ResponseStartReplay_Error ResponseStartReplay::InvalidMapData;
const ResponseStartReplay_Error ResponseStartReplay::InvalidObservedPlayerId;
const ResponseStartReplay_Error ResponseStartReplay::MissingOptions;
const ResponseStartReplay_Error ResponseStartReplay::LaunchError;
const ResponseStartReplay_Error ResponseStartReplay::Error_MIN;
const ResponseStartReplay_Error ResponseStartReplay::Error_MAX;
const int ResponseStartReplay::Error_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseStartReplay::kErrorFieldNumber;
const int ResponseStartReplay::kErrorDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseStartReplay::ResponseStartReplay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseStartReplay)
}

void ResponseStartReplay::InitAsDefaultInstance() {
}

ResponseStartReplay::ResponseStartReplay(const ResponseStartReplay& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseStartReplay)
}

void ResponseStartReplay::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_ = 1;
  error_details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseStartReplay::~ResponseStartReplay() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseStartReplay)
  SharedDtor();
}

void ResponseStartReplay::SharedDtor() {
  error_details_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseStartReplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseStartReplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseStartReplay_descriptor_;
}

const ResponseStartReplay& ResponseStartReplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ResponseStartReplay* ResponseStartReplay::default_instance_ = NULL;

ResponseStartReplay* ResponseStartReplay::New(::google::protobuf::Arena* arena) const {
  ResponseStartReplay* n = new ResponseStartReplay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseStartReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseStartReplay)
  if (_has_bits_[0 / 32] & 3u) {
    error_ = 1;
    if (has_error_details()) {
      error_details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseStartReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseStartReplay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ResponseStartReplay.Error error = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ResponseStartReplay_Error_IsValid(value)) {
            set_error(static_cast< ::SC2APIProtocol::ResponseStartReplay_Error >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error_details;
        break;
      }

      // optional string error_details = 2;
      case 2: {
        if (tag == 18) {
         parse_error_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_details()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_details().data(), this->error_details().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseStartReplay.error_details");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseStartReplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseStartReplay)
  return false;
#undef DO_
}

void ResponseStartReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseStartReplay)
  // optional .SC2APIProtocol.ResponseStartReplay.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  // optional string error_details = 2;
  if (has_error_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), this->error_details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseStartReplay.error_details");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->error_details(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseStartReplay)
}

::google::protobuf::uint8* ResponseStartReplay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseStartReplay)
  // optional .SC2APIProtocol.ResponseStartReplay.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error(), target);
  }

  // optional string error_details = 2;
  if (has_error_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), this->error_details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseStartReplay.error_details");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_details(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseStartReplay)
  return target;
}

int ResponseStartReplay::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseStartReplay)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .SC2APIProtocol.ResponseStartReplay.Error error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional string error_details = 2;
    if (has_error_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_details());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseStartReplay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseStartReplay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseStartReplay* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseStartReplay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseStartReplay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseStartReplay)
    MergeFrom(*source);
  }
}

void ResponseStartReplay::MergeFrom(const ResponseStartReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseStartReplay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_error_details()) {
      set_has_error_details();
      error_details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_details_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseStartReplay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseStartReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseStartReplay::CopyFrom(const ResponseStartReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseStartReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseStartReplay::IsInitialized() const {

  return true;
}

void ResponseStartReplay::Swap(ResponseStartReplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseStartReplay::InternalSwap(ResponseStartReplay* other) {
  std::swap(error_, other->error_);
  error_details_.Swap(&other->error_details_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseStartReplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseStartReplay_descriptor_;
  metadata.reflection = ResponseStartReplay_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseStartReplay

// optional .SC2APIProtocol.ResponseStartReplay.Error error = 1;
bool ResponseStartReplay::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseStartReplay::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseStartReplay::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseStartReplay::clear_error() {
  error_ = 1;
  clear_has_error();
}
 ::SC2APIProtocol::ResponseStartReplay_Error ResponseStartReplay::error() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseStartReplay.error)
  return static_cast< ::SC2APIProtocol::ResponseStartReplay_Error >(error_);
}
 void ResponseStartReplay::set_error(::SC2APIProtocol::ResponseStartReplay_Error value) {
  assert(::SC2APIProtocol::ResponseStartReplay_Error_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseStartReplay.error)
}

// optional string error_details = 2;
bool ResponseStartReplay::has_error_details() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResponseStartReplay::set_has_error_details() {
  _has_bits_[0] |= 0x00000002u;
}
void ResponseStartReplay::clear_has_error_details() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResponseStartReplay::clear_error_details() {
  error_details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_details();
}
 const ::std::string& ResponseStartReplay::error_details() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseStartReplay.error_details)
  return error_details_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseStartReplay::set_error_details(const ::std::string& value) {
  set_has_error_details();
  error_details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseStartReplay.error_details)
}
 void ResponseStartReplay::set_error_details(const char* value) {
  set_has_error_details();
  error_details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ResponseStartReplay.error_details)
}
 void ResponseStartReplay::set_error_details(const char* value, size_t size) {
  set_has_error_details();
  error_details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ResponseStartReplay.error_details)
}
 ::std::string* ResponseStartReplay::mutable_error_details() {
  set_has_error_details();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseStartReplay.error_details)
  return error_details_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseStartReplay::release_error_details() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ResponseStartReplay.error_details)
  clear_has_error_details();
  return error_details_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseStartReplay::set_allocated_error_details(::std::string* error_details) {
  if (error_details != NULL) {
    set_has_error_details();
  } else {
    clear_has_error_details();
  }
  error_details_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_details);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ResponseStartReplay.error_details)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestLeaveGame::RequestLeaveGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestLeaveGame)
}

void RequestLeaveGame::InitAsDefaultInstance() {
}

RequestLeaveGame::RequestLeaveGame(const RequestLeaveGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestLeaveGame)
}

void RequestLeaveGame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestLeaveGame::~RequestLeaveGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestLeaveGame)
  SharedDtor();
}

void RequestLeaveGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestLeaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestLeaveGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestLeaveGame_descriptor_;
}

const RequestLeaveGame& RequestLeaveGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

RequestLeaveGame* RequestLeaveGame::default_instance_ = NULL;

RequestLeaveGame* RequestLeaveGame::New(::google::protobuf::Arena* arena) const {
  RequestLeaveGame* n = new RequestLeaveGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestLeaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestLeaveGame)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestLeaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestLeaveGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestLeaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestLeaveGame)
  return false;
#undef DO_
}

void RequestLeaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestLeaveGame)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestLeaveGame)
}

::google::protobuf::uint8* RequestLeaveGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestLeaveGame)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestLeaveGame)
  return target;
}

int RequestLeaveGame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestLeaveGame)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestLeaveGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestLeaveGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestLeaveGame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestLeaveGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestLeaveGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestLeaveGame)
    MergeFrom(*source);
  }
}

void RequestLeaveGame::MergeFrom(const RequestLeaveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestLeaveGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestLeaveGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestLeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestLeaveGame::CopyFrom(const RequestLeaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestLeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestLeaveGame::IsInitialized() const {

  return true;
}

void RequestLeaveGame::Swap(RequestLeaveGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestLeaveGame::InternalSwap(RequestLeaveGame* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestLeaveGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestLeaveGame_descriptor_;
  metadata.reflection = RequestLeaveGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestLeaveGame

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseLeaveGame::ResponseLeaveGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseLeaveGame)
}

void ResponseLeaveGame::InitAsDefaultInstance() {
}

ResponseLeaveGame::ResponseLeaveGame(const ResponseLeaveGame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseLeaveGame)
}

void ResponseLeaveGame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseLeaveGame::~ResponseLeaveGame() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseLeaveGame)
  SharedDtor();
}

void ResponseLeaveGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseLeaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseLeaveGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseLeaveGame_descriptor_;
}

const ResponseLeaveGame& ResponseLeaveGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ResponseLeaveGame* ResponseLeaveGame::default_instance_ = NULL;

ResponseLeaveGame* ResponseLeaveGame::New(::google::protobuf::Arena* arena) const {
  ResponseLeaveGame* n = new ResponseLeaveGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseLeaveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseLeaveGame)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseLeaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseLeaveGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseLeaveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseLeaveGame)
  return false;
#undef DO_
}

void ResponseLeaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseLeaveGame)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseLeaveGame)
}

::google::protobuf::uint8* ResponseLeaveGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseLeaveGame)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseLeaveGame)
  return target;
}

int ResponseLeaveGame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseLeaveGame)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseLeaveGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseLeaveGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseLeaveGame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseLeaveGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseLeaveGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseLeaveGame)
    MergeFrom(*source);
  }
}

void ResponseLeaveGame::MergeFrom(const ResponseLeaveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseLeaveGame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseLeaveGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseLeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseLeaveGame::CopyFrom(const ResponseLeaveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseLeaveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseLeaveGame::IsInitialized() const {

  return true;
}

void ResponseLeaveGame::Swap(ResponseLeaveGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseLeaveGame::InternalSwap(ResponseLeaveGame* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseLeaveGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseLeaveGame_descriptor_;
  metadata.reflection = ResponseLeaveGame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseLeaveGame

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestQuickSave::RequestQuickSave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestQuickSave)
}

void RequestQuickSave::InitAsDefaultInstance() {
}

RequestQuickSave::RequestQuickSave(const RequestQuickSave& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestQuickSave)
}

void RequestQuickSave::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestQuickSave::~RequestQuickSave() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestQuickSave)
  SharedDtor();
}

void RequestQuickSave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestQuickSave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestQuickSave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestQuickSave_descriptor_;
}

const RequestQuickSave& RequestQuickSave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

RequestQuickSave* RequestQuickSave::default_instance_ = NULL;

RequestQuickSave* RequestQuickSave::New(::google::protobuf::Arena* arena) const {
  RequestQuickSave* n = new RequestQuickSave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestQuickSave::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestQuickSave)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestQuickSave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestQuickSave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestQuickSave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestQuickSave)
  return false;
#undef DO_
}

void RequestQuickSave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestQuickSave)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestQuickSave)
}

::google::protobuf::uint8* RequestQuickSave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestQuickSave)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestQuickSave)
  return target;
}

int RequestQuickSave::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestQuickSave)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestQuickSave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestQuickSave)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestQuickSave* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestQuickSave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestQuickSave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestQuickSave)
    MergeFrom(*source);
  }
}

void RequestQuickSave::MergeFrom(const RequestQuickSave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestQuickSave)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestQuickSave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestQuickSave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestQuickSave::CopyFrom(const RequestQuickSave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestQuickSave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQuickSave::IsInitialized() const {

  return true;
}

void RequestQuickSave::Swap(RequestQuickSave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestQuickSave::InternalSwap(RequestQuickSave* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestQuickSave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestQuickSave_descriptor_;
  metadata.reflection = RequestQuickSave_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestQuickSave

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQuickSave::ResponseQuickSave()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseQuickSave)
}

void ResponseQuickSave::InitAsDefaultInstance() {
}

ResponseQuickSave::ResponseQuickSave(const ResponseQuickSave& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseQuickSave)
}

void ResponseQuickSave::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseQuickSave::~ResponseQuickSave() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseQuickSave)
  SharedDtor();
}

void ResponseQuickSave::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseQuickSave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseQuickSave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseQuickSave_descriptor_;
}

const ResponseQuickSave& ResponseQuickSave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ResponseQuickSave* ResponseQuickSave::default_instance_ = NULL;

ResponseQuickSave* ResponseQuickSave::New(::google::protobuf::Arena* arena) const {
  ResponseQuickSave* n = new ResponseQuickSave;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseQuickSave::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseQuickSave)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseQuickSave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseQuickSave)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseQuickSave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseQuickSave)
  return false;
#undef DO_
}

void ResponseQuickSave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseQuickSave)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseQuickSave)
}

::google::protobuf::uint8* ResponseQuickSave::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseQuickSave)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseQuickSave)
  return target;
}

int ResponseQuickSave::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseQuickSave)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseQuickSave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseQuickSave)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseQuickSave* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseQuickSave>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseQuickSave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseQuickSave)
    MergeFrom(*source);
  }
}

void ResponseQuickSave::MergeFrom(const ResponseQuickSave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseQuickSave)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseQuickSave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseQuickSave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQuickSave::CopyFrom(const ResponseQuickSave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseQuickSave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQuickSave::IsInitialized() const {

  return true;
}

void ResponseQuickSave::Swap(ResponseQuickSave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQuickSave::InternalSwap(ResponseQuickSave* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseQuickSave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseQuickSave_descriptor_;
  metadata.reflection = ResponseQuickSave_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseQuickSave

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestQuickLoad::RequestQuickLoad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestQuickLoad)
}

void RequestQuickLoad::InitAsDefaultInstance() {
}

RequestQuickLoad::RequestQuickLoad(const RequestQuickLoad& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestQuickLoad)
}

void RequestQuickLoad::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestQuickLoad::~RequestQuickLoad() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestQuickLoad)
  SharedDtor();
}

void RequestQuickLoad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestQuickLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestQuickLoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestQuickLoad_descriptor_;
}

const RequestQuickLoad& RequestQuickLoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

RequestQuickLoad* RequestQuickLoad::default_instance_ = NULL;

RequestQuickLoad* RequestQuickLoad::New(::google::protobuf::Arena* arena) const {
  RequestQuickLoad* n = new RequestQuickLoad;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestQuickLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestQuickLoad)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestQuickLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestQuickLoad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestQuickLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestQuickLoad)
  return false;
#undef DO_
}

void RequestQuickLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestQuickLoad)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestQuickLoad)
}

::google::protobuf::uint8* RequestQuickLoad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestQuickLoad)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestQuickLoad)
  return target;
}

int RequestQuickLoad::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestQuickLoad)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestQuickLoad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestQuickLoad)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestQuickLoad* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestQuickLoad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestQuickLoad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestQuickLoad)
    MergeFrom(*source);
  }
}

void RequestQuickLoad::MergeFrom(const RequestQuickLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestQuickLoad)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestQuickLoad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestQuickLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestQuickLoad::CopyFrom(const RequestQuickLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestQuickLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQuickLoad::IsInitialized() const {

  return true;
}

void RequestQuickLoad::Swap(RequestQuickLoad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestQuickLoad::InternalSwap(RequestQuickLoad* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestQuickLoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestQuickLoad_descriptor_;
  metadata.reflection = RequestQuickLoad_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestQuickLoad

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQuickLoad::ResponseQuickLoad()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseQuickLoad)
}

void ResponseQuickLoad::InitAsDefaultInstance() {
}

ResponseQuickLoad::ResponseQuickLoad(const ResponseQuickLoad& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseQuickLoad)
}

void ResponseQuickLoad::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseQuickLoad::~ResponseQuickLoad() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseQuickLoad)
  SharedDtor();
}

void ResponseQuickLoad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseQuickLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseQuickLoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseQuickLoad_descriptor_;
}

const ResponseQuickLoad& ResponseQuickLoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ResponseQuickLoad* ResponseQuickLoad::default_instance_ = NULL;

ResponseQuickLoad* ResponseQuickLoad::New(::google::protobuf::Arena* arena) const {
  ResponseQuickLoad* n = new ResponseQuickLoad;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseQuickLoad::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseQuickLoad)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseQuickLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseQuickLoad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseQuickLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseQuickLoad)
  return false;
#undef DO_
}

void ResponseQuickLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseQuickLoad)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseQuickLoad)
}

::google::protobuf::uint8* ResponseQuickLoad::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseQuickLoad)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseQuickLoad)
  return target;
}

int ResponseQuickLoad::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseQuickLoad)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseQuickLoad::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseQuickLoad)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseQuickLoad* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseQuickLoad>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseQuickLoad)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseQuickLoad)
    MergeFrom(*source);
  }
}

void ResponseQuickLoad::MergeFrom(const ResponseQuickLoad& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseQuickLoad)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseQuickLoad::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseQuickLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQuickLoad::CopyFrom(const ResponseQuickLoad& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseQuickLoad)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQuickLoad::IsInitialized() const {

  return true;
}

void ResponseQuickLoad::Swap(ResponseQuickLoad* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQuickLoad::InternalSwap(ResponseQuickLoad* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseQuickLoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseQuickLoad_descriptor_;
  metadata.reflection = ResponseQuickLoad_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseQuickLoad

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestQuit::RequestQuit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestQuit)
}

void RequestQuit::InitAsDefaultInstance() {
}

RequestQuit::RequestQuit(const RequestQuit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestQuit)
}

void RequestQuit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestQuit::~RequestQuit() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestQuit)
  SharedDtor();
}

void RequestQuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestQuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestQuit_descriptor_;
}

const RequestQuit& RequestQuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

RequestQuit* RequestQuit::default_instance_ = NULL;

RequestQuit* RequestQuit::New(::google::protobuf::Arena* arena) const {
  RequestQuit* n = new RequestQuit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestQuit::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestQuit)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestQuit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestQuit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestQuit)
  return false;
#undef DO_
}

void RequestQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestQuit)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestQuit)
}

::google::protobuf::uint8* RequestQuit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestQuit)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestQuit)
  return target;
}

int RequestQuit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestQuit)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestQuit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestQuit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestQuit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestQuit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestQuit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestQuit)
    MergeFrom(*source);
  }
}

void RequestQuit::MergeFrom(const RequestQuit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestQuit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestQuit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestQuit::CopyFrom(const RequestQuit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestQuit::IsInitialized() const {

  return true;
}

void RequestQuit::Swap(RequestQuit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestQuit::InternalSwap(RequestQuit* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestQuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestQuit_descriptor_;
  metadata.reflection = RequestQuit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestQuit

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseQuit::ResponseQuit()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseQuit)
}

void ResponseQuit::InitAsDefaultInstance() {
}

ResponseQuit::ResponseQuit(const ResponseQuit& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseQuit)
}

void ResponseQuit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseQuit::~ResponseQuit() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseQuit)
  SharedDtor();
}

void ResponseQuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseQuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseQuit_descriptor_;
}

const ResponseQuit& ResponseQuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ResponseQuit* ResponseQuit::default_instance_ = NULL;

ResponseQuit* ResponseQuit::New(::google::protobuf::Arena* arena) const {
  ResponseQuit* n = new ResponseQuit;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseQuit::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseQuit)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseQuit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseQuit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseQuit)
  return false;
#undef DO_
}

void ResponseQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseQuit)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseQuit)
}

::google::protobuf::uint8* ResponseQuit::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseQuit)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseQuit)
  return target;
}

int ResponseQuit::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseQuit)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseQuit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseQuit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseQuit* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseQuit>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseQuit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseQuit)
    MergeFrom(*source);
  }
}

void ResponseQuit::MergeFrom(const ResponseQuit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseQuit)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseQuit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseQuit::CopyFrom(const ResponseQuit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseQuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseQuit::IsInitialized() const {

  return true;
}

void ResponseQuit::Swap(ResponseQuit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseQuit::InternalSwap(ResponseQuit* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseQuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseQuit_descriptor_;
  metadata.reflection = ResponseQuit_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseQuit

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestGameInfo::RequestGameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestGameInfo)
}

void RequestGameInfo::InitAsDefaultInstance() {
}

RequestGameInfo::RequestGameInfo(const RequestGameInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestGameInfo)
}

void RequestGameInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestGameInfo::~RequestGameInfo() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestGameInfo)
  SharedDtor();
}

void RequestGameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestGameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestGameInfo_descriptor_;
}

const RequestGameInfo& RequestGameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

RequestGameInfo* RequestGameInfo::default_instance_ = NULL;

RequestGameInfo* RequestGameInfo::New(::google::protobuf::Arena* arena) const {
  RequestGameInfo* n = new RequestGameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestGameInfo)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestGameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestGameInfo)
  return false;
#undef DO_
}

void RequestGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestGameInfo)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestGameInfo)
}

::google::protobuf::uint8* RequestGameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestGameInfo)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestGameInfo)
  return target;
}

int RequestGameInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestGameInfo)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestGameInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestGameInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestGameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestGameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestGameInfo)
    MergeFrom(*source);
  }
}

void RequestGameInfo::MergeFrom(const RequestGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestGameInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestGameInfo::CopyFrom(const RequestGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestGameInfo::IsInitialized() const {

  return true;
}

void RequestGameInfo::Swap(RequestGameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestGameInfo::InternalSwap(RequestGameInfo* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestGameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestGameInfo_descriptor_;
  metadata.reflection = RequestGameInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestGameInfo

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseGameInfo::kMapNameFieldNumber;
const int ResponseGameInfo::kModNamesFieldNumber;
const int ResponseGameInfo::kLocalMapPathFieldNumber;
const int ResponseGameInfo::kPlayerInfoFieldNumber;
const int ResponseGameInfo::kStartRawFieldNumber;
const int ResponseGameInfo::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseGameInfo::ResponseGameInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseGameInfo)
}

void ResponseGameInfo::InitAsDefaultInstance() {
  start_raw_ = const_cast< ::SC2APIProtocol::StartRaw*>(&::SC2APIProtocol::StartRaw::default_instance());
  options_ = const_cast< ::SC2APIProtocol::InterfaceOptions*>(&::SC2APIProtocol::InterfaceOptions::default_instance());
}

ResponseGameInfo::ResponseGameInfo(const ResponseGameInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseGameInfo)
}

void ResponseGameInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_map_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  start_raw_ = NULL;
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseGameInfo::~ResponseGameInfo() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseGameInfo)
  SharedDtor();
}

void ResponseGameInfo::SharedDtor() {
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_map_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete start_raw_;
    delete options_;
  }
}

void ResponseGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseGameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseGameInfo_descriptor_;
}

const ResponseGameInfo& ResponseGameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ResponseGameInfo* ResponseGameInfo::default_instance_ = NULL;

ResponseGameInfo* ResponseGameInfo::New(::google::protobuf::Arena* arena) const {
  ResponseGameInfo* n = new ResponseGameInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseGameInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseGameInfo)
  if (_has_bits_[0 / 32] & 53u) {
    if (has_map_name()) {
      map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_local_map_path()) {
      local_map_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_start_raw()) {
      if (start_raw_ != NULL) start_raw_->::SC2APIProtocol::StartRaw::Clear();
    }
    if (has_options()) {
      if (options_ != NULL) options_->::SC2APIProtocol::InterfaceOptions::Clear();
    }
  }
  mod_names_.Clear();
  player_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseGameInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string map_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), this->map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseGameInfo.map_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_local_map_path;
        break;
      }

      // optional string local_map_path = 2;
      case 2: {
        if (tag == 18) {
         parse_local_map_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_map_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->local_map_path().data(), this->local_map_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseGameInfo.local_map_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_info;
        break;
      }

      // repeated .SC2APIProtocol.PlayerInfo player_info = 3;
      case 3: {
        if (tag == 26) {
         parse_player_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_player_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_player_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_start_raw;
        break;
      }

      // optional .SC2APIProtocol.StartRaw start_raw = 4;
      case 4: {
        if (tag == 34) {
         parse_start_raw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_options;
        break;
      }

      // optional .SC2APIProtocol.InterfaceOptions options = 5;
      case 5: {
        if (tag == 42) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mod_names;
        break;
      }

      // repeated string mod_names = 6;
      case 6: {
        if (tag == 50) {
         parse_mod_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mod_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mod_names(this->mod_names_size() - 1).data(),
            this->mod_names(this->mod_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseGameInfo.mod_names");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mod_names;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseGameInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseGameInfo)
  return false;
#undef DO_
}

void ResponseGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseGameInfo)
  // optional string map_name = 1;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseGameInfo.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->map_name(), output);
  }

  // optional string local_map_path = 2;
  if (has_local_map_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_map_path().data(), this->local_map_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseGameInfo.local_map_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->local_map_path(), output);
  }

  // repeated .SC2APIProtocol.PlayerInfo player_info = 3;
  for (unsigned int i = 0, n = this->player_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_info(i), output);
  }

  // optional .SC2APIProtocol.StartRaw start_raw = 4;
  if (has_start_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->start_raw_, output);
  }

  // optional .SC2APIProtocol.InterfaceOptions options = 5;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->options_, output);
  }

  // repeated string mod_names = 6;
  for (int i = 0; i < this->mod_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mod_names(i).data(), this->mod_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseGameInfo.mod_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->mod_names(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseGameInfo)
}

::google::protobuf::uint8* ResponseGameInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseGameInfo)
  // optional string map_name = 1;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseGameInfo.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->map_name(), target);
  }

  // optional string local_map_path = 2;
  if (has_local_map_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_map_path().data(), this->local_map_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseGameInfo.local_map_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->local_map_path(), target);
  }

  // repeated .SC2APIProtocol.PlayerInfo player_info = 3;
  for (unsigned int i = 0, n = this->player_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->player_info(i), false, target);
  }

  // optional .SC2APIProtocol.StartRaw start_raw = 4;
  if (has_start_raw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->start_raw_, false, target);
  }

  // optional .SC2APIProtocol.InterfaceOptions options = 5;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->options_, false, target);
  }

  // repeated string mod_names = 6;
  for (int i = 0; i < this->mod_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mod_names(i).data(), this->mod_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseGameInfo.mod_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->mod_names(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseGameInfo)
  return target;
}

int ResponseGameInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseGameInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 53u) {
    // optional string map_name = 1;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional string local_map_path = 2;
    if (has_local_map_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_map_path());
    }

    // optional .SC2APIProtocol.StartRaw start_raw = 4;
    if (has_start_raw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->start_raw_);
    }

    // optional .SC2APIProtocol.InterfaceOptions options = 5;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->options_);
    }

  }
  // repeated string mod_names = 6;
  total_size += 1 * this->mod_names_size();
  for (int i = 0; i < this->mod_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mod_names(i));
  }

  // repeated .SC2APIProtocol.PlayerInfo player_info = 3;
  total_size += 1 * this->player_info_size();
  for (int i = 0; i < this->player_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_info(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseGameInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseGameInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseGameInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseGameInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseGameInfo)
    MergeFrom(*source);
  }
}

void ResponseGameInfo::MergeFrom(const ResponseGameInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseGameInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  mod_names_.MergeFrom(from.mod_names_);
  player_info_.MergeFrom(from.player_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_name()) {
      set_has_map_name();
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (from.has_local_map_path()) {
      set_has_local_map_path();
      local_map_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_map_path_);
    }
    if (from.has_start_raw()) {
      mutable_start_raw()->::SC2APIProtocol::StartRaw::MergeFrom(from.start_raw());
    }
    if (from.has_options()) {
      mutable_options()->::SC2APIProtocol::InterfaceOptions::MergeFrom(from.options());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseGameInfo::CopyFrom(const ResponseGameInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseGameInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseGameInfo::IsInitialized() const {

  return true;
}

void ResponseGameInfo::Swap(ResponseGameInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseGameInfo::InternalSwap(ResponseGameInfo* other) {
  map_name_.Swap(&other->map_name_);
  mod_names_.UnsafeArenaSwap(&other->mod_names_);
  local_map_path_.Swap(&other->local_map_path_);
  player_info_.UnsafeArenaSwap(&other->player_info_);
  std::swap(start_raw_, other->start_raw_);
  std::swap(options_, other->options_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseGameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseGameInfo_descriptor_;
  metadata.reflection = ResponseGameInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseGameInfo

// optional string map_name = 1;
bool ResponseGameInfo::has_map_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseGameInfo::set_has_map_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseGameInfo::clear_has_map_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseGameInfo::clear_map_name() {
  map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_name();
}
 const ::std::string& ResponseGameInfo::map_name() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseGameInfo.map_name)
  return map_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseGameInfo::set_map_name(const ::std::string& value) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseGameInfo.map_name)
}
 void ResponseGameInfo::set_map_name(const char* value) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ResponseGameInfo.map_name)
}
 void ResponseGameInfo::set_map_name(const char* value, size_t size) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ResponseGameInfo.map_name)
}
 ::std::string* ResponseGameInfo::mutable_map_name() {
  set_has_map_name();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseGameInfo.map_name)
  return map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseGameInfo::release_map_name() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ResponseGameInfo.map_name)
  clear_has_map_name();
  return map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseGameInfo::set_allocated_map_name(::std::string* map_name) {
  if (map_name != NULL) {
    set_has_map_name();
  } else {
    clear_has_map_name();
  }
  map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_name);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ResponseGameInfo.map_name)
}

// repeated string mod_names = 6;
int ResponseGameInfo::mod_names_size() const {
  return mod_names_.size();
}
void ResponseGameInfo::clear_mod_names() {
  mod_names_.Clear();
}
 const ::std::string& ResponseGameInfo::mod_names(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseGameInfo.mod_names)
  return mod_names_.Get(index);
}
 ::std::string* ResponseGameInfo::mutable_mod_names(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseGameInfo.mod_names)
  return mod_names_.Mutable(index);
}
 void ResponseGameInfo::set_mod_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseGameInfo.mod_names)
  mod_names_.Mutable(index)->assign(value);
}
 void ResponseGameInfo::set_mod_names(int index, const char* value) {
  mod_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ResponseGameInfo.mod_names)
}
 void ResponseGameInfo::set_mod_names(int index, const char* value, size_t size) {
  mod_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ResponseGameInfo.mod_names)
}
 ::std::string* ResponseGameInfo::add_mod_names() {
  // @@protoc_insertion_point(field_add_mutable:SC2APIProtocol.ResponseGameInfo.mod_names)
  return mod_names_.Add();
}
 void ResponseGameInfo::add_mod_names(const ::std::string& value) {
  mod_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseGameInfo.mod_names)
}
 void ResponseGameInfo::add_mod_names(const char* value) {
  mod_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SC2APIProtocol.ResponseGameInfo.mod_names)
}
 void ResponseGameInfo::add_mod_names(const char* value, size_t size) {
  mod_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SC2APIProtocol.ResponseGameInfo.mod_names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResponseGameInfo::mod_names() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseGameInfo.mod_names)
  return mod_names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ResponseGameInfo::mutable_mod_names() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseGameInfo.mod_names)
  return &mod_names_;
}

// optional string local_map_path = 2;
bool ResponseGameInfo::has_local_map_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResponseGameInfo::set_has_local_map_path() {
  _has_bits_[0] |= 0x00000004u;
}
void ResponseGameInfo::clear_has_local_map_path() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResponseGameInfo::clear_local_map_path() {
  local_map_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_local_map_path();
}
 const ::std::string& ResponseGameInfo::local_map_path() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseGameInfo.local_map_path)
  return local_map_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseGameInfo::set_local_map_path(const ::std::string& value) {
  set_has_local_map_path();
  local_map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseGameInfo.local_map_path)
}
 void ResponseGameInfo::set_local_map_path(const char* value) {
  set_has_local_map_path();
  local_map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ResponseGameInfo.local_map_path)
}
 void ResponseGameInfo::set_local_map_path(const char* value, size_t size) {
  set_has_local_map_path();
  local_map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ResponseGameInfo.local_map_path)
}
 ::std::string* ResponseGameInfo::mutable_local_map_path() {
  set_has_local_map_path();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseGameInfo.local_map_path)
  return local_map_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseGameInfo::release_local_map_path() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ResponseGameInfo.local_map_path)
  clear_has_local_map_path();
  return local_map_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseGameInfo::set_allocated_local_map_path(::std::string* local_map_path) {
  if (local_map_path != NULL) {
    set_has_local_map_path();
  } else {
    clear_has_local_map_path();
  }
  local_map_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_map_path);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ResponseGameInfo.local_map_path)
}

// repeated .SC2APIProtocol.PlayerInfo player_info = 3;
int ResponseGameInfo::player_info_size() const {
  return player_info_.size();
}
void ResponseGameInfo::clear_player_info() {
  player_info_.Clear();
}
const ::SC2APIProtocol::PlayerInfo& ResponseGameInfo::player_info(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseGameInfo.player_info)
  return player_info_.Get(index);
}
::SC2APIProtocol::PlayerInfo* ResponseGameInfo::mutable_player_info(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseGameInfo.player_info)
  return player_info_.Mutable(index);
}
::SC2APIProtocol::PlayerInfo* ResponseGameInfo::add_player_info() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseGameInfo.player_info)
  return player_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::PlayerInfo >*
ResponseGameInfo::mutable_player_info() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseGameInfo.player_info)
  return &player_info_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::PlayerInfo >&
ResponseGameInfo::player_info() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseGameInfo.player_info)
  return player_info_;
}

// optional .SC2APIProtocol.StartRaw start_raw = 4;
bool ResponseGameInfo::has_start_raw() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ResponseGameInfo::set_has_start_raw() {
  _has_bits_[0] |= 0x00000010u;
}
void ResponseGameInfo::clear_has_start_raw() {
  _has_bits_[0] &= ~0x00000010u;
}
void ResponseGameInfo::clear_start_raw() {
  if (start_raw_ != NULL) start_raw_->::SC2APIProtocol::StartRaw::Clear();
  clear_has_start_raw();
}
const ::SC2APIProtocol::StartRaw& ResponseGameInfo::start_raw() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseGameInfo.start_raw)
  return start_raw_ != NULL ? *start_raw_ : *default_instance_->start_raw_;
}
::SC2APIProtocol::StartRaw* ResponseGameInfo::mutable_start_raw() {
  set_has_start_raw();
  if (start_raw_ == NULL) {
    start_raw_ = new ::SC2APIProtocol::StartRaw;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseGameInfo.start_raw)
  return start_raw_;
}
::SC2APIProtocol::StartRaw* ResponseGameInfo::release_start_raw() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ResponseGameInfo.start_raw)
  clear_has_start_raw();
  ::SC2APIProtocol::StartRaw* temp = start_raw_;
  start_raw_ = NULL;
  return temp;
}
void ResponseGameInfo::set_allocated_start_raw(::SC2APIProtocol::StartRaw* start_raw) {
  delete start_raw_;
  start_raw_ = start_raw;
  if (start_raw) {
    set_has_start_raw();
  } else {
    clear_has_start_raw();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ResponseGameInfo.start_raw)
}

// optional .SC2APIProtocol.InterfaceOptions options = 5;
bool ResponseGameInfo::has_options() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ResponseGameInfo::set_has_options() {
  _has_bits_[0] |= 0x00000020u;
}
void ResponseGameInfo::clear_has_options() {
  _has_bits_[0] &= ~0x00000020u;
}
void ResponseGameInfo::clear_options() {
  if (options_ != NULL) options_->::SC2APIProtocol::InterfaceOptions::Clear();
  clear_has_options();
}
const ::SC2APIProtocol::InterfaceOptions& ResponseGameInfo::options() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseGameInfo.options)
  return options_ != NULL ? *options_ : *default_instance_->options_;
}
::SC2APIProtocol::InterfaceOptions* ResponseGameInfo::mutable_options() {
  set_has_options();
  if (options_ == NULL) {
    options_ = new ::SC2APIProtocol::InterfaceOptions;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseGameInfo.options)
  return options_;
}
::SC2APIProtocol::InterfaceOptions* ResponseGameInfo::release_options() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ResponseGameInfo.options)
  clear_has_options();
  ::SC2APIProtocol::InterfaceOptions* temp = options_;
  options_ = NULL;
  return temp;
}
void ResponseGameInfo::set_allocated_options(::SC2APIProtocol::InterfaceOptions* options) {
  delete options_;
  options_ = options;
  if (options) {
    set_has_options();
  } else {
    clear_has_options();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ResponseGameInfo.options)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestObservation::kDisableFogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestObservation::RequestObservation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestObservation)
}

void RequestObservation::InitAsDefaultInstance() {
}

RequestObservation::RequestObservation(const RequestObservation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestObservation)
}

void RequestObservation::SharedCtor() {
  _cached_size_ = 0;
  disable_fog_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestObservation::~RequestObservation() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestObservation)
  SharedDtor();
}

void RequestObservation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestObservation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestObservation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestObservation_descriptor_;
}

const RequestObservation& RequestObservation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

RequestObservation* RequestObservation::default_instance_ = NULL;

RequestObservation* RequestObservation::New(::google::protobuf::Arena* arena) const {
  RequestObservation* n = new RequestObservation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestObservation)
  disable_fog_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestObservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestObservation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool disable_fog = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_fog_)));
          set_has_disable_fog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestObservation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestObservation)
  return false;
#undef DO_
}

void RequestObservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestObservation)
  // optional bool disable_fog = 1;
  if (has_disable_fog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->disable_fog(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestObservation)
}

::google::protobuf::uint8* RequestObservation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestObservation)
  // optional bool disable_fog = 1;
  if (has_disable_fog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->disable_fog(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestObservation)
  return target;
}

int RequestObservation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestObservation)
  int total_size = 0;

  // optional bool disable_fog = 1;
  if (has_disable_fog()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestObservation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestObservation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestObservation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestObservation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestObservation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestObservation)
    MergeFrom(*source);
  }
}

void RequestObservation::MergeFrom(const RequestObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestObservation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_disable_fog()) {
      set_disable_fog(from.disable_fog());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestObservation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestObservation::CopyFrom(const RequestObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestObservation::IsInitialized() const {

  return true;
}

void RequestObservation::Swap(RequestObservation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestObservation::InternalSwap(RequestObservation* other) {
  std::swap(disable_fog_, other->disable_fog_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestObservation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestObservation_descriptor_;
  metadata.reflection = RequestObservation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestObservation

// optional bool disable_fog = 1;
bool RequestObservation::has_disable_fog() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestObservation::set_has_disable_fog() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestObservation::clear_has_disable_fog() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestObservation::clear_disable_fog() {
  disable_fog_ = false;
  clear_has_disable_fog();
}
 bool RequestObservation::disable_fog() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestObservation.disable_fog)
  return disable_fog_;
}
 void RequestObservation::set_disable_fog(bool value) {
  set_has_disable_fog();
  disable_fog_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestObservation.disable_fog)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseObservation::kActionsFieldNumber;
const int ResponseObservation::kActionErrorsFieldNumber;
const int ResponseObservation::kObservationFieldNumber;
const int ResponseObservation::kPlayerResultFieldNumber;
const int ResponseObservation::kChatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseObservation::ResponseObservation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseObservation)
}

void ResponseObservation::InitAsDefaultInstance() {
  observation_ = const_cast< ::SC2APIProtocol::Observation*>(&::SC2APIProtocol::Observation::default_instance());
}

ResponseObservation::ResponseObservation(const ResponseObservation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseObservation)
}

void ResponseObservation::SharedCtor() {
  _cached_size_ = 0;
  observation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseObservation::~ResponseObservation() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseObservation)
  SharedDtor();
}

void ResponseObservation::SharedDtor() {
  if (this != default_instance_) {
    delete observation_;
  }
}

void ResponseObservation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseObservation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseObservation_descriptor_;
}

const ResponseObservation& ResponseObservation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ResponseObservation* ResponseObservation::default_instance_ = NULL;

ResponseObservation* ResponseObservation::New(::google::protobuf::Arena* arena) const {
  ResponseObservation* n = new ResponseObservation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseObservation::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseObservation)
  if (has_observation()) {
    if (observation_ != NULL) observation_->::SC2APIProtocol::Observation::Clear();
  }
  actions_.Clear();
  action_errors_.Clear();
  player_result_.Clear();
  chat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseObservation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseObservation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC2APIProtocol.Action actions = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_actions;
        if (input->ExpectTag(18)) goto parse_loop_action_errors;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .SC2APIProtocol.ActionError action_errors = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_action_errors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_action_errors()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_action_errors;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(26)) goto parse_observation;
        break;
      }

      // optional .SC2APIProtocol.Observation observation = 3;
      case 3: {
        if (tag == 26) {
         parse_observation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_observation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_player_result;
        break;
      }

      // repeated .SC2APIProtocol.PlayerResult player_result = 4;
      case 4: {
        if (tag == 34) {
         parse_player_result:
          DO_(input->IncrementRecursionDepth());
         parse_loop_player_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_player_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_player_result;
        if (input->ExpectTag(42)) goto parse_loop_chat;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .SC2APIProtocol.ChatReceived chat = 5;
      case 5: {
        if (tag == 42) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_chat;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseObservation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseObservation)
  return false;
#undef DO_
}

void ResponseObservation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseObservation)
  // repeated .SC2APIProtocol.Action actions = 1;
  for (unsigned int i = 0, n = this->actions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actions(i), output);
  }

  // repeated .SC2APIProtocol.ActionError action_errors = 2;
  for (unsigned int i = 0, n = this->action_errors_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->action_errors(i), output);
  }

  // optional .SC2APIProtocol.Observation observation = 3;
  if (has_observation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->observation_, output);
  }

  // repeated .SC2APIProtocol.PlayerResult player_result = 4;
  for (unsigned int i = 0, n = this->player_result_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_result(i), output);
  }

  // repeated .SC2APIProtocol.ChatReceived chat = 5;
  for (unsigned int i = 0, n = this->chat_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->chat(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseObservation)
}

::google::protobuf::uint8* ResponseObservation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseObservation)
  // repeated .SC2APIProtocol.Action actions = 1;
  for (unsigned int i = 0, n = this->actions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->actions(i), false, target);
  }

  // repeated .SC2APIProtocol.ActionError action_errors = 2;
  for (unsigned int i = 0, n = this->action_errors_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->action_errors(i), false, target);
  }

  // optional .SC2APIProtocol.Observation observation = 3;
  if (has_observation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->observation_, false, target);
  }

  // repeated .SC2APIProtocol.PlayerResult player_result = 4;
  for (unsigned int i = 0, n = this->player_result_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->player_result(i), false, target);
  }

  // repeated .SC2APIProtocol.ChatReceived chat = 5;
  for (unsigned int i = 0, n = this->chat_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->chat(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseObservation)
  return target;
}

int ResponseObservation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseObservation)
  int total_size = 0;

  // optional .SC2APIProtocol.Observation observation = 3;
  if (has_observation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->observation_);
  }

  // repeated .SC2APIProtocol.Action actions = 1;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }

  // repeated .SC2APIProtocol.ActionError action_errors = 2;
  total_size += 1 * this->action_errors_size();
  for (int i = 0; i < this->action_errors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->action_errors(i));
  }

  // repeated .SC2APIProtocol.PlayerResult player_result = 4;
  total_size += 1 * this->player_result_size();
  for (int i = 0; i < this->player_result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_result(i));
  }

  // repeated .SC2APIProtocol.ChatReceived chat = 5;
  total_size += 1 * this->chat_size();
  for (int i = 0; i < this->chat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chat(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseObservation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseObservation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseObservation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseObservation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseObservation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseObservation)
    MergeFrom(*source);
  }
}

void ResponseObservation::MergeFrom(const ResponseObservation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseObservation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  actions_.MergeFrom(from.actions_);
  action_errors_.MergeFrom(from.action_errors_);
  player_result_.MergeFrom(from.player_result_);
  chat_.MergeFrom(from.chat_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_observation()) {
      mutable_observation()->::SC2APIProtocol::Observation::MergeFrom(from.observation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseObservation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseObservation::CopyFrom(const ResponseObservation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseObservation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseObservation::IsInitialized() const {

  return true;
}

void ResponseObservation::Swap(ResponseObservation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseObservation::InternalSwap(ResponseObservation* other) {
  actions_.UnsafeArenaSwap(&other->actions_);
  action_errors_.UnsafeArenaSwap(&other->action_errors_);
  std::swap(observation_, other->observation_);
  player_result_.UnsafeArenaSwap(&other->player_result_);
  chat_.UnsafeArenaSwap(&other->chat_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseObservation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseObservation_descriptor_;
  metadata.reflection = ResponseObservation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseObservation

// repeated .SC2APIProtocol.Action actions = 1;
int ResponseObservation::actions_size() const {
  return actions_.size();
}
void ResponseObservation::clear_actions() {
  actions_.Clear();
}
const ::SC2APIProtocol::Action& ResponseObservation::actions(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseObservation.actions)
  return actions_.Get(index);
}
::SC2APIProtocol::Action* ResponseObservation::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseObservation.actions)
  return actions_.Mutable(index);
}
::SC2APIProtocol::Action* ResponseObservation::add_actions() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseObservation.actions)
  return actions_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::Action >*
ResponseObservation::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseObservation.actions)
  return &actions_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::Action >&
ResponseObservation::actions() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseObservation.actions)
  return actions_;
}

// repeated .SC2APIProtocol.ActionError action_errors = 2;
int ResponseObservation::action_errors_size() const {
  return action_errors_.size();
}
void ResponseObservation::clear_action_errors() {
  action_errors_.Clear();
}
const ::SC2APIProtocol::ActionError& ResponseObservation::action_errors(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseObservation.action_errors)
  return action_errors_.Get(index);
}
::SC2APIProtocol::ActionError* ResponseObservation::mutable_action_errors(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseObservation.action_errors)
  return action_errors_.Mutable(index);
}
::SC2APIProtocol::ActionError* ResponseObservation::add_action_errors() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseObservation.action_errors)
  return action_errors_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::ActionError >*
ResponseObservation::mutable_action_errors() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseObservation.action_errors)
  return &action_errors_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::ActionError >&
ResponseObservation::action_errors() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseObservation.action_errors)
  return action_errors_;
}

// optional .SC2APIProtocol.Observation observation = 3;
bool ResponseObservation::has_observation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResponseObservation::set_has_observation() {
  _has_bits_[0] |= 0x00000004u;
}
void ResponseObservation::clear_has_observation() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResponseObservation::clear_observation() {
  if (observation_ != NULL) observation_->::SC2APIProtocol::Observation::Clear();
  clear_has_observation();
}
const ::SC2APIProtocol::Observation& ResponseObservation::observation() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseObservation.observation)
  return observation_ != NULL ? *observation_ : *default_instance_->observation_;
}
::SC2APIProtocol::Observation* ResponseObservation::mutable_observation() {
  set_has_observation();
  if (observation_ == NULL) {
    observation_ = new ::SC2APIProtocol::Observation;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseObservation.observation)
  return observation_;
}
::SC2APIProtocol::Observation* ResponseObservation::release_observation() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ResponseObservation.observation)
  clear_has_observation();
  ::SC2APIProtocol::Observation* temp = observation_;
  observation_ = NULL;
  return temp;
}
void ResponseObservation::set_allocated_observation(::SC2APIProtocol::Observation* observation) {
  delete observation_;
  observation_ = observation;
  if (observation) {
    set_has_observation();
  } else {
    clear_has_observation();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ResponseObservation.observation)
}

// repeated .SC2APIProtocol.PlayerResult player_result = 4;
int ResponseObservation::player_result_size() const {
  return player_result_.size();
}
void ResponseObservation::clear_player_result() {
  player_result_.Clear();
}
const ::SC2APIProtocol::PlayerResult& ResponseObservation::player_result(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseObservation.player_result)
  return player_result_.Get(index);
}
::SC2APIProtocol::PlayerResult* ResponseObservation::mutable_player_result(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseObservation.player_result)
  return player_result_.Mutable(index);
}
::SC2APIProtocol::PlayerResult* ResponseObservation::add_player_result() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseObservation.player_result)
  return player_result_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::PlayerResult >*
ResponseObservation::mutable_player_result() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseObservation.player_result)
  return &player_result_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::PlayerResult >&
ResponseObservation::player_result() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseObservation.player_result)
  return player_result_;
}

// repeated .SC2APIProtocol.ChatReceived chat = 5;
int ResponseObservation::chat_size() const {
  return chat_.size();
}
void ResponseObservation::clear_chat() {
  chat_.Clear();
}
const ::SC2APIProtocol::ChatReceived& ResponseObservation::chat(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseObservation.chat)
  return chat_.Get(index);
}
::SC2APIProtocol::ChatReceived* ResponseObservation::mutable_chat(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseObservation.chat)
  return chat_.Mutable(index);
}
::SC2APIProtocol::ChatReceived* ResponseObservation::add_chat() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseObservation.chat)
  return chat_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::ChatReceived >*
ResponseObservation::mutable_chat() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseObservation.chat)
  return &chat_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::ChatReceived >&
ResponseObservation::chat() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseObservation.chat)
  return chat_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChatReceived::kPlayerIdFieldNumber;
const int ChatReceived::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChatReceived::ChatReceived()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ChatReceived)
}

void ChatReceived::InitAsDefaultInstance() {
}

ChatReceived::ChatReceived(const ChatReceived& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ChatReceived)
}

void ChatReceived::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  player_id_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatReceived::~ChatReceived() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ChatReceived)
  SharedDtor();
}

void ChatReceived::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ChatReceived::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatReceived::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatReceived_descriptor_;
}

const ChatReceived& ChatReceived::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ChatReceived* ChatReceived::default_instance_ = NULL;

ChatReceived* ChatReceived::New(::google::protobuf::Arena* arena) const {
  ChatReceived* n = new ChatReceived;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChatReceived::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ChatReceived)
  if (_has_bits_[0 / 32] & 3u) {
    player_id_ = 0;
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ChatReceived::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ChatReceived)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ChatReceived.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ChatReceived)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ChatReceived)
  return false;
#undef DO_
}

void ChatReceived::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ChatReceived)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ChatReceived.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ChatReceived)
}

::google::protobuf::uint8* ChatReceived::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ChatReceived)
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ChatReceived.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ChatReceived)
  return target;
}

int ChatReceived::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ChatReceived)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatReceived::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ChatReceived)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ChatReceived* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ChatReceived>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ChatReceived)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ChatReceived)
    MergeFrom(*source);
  }
}

void ChatReceived::MergeFrom(const ChatReceived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ChatReceived)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ChatReceived::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ChatReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatReceived::CopyFrom(const ChatReceived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ChatReceived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatReceived::IsInitialized() const {

  return true;
}

void ChatReceived::Swap(ChatReceived* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChatReceived::InternalSwap(ChatReceived* other) {
  std::swap(player_id_, other->player_id_);
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChatReceived::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatReceived_descriptor_;
  metadata.reflection = ChatReceived_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChatReceived

// optional int32 player_id = 1;
bool ChatReceived::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChatReceived::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ChatReceived::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChatReceived::clear_player_id() {
  player_id_ = 0;
  clear_has_player_id();
}
 ::google::protobuf::int32 ChatReceived::player_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ChatReceived.player_id)
  return player_id_;
}
 void ChatReceived::set_player_id(::google::protobuf::int32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ChatReceived.player_id)
}

// optional string message = 2;
bool ChatReceived::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChatReceived::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
void ChatReceived::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChatReceived::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& ChatReceived::message() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ChatReceived.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatReceived::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ChatReceived.message)
}
 void ChatReceived::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ChatReceived.message)
}
 void ChatReceived::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ChatReceived.message)
}
 ::std::string* ChatReceived::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ChatReceived.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ChatReceived::release_message() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ChatReceived.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ChatReceived::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ChatReceived.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestAction::kActionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestAction::RequestAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestAction)
}

void RequestAction::InitAsDefaultInstance() {
}

RequestAction::RequestAction(const RequestAction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestAction)
}

void RequestAction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAction::~RequestAction() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestAction)
  SharedDtor();
}

void RequestAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAction_descriptor_;
}

const RequestAction& RequestAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

RequestAction* RequestAction::default_instance_ = NULL;

RequestAction* RequestAction::New(::google::protobuf::Arena* arena) const {
  RequestAction* n = new RequestAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestAction::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestAction)
  actions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC2APIProtocol.Action actions = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_actions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_actions;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestAction)
  return false;
#undef DO_
}

void RequestAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestAction)
  // repeated .SC2APIProtocol.Action actions = 1;
  for (unsigned int i = 0, n = this->actions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->actions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestAction)
}

::google::protobuf::uint8* RequestAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestAction)
  // repeated .SC2APIProtocol.Action actions = 1;
  for (unsigned int i = 0, n = this->actions_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->actions(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestAction)
  return target;
}

int RequestAction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestAction)
  int total_size = 0;

  // repeated .SC2APIProtocol.Action actions = 1;
  total_size += 1 * this->actions_size();
  for (int i = 0; i < this->actions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actions(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestAction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestAction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestAction)
    MergeFrom(*source);
  }
}

void RequestAction::MergeFrom(const RequestAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestAction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  actions_.MergeFrom(from.actions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAction::CopyFrom(const RequestAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAction::IsInitialized() const {

  return true;
}

void RequestAction::Swap(RequestAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestAction::InternalSwap(RequestAction* other) {
  actions_.UnsafeArenaSwap(&other->actions_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAction_descriptor_;
  metadata.reflection = RequestAction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestAction

// repeated .SC2APIProtocol.Action actions = 1;
int RequestAction::actions_size() const {
  return actions_.size();
}
void RequestAction::clear_actions() {
  actions_.Clear();
}
const ::SC2APIProtocol::Action& RequestAction::actions(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestAction.actions)
  return actions_.Get(index);
}
::SC2APIProtocol::Action* RequestAction::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestAction.actions)
  return actions_.Mutable(index);
}
::SC2APIProtocol::Action* RequestAction::add_actions() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.RequestAction.actions)
  return actions_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::Action >*
RequestAction::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.RequestAction.actions)
  return &actions_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::Action >&
RequestAction::actions() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.RequestAction.actions)
  return actions_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseAction::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseAction::ResponseAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseAction)
}

void ResponseAction::InitAsDefaultInstance() {
}

ResponseAction::ResponseAction(const ResponseAction& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseAction)
}

void ResponseAction::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseAction::~ResponseAction() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseAction)
  SharedDtor();
}

void ResponseAction::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseAction_descriptor_;
}

const ResponseAction& ResponseAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ResponseAction* ResponseAction::default_instance_ = NULL;

ResponseAction* ResponseAction::New(::google::protobuf::Arena* arena) const {
  ResponseAction* n = new ResponseAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseAction::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseAction)
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC2APIProtocol.ActionResult result = 1;
      case 1: {
        if (tag == 8) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ActionResult_IsValid(value)) {
            add_result(static_cast< ::SC2APIProtocol::ActionResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 1,
                 ::SC2APIProtocol::ActionResult_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_result())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_result;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseAction)
  return false;
#undef DO_
}

void ResponseAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseAction)
  // repeated .SC2APIProtocol.ActionResult result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseAction)
}

::google::protobuf::uint8* ResponseAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseAction)
  // repeated .SC2APIProtocol.ActionResult result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseAction)
  return target;
}

int ResponseAction::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseAction)
  int total_size = 0;

  // repeated .SC2APIProtocol.ActionResult result = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->result_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->result(i));
    }
    total_size += 1 * this->result_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseAction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseAction* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseAction)
    MergeFrom(*source);
  }
}

void ResponseAction::MergeFrom(const ResponseAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseAction)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  result_.MergeFrom(from.result_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseAction::CopyFrom(const ResponseAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseAction::IsInitialized() const {

  return true;
}

void ResponseAction::Swap(ResponseAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseAction::InternalSwap(ResponseAction* other) {
  result_.UnsafeArenaSwap(&other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseAction_descriptor_;
  metadata.reflection = ResponseAction_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseAction

// repeated .SC2APIProtocol.ActionResult result = 1;
int ResponseAction::result_size() const {
  return result_.size();
}
void ResponseAction::clear_result() {
  result_.Clear();
}
 ::SC2APIProtocol::ActionResult ResponseAction::result(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseAction.result)
  return static_cast< ::SC2APIProtocol::ActionResult >(result_.Get(index));
}
 void ResponseAction::set_result(int index, ::SC2APIProtocol::ActionResult value) {
  assert(::SC2APIProtocol::ActionResult_IsValid(value));
  result_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseAction.result)
}
 void ResponseAction::add_result(::SC2APIProtocol::ActionResult value) {
  assert(::SC2APIProtocol::ActionResult_IsValid(value));
  result_.Add(value);
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseAction.result)
}
 const ::google::protobuf::RepeatedField<int>&
ResponseAction::result() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseAction.result)
  return result_;
}
 ::google::protobuf::RepeatedField<int>*
ResponseAction::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseAction.result)
  return &result_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestStep::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestStep::RequestStep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestStep)
}

void RequestStep::InitAsDefaultInstance() {
}

RequestStep::RequestStep(const RequestStep& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestStep)
}

void RequestStep::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestStep::~RequestStep() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestStep)
  SharedDtor();
}

void RequestStep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestStep_descriptor_;
}

const RequestStep& RequestStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

RequestStep* RequestStep::default_instance_ = NULL;

RequestStep* RequestStep::New(::google::protobuf::Arena* arena) const {
  RequestStep* n = new RequestStep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestStep::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestStep)
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 count = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestStep)
  return false;
#undef DO_
}

void RequestStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestStep)
  // optional uint32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestStep)
}

::google::protobuf::uint8* RequestStep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestStep)
  // optional uint32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestStep)
  return target;
}

int RequestStep::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestStep)
  int total_size = 0;

  // optional uint32 count = 1;
  if (has_count()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestStep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestStep)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestStep* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestStep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestStep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestStep)
    MergeFrom(*source);
  }
}

void RequestStep::MergeFrom(const RequestStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestStep)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestStep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestStep::CopyFrom(const RequestStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestStep::IsInitialized() const {

  return true;
}

void RequestStep::Swap(RequestStep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestStep::InternalSwap(RequestStep* other) {
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestStep_descriptor_;
  metadata.reflection = RequestStep_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestStep

// optional uint32 count = 1;
bool RequestStep::has_count() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestStep::set_has_count() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestStep::clear_has_count() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestStep::clear_count() {
  count_ = 0u;
  clear_has_count();
}
 ::google::protobuf::uint32 RequestStep::count() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestStep.count)
  return count_;
}
 void RequestStep::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestStep.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseStep::ResponseStep()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseStep)
}

void ResponseStep::InitAsDefaultInstance() {
}

ResponseStep::ResponseStep(const ResponseStep& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseStep)
}

void ResponseStep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseStep::~ResponseStep() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseStep)
  SharedDtor();
}

void ResponseStep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseStep_descriptor_;
}

const ResponseStep& ResponseStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ResponseStep* ResponseStep::default_instance_ = NULL;

ResponseStep* ResponseStep::New(::google::protobuf::Arena* arena) const {
  ResponseStep* n = new ResponseStep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseStep::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseStep)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseStep)
  return false;
#undef DO_
}

void ResponseStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseStep)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseStep)
}

::google::protobuf::uint8* ResponseStep::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseStep)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseStep)
  return target;
}

int ResponseStep::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseStep)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseStep::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseStep)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseStep* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseStep>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseStep)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseStep)
    MergeFrom(*source);
  }
}

void ResponseStep::MergeFrom(const ResponseStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseStep)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseStep::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseStep::CopyFrom(const ResponseStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseStep::IsInitialized() const {

  return true;
}

void ResponseStep::Swap(ResponseStep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseStep::InternalSwap(ResponseStep* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseStep_descriptor_;
  metadata.reflection = ResponseStep_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseStep

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestData::kAbilityIdFieldNumber;
const int RequestData::kUnitTypeIdFieldNumber;
const int RequestData::kUpgradeIdFieldNumber;
const int RequestData::kBuffIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestData::RequestData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestData)
}

void RequestData::InitAsDefaultInstance() {
}

RequestData::RequestData(const RequestData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestData)
}

void RequestData::SharedCtor() {
  _cached_size_ = 0;
  ability_id_ = false;
  unit_type_id_ = false;
  upgrade_id_ = false;
  buff_id_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestData::~RequestData() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestData)
  SharedDtor();
}

void RequestData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestData_descriptor_;
}

const RequestData& RequestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

RequestData* RequestData::default_instance_ = NULL;

RequestData* RequestData::New(::google::protobuf::Arena* arena) const {
  RequestData* n = new RequestData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestData::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RequestData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RequestData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(ability_id_, buff_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool ability_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ability_id_)));
          set_has_ability_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unit_type_id;
        break;
      }

      // optional bool unit_type_id = 2;
      case 2: {
        if (tag == 16) {
         parse_unit_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unit_type_id_)));
          set_has_unit_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_upgrade_id;
        break;
      }

      // optional bool upgrade_id = 3;
      case 3: {
        if (tag == 24) {
         parse_upgrade_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upgrade_id_)));
          set_has_upgrade_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_buff_id;
        break;
      }

      // optional bool buff_id = 4;
      case 4: {
        if (tag == 32) {
         parse_buff_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buff_id_)));
          set_has_buff_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestData)
  return false;
#undef DO_
}

void RequestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestData)
  // optional bool ability_id = 1;
  if (has_ability_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ability_id(), output);
  }

  // optional bool unit_type_id = 2;
  if (has_unit_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->unit_type_id(), output);
  }

  // optional bool upgrade_id = 3;
  if (has_upgrade_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->upgrade_id(), output);
  }

  // optional bool buff_id = 4;
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->buff_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestData)
}

::google::protobuf::uint8* RequestData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestData)
  // optional bool ability_id = 1;
  if (has_ability_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ability_id(), target);
  }

  // optional bool unit_type_id = 2;
  if (has_unit_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->unit_type_id(), target);
  }

  // optional bool upgrade_id = 3;
  if (has_upgrade_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->upgrade_id(), target);
  }

  // optional bool buff_id = 4;
  if (has_buff_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->buff_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestData)
  return target;
}

int RequestData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestData)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional bool ability_id = 1;
    if (has_ability_id()) {
      total_size += 1 + 1;
    }

    // optional bool unit_type_id = 2;
    if (has_unit_type_id()) {
      total_size += 1 + 1;
    }

    // optional bool upgrade_id = 3;
    if (has_upgrade_id()) {
      total_size += 1 + 1;
    }

    // optional bool buff_id = 4;
    if (has_buff_id()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestData)
    MergeFrom(*source);
  }
}

void RequestData::MergeFrom(const RequestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ability_id()) {
      set_ability_id(from.ability_id());
    }
    if (from.has_unit_type_id()) {
      set_unit_type_id(from.unit_type_id());
    }
    if (from.has_upgrade_id()) {
      set_upgrade_id(from.upgrade_id());
    }
    if (from.has_buff_id()) {
      set_buff_id(from.buff_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestData::CopyFrom(const RequestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestData::IsInitialized() const {

  return true;
}

void RequestData::Swap(RequestData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestData::InternalSwap(RequestData* other) {
  std::swap(ability_id_, other->ability_id_);
  std::swap(unit_type_id_, other->unit_type_id_);
  std::swap(upgrade_id_, other->upgrade_id_);
  std::swap(buff_id_, other->buff_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestData_descriptor_;
  metadata.reflection = RequestData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestData

// optional bool ability_id = 1;
bool RequestData::has_ability_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestData::set_has_ability_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestData::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestData::clear_ability_id() {
  ability_id_ = false;
  clear_has_ability_id();
}
 bool RequestData::ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestData.ability_id)
  return ability_id_;
}
 void RequestData::set_ability_id(bool value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestData.ability_id)
}

// optional bool unit_type_id = 2;
bool RequestData::has_unit_type_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RequestData::set_has_unit_type_id() {
  _has_bits_[0] |= 0x00000002u;
}
void RequestData::clear_has_unit_type_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void RequestData::clear_unit_type_id() {
  unit_type_id_ = false;
  clear_has_unit_type_id();
}
 bool RequestData::unit_type_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestData.unit_type_id)
  return unit_type_id_;
}
 void RequestData::set_unit_type_id(bool value) {
  set_has_unit_type_id();
  unit_type_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestData.unit_type_id)
}

// optional bool upgrade_id = 3;
bool RequestData::has_upgrade_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RequestData::set_has_upgrade_id() {
  _has_bits_[0] |= 0x00000004u;
}
void RequestData::clear_has_upgrade_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void RequestData::clear_upgrade_id() {
  upgrade_id_ = false;
  clear_has_upgrade_id();
}
 bool RequestData::upgrade_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestData.upgrade_id)
  return upgrade_id_;
}
 void RequestData::set_upgrade_id(bool value) {
  set_has_upgrade_id();
  upgrade_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestData.upgrade_id)
}

// optional bool buff_id = 4;
bool RequestData::has_buff_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RequestData::set_has_buff_id() {
  _has_bits_[0] |= 0x00000008u;
}
void RequestData::clear_has_buff_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void RequestData::clear_buff_id() {
  buff_id_ = false;
  clear_has_buff_id();
}
 bool RequestData::buff_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestData.buff_id)
  return buff_id_;
}
 void RequestData::set_buff_id(bool value) {
  set_has_buff_id();
  buff_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestData.buff_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseData::kAbilitiesFieldNumber;
const int ResponseData::kUnitsFieldNumber;
const int ResponseData::kUpgradesFieldNumber;
const int ResponseData::kBuffsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseData::ResponseData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseData)
}

void ResponseData::InitAsDefaultInstance() {
}

ResponseData::ResponseData(const ResponseData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseData)
}

void ResponseData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseData::~ResponseData() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseData)
  SharedDtor();
}

void ResponseData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseData_descriptor_;
}

const ResponseData& ResponseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ResponseData* ResponseData::default_instance_ = NULL;

ResponseData* ResponseData::New(::google::protobuf::Arena* arena) const {
  ResponseData* n = new ResponseData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseData::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseData)
  abilities_.Clear();
  units_.Clear();
  upgrades_.Clear();
  buffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC2APIProtocol.AbilityData abilities = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_abilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_abilities;
        if (input->ExpectTag(18)) goto parse_loop_units;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .SC2APIProtocol.UnitTypeData units = 2;
      case 2: {
        if (tag == 18) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_units:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_units()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_units;
        if (input->ExpectTag(26)) goto parse_loop_upgrades;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .SC2APIProtocol.UpgradeData upgrades = 3;
      case 3: {
        if (tag == 26) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_upgrades:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_upgrades()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_upgrades;
        if (input->ExpectTag(34)) goto parse_loop_buffs;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .SC2APIProtocol.BuffData buffs = 4;
      case 4: {
        if (tag == 34) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_buffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_buffs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_buffs;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseData)
  return false;
#undef DO_
}

void ResponseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseData)
  // repeated .SC2APIProtocol.AbilityData abilities = 1;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->abilities(i), output);
  }

  // repeated .SC2APIProtocol.UnitTypeData units = 2;
  for (unsigned int i = 0, n = this->units_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->units(i), output);
  }

  // repeated .SC2APIProtocol.UpgradeData upgrades = 3;
  for (unsigned int i = 0, n = this->upgrades_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->upgrades(i), output);
  }

  // repeated .SC2APIProtocol.BuffData buffs = 4;
  for (unsigned int i = 0, n = this->buffs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->buffs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseData)
}

::google::protobuf::uint8* ResponseData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseData)
  // repeated .SC2APIProtocol.AbilityData abilities = 1;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->abilities(i), false, target);
  }

  // repeated .SC2APIProtocol.UnitTypeData units = 2;
  for (unsigned int i = 0, n = this->units_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->units(i), false, target);
  }

  // repeated .SC2APIProtocol.UpgradeData upgrades = 3;
  for (unsigned int i = 0, n = this->upgrades_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->upgrades(i), false, target);
  }

  // repeated .SC2APIProtocol.BuffData buffs = 4;
  for (unsigned int i = 0, n = this->buffs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->buffs(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseData)
  return target;
}

int ResponseData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseData)
  int total_size = 0;

  // repeated .SC2APIProtocol.AbilityData abilities = 1;
  total_size += 1 * this->abilities_size();
  for (int i = 0; i < this->abilities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->abilities(i));
  }

  // repeated .SC2APIProtocol.UnitTypeData units = 2;
  total_size += 1 * this->units_size();
  for (int i = 0; i < this->units_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->units(i));
  }

  // repeated .SC2APIProtocol.UpgradeData upgrades = 3;
  total_size += 1 * this->upgrades_size();
  for (int i = 0; i < this->upgrades_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->upgrades(i));
  }

  // repeated .SC2APIProtocol.BuffData buffs = 4;
  total_size += 1 * this->buffs_size();
  for (int i = 0; i < this->buffs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseData)
    MergeFrom(*source);
  }
}

void ResponseData::MergeFrom(const ResponseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  abilities_.MergeFrom(from.abilities_);
  units_.MergeFrom(from.units_);
  upgrades_.MergeFrom(from.upgrades_);
  buffs_.MergeFrom(from.buffs_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseData::CopyFrom(const ResponseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseData::IsInitialized() const {

  return true;
}

void ResponseData::Swap(ResponseData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseData::InternalSwap(ResponseData* other) {
  abilities_.UnsafeArenaSwap(&other->abilities_);
  units_.UnsafeArenaSwap(&other->units_);
  upgrades_.UnsafeArenaSwap(&other->upgrades_);
  buffs_.UnsafeArenaSwap(&other->buffs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseData_descriptor_;
  metadata.reflection = ResponseData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseData

// repeated .SC2APIProtocol.AbilityData abilities = 1;
int ResponseData::abilities_size() const {
  return abilities_.size();
}
void ResponseData::clear_abilities() {
  abilities_.Clear();
}
const ::SC2APIProtocol::AbilityData& ResponseData::abilities(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseData.abilities)
  return abilities_.Get(index);
}
::SC2APIProtocol::AbilityData* ResponseData::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseData.abilities)
  return abilities_.Mutable(index);
}
::SC2APIProtocol::AbilityData* ResponseData::add_abilities() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseData.abilities)
  return abilities_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::AbilityData >*
ResponseData::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseData.abilities)
  return &abilities_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::AbilityData >&
ResponseData::abilities() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseData.abilities)
  return abilities_;
}

// repeated .SC2APIProtocol.UnitTypeData units = 2;
int ResponseData::units_size() const {
  return units_.size();
}
void ResponseData::clear_units() {
  units_.Clear();
}
const ::SC2APIProtocol::UnitTypeData& ResponseData::units(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseData.units)
  return units_.Get(index);
}
::SC2APIProtocol::UnitTypeData* ResponseData::mutable_units(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseData.units)
  return units_.Mutable(index);
}
::SC2APIProtocol::UnitTypeData* ResponseData::add_units() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseData.units)
  return units_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitTypeData >*
ResponseData::mutable_units() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseData.units)
  return &units_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UnitTypeData >&
ResponseData::units() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseData.units)
  return units_;
}

// repeated .SC2APIProtocol.UpgradeData upgrades = 3;
int ResponseData::upgrades_size() const {
  return upgrades_.size();
}
void ResponseData::clear_upgrades() {
  upgrades_.Clear();
}
const ::SC2APIProtocol::UpgradeData& ResponseData::upgrades(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseData.upgrades)
  return upgrades_.Get(index);
}
::SC2APIProtocol::UpgradeData* ResponseData::mutable_upgrades(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseData.upgrades)
  return upgrades_.Mutable(index);
}
::SC2APIProtocol::UpgradeData* ResponseData::add_upgrades() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseData.upgrades)
  return upgrades_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UpgradeData >*
ResponseData::mutable_upgrades() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseData.upgrades)
  return &upgrades_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::UpgradeData >&
ResponseData::upgrades() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseData.upgrades)
  return upgrades_;
}

// repeated .SC2APIProtocol.BuffData buffs = 4;
int ResponseData::buffs_size() const {
  return buffs_.size();
}
void ResponseData::clear_buffs() {
  buffs_.Clear();
}
const ::SC2APIProtocol::BuffData& ResponseData::buffs(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseData.buffs)
  return buffs_.Get(index);
}
::SC2APIProtocol::BuffData* ResponseData::mutable_buffs(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseData.buffs)
  return buffs_.Mutable(index);
}
::SC2APIProtocol::BuffData* ResponseData::add_buffs() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseData.buffs)
  return buffs_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::BuffData >*
ResponseData::mutable_buffs() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseData.buffs)
  return &buffs_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::BuffData >&
ResponseData::buffs() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseData.buffs)
  return buffs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestSaveReplay::RequestSaveReplay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestSaveReplay)
}

void RequestSaveReplay::InitAsDefaultInstance() {
}

RequestSaveReplay::RequestSaveReplay(const RequestSaveReplay& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestSaveReplay)
}

void RequestSaveReplay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSaveReplay::~RequestSaveReplay() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestSaveReplay)
  SharedDtor();
}

void RequestSaveReplay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestSaveReplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSaveReplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSaveReplay_descriptor_;
}

const RequestSaveReplay& RequestSaveReplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

RequestSaveReplay* RequestSaveReplay::default_instance_ = NULL;

RequestSaveReplay* RequestSaveReplay::New(::google::protobuf::Arena* arena) const {
  RequestSaveReplay* n = new RequestSaveReplay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestSaveReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestSaveReplay)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestSaveReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestSaveReplay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestSaveReplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestSaveReplay)
  return false;
#undef DO_
}

void RequestSaveReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestSaveReplay)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestSaveReplay)
}

::google::protobuf::uint8* RequestSaveReplay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestSaveReplay)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestSaveReplay)
  return target;
}

int RequestSaveReplay::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestSaveReplay)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSaveReplay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestSaveReplay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestSaveReplay* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestSaveReplay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestSaveReplay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestSaveReplay)
    MergeFrom(*source);
  }
}

void RequestSaveReplay::MergeFrom(const RequestSaveReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestSaveReplay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestSaveReplay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestSaveReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSaveReplay::CopyFrom(const RequestSaveReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestSaveReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSaveReplay::IsInitialized() const {

  return true;
}

void RequestSaveReplay::Swap(RequestSaveReplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestSaveReplay::InternalSwap(RequestSaveReplay* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestSaveReplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSaveReplay_descriptor_;
  metadata.reflection = RequestSaveReplay_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestSaveReplay

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseSaveReplay::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseSaveReplay::ResponseSaveReplay()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseSaveReplay)
}

void ResponseSaveReplay::InitAsDefaultInstance() {
}

ResponseSaveReplay::ResponseSaveReplay(const ResponseSaveReplay& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseSaveReplay)
}

void ResponseSaveReplay::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseSaveReplay::~ResponseSaveReplay() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseSaveReplay)
  SharedDtor();
}

void ResponseSaveReplay::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseSaveReplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseSaveReplay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseSaveReplay_descriptor_;
}

const ResponseSaveReplay& ResponseSaveReplay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ResponseSaveReplay* ResponseSaveReplay::default_instance_ = NULL;

ResponseSaveReplay* ResponseSaveReplay::New(::google::protobuf::Arena* arena) const {
  ResponseSaveReplay* n = new ResponseSaveReplay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseSaveReplay::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseSaveReplay)
  if (has_data()) {
    data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseSaveReplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseSaveReplay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseSaveReplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseSaveReplay)
  return false;
#undef DO_
}

void ResponseSaveReplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseSaveReplay)
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseSaveReplay)
}

::google::protobuf::uint8* ResponseSaveReplay::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseSaveReplay)
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseSaveReplay)
  return target;
}

int ResponseSaveReplay::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseSaveReplay)
  int total_size = 0;

  // optional bytes data = 1;
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseSaveReplay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseSaveReplay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseSaveReplay* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseSaveReplay>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseSaveReplay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseSaveReplay)
    MergeFrom(*source);
  }
}

void ResponseSaveReplay::MergeFrom(const ResponseSaveReplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseSaveReplay)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseSaveReplay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseSaveReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSaveReplay::CopyFrom(const ResponseSaveReplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseSaveReplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSaveReplay::IsInitialized() const {

  return true;
}

void ResponseSaveReplay::Swap(ResponseSaveReplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseSaveReplay::InternalSwap(ResponseSaveReplay* other) {
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseSaveReplay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseSaveReplay_descriptor_;
  metadata.reflection = ResponseSaveReplay_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseSaveReplay

// optional bytes data = 1;
bool ResponseSaveReplay::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseSaveReplay::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseSaveReplay::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseSaveReplay::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
 const ::std::string& ResponseSaveReplay::data() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseSaveReplay.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseSaveReplay::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseSaveReplay.data)
}
 void ResponseSaveReplay::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ResponseSaveReplay.data)
}
 void ResponseSaveReplay::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ResponseSaveReplay.data)
}
 ::std::string* ResponseSaveReplay::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseSaveReplay.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseSaveReplay::release_data() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ResponseSaveReplay.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseSaveReplay::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ResponseSaveReplay.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestReplayInfo::kReplayPathFieldNumber;
const int RequestReplayInfo::kReplayDataFieldNumber;
const int RequestReplayInfo::kDownloadDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestReplayInfo::RequestReplayInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestReplayInfo)
}

void RequestReplayInfo::InitAsDefaultInstance() {
  RequestReplayInfo_default_oneof_instance_->replay_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  RequestReplayInfo_default_oneof_instance_->replay_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

RequestReplayInfo::RequestReplayInfo(const RequestReplayInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestReplayInfo)
}

void RequestReplayInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  download_data_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  clear_has_replay();
}

RequestReplayInfo::~RequestReplayInfo() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestReplayInfo)
  SharedDtor();
}

void RequestReplayInfo::SharedDtor() {
  if (has_replay()) {
    clear_replay();
  }
  if (this != default_instance_) {
  }
}

void RequestReplayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestReplayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestReplayInfo_descriptor_;
}

const RequestReplayInfo& RequestReplayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

RequestReplayInfo* RequestReplayInfo::default_instance_ = NULL;

RequestReplayInfo* RequestReplayInfo::New(::google::protobuf::Arena* arena) const {
  RequestReplayInfo* n = new RequestReplayInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestReplayInfo::clear_replay() {
// @@protoc_insertion_point(one_of_clear_start:SC2APIProtocol.RequestReplayInfo)
  switch(replay_case()) {
    case kReplayPath: {
      replay_.replay_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kReplayData: {
      replay_.replay_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REPLAY_NOT_SET;
}


void RequestReplayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestReplayInfo)
  download_data_ = false;
  clear_replay();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestReplayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestReplayInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string replay_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_replay_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->replay_path().data(), this->replay_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.RequestReplayInfo.replay_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_replay_data;
        break;
      }

      // optional bytes replay_data = 2;
      case 2: {
        if (tag == 18) {
         parse_replay_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_replay_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_download_data;
        break;
      }

      // optional bool download_data = 3;
      case 3: {
        if (tag == 24) {
         parse_download_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &download_data_)));
          set_has_download_data();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestReplayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestReplayInfo)
  return false;
#undef DO_
}

void RequestReplayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestReplayInfo)
  // optional string replay_path = 1;
  if (has_replay_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replay_path().data(), this->replay_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.RequestReplayInfo.replay_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->replay_path(), output);
  }

  // optional bytes replay_data = 2;
  if (has_replay_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->replay_data(), output);
  }

  // optional bool download_data = 3;
  if (has_download_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->download_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestReplayInfo)
}

::google::protobuf::uint8* RequestReplayInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestReplayInfo)
  // optional string replay_path = 1;
  if (has_replay_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->replay_path().data(), this->replay_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.RequestReplayInfo.replay_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->replay_path(), target);
  }

  // optional bytes replay_data = 2;
  if (has_replay_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->replay_data(), target);
  }

  // optional bool download_data = 3;
  if (has_download_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->download_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestReplayInfo)
  return target;
}

int RequestReplayInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestReplayInfo)
  int total_size = 0;

  // optional bool download_data = 3;
  if (has_download_data()) {
    total_size += 1 + 1;
  }

  switch (replay_case()) {
    // optional string replay_path = 1;
    case kReplayPath: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->replay_path());
      break;
    }
    // optional bytes replay_data = 2;
    case kReplayData: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->replay_data());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestReplayInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestReplayInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestReplayInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestReplayInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestReplayInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestReplayInfo)
    MergeFrom(*source);
  }
}

void RequestReplayInfo::MergeFrom(const RequestReplayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestReplayInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.replay_case()) {
    case kReplayPath: {
      set_replay_path(from.replay_path());
      break;
    }
    case kReplayData: {
      set_replay_data(from.replay_data());
      break;
    }
    case REPLAY_NOT_SET: {
      break;
    }
  }
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_download_data()) {
      set_download_data(from.download_data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestReplayInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestReplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestReplayInfo::CopyFrom(const RequestReplayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestReplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestReplayInfo::IsInitialized() const {

  return true;
}

void RequestReplayInfo::Swap(RequestReplayInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestReplayInfo::InternalSwap(RequestReplayInfo* other) {
  std::swap(download_data_, other->download_data_);
  std::swap(replay_, other->replay_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestReplayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestReplayInfo_descriptor_;
  metadata.reflection = RequestReplayInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestReplayInfo

// optional string replay_path = 1;
bool RequestReplayInfo::has_replay_path() const {
  return replay_case() == kReplayPath;
}
void RequestReplayInfo::set_has_replay_path() {
  _oneof_case_[0] = kReplayPath;
}
void RequestReplayInfo::clear_replay_path() {
  if (has_replay_path()) {
    replay_.replay_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_replay();
  }
}
 const ::std::string& RequestReplayInfo::replay_path() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestReplayInfo.replay_path)
  if (has_replay_path()) {
    return replay_.replay_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void RequestReplayInfo::set_replay_path(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestReplayInfo.replay_path)
  if (!has_replay_path()) {
    clear_replay();
    set_has_replay_path();
    replay_.replay_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  replay_.replay_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestReplayInfo.replay_path)
}
 void RequestReplayInfo::set_replay_path(const char* value) {
  if (!has_replay_path()) {
    clear_replay();
    set_has_replay_path();
    replay_.replay_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  replay_.replay_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.RequestReplayInfo.replay_path)
}
 void RequestReplayInfo::set_replay_path(const char* value, size_t size) {
  if (!has_replay_path()) {
    clear_replay();
    set_has_replay_path();
    replay_.replay_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  replay_.replay_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.RequestReplayInfo.replay_path)
}
 ::std::string* RequestReplayInfo::mutable_replay_path() {
  if (!has_replay_path()) {
    clear_replay();
    set_has_replay_path();
    replay_.replay_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestReplayInfo.replay_path)
  return replay_.replay_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestReplayInfo::release_replay_path() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RequestReplayInfo.replay_path)
  if (has_replay_path()) {
    clear_has_replay();
    return replay_.replay_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void RequestReplayInfo::set_allocated_replay_path(::std::string* replay_path) {
  if (!has_replay_path()) {
    replay_.replay_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_replay();
  if (replay_path != NULL) {
    set_has_replay_path();
    replay_.replay_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        replay_path);
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestReplayInfo.replay_path)
}

// optional bytes replay_data = 2;
bool RequestReplayInfo::has_replay_data() const {
  return replay_case() == kReplayData;
}
void RequestReplayInfo::set_has_replay_data() {
  _oneof_case_[0] = kReplayData;
}
void RequestReplayInfo::clear_replay_data() {
  if (has_replay_data()) {
    replay_.replay_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_replay();
  }
}
 const ::std::string& RequestReplayInfo::replay_data() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestReplayInfo.replay_data)
  if (has_replay_data()) {
    return replay_.replay_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void RequestReplayInfo::set_replay_data(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestReplayInfo.replay_data)
  if (!has_replay_data()) {
    clear_replay();
    set_has_replay_data();
    replay_.replay_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  replay_.replay_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestReplayInfo.replay_data)
}
 void RequestReplayInfo::set_replay_data(const char* value) {
  if (!has_replay_data()) {
    clear_replay();
    set_has_replay_data();
    replay_.replay_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  replay_.replay_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.RequestReplayInfo.replay_data)
}
 void RequestReplayInfo::set_replay_data(const void* value, size_t size) {
  if (!has_replay_data()) {
    clear_replay();
    set_has_replay_data();
    replay_.replay_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  replay_.replay_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.RequestReplayInfo.replay_data)
}
 ::std::string* RequestReplayInfo::mutable_replay_data() {
  if (!has_replay_data()) {
    clear_replay();
    set_has_replay_data();
    replay_.replay_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestReplayInfo.replay_data)
  return replay_.replay_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestReplayInfo::release_replay_data() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RequestReplayInfo.replay_data)
  if (has_replay_data()) {
    clear_has_replay();
    return replay_.replay_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void RequestReplayInfo::set_allocated_replay_data(::std::string* replay_data) {
  if (!has_replay_data()) {
    replay_.replay_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_replay();
  if (replay_data != NULL) {
    set_has_replay_data();
    replay_.replay_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        replay_data);
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestReplayInfo.replay_data)
}

// optional bool download_data = 3;
bool RequestReplayInfo::has_download_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RequestReplayInfo::set_has_download_data() {
  _has_bits_[0] |= 0x00000004u;
}
void RequestReplayInfo::clear_has_download_data() {
  _has_bits_[0] &= ~0x00000004u;
}
void RequestReplayInfo::clear_download_data() {
  download_data_ = false;
  clear_has_download_data();
}
 bool RequestReplayInfo::download_data() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestReplayInfo.download_data)
  return download_data_;
}
 void RequestReplayInfo::set_download_data(bool value) {
  set_has_download_data();
  download_data_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestReplayInfo.download_data)
}

bool RequestReplayInfo::has_replay() const {
  return replay_case() != REPLAY_NOT_SET;
}
void RequestReplayInfo::clear_has_replay() {
  _oneof_case_[0] = REPLAY_NOT_SET;
}
RequestReplayInfo::ReplayCase RequestReplayInfo::replay_case() const {
  return RequestReplayInfo::ReplayCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfoExtra::kPlayerInfoFieldNumber;
const int PlayerInfoExtra::kPlayerResultFieldNumber;
const int PlayerInfoExtra::kPlayerMmrFieldNumber;
const int PlayerInfoExtra::kPlayerApmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfoExtra::PlayerInfoExtra()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.PlayerInfoExtra)
}

void PlayerInfoExtra::InitAsDefaultInstance() {
  player_info_ = const_cast< ::SC2APIProtocol::PlayerInfo*>(&::SC2APIProtocol::PlayerInfo::default_instance());
  player_result_ = const_cast< ::SC2APIProtocol::PlayerResult*>(&::SC2APIProtocol::PlayerResult::default_instance());
}

PlayerInfoExtra::PlayerInfoExtra(const PlayerInfoExtra& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PlayerInfoExtra)
}

void PlayerInfoExtra::SharedCtor() {
  _cached_size_ = 0;
  player_info_ = NULL;
  player_result_ = NULL;
  player_mmr_ = 0;
  player_apm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfoExtra::~PlayerInfoExtra() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PlayerInfoExtra)
  SharedDtor();
}

void PlayerInfoExtra::SharedDtor() {
  if (this != default_instance_) {
    delete player_info_;
    delete player_result_;
  }
}

void PlayerInfoExtra::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfoExtra::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfoExtra_descriptor_;
}

const PlayerInfoExtra& PlayerInfoExtra::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

PlayerInfoExtra* PlayerInfoExtra::default_instance_ = NULL;

PlayerInfoExtra* PlayerInfoExtra::New(::google::protobuf::Arena* arena) const {
  PlayerInfoExtra* n = new PlayerInfoExtra;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfoExtra::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PlayerInfoExtra)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerInfoExtra, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerInfoExtra*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(player_mmr_, player_apm_);
    if (has_player_info()) {
      if (player_info_ != NULL) player_info_->::SC2APIProtocol::PlayerInfo::Clear();
    }
    if (has_player_result()) {
      if (player_result_ != NULL) player_result_->::SC2APIProtocol::PlayerResult::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayerInfoExtra::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.PlayerInfoExtra)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.PlayerInfo player_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_player_result;
        break;
      }

      // optional .SC2APIProtocol.PlayerResult player_result = 2;
      case 2: {
        if (tag == 18) {
         parse_player_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_player_mmr;
        break;
      }

      // optional int32 player_mmr = 3;
      case 3: {
        if (tag == 24) {
         parse_player_mmr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_mmr_)));
          set_has_player_mmr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_player_apm;
        break;
      }

      // optional int32 player_apm = 4;
      case 4: {
        if (tag == 32) {
         parse_player_apm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_apm_)));
          set_has_player_apm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.PlayerInfoExtra)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.PlayerInfoExtra)
  return false;
#undef DO_
}

void PlayerInfoExtra::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.PlayerInfoExtra)
  // optional .SC2APIProtocol.PlayerInfo player_info = 1;
  if (has_player_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_info_, output);
  }

  // optional .SC2APIProtocol.PlayerResult player_result = 2;
  if (has_player_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->player_result_, output);
  }

  // optional int32 player_mmr = 3;
  if (has_player_mmr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_mmr(), output);
  }

  // optional int32 player_apm = 4;
  if (has_player_apm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->player_apm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.PlayerInfoExtra)
}

::google::protobuf::uint8* PlayerInfoExtra::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PlayerInfoExtra)
  // optional .SC2APIProtocol.PlayerInfo player_info = 1;
  if (has_player_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_info_, false, target);
  }

  // optional .SC2APIProtocol.PlayerResult player_result = 2;
  if (has_player_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->player_result_, false, target);
  }

  // optional int32 player_mmr = 3;
  if (has_player_mmr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_mmr(), target);
  }

  // optional int32 player_apm = 4;
  if (has_player_apm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->player_apm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PlayerInfoExtra)
  return target;
}

int PlayerInfoExtra::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PlayerInfoExtra)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .SC2APIProtocol.PlayerInfo player_info = 1;
    if (has_player_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->player_info_);
    }

    // optional .SC2APIProtocol.PlayerResult player_result = 2;
    if (has_player_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->player_result_);
    }

    // optional int32 player_mmr = 3;
    if (has_player_mmr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_mmr());
    }

    // optional int32 player_apm = 4;
    if (has_player_apm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_apm());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfoExtra::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.PlayerInfoExtra)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerInfoExtra* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfoExtra>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.PlayerInfoExtra)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.PlayerInfoExtra)
    MergeFrom(*source);
  }
}

void PlayerInfoExtra::MergeFrom(const PlayerInfoExtra& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PlayerInfoExtra)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_info()) {
      mutable_player_info()->::SC2APIProtocol::PlayerInfo::MergeFrom(from.player_info());
    }
    if (from.has_player_result()) {
      mutable_player_result()->::SC2APIProtocol::PlayerResult::MergeFrom(from.player_result());
    }
    if (from.has_player_mmr()) {
      set_player_mmr(from.player_mmr());
    }
    if (from.has_player_apm()) {
      set_player_apm(from.player_apm());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayerInfoExtra::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.PlayerInfoExtra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfoExtra::CopyFrom(const PlayerInfoExtra& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PlayerInfoExtra)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfoExtra::IsInitialized() const {

  return true;
}

void PlayerInfoExtra::Swap(PlayerInfoExtra* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfoExtra::InternalSwap(PlayerInfoExtra* other) {
  std::swap(player_info_, other->player_info_);
  std::swap(player_result_, other->player_result_);
  std::swap(player_mmr_, other->player_mmr_);
  std::swap(player_apm_, other->player_apm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerInfoExtra::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfoExtra_descriptor_;
  metadata.reflection = PlayerInfoExtra_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInfoExtra

// optional .SC2APIProtocol.PlayerInfo player_info = 1;
bool PlayerInfoExtra::has_player_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerInfoExtra::set_has_player_info() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerInfoExtra::clear_has_player_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerInfoExtra::clear_player_info() {
  if (player_info_ != NULL) player_info_->::SC2APIProtocol::PlayerInfo::Clear();
  clear_has_player_info();
}
const ::SC2APIProtocol::PlayerInfo& PlayerInfoExtra::player_info() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerInfoExtra.player_info)
  return player_info_ != NULL ? *player_info_ : *default_instance_->player_info_;
}
::SC2APIProtocol::PlayerInfo* PlayerInfoExtra::mutable_player_info() {
  set_has_player_info();
  if (player_info_ == NULL) {
    player_info_ = new ::SC2APIProtocol::PlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.PlayerInfoExtra.player_info)
  return player_info_;
}
::SC2APIProtocol::PlayerInfo* PlayerInfoExtra::release_player_info() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.PlayerInfoExtra.player_info)
  clear_has_player_info();
  ::SC2APIProtocol::PlayerInfo* temp = player_info_;
  player_info_ = NULL;
  return temp;
}
void PlayerInfoExtra::set_allocated_player_info(::SC2APIProtocol::PlayerInfo* player_info) {
  delete player_info_;
  player_info_ = player_info;
  if (player_info) {
    set_has_player_info();
  } else {
    clear_has_player_info();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.PlayerInfoExtra.player_info)
}

// optional .SC2APIProtocol.PlayerResult player_result = 2;
bool PlayerInfoExtra::has_player_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerInfoExtra::set_has_player_result() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerInfoExtra::clear_has_player_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerInfoExtra::clear_player_result() {
  if (player_result_ != NULL) player_result_->::SC2APIProtocol::PlayerResult::Clear();
  clear_has_player_result();
}
const ::SC2APIProtocol::PlayerResult& PlayerInfoExtra::player_result() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerInfoExtra.player_result)
  return player_result_ != NULL ? *player_result_ : *default_instance_->player_result_;
}
::SC2APIProtocol::PlayerResult* PlayerInfoExtra::mutable_player_result() {
  set_has_player_result();
  if (player_result_ == NULL) {
    player_result_ = new ::SC2APIProtocol::PlayerResult;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.PlayerInfoExtra.player_result)
  return player_result_;
}
::SC2APIProtocol::PlayerResult* PlayerInfoExtra::release_player_result() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.PlayerInfoExtra.player_result)
  clear_has_player_result();
  ::SC2APIProtocol::PlayerResult* temp = player_result_;
  player_result_ = NULL;
  return temp;
}
void PlayerInfoExtra::set_allocated_player_result(::SC2APIProtocol::PlayerResult* player_result) {
  delete player_result_;
  player_result_ = player_result;
  if (player_result) {
    set_has_player_result();
  } else {
    clear_has_player_result();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.PlayerInfoExtra.player_result)
}

// optional int32 player_mmr = 3;
bool PlayerInfoExtra::has_player_mmr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerInfoExtra::set_has_player_mmr() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerInfoExtra::clear_has_player_mmr() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerInfoExtra::clear_player_mmr() {
  player_mmr_ = 0;
  clear_has_player_mmr();
}
 ::google::protobuf::int32 PlayerInfoExtra::player_mmr() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerInfoExtra.player_mmr)
  return player_mmr_;
}
 void PlayerInfoExtra::set_player_mmr(::google::protobuf::int32 value) {
  set_has_player_mmr();
  player_mmr_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerInfoExtra.player_mmr)
}

// optional int32 player_apm = 4;
bool PlayerInfoExtra::has_player_apm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayerInfoExtra::set_has_player_apm() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayerInfoExtra::clear_has_player_apm() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayerInfoExtra::clear_player_apm() {
  player_apm_ = 0;
  clear_has_player_apm();
}
 ::google::protobuf::int32 PlayerInfoExtra::player_apm() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerInfoExtra.player_apm)
  return player_apm_;
}
 void PlayerInfoExtra::set_player_apm(::google::protobuf::int32 value) {
  set_has_player_apm();
  player_apm_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerInfoExtra.player_apm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ResponseReplayInfo_Error_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseReplayInfo_Error_descriptor_;
}
bool ResponseReplayInfo_Error_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseReplayInfo_Error ResponseReplayInfo::MissingReplay;
const ResponseReplayInfo_Error ResponseReplayInfo::InvalidReplayPath;
const ResponseReplayInfo_Error ResponseReplayInfo::InvalidReplayData;
const ResponseReplayInfo_Error ResponseReplayInfo::ParsingError;
const ResponseReplayInfo_Error ResponseReplayInfo::DownloadError;
const ResponseReplayInfo_Error ResponseReplayInfo::Error_MIN;
const ResponseReplayInfo_Error ResponseReplayInfo::Error_MAX;
const int ResponseReplayInfo::Error_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseReplayInfo::kMapNameFieldNumber;
const int ResponseReplayInfo::kLocalMapPathFieldNumber;
const int ResponseReplayInfo::kPlayerInfoFieldNumber;
const int ResponseReplayInfo::kGameDurationLoopsFieldNumber;
const int ResponseReplayInfo::kGameDurationSecondsFieldNumber;
const int ResponseReplayInfo::kGameVersionFieldNumber;
const int ResponseReplayInfo::kDataVersionFieldNumber;
const int ResponseReplayInfo::kDataBuildFieldNumber;
const int ResponseReplayInfo::kBaseBuildFieldNumber;
const int ResponseReplayInfo::kErrorFieldNumber;
const int ResponseReplayInfo::kErrorDetailsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseReplayInfo::ResponseReplayInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseReplayInfo)
}

void ResponseReplayInfo::InitAsDefaultInstance() {
}

ResponseReplayInfo::ResponseReplayInfo(const ResponseReplayInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseReplayInfo)
}

void ResponseReplayInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  map_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_map_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_duration_loops_ = 0u;
  game_duration_seconds_ = 0;
  game_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_build_ = 0u;
  base_build_ = 0u;
  error_ = 1;
  error_details_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseReplayInfo::~ResponseReplayInfo() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseReplayInfo)
  SharedDtor();
}

void ResponseReplayInfo::SharedDtor() {
  map_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  local_map_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  game_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  error_details_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponseReplayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseReplayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseReplayInfo_descriptor_;
}

const ResponseReplayInfo& ResponseReplayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ResponseReplayInfo* ResponseReplayInfo::default_instance_ = NULL;

ResponseReplayInfo* ResponseReplayInfo::New(::google::protobuf::Arena* arena) const {
  ResponseReplayInfo* n = new ResponseReplayInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseReplayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseReplayInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResponseReplayInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResponseReplayInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 251u) {
    ZR_(game_duration_loops_, game_duration_seconds_);
    if (has_map_name()) {
      map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_local_map_path()) {
      local_map_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_game_version()) {
      game_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_data_version()) {
      data_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    data_build_ = 0u;
  }
  if (_has_bits_[8 / 32] & 1792u) {
    base_build_ = 0u;
    error_ = 1;
    if (has_error_details()) {
      error_details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  player_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseReplayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseReplayInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string map_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_name().data(), this->map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseReplayInfo.map_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_local_map_path;
        break;
      }

      // optional string local_map_path = 2;
      case 2: {
        if (tag == 18) {
         parse_local_map_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_local_map_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->local_map_path().data(), this->local_map_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseReplayInfo.local_map_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_player_info;
        break;
      }

      // repeated .SC2APIProtocol.PlayerInfoExtra player_info = 3;
      case 3: {
        if (tag == 26) {
         parse_player_info:
          DO_(input->IncrementRecursionDepth());
         parse_loop_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_player_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_player_info;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(32)) goto parse_game_duration_loops;
        break;
      }

      // optional uint32 game_duration_loops = 4;
      case 4: {
        if (tag == 32) {
         parse_game_duration_loops:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_duration_loops_)));
          set_has_game_duration_loops();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_game_duration_seconds;
        break;
      }

      // optional float game_duration_seconds = 5;
      case 5: {
        if (tag == 45) {
         parse_game_duration_seconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &game_duration_seconds_)));
          set_has_game_duration_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_game_version;
        break;
      }

      // optional string game_version = 6;
      case 6: {
        if (tag == 50) {
         parse_game_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_version().data(), this->game_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseReplayInfo.game_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_data_build;
        break;
      }

      // optional uint32 data_build = 7;
      case 7: {
        if (tag == 56) {
         parse_data_build:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_build_)));
          set_has_data_build();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_base_build;
        break;
      }

      // optional uint32 base_build = 8;
      case 8: {
        if (tag == 64) {
         parse_base_build:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_build_)));
          set_has_base_build();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_error;
        break;
      }

      // optional .SC2APIProtocol.ResponseReplayInfo.Error error = 9;
      case 9: {
        if (tag == 72) {
         parse_error:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ResponseReplayInfo_Error_IsValid(value)) {
            set_error(static_cast< ::SC2APIProtocol::ResponseReplayInfo_Error >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_error_details;
        break;
      }

      // optional string error_details = 10;
      case 10: {
        if (tag == 82) {
         parse_error_details:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_details()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_details().data(), this->error_details().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseReplayInfo.error_details");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_data_version;
        break;
      }

      // optional string data_version = 11;
      case 11: {
        if (tag == 90) {
         parse_data_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_version().data(), this->data_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseReplayInfo.data_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseReplayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseReplayInfo)
  return false;
#undef DO_
}

void ResponseReplayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseReplayInfo)
  // optional string map_name = 1;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.map_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->map_name(), output);
  }

  // optional string local_map_path = 2;
  if (has_local_map_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_map_path().data(), this->local_map_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.local_map_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->local_map_path(), output);
  }

  // repeated .SC2APIProtocol.PlayerInfoExtra player_info = 3;
  for (unsigned int i = 0, n = this->player_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player_info(i), output);
  }

  // optional uint32 game_duration_loops = 4;
  if (has_game_duration_loops()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->game_duration_loops(), output);
  }

  // optional float game_duration_seconds = 5;
  if (has_game_duration_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->game_duration_seconds(), output);
  }

  // optional string game_version = 6;
  if (has_game_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_version().data(), this->game_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.game_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->game_version(), output);
  }

  // optional uint32 data_build = 7;
  if (has_data_build()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->data_build(), output);
  }

  // optional uint32 base_build = 8;
  if (has_base_build()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->base_build(), output);
  }

  // optional .SC2APIProtocol.ResponseReplayInfo.Error error = 9;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->error(), output);
  }

  // optional string error_details = 10;
  if (has_error_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), this->error_details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.error_details");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->error_details(), output);
  }

  // optional string data_version = 11;
  if (has_data_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_version().data(), this->data_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.data_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->data_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseReplayInfo)
}

::google::protobuf::uint8* ResponseReplayInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseReplayInfo)
  // optional string map_name = 1;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.map_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->map_name(), target);
  }

  // optional string local_map_path = 2;
  if (has_local_map_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_map_path().data(), this->local_map_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.local_map_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->local_map_path(), target);
  }

  // repeated .SC2APIProtocol.PlayerInfoExtra player_info = 3;
  for (unsigned int i = 0, n = this->player_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->player_info(i), false, target);
  }

  // optional uint32 game_duration_loops = 4;
  if (has_game_duration_loops()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->game_duration_loops(), target);
  }

  // optional float game_duration_seconds = 5;
  if (has_game_duration_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->game_duration_seconds(), target);
  }

  // optional string game_version = 6;
  if (has_game_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_version().data(), this->game_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.game_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->game_version(), target);
  }

  // optional uint32 data_build = 7;
  if (has_data_build()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->data_build(), target);
  }

  // optional uint32 base_build = 8;
  if (has_base_build()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->base_build(), target);
  }

  // optional .SC2APIProtocol.ResponseReplayInfo.Error error = 9;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->error(), target);
  }

  // optional string error_details = 10;
  if (has_error_details()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_details().data(), this->error_details().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.error_details");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->error_details(), target);
  }

  // optional string data_version = 11;
  if (has_data_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_version().data(), this->data_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseReplayInfo.data_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->data_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseReplayInfo)
  return target;
}

int ResponseReplayInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseReplayInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 251u) {
    // optional string map_name = 1;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }

    // optional string local_map_path = 2;
    if (has_local_map_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->local_map_path());
    }

    // optional uint32 game_duration_loops = 4;
    if (has_game_duration_loops()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_duration_loops());
    }

    // optional float game_duration_seconds = 5;
    if (has_game_duration_seconds()) {
      total_size += 1 + 4;
    }

    // optional string game_version = 6;
    if (has_game_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_version());
    }

    // optional string data_version = 11;
    if (has_data_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_version());
    }

    // optional uint32 data_build = 7;
    if (has_data_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_build());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 base_build = 8;
    if (has_base_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_build());
    }

    // optional .SC2APIProtocol.ResponseReplayInfo.Error error = 9;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
    }

    // optional string error_details = 10;
    if (has_error_details()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_details());
    }

  }
  // repeated .SC2APIProtocol.PlayerInfoExtra player_info = 3;
  total_size += 1 * this->player_info_size();
  for (int i = 0; i < this->player_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_info(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseReplayInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseReplayInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseReplayInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseReplayInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseReplayInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseReplayInfo)
    MergeFrom(*source);
  }
}

void ResponseReplayInfo::MergeFrom(const ResponseReplayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseReplayInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  player_info_.MergeFrom(from.player_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_name()) {
      set_has_map_name();
      map_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_name_);
    }
    if (from.has_local_map_path()) {
      set_has_local_map_path();
      local_map_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.local_map_path_);
    }
    if (from.has_game_duration_loops()) {
      set_game_duration_loops(from.game_duration_loops());
    }
    if (from.has_game_duration_seconds()) {
      set_game_duration_seconds(from.game_duration_seconds());
    }
    if (from.has_game_version()) {
      set_has_game_version();
      game_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_version_);
    }
    if (from.has_data_version()) {
      set_has_data_version();
      data_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_version_);
    }
    if (from.has_data_build()) {
      set_data_build(from.data_build());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_base_build()) {
      set_base_build(from.base_build());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_error_details()) {
      set_has_error_details();
      error_details_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_details_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseReplayInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseReplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseReplayInfo::CopyFrom(const ResponseReplayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseReplayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseReplayInfo::IsInitialized() const {

  return true;
}

void ResponseReplayInfo::Swap(ResponseReplayInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseReplayInfo::InternalSwap(ResponseReplayInfo* other) {
  map_name_.Swap(&other->map_name_);
  local_map_path_.Swap(&other->local_map_path_);
  player_info_.UnsafeArenaSwap(&other->player_info_);
  std::swap(game_duration_loops_, other->game_duration_loops_);
  std::swap(game_duration_seconds_, other->game_duration_seconds_);
  game_version_.Swap(&other->game_version_);
  data_version_.Swap(&other->data_version_);
  std::swap(data_build_, other->data_build_);
  std::swap(base_build_, other->base_build_);
  std::swap(error_, other->error_);
  error_details_.Swap(&other->error_details_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseReplayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseReplayInfo_descriptor_;
  metadata.reflection = ResponseReplayInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseReplayInfo

// optional string map_name = 1;
bool ResponseReplayInfo::has_map_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseReplayInfo::set_has_map_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseReplayInfo::clear_has_map_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseReplayInfo::clear_map_name() {
  map_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_name();
}
 const ::std::string& ResponseReplayInfo::map_name() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseReplayInfo.map_name)
  return map_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseReplayInfo::set_map_name(const ::std::string& value) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseReplayInfo.map_name)
}
 void ResponseReplayInfo::set_map_name(const char* value) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ResponseReplayInfo.map_name)
}
 void ResponseReplayInfo::set_map_name(const char* value, size_t size) {
  set_has_map_name();
  map_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ResponseReplayInfo.map_name)
}
 ::std::string* ResponseReplayInfo::mutable_map_name() {
  set_has_map_name();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseReplayInfo.map_name)
  return map_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseReplayInfo::release_map_name() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ResponseReplayInfo.map_name)
  clear_has_map_name();
  return map_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseReplayInfo::set_allocated_map_name(::std::string* map_name) {
  if (map_name != NULL) {
    set_has_map_name();
  } else {
    clear_has_map_name();
  }
  map_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_name);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ResponseReplayInfo.map_name)
}

// optional string local_map_path = 2;
bool ResponseReplayInfo::has_local_map_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResponseReplayInfo::set_has_local_map_path() {
  _has_bits_[0] |= 0x00000002u;
}
void ResponseReplayInfo::clear_has_local_map_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResponseReplayInfo::clear_local_map_path() {
  local_map_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_local_map_path();
}
 const ::std::string& ResponseReplayInfo::local_map_path() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseReplayInfo.local_map_path)
  return local_map_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseReplayInfo::set_local_map_path(const ::std::string& value) {
  set_has_local_map_path();
  local_map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseReplayInfo.local_map_path)
}
 void ResponseReplayInfo::set_local_map_path(const char* value) {
  set_has_local_map_path();
  local_map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ResponseReplayInfo.local_map_path)
}
 void ResponseReplayInfo::set_local_map_path(const char* value, size_t size) {
  set_has_local_map_path();
  local_map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ResponseReplayInfo.local_map_path)
}
 ::std::string* ResponseReplayInfo::mutable_local_map_path() {
  set_has_local_map_path();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseReplayInfo.local_map_path)
  return local_map_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseReplayInfo::release_local_map_path() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ResponseReplayInfo.local_map_path)
  clear_has_local_map_path();
  return local_map_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseReplayInfo::set_allocated_local_map_path(::std::string* local_map_path) {
  if (local_map_path != NULL) {
    set_has_local_map_path();
  } else {
    clear_has_local_map_path();
  }
  local_map_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), local_map_path);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ResponseReplayInfo.local_map_path)
}

// repeated .SC2APIProtocol.PlayerInfoExtra player_info = 3;
int ResponseReplayInfo::player_info_size() const {
  return player_info_.size();
}
void ResponseReplayInfo::clear_player_info() {
  player_info_.Clear();
}
const ::SC2APIProtocol::PlayerInfoExtra& ResponseReplayInfo::player_info(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseReplayInfo.player_info)
  return player_info_.Get(index);
}
::SC2APIProtocol::PlayerInfoExtra* ResponseReplayInfo::mutable_player_info(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseReplayInfo.player_info)
  return player_info_.Mutable(index);
}
::SC2APIProtocol::PlayerInfoExtra* ResponseReplayInfo::add_player_info() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseReplayInfo.player_info)
  return player_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::PlayerInfoExtra >*
ResponseReplayInfo::mutable_player_info() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseReplayInfo.player_info)
  return &player_info_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::PlayerInfoExtra >&
ResponseReplayInfo::player_info() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseReplayInfo.player_info)
  return player_info_;
}

// optional uint32 game_duration_loops = 4;
bool ResponseReplayInfo::has_game_duration_loops() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ResponseReplayInfo::set_has_game_duration_loops() {
  _has_bits_[0] |= 0x00000008u;
}
void ResponseReplayInfo::clear_has_game_duration_loops() {
  _has_bits_[0] &= ~0x00000008u;
}
void ResponseReplayInfo::clear_game_duration_loops() {
  game_duration_loops_ = 0u;
  clear_has_game_duration_loops();
}
 ::google::protobuf::uint32 ResponseReplayInfo::game_duration_loops() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseReplayInfo.game_duration_loops)
  return game_duration_loops_;
}
 void ResponseReplayInfo::set_game_duration_loops(::google::protobuf::uint32 value) {
  set_has_game_duration_loops();
  game_duration_loops_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseReplayInfo.game_duration_loops)
}

// optional float game_duration_seconds = 5;
bool ResponseReplayInfo::has_game_duration_seconds() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ResponseReplayInfo::set_has_game_duration_seconds() {
  _has_bits_[0] |= 0x00000010u;
}
void ResponseReplayInfo::clear_has_game_duration_seconds() {
  _has_bits_[0] &= ~0x00000010u;
}
void ResponseReplayInfo::clear_game_duration_seconds() {
  game_duration_seconds_ = 0;
  clear_has_game_duration_seconds();
}
 float ResponseReplayInfo::game_duration_seconds() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseReplayInfo.game_duration_seconds)
  return game_duration_seconds_;
}
 void ResponseReplayInfo::set_game_duration_seconds(float value) {
  set_has_game_duration_seconds();
  game_duration_seconds_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseReplayInfo.game_duration_seconds)
}

// optional string game_version = 6;
bool ResponseReplayInfo::has_game_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ResponseReplayInfo::set_has_game_version() {
  _has_bits_[0] |= 0x00000020u;
}
void ResponseReplayInfo::clear_has_game_version() {
  _has_bits_[0] &= ~0x00000020u;
}
void ResponseReplayInfo::clear_game_version() {
  game_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_version();
}
 const ::std::string& ResponseReplayInfo::game_version() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseReplayInfo.game_version)
  return game_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseReplayInfo::set_game_version(const ::std::string& value) {
  set_has_game_version();
  game_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseReplayInfo.game_version)
}
 void ResponseReplayInfo::set_game_version(const char* value) {
  set_has_game_version();
  game_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ResponseReplayInfo.game_version)
}
 void ResponseReplayInfo::set_game_version(const char* value, size_t size) {
  set_has_game_version();
  game_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ResponseReplayInfo.game_version)
}
 ::std::string* ResponseReplayInfo::mutable_game_version() {
  set_has_game_version();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseReplayInfo.game_version)
  return game_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseReplayInfo::release_game_version() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ResponseReplayInfo.game_version)
  clear_has_game_version();
  return game_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseReplayInfo::set_allocated_game_version(::std::string* game_version) {
  if (game_version != NULL) {
    set_has_game_version();
  } else {
    clear_has_game_version();
  }
  game_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_version);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ResponseReplayInfo.game_version)
}

// optional string data_version = 11;
bool ResponseReplayInfo::has_data_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ResponseReplayInfo::set_has_data_version() {
  _has_bits_[0] |= 0x00000040u;
}
void ResponseReplayInfo::clear_has_data_version() {
  _has_bits_[0] &= ~0x00000040u;
}
void ResponseReplayInfo::clear_data_version() {
  data_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_version();
}
 const ::std::string& ResponseReplayInfo::data_version() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseReplayInfo.data_version)
  return data_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseReplayInfo::set_data_version(const ::std::string& value) {
  set_has_data_version();
  data_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseReplayInfo.data_version)
}
 void ResponseReplayInfo::set_data_version(const char* value) {
  set_has_data_version();
  data_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ResponseReplayInfo.data_version)
}
 void ResponseReplayInfo::set_data_version(const char* value, size_t size) {
  set_has_data_version();
  data_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ResponseReplayInfo.data_version)
}
 ::std::string* ResponseReplayInfo::mutable_data_version() {
  set_has_data_version();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseReplayInfo.data_version)
  return data_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseReplayInfo::release_data_version() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ResponseReplayInfo.data_version)
  clear_has_data_version();
  return data_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseReplayInfo::set_allocated_data_version(::std::string* data_version) {
  if (data_version != NULL) {
    set_has_data_version();
  } else {
    clear_has_data_version();
  }
  data_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_version);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ResponseReplayInfo.data_version)
}

// optional uint32 data_build = 7;
bool ResponseReplayInfo::has_data_build() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ResponseReplayInfo::set_has_data_build() {
  _has_bits_[0] |= 0x00000080u;
}
void ResponseReplayInfo::clear_has_data_build() {
  _has_bits_[0] &= ~0x00000080u;
}
void ResponseReplayInfo::clear_data_build() {
  data_build_ = 0u;
  clear_has_data_build();
}
 ::google::protobuf::uint32 ResponseReplayInfo::data_build() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseReplayInfo.data_build)
  return data_build_;
}
 void ResponseReplayInfo::set_data_build(::google::protobuf::uint32 value) {
  set_has_data_build();
  data_build_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseReplayInfo.data_build)
}

// optional uint32 base_build = 8;
bool ResponseReplayInfo::has_base_build() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ResponseReplayInfo::set_has_base_build() {
  _has_bits_[0] |= 0x00000100u;
}
void ResponseReplayInfo::clear_has_base_build() {
  _has_bits_[0] &= ~0x00000100u;
}
void ResponseReplayInfo::clear_base_build() {
  base_build_ = 0u;
  clear_has_base_build();
}
 ::google::protobuf::uint32 ResponseReplayInfo::base_build() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseReplayInfo.base_build)
  return base_build_;
}
 void ResponseReplayInfo::set_base_build(::google::protobuf::uint32 value) {
  set_has_base_build();
  base_build_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseReplayInfo.base_build)
}

// optional .SC2APIProtocol.ResponseReplayInfo.Error error = 9;
bool ResponseReplayInfo::has_error() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ResponseReplayInfo::set_has_error() {
  _has_bits_[0] |= 0x00000200u;
}
void ResponseReplayInfo::clear_has_error() {
  _has_bits_[0] &= ~0x00000200u;
}
void ResponseReplayInfo::clear_error() {
  error_ = 1;
  clear_has_error();
}
 ::SC2APIProtocol::ResponseReplayInfo_Error ResponseReplayInfo::error() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseReplayInfo.error)
  return static_cast< ::SC2APIProtocol::ResponseReplayInfo_Error >(error_);
}
 void ResponseReplayInfo::set_error(::SC2APIProtocol::ResponseReplayInfo_Error value) {
  assert(::SC2APIProtocol::ResponseReplayInfo_Error_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseReplayInfo.error)
}

// optional string error_details = 10;
bool ResponseReplayInfo::has_error_details() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ResponseReplayInfo::set_has_error_details() {
  _has_bits_[0] |= 0x00000400u;
}
void ResponseReplayInfo::clear_has_error_details() {
  _has_bits_[0] &= ~0x00000400u;
}
void ResponseReplayInfo::clear_error_details() {
  error_details_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error_details();
}
 const ::std::string& ResponseReplayInfo::error_details() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseReplayInfo.error_details)
  return error_details_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseReplayInfo::set_error_details(const ::std::string& value) {
  set_has_error_details();
  error_details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseReplayInfo.error_details)
}
 void ResponseReplayInfo::set_error_details(const char* value) {
  set_has_error_details();
  error_details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ResponseReplayInfo.error_details)
}
 void ResponseReplayInfo::set_error_details(const char* value, size_t size) {
  set_has_error_details();
  error_details_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ResponseReplayInfo.error_details)
}
 ::std::string* ResponseReplayInfo::mutable_error_details() {
  set_has_error_details();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseReplayInfo.error_details)
  return error_details_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponseReplayInfo::release_error_details() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ResponseReplayInfo.error_details)
  clear_has_error_details();
  return error_details_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponseReplayInfo::set_allocated_error_details(::std::string* error_details) {
  if (error_details != NULL) {
    set_has_error_details();
  } else {
    clear_has_error_details();
  }
  error_details_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error_details);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ResponseReplayInfo.error_details)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestAvailableMaps::RequestAvailableMaps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestAvailableMaps)
}

void RequestAvailableMaps::InitAsDefaultInstance() {
}

RequestAvailableMaps::RequestAvailableMaps(const RequestAvailableMaps& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestAvailableMaps)
}

void RequestAvailableMaps::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAvailableMaps::~RequestAvailableMaps() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestAvailableMaps)
  SharedDtor();
}

void RequestAvailableMaps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAvailableMaps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAvailableMaps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAvailableMaps_descriptor_;
}

const RequestAvailableMaps& RequestAvailableMaps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

RequestAvailableMaps* RequestAvailableMaps::default_instance_ = NULL;

RequestAvailableMaps* RequestAvailableMaps::New(::google::protobuf::Arena* arena) const {
  RequestAvailableMaps* n = new RequestAvailableMaps;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestAvailableMaps::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestAvailableMaps)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestAvailableMaps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestAvailableMaps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestAvailableMaps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestAvailableMaps)
  return false;
#undef DO_
}

void RequestAvailableMaps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestAvailableMaps)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestAvailableMaps)
}

::google::protobuf::uint8* RequestAvailableMaps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestAvailableMaps)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestAvailableMaps)
  return target;
}

int RequestAvailableMaps::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestAvailableMaps)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAvailableMaps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestAvailableMaps)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestAvailableMaps* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestAvailableMaps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestAvailableMaps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestAvailableMaps)
    MergeFrom(*source);
  }
}

void RequestAvailableMaps::MergeFrom(const RequestAvailableMaps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestAvailableMaps)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestAvailableMaps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestAvailableMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAvailableMaps::CopyFrom(const RequestAvailableMaps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestAvailableMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAvailableMaps::IsInitialized() const {

  return true;
}

void RequestAvailableMaps::Swap(RequestAvailableMaps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestAvailableMaps::InternalSwap(RequestAvailableMaps* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestAvailableMaps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAvailableMaps_descriptor_;
  metadata.reflection = RequestAvailableMaps_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestAvailableMaps

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseAvailableMaps::kLocalMapPathsFieldNumber;
const int ResponseAvailableMaps::kBattlenetMapNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseAvailableMaps::ResponseAvailableMaps()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseAvailableMaps)
}

void ResponseAvailableMaps::InitAsDefaultInstance() {
}

ResponseAvailableMaps::ResponseAvailableMaps(const ResponseAvailableMaps& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseAvailableMaps)
}

void ResponseAvailableMaps::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseAvailableMaps::~ResponseAvailableMaps() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseAvailableMaps)
  SharedDtor();
}

void ResponseAvailableMaps::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseAvailableMaps::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseAvailableMaps::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseAvailableMaps_descriptor_;
}

const ResponseAvailableMaps& ResponseAvailableMaps::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ResponseAvailableMaps* ResponseAvailableMaps::default_instance_ = NULL;

ResponseAvailableMaps* ResponseAvailableMaps::New(::google::protobuf::Arena* arena) const {
  ResponseAvailableMaps* n = new ResponseAvailableMaps;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseAvailableMaps::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseAvailableMaps)
  local_map_paths_.Clear();
  battlenet_map_names_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseAvailableMaps::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseAvailableMaps)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string local_map_paths = 1;
      case 1: {
        if (tag == 10) {
         parse_local_map_paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_local_map_paths()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->local_map_paths(this->local_map_paths_size() - 1).data(),
            this->local_map_paths(this->local_map_paths_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseAvailableMaps.local_map_paths");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_local_map_paths;
        if (input->ExpectTag(18)) goto parse_battlenet_map_names;
        break;
      }

      // repeated string battlenet_map_names = 2;
      case 2: {
        if (tag == 18) {
         parse_battlenet_map_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_battlenet_map_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->battlenet_map_names(this->battlenet_map_names_size() - 1).data(),
            this->battlenet_map_names(this->battlenet_map_names_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponseAvailableMaps.battlenet_map_names");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_battlenet_map_names;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseAvailableMaps)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseAvailableMaps)
  return false;
#undef DO_
}

void ResponseAvailableMaps::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseAvailableMaps)
  // repeated string local_map_paths = 1;
  for (int i = 0; i < this->local_map_paths_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_map_paths(i).data(), this->local_map_paths(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseAvailableMaps.local_map_paths");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->local_map_paths(i), output);
  }

  // repeated string battlenet_map_names = 2;
  for (int i = 0; i < this->battlenet_map_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battlenet_map_names(i).data(), this->battlenet_map_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseAvailableMaps.battlenet_map_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->battlenet_map_names(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseAvailableMaps)
}

::google::protobuf::uint8* ResponseAvailableMaps::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseAvailableMaps)
  // repeated string local_map_paths = 1;
  for (int i = 0; i < this->local_map_paths_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->local_map_paths(i).data(), this->local_map_paths(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseAvailableMaps.local_map_paths");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->local_map_paths(i), target);
  }

  // repeated string battlenet_map_names = 2;
  for (int i = 0; i < this->battlenet_map_names_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->battlenet_map_names(i).data(), this->battlenet_map_names(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponseAvailableMaps.battlenet_map_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->battlenet_map_names(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseAvailableMaps)
  return target;
}

int ResponseAvailableMaps::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseAvailableMaps)
  int total_size = 0;

  // repeated string local_map_paths = 1;
  total_size += 1 * this->local_map_paths_size();
  for (int i = 0; i < this->local_map_paths_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->local_map_paths(i));
  }

  // repeated string battlenet_map_names = 2;
  total_size += 1 * this->battlenet_map_names_size();
  for (int i = 0; i < this->battlenet_map_names_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->battlenet_map_names(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseAvailableMaps::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseAvailableMaps)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseAvailableMaps* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseAvailableMaps>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseAvailableMaps)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseAvailableMaps)
    MergeFrom(*source);
  }
}

void ResponseAvailableMaps::MergeFrom(const ResponseAvailableMaps& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseAvailableMaps)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  local_map_paths_.MergeFrom(from.local_map_paths_);
  battlenet_map_names_.MergeFrom(from.battlenet_map_names_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseAvailableMaps::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseAvailableMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseAvailableMaps::CopyFrom(const ResponseAvailableMaps& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseAvailableMaps)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseAvailableMaps::IsInitialized() const {

  return true;
}

void ResponseAvailableMaps::Swap(ResponseAvailableMaps* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseAvailableMaps::InternalSwap(ResponseAvailableMaps* other) {
  local_map_paths_.UnsafeArenaSwap(&other->local_map_paths_);
  battlenet_map_names_.UnsafeArenaSwap(&other->battlenet_map_names_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseAvailableMaps::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseAvailableMaps_descriptor_;
  metadata.reflection = ResponseAvailableMaps_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseAvailableMaps

// repeated string local_map_paths = 1;
int ResponseAvailableMaps::local_map_paths_size() const {
  return local_map_paths_.size();
}
void ResponseAvailableMaps::clear_local_map_paths() {
  local_map_paths_.Clear();
}
 const ::std::string& ResponseAvailableMaps::local_map_paths(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseAvailableMaps.local_map_paths)
  return local_map_paths_.Get(index);
}
 ::std::string* ResponseAvailableMaps::mutable_local_map_paths(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseAvailableMaps.local_map_paths)
  return local_map_paths_.Mutable(index);
}
 void ResponseAvailableMaps::set_local_map_paths(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseAvailableMaps.local_map_paths)
  local_map_paths_.Mutable(index)->assign(value);
}
 void ResponseAvailableMaps::set_local_map_paths(int index, const char* value) {
  local_map_paths_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ResponseAvailableMaps.local_map_paths)
}
 void ResponseAvailableMaps::set_local_map_paths(int index, const char* value, size_t size) {
  local_map_paths_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ResponseAvailableMaps.local_map_paths)
}
 ::std::string* ResponseAvailableMaps::add_local_map_paths() {
  // @@protoc_insertion_point(field_add_mutable:SC2APIProtocol.ResponseAvailableMaps.local_map_paths)
  return local_map_paths_.Add();
}
 void ResponseAvailableMaps::add_local_map_paths(const ::std::string& value) {
  local_map_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseAvailableMaps.local_map_paths)
}
 void ResponseAvailableMaps::add_local_map_paths(const char* value) {
  local_map_paths_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SC2APIProtocol.ResponseAvailableMaps.local_map_paths)
}
 void ResponseAvailableMaps::add_local_map_paths(const char* value, size_t size) {
  local_map_paths_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SC2APIProtocol.ResponseAvailableMaps.local_map_paths)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResponseAvailableMaps::local_map_paths() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseAvailableMaps.local_map_paths)
  return local_map_paths_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ResponseAvailableMaps::mutable_local_map_paths() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseAvailableMaps.local_map_paths)
  return &local_map_paths_;
}

// repeated string battlenet_map_names = 2;
int ResponseAvailableMaps::battlenet_map_names_size() const {
  return battlenet_map_names_.size();
}
void ResponseAvailableMaps::clear_battlenet_map_names() {
  battlenet_map_names_.Clear();
}
 const ::std::string& ResponseAvailableMaps::battlenet_map_names(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseAvailableMaps.battlenet_map_names)
  return battlenet_map_names_.Get(index);
}
 ::std::string* ResponseAvailableMaps::mutable_battlenet_map_names(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponseAvailableMaps.battlenet_map_names)
  return battlenet_map_names_.Mutable(index);
}
 void ResponseAvailableMaps::set_battlenet_map_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseAvailableMaps.battlenet_map_names)
  battlenet_map_names_.Mutable(index)->assign(value);
}
 void ResponseAvailableMaps::set_battlenet_map_names(int index, const char* value) {
  battlenet_map_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ResponseAvailableMaps.battlenet_map_names)
}
 void ResponseAvailableMaps::set_battlenet_map_names(int index, const char* value, size_t size) {
  battlenet_map_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ResponseAvailableMaps.battlenet_map_names)
}
 ::std::string* ResponseAvailableMaps::add_battlenet_map_names() {
  // @@protoc_insertion_point(field_add_mutable:SC2APIProtocol.ResponseAvailableMaps.battlenet_map_names)
  return battlenet_map_names_.Add();
}
 void ResponseAvailableMaps::add_battlenet_map_names(const ::std::string& value) {
  battlenet_map_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:SC2APIProtocol.ResponseAvailableMaps.battlenet_map_names)
}
 void ResponseAvailableMaps::add_battlenet_map_names(const char* value) {
  battlenet_map_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:SC2APIProtocol.ResponseAvailableMaps.battlenet_map_names)
}
 void ResponseAvailableMaps::add_battlenet_map_names(const char* value, size_t size) {
  battlenet_map_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:SC2APIProtocol.ResponseAvailableMaps.battlenet_map_names)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
ResponseAvailableMaps::battlenet_map_names() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.ResponseAvailableMaps.battlenet_map_names)
  return battlenet_map_names_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
ResponseAvailableMaps::mutable_battlenet_map_names() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.ResponseAvailableMaps.battlenet_map_names)
  return &battlenet_map_names_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestSaveMap::kMapPathFieldNumber;
const int RequestSaveMap::kMapDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestSaveMap::RequestSaveMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestSaveMap)
}

void RequestSaveMap::InitAsDefaultInstance() {
}

RequestSaveMap::RequestSaveMap(const RequestSaveMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestSaveMap)
}

void RequestSaveMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  map_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestSaveMap::~RequestSaveMap() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestSaveMap)
  SharedDtor();
}

void RequestSaveMap::SharedDtor() {
  map_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void RequestSaveMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestSaveMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestSaveMap_descriptor_;
}

const RequestSaveMap& RequestSaveMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

RequestSaveMap* RequestSaveMap::default_instance_ = NULL;

RequestSaveMap* RequestSaveMap::New(::google::protobuf::Arena* arena) const {
  RequestSaveMap* n = new RequestSaveMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestSaveMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestSaveMap)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_map_path()) {
      map_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_map_data()) {
      map_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestSaveMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestSaveMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string map_path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->map_path().data(), this->map_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.RequestSaveMap.map_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_map_data;
        break;
      }

      // optional bytes map_data = 2;
      case 2: {
        if (tag == 18) {
         parse_map_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_map_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestSaveMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestSaveMap)
  return false;
#undef DO_
}

void RequestSaveMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestSaveMap)
  // optional string map_path = 1;
  if (has_map_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_path().data(), this->map_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.RequestSaveMap.map_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->map_path(), output);
  }

  // optional bytes map_data = 2;
  if (has_map_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->map_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestSaveMap)
}

::google::protobuf::uint8* RequestSaveMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestSaveMap)
  // optional string map_path = 1;
  if (has_map_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->map_path().data(), this->map_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.RequestSaveMap.map_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->map_path(), target);
  }

  // optional bytes map_data = 2;
  if (has_map_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->map_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestSaveMap)
  return target;
}

int RequestSaveMap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestSaveMap)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string map_path = 1;
    if (has_map_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_path());
    }

    // optional bytes map_data = 2;
    if (has_map_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->map_data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestSaveMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestSaveMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestSaveMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestSaveMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestSaveMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestSaveMap)
    MergeFrom(*source);
  }
}

void RequestSaveMap::MergeFrom(const RequestSaveMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestSaveMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_path()) {
      set_has_map_path();
      map_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_path_);
    }
    if (from.has_map_data()) {
      set_has_map_data();
      map_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestSaveMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestSaveMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSaveMap::CopyFrom(const RequestSaveMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestSaveMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSaveMap::IsInitialized() const {

  return true;
}

void RequestSaveMap::Swap(RequestSaveMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestSaveMap::InternalSwap(RequestSaveMap* other) {
  map_path_.Swap(&other->map_path_);
  map_data_.Swap(&other->map_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestSaveMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestSaveMap_descriptor_;
  metadata.reflection = RequestSaveMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestSaveMap

// optional string map_path = 1;
bool RequestSaveMap::has_map_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RequestSaveMap::set_has_map_path() {
  _has_bits_[0] |= 0x00000001u;
}
void RequestSaveMap::clear_has_map_path() {
  _has_bits_[0] &= ~0x00000001u;
}
void RequestSaveMap::clear_map_path() {
  map_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_path();
}
 const ::std::string& RequestSaveMap::map_path() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestSaveMap.map_path)
  return map_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestSaveMap::set_map_path(const ::std::string& value) {
  set_has_map_path();
  map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestSaveMap.map_path)
}
 void RequestSaveMap::set_map_path(const char* value) {
  set_has_map_path();
  map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.RequestSaveMap.map_path)
}
 void RequestSaveMap::set_map_path(const char* value, size_t size) {
  set_has_map_path();
  map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.RequestSaveMap.map_path)
}
 ::std::string* RequestSaveMap::mutable_map_path() {
  set_has_map_path();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestSaveMap.map_path)
  return map_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestSaveMap::release_map_path() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RequestSaveMap.map_path)
  clear_has_map_path();
  return map_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestSaveMap::set_allocated_map_path(::std::string* map_path) {
  if (map_path != NULL) {
    set_has_map_path();
  } else {
    clear_has_map_path();
  }
  map_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_path);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestSaveMap.map_path)
}

// optional bytes map_data = 2;
bool RequestSaveMap::has_map_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RequestSaveMap::set_has_map_data() {
  _has_bits_[0] |= 0x00000002u;
}
void RequestSaveMap::clear_has_map_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void RequestSaveMap::clear_map_data() {
  map_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_map_data();
}
 const ::std::string& RequestSaveMap::map_data() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestSaveMap.map_data)
  return map_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestSaveMap::set_map_data(const ::std::string& value) {
  set_has_map_data();
  map_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.RequestSaveMap.map_data)
}
 void RequestSaveMap::set_map_data(const char* value) {
  set_has_map_data();
  map_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.RequestSaveMap.map_data)
}
 void RequestSaveMap::set_map_data(const void* value, size_t size) {
  set_has_map_data();
  map_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.RequestSaveMap.map_data)
}
 ::std::string* RequestSaveMap::mutable_map_data() {
  set_has_map_data();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestSaveMap.map_data)
  return map_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* RequestSaveMap::release_map_data() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RequestSaveMap.map_data)
  clear_has_map_data();
  return map_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void RequestSaveMap::set_allocated_map_data(::std::string* map_data) {
  if (map_data != NULL) {
    set_has_map_data();
  } else {
    clear_has_map_data();
  }
  map_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_data);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RequestSaveMap.map_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ResponseSaveMap_Error_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseSaveMap_Error_descriptor_;
}
bool ResponseSaveMap_Error_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ResponseSaveMap_Error ResponseSaveMap::InvalidMapData;
const ResponseSaveMap_Error ResponseSaveMap::Error_MIN;
const ResponseSaveMap_Error ResponseSaveMap::Error_MAX;
const int ResponseSaveMap::Error_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseSaveMap::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseSaveMap::ResponseSaveMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseSaveMap)
}

void ResponseSaveMap::InitAsDefaultInstance() {
}

ResponseSaveMap::ResponseSaveMap(const ResponseSaveMap& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseSaveMap)
}

void ResponseSaveMap::SharedCtor() {
  _cached_size_ = 0;
  error_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseSaveMap::~ResponseSaveMap() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseSaveMap)
  SharedDtor();
}

void ResponseSaveMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseSaveMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseSaveMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseSaveMap_descriptor_;
}

const ResponseSaveMap& ResponseSaveMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ResponseSaveMap* ResponseSaveMap::default_instance_ = NULL;

ResponseSaveMap* ResponseSaveMap::New(::google::protobuf::Arena* arena) const {
  ResponseSaveMap* n = new ResponseSaveMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseSaveMap::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseSaveMap)
  error_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseSaveMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseSaveMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ResponseSaveMap.Error error = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ResponseSaveMap_Error_IsValid(value)) {
            set_error(static_cast< ::SC2APIProtocol::ResponseSaveMap_Error >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseSaveMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseSaveMap)
  return false;
#undef DO_
}

void ResponseSaveMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseSaveMap)
  // optional .SC2APIProtocol.ResponseSaveMap.Error error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseSaveMap)
}

::google::protobuf::uint8* ResponseSaveMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseSaveMap)
  // optional .SC2APIProtocol.ResponseSaveMap.Error error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseSaveMap)
  return target;
}

int ResponseSaveMap::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseSaveMap)
  int total_size = 0;

  // optional .SC2APIProtocol.ResponseSaveMap.Error error = 1;
  if (has_error()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseSaveMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseSaveMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseSaveMap* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseSaveMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseSaveMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseSaveMap)
    MergeFrom(*source);
  }
}

void ResponseSaveMap::MergeFrom(const ResponseSaveMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseSaveMap)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseSaveMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseSaveMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseSaveMap::CopyFrom(const ResponseSaveMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseSaveMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseSaveMap::IsInitialized() const {

  return true;
}

void ResponseSaveMap::Swap(ResponseSaveMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseSaveMap::InternalSwap(ResponseSaveMap* other) {
  std::swap(error_, other->error_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseSaveMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseSaveMap_descriptor_;
  metadata.reflection = ResponseSaveMap_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseSaveMap

// optional .SC2APIProtocol.ResponseSaveMap.Error error = 1;
bool ResponseSaveMap::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponseSaveMap::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponseSaveMap::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponseSaveMap::clear_error() {
  error_ = 1;
  clear_has_error();
}
 ::SC2APIProtocol::ResponseSaveMap_Error ResponseSaveMap::error() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponseSaveMap.error)
  return static_cast< ::SC2APIProtocol::ResponseSaveMap_Error >(error_);
}
 void ResponseSaveMap::set_error(::SC2APIProtocol::ResponseSaveMap_Error value) {
  assert(::SC2APIProtocol::ResponseSaveMap_Error_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponseSaveMap.error)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestPing::RequestPing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestPing)
}

void RequestPing::InitAsDefaultInstance() {
}

RequestPing::RequestPing(const RequestPing& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestPing)
}

void RequestPing::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestPing::~RequestPing() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestPing)
  SharedDtor();
}

void RequestPing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestPing_descriptor_;
}

const RequestPing& RequestPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

RequestPing* RequestPing::default_instance_ = NULL;

RequestPing* RequestPing::New(::google::protobuf::Arena* arena) const {
  RequestPing* n = new RequestPing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestPing::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestPing)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestPing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestPing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestPing)
  return false;
#undef DO_
}

void RequestPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestPing)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestPing)
}

::google::protobuf::uint8* RequestPing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestPing)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestPing)
  return target;
}

int RequestPing::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestPing)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestPing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestPing)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestPing* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestPing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestPing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestPing)
    MergeFrom(*source);
  }
}

void RequestPing::MergeFrom(const RequestPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestPing)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestPing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestPing::CopyFrom(const RequestPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestPing::IsInitialized() const {

  return true;
}

void RequestPing::Swap(RequestPing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestPing::InternalSwap(RequestPing* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestPing_descriptor_;
  metadata.reflection = RequestPing_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestPing

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponsePing::kGameVersionFieldNumber;
const int ResponsePing::kDataVersionFieldNumber;
const int ResponsePing::kDataBuildFieldNumber;
const int ResponsePing::kBaseBuildFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponsePing::ResponsePing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponsePing)
}

void ResponsePing::InitAsDefaultInstance() {
}

ResponsePing::ResponsePing(const ResponsePing& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponsePing)
}

void ResponsePing::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  game_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_build_ = 0u;
  base_build_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponsePing::~ResponsePing() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponsePing)
  SharedDtor();
}

void ResponsePing::SharedDtor() {
  game_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResponsePing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponsePing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponsePing_descriptor_;
}

const ResponsePing& ResponsePing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ResponsePing* ResponsePing::default_instance_ = NULL;

ResponsePing* ResponsePing::New(::google::protobuf::Arena* arena) const {
  ResponsePing* n = new ResponsePing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponsePing::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponsePing)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ResponsePing, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ResponsePing*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(data_build_, base_build_);
    if (has_game_version()) {
      game_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_data_version()) {
      data_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponsePing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponsePing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string game_version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->game_version().data(), this->game_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponsePing.game_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data_version;
        break;
      }

      // optional string data_version = 2;
      case 2: {
        if (tag == 18) {
         parse_data_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_version().data(), this->data_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ResponsePing.data_version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data_build;
        break;
      }

      // optional uint32 data_build = 3;
      case 3: {
        if (tag == 24) {
         parse_data_build:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_build_)));
          set_has_data_build();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_base_build;
        break;
      }

      // optional uint32 base_build = 4;
      case 4: {
        if (tag == 32) {
         parse_base_build:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_build_)));
          set_has_base_build();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponsePing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponsePing)
  return false;
#undef DO_
}

void ResponsePing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponsePing)
  // optional string game_version = 1;
  if (has_game_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_version().data(), this->game_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponsePing.game_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->game_version(), output);
  }

  // optional string data_version = 2;
  if (has_data_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_version().data(), this->data_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponsePing.data_version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data_version(), output);
  }

  // optional uint32 data_build = 3;
  if (has_data_build()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data_build(), output);
  }

  // optional uint32 base_build = 4;
  if (has_base_build()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->base_build(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponsePing)
}

::google::protobuf::uint8* ResponsePing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponsePing)
  // optional string game_version = 1;
  if (has_game_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->game_version().data(), this->game_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponsePing.game_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->game_version(), target);
  }

  // optional string data_version = 2;
  if (has_data_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_version().data(), this->data_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ResponsePing.data_version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data_version(), target);
  }

  // optional uint32 data_build = 3;
  if (has_data_build()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->data_build(), target);
  }

  // optional uint32 base_build = 4;
  if (has_base_build()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->base_build(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponsePing)
  return target;
}

int ResponsePing::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponsePing)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string game_version = 1;
    if (has_game_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_version());
    }

    // optional string data_version = 2;
    if (has_data_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_version());
    }

    // optional uint32 data_build = 3;
    if (has_data_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_build());
    }

    // optional uint32 base_build = 4;
    if (has_base_build()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_build());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponsePing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponsePing)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponsePing* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponsePing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponsePing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponsePing)
    MergeFrom(*source);
  }
}

void ResponsePing::MergeFrom(const ResponsePing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponsePing)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_version()) {
      set_has_game_version();
      game_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.game_version_);
    }
    if (from.has_data_version()) {
      set_has_data_version();
      data_version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_version_);
    }
    if (from.has_data_build()) {
      set_data_build(from.data_build());
    }
    if (from.has_base_build()) {
      set_base_build(from.base_build());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponsePing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponsePing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponsePing::CopyFrom(const ResponsePing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponsePing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponsePing::IsInitialized() const {

  return true;
}

void ResponsePing::Swap(ResponsePing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponsePing::InternalSwap(ResponsePing* other) {
  game_version_.Swap(&other->game_version_);
  data_version_.Swap(&other->data_version_);
  std::swap(data_build_, other->data_build_);
  std::swap(base_build_, other->base_build_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponsePing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponsePing_descriptor_;
  metadata.reflection = ResponsePing_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponsePing

// optional string game_version = 1;
bool ResponsePing::has_game_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResponsePing::set_has_game_version() {
  _has_bits_[0] |= 0x00000001u;
}
void ResponsePing::clear_has_game_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResponsePing::clear_game_version() {
  game_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_game_version();
}
 const ::std::string& ResponsePing::game_version() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponsePing.game_version)
  return game_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponsePing::set_game_version(const ::std::string& value) {
  set_has_game_version();
  game_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponsePing.game_version)
}
 void ResponsePing::set_game_version(const char* value) {
  set_has_game_version();
  game_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ResponsePing.game_version)
}
 void ResponsePing::set_game_version(const char* value, size_t size) {
  set_has_game_version();
  game_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ResponsePing.game_version)
}
 ::std::string* ResponsePing::mutable_game_version() {
  set_has_game_version();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponsePing.game_version)
  return game_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponsePing::release_game_version() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ResponsePing.game_version)
  clear_has_game_version();
  return game_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponsePing::set_allocated_game_version(::std::string* game_version) {
  if (game_version != NULL) {
    set_has_game_version();
  } else {
    clear_has_game_version();
  }
  game_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), game_version);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ResponsePing.game_version)
}

// optional string data_version = 2;
bool ResponsePing::has_data_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ResponsePing::set_has_data_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ResponsePing::clear_has_data_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ResponsePing::clear_data_version() {
  data_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data_version();
}
 const ::std::string& ResponsePing::data_version() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponsePing.data_version)
  return data_version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponsePing::set_data_version(const ::std::string& value) {
  set_has_data_version();
  data_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponsePing.data_version)
}
 void ResponsePing::set_data_version(const char* value) {
  set_has_data_version();
  data_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ResponsePing.data_version)
}
 void ResponsePing::set_data_version(const char* value, size_t size) {
  set_has_data_version();
  data_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ResponsePing.data_version)
}
 ::std::string* ResponsePing::mutable_data_version() {
  set_has_data_version();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ResponsePing.data_version)
  return data_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResponsePing::release_data_version() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ResponsePing.data_version)
  clear_has_data_version();
  return data_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResponsePing::set_allocated_data_version(::std::string* data_version) {
  if (data_version != NULL) {
    set_has_data_version();
  } else {
    clear_has_data_version();
  }
  data_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_version);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ResponsePing.data_version)
}

// optional uint32 data_build = 3;
bool ResponsePing::has_data_build() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ResponsePing::set_has_data_build() {
  _has_bits_[0] |= 0x00000004u;
}
void ResponsePing::clear_has_data_build() {
  _has_bits_[0] &= ~0x00000004u;
}
void ResponsePing::clear_data_build() {
  data_build_ = 0u;
  clear_has_data_build();
}
 ::google::protobuf::uint32 ResponsePing::data_build() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponsePing.data_build)
  return data_build_;
}
 void ResponsePing::set_data_build(::google::protobuf::uint32 value) {
  set_has_data_build();
  data_build_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponsePing.data_build)
}

// optional uint32 base_build = 4;
bool ResponsePing::has_base_build() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ResponsePing::set_has_base_build() {
  _has_bits_[0] |= 0x00000008u;
}
void ResponsePing::clear_has_base_build() {
  _has_bits_[0] &= ~0x00000008u;
}
void ResponsePing::clear_base_build() {
  base_build_ = 0u;
  clear_has_base_build();
}
 ::google::protobuf::uint32 ResponsePing::base_build() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ResponsePing.base_build)
  return base_build_;
}
 void ResponsePing::set_base_build(::google::protobuf::uint32 value) {
  set_has_base_build();
  base_build_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ResponsePing.base_build)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestDebug::kDebugFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestDebug::RequestDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.RequestDebug)
}

void RequestDebug::InitAsDefaultInstance() {
}

RequestDebug::RequestDebug(const RequestDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.RequestDebug)
}

void RequestDebug::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestDebug::~RequestDebug() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.RequestDebug)
  SharedDtor();
}

void RequestDebug::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestDebug_descriptor_;
}

const RequestDebug& RequestDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

RequestDebug* RequestDebug::default_instance_ = NULL;

RequestDebug* RequestDebug::New(::google::protobuf::Arena* arena) const {
  RequestDebug* n = new RequestDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.RequestDebug)
  debug_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RequestDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.RequestDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SC2APIProtocol.DebugCommand debug = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_debug:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_debug()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_debug;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.RequestDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.RequestDebug)
  return false;
#undef DO_
}

void RequestDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.RequestDebug)
  // repeated .SC2APIProtocol.DebugCommand debug = 1;
  for (unsigned int i = 0, n = this->debug_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->debug(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.RequestDebug)
}

::google::protobuf::uint8* RequestDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.RequestDebug)
  // repeated .SC2APIProtocol.DebugCommand debug = 1;
  for (unsigned int i = 0, n = this->debug_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->debug(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.RequestDebug)
  return target;
}

int RequestDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.RequestDebug)
  int total_size = 0;

  // repeated .SC2APIProtocol.DebugCommand debug = 1;
  total_size += 1 * this->debug_size();
  for (int i = 0; i < this->debug_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->debug(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.RequestDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RequestDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.RequestDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.RequestDebug)
    MergeFrom(*source);
  }
}

void RequestDebug::MergeFrom(const RequestDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.RequestDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  debug_.MergeFrom(from.debug_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RequestDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.RequestDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestDebug::CopyFrom(const RequestDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.RequestDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestDebug::IsInitialized() const {

  return true;
}

void RequestDebug::Swap(RequestDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestDebug::InternalSwap(RequestDebug* other) {
  debug_.UnsafeArenaSwap(&other->debug_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestDebug_descriptor_;
  metadata.reflection = RequestDebug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestDebug

// repeated .SC2APIProtocol.DebugCommand debug = 1;
int RequestDebug::debug_size() const {
  return debug_.size();
}
void RequestDebug::clear_debug() {
  debug_.Clear();
}
const ::SC2APIProtocol::DebugCommand& RequestDebug::debug(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RequestDebug.debug)
  return debug_.Get(index);
}
::SC2APIProtocol::DebugCommand* RequestDebug::mutable_debug(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RequestDebug.debug)
  return debug_.Mutable(index);
}
::SC2APIProtocol::DebugCommand* RequestDebug::add_debug() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.RequestDebug.debug)
  return debug_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::DebugCommand >*
RequestDebug::mutable_debug() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.RequestDebug.debug)
  return &debug_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::DebugCommand >&
RequestDebug::debug() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.RequestDebug.debug)
  return debug_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseDebug::ResponseDebug()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ResponseDebug)
}

void ResponseDebug::InitAsDefaultInstance() {
}

ResponseDebug::ResponseDebug(const ResponseDebug& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ResponseDebug)
}

void ResponseDebug::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResponseDebug::~ResponseDebug() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ResponseDebug)
  SharedDtor();
}

void ResponseDebug::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResponseDebug::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseDebug::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResponseDebug_descriptor_;
}

const ResponseDebug& ResponseDebug::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ResponseDebug* ResponseDebug::default_instance_ = NULL;

ResponseDebug* ResponseDebug::New(::google::protobuf::Arena* arena) const {
  ResponseDebug* n = new ResponseDebug;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ResponseDebug)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ResponseDebug::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ResponseDebug)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ResponseDebug)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ResponseDebug)
  return false;
#undef DO_
}

void ResponseDebug::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ResponseDebug)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ResponseDebug)
}

::google::protobuf::uint8* ResponseDebug::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ResponseDebug)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ResponseDebug)
  return target;
}

int ResponseDebug::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ResponseDebug)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseDebug::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ResponseDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ResponseDebug* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseDebug>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ResponseDebug)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ResponseDebug)
    MergeFrom(*source);
  }
}

void ResponseDebug::MergeFrom(const ResponseDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ResponseDebug)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ResponseDebug::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ResponseDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseDebug::CopyFrom(const ResponseDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ResponseDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseDebug::IsInitialized() const {

  return true;
}

void ResponseDebug::Swap(ResponseDebug* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseDebug::InternalSwap(ResponseDebug* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseDebug::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResponseDebug_descriptor_;
  metadata.reflection = ResponseDebug_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseDebug

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerSetup::kTypeFieldNumber;
const int PlayerSetup::kRaceFieldNumber;
const int PlayerSetup::kDifficultyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerSetup::PlayerSetup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.PlayerSetup)
}

void PlayerSetup::InitAsDefaultInstance() {
}

PlayerSetup::PlayerSetup(const PlayerSetup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PlayerSetup)
}

void PlayerSetup::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  race_ = 0;
  difficulty_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerSetup::~PlayerSetup() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PlayerSetup)
  SharedDtor();
}

void PlayerSetup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerSetup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerSetup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerSetup_descriptor_;
}

const PlayerSetup& PlayerSetup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

PlayerSetup* PlayerSetup::default_instance_ = NULL;

PlayerSetup* PlayerSetup::New(::google::protobuf::Arena* arena) const {
  PlayerSetup* n = new PlayerSetup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerSetup::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PlayerSetup)
  if (_has_bits_[0 / 32] & 7u) {
    type_ = 1;
    race_ = 0;
    difficulty_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayerSetup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.PlayerSetup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.PlayerType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::PlayerType_IsValid(value)) {
            set_type(static_cast< ::SC2APIProtocol::PlayerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_race;
        break;
      }

      // optional .SC2APIProtocol.Race race = 2;
      case 2: {
        if (tag == 16) {
         parse_race:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Race_IsValid(value)) {
            set_race(static_cast< ::SC2APIProtocol::Race >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_difficulty;
        break;
      }

      // optional .SC2APIProtocol.Difficulty difficulty = 3;
      case 3: {
        if (tag == 24) {
         parse_difficulty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Difficulty_IsValid(value)) {
            set_difficulty(static_cast< ::SC2APIProtocol::Difficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.PlayerSetup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.PlayerSetup)
  return false;
#undef DO_
}

void PlayerSetup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.PlayerSetup)
  // optional .SC2APIProtocol.PlayerType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .SC2APIProtocol.Race race = 2;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->race(), output);
  }

  // optional .SC2APIProtocol.Difficulty difficulty = 3;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->difficulty(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.PlayerSetup)
}

::google::protobuf::uint8* PlayerSetup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PlayerSetup)
  // optional .SC2APIProtocol.PlayerType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .SC2APIProtocol.Race race = 2;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->race(), target);
  }

  // optional .SC2APIProtocol.Difficulty difficulty = 3;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->difficulty(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PlayerSetup)
  return target;
}

int PlayerSetup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PlayerSetup)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .SC2APIProtocol.PlayerType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .SC2APIProtocol.Race race = 2;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->race());
    }

    // optional .SC2APIProtocol.Difficulty difficulty = 3;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->difficulty());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerSetup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.PlayerSetup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerSetup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerSetup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.PlayerSetup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.PlayerSetup)
    MergeFrom(*source);
  }
}

void PlayerSetup::MergeFrom(const PlayerSetup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PlayerSetup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_race()) {
      set_race(from.race());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayerSetup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.PlayerSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerSetup::CopyFrom(const PlayerSetup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PlayerSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSetup::IsInitialized() const {

  return true;
}

void PlayerSetup::Swap(PlayerSetup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerSetup::InternalSwap(PlayerSetup* other) {
  std::swap(type_, other->type_);
  std::swap(race_, other->race_);
  std::swap(difficulty_, other->difficulty_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerSetup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerSetup_descriptor_;
  metadata.reflection = PlayerSetup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerSetup

// optional .SC2APIProtocol.PlayerType type = 1;
bool PlayerSetup::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerSetup::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerSetup::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerSetup::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::SC2APIProtocol::PlayerType PlayerSetup::type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerSetup.type)
  return static_cast< ::SC2APIProtocol::PlayerType >(type_);
}
 void PlayerSetup::set_type(::SC2APIProtocol::PlayerType value) {
  assert(::SC2APIProtocol::PlayerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerSetup.type)
}

// optional .SC2APIProtocol.Race race = 2;
bool PlayerSetup::has_race() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerSetup::set_has_race() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerSetup::clear_has_race() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerSetup::clear_race() {
  race_ = 0;
  clear_has_race();
}
 ::SC2APIProtocol::Race PlayerSetup::race() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerSetup.race)
  return static_cast< ::SC2APIProtocol::Race >(race_);
}
 void PlayerSetup::set_race(::SC2APIProtocol::Race value) {
  assert(::SC2APIProtocol::Race_IsValid(value));
  set_has_race();
  race_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerSetup.race)
}

// optional .SC2APIProtocol.Difficulty difficulty = 3;
bool PlayerSetup::has_difficulty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerSetup::set_has_difficulty() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerSetup::clear_has_difficulty() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerSetup::clear_difficulty() {
  difficulty_ = 1;
  clear_has_difficulty();
}
 ::SC2APIProtocol::Difficulty PlayerSetup::difficulty() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerSetup.difficulty)
  return static_cast< ::SC2APIProtocol::Difficulty >(difficulty_);
}
 void PlayerSetup::set_difficulty(::SC2APIProtocol::Difficulty value) {
  assert(::SC2APIProtocol::Difficulty_IsValid(value));
  set_has_difficulty();
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerSetup.difficulty)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpatialCameraSetup::kWidthFieldNumber;
const int SpatialCameraSetup::kResolutionFieldNumber;
const int SpatialCameraSetup::kMinimapResolutionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpatialCameraSetup::SpatialCameraSetup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.SpatialCameraSetup)
}

void SpatialCameraSetup::InitAsDefaultInstance() {
  resolution_ = const_cast< ::SC2APIProtocol::Size2DI*>(&::SC2APIProtocol::Size2DI::default_instance());
  minimap_resolution_ = const_cast< ::SC2APIProtocol::Size2DI*>(&::SC2APIProtocol::Size2DI::default_instance());
}

SpatialCameraSetup::SpatialCameraSetup(const SpatialCameraSetup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.SpatialCameraSetup)
}

void SpatialCameraSetup::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0;
  resolution_ = NULL;
  minimap_resolution_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpatialCameraSetup::~SpatialCameraSetup() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.SpatialCameraSetup)
  SharedDtor();
}

void SpatialCameraSetup::SharedDtor() {
  if (this != default_instance_) {
    delete resolution_;
    delete minimap_resolution_;
  }
}

void SpatialCameraSetup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpatialCameraSetup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpatialCameraSetup_descriptor_;
}

const SpatialCameraSetup& SpatialCameraSetup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

SpatialCameraSetup* SpatialCameraSetup::default_instance_ = NULL;

SpatialCameraSetup* SpatialCameraSetup::New(::google::protobuf::Arena* arena) const {
  SpatialCameraSetup* n = new SpatialCameraSetup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SpatialCameraSetup::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.SpatialCameraSetup)
  if (_has_bits_[0 / 32] & 7u) {
    width_ = 0;
    if (has_resolution()) {
      if (resolution_ != NULL) resolution_->::SC2APIProtocol::Size2DI::Clear();
    }
    if (has_minimap_resolution()) {
      if (minimap_resolution_ != NULL) minimap_resolution_->::SC2APIProtocol::Size2DI::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SpatialCameraSetup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.SpatialCameraSetup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float width = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resolution;
        break;
      }

      // optional .SC2APIProtocol.Size2DI resolution = 2;
      case 2: {
        if (tag == 18) {
         parse_resolution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resolution()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_minimap_resolution;
        break;
      }

      // optional .SC2APIProtocol.Size2DI minimap_resolution = 3;
      case 3: {
        if (tag == 26) {
         parse_minimap_resolution:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_minimap_resolution()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.SpatialCameraSetup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.SpatialCameraSetup)
  return false;
#undef DO_
}

void SpatialCameraSetup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.SpatialCameraSetup)
  // optional float width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->width(), output);
  }

  // optional .SC2APIProtocol.Size2DI resolution = 2;
  if (has_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->resolution_, output);
  }

  // optional .SC2APIProtocol.Size2DI minimap_resolution = 3;
  if (has_minimap_resolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->minimap_resolution_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.SpatialCameraSetup)
}

::google::protobuf::uint8* SpatialCameraSetup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.SpatialCameraSetup)
  // optional float width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->width(), target);
  }

  // optional .SC2APIProtocol.Size2DI resolution = 2;
  if (has_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->resolution_, false, target);
  }

  // optional .SC2APIProtocol.Size2DI minimap_resolution = 3;
  if (has_minimap_resolution()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->minimap_resolution_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.SpatialCameraSetup)
  return target;
}

int SpatialCameraSetup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.SpatialCameraSetup)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float width = 1;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // optional .SC2APIProtocol.Size2DI resolution = 2;
    if (has_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->resolution_);
    }

    // optional .SC2APIProtocol.Size2DI minimap_resolution = 3;
    if (has_minimap_resolution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->minimap_resolution_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpatialCameraSetup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.SpatialCameraSetup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SpatialCameraSetup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SpatialCameraSetup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.SpatialCameraSetup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.SpatialCameraSetup)
    MergeFrom(*source);
  }
}

void SpatialCameraSetup::MergeFrom(const SpatialCameraSetup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.SpatialCameraSetup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_resolution()) {
      mutable_resolution()->::SC2APIProtocol::Size2DI::MergeFrom(from.resolution());
    }
    if (from.has_minimap_resolution()) {
      mutable_minimap_resolution()->::SC2APIProtocol::Size2DI::MergeFrom(from.minimap_resolution());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SpatialCameraSetup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.SpatialCameraSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpatialCameraSetup::CopyFrom(const SpatialCameraSetup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.SpatialCameraSetup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpatialCameraSetup::IsInitialized() const {

  return true;
}

void SpatialCameraSetup::Swap(SpatialCameraSetup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpatialCameraSetup::InternalSwap(SpatialCameraSetup* other) {
  std::swap(width_, other->width_);
  std::swap(resolution_, other->resolution_);
  std::swap(minimap_resolution_, other->minimap_resolution_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SpatialCameraSetup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpatialCameraSetup_descriptor_;
  metadata.reflection = SpatialCameraSetup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SpatialCameraSetup

// optional float width = 1;
bool SpatialCameraSetup::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SpatialCameraSetup::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
void SpatialCameraSetup::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
void SpatialCameraSetup::clear_width() {
  width_ = 0;
  clear_has_width();
}
 float SpatialCameraSetup::width() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.SpatialCameraSetup.width)
  return width_;
}
 void SpatialCameraSetup::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.SpatialCameraSetup.width)
}

// optional .SC2APIProtocol.Size2DI resolution = 2;
bool SpatialCameraSetup::has_resolution() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SpatialCameraSetup::set_has_resolution() {
  _has_bits_[0] |= 0x00000002u;
}
void SpatialCameraSetup::clear_has_resolution() {
  _has_bits_[0] &= ~0x00000002u;
}
void SpatialCameraSetup::clear_resolution() {
  if (resolution_ != NULL) resolution_->::SC2APIProtocol::Size2DI::Clear();
  clear_has_resolution();
}
const ::SC2APIProtocol::Size2DI& SpatialCameraSetup::resolution() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.SpatialCameraSetup.resolution)
  return resolution_ != NULL ? *resolution_ : *default_instance_->resolution_;
}
::SC2APIProtocol::Size2DI* SpatialCameraSetup::mutable_resolution() {
  set_has_resolution();
  if (resolution_ == NULL) {
    resolution_ = new ::SC2APIProtocol::Size2DI;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.SpatialCameraSetup.resolution)
  return resolution_;
}
::SC2APIProtocol::Size2DI* SpatialCameraSetup::release_resolution() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.SpatialCameraSetup.resolution)
  clear_has_resolution();
  ::SC2APIProtocol::Size2DI* temp = resolution_;
  resolution_ = NULL;
  return temp;
}
void SpatialCameraSetup::set_allocated_resolution(::SC2APIProtocol::Size2DI* resolution) {
  delete resolution_;
  resolution_ = resolution;
  if (resolution) {
    set_has_resolution();
  } else {
    clear_has_resolution();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.SpatialCameraSetup.resolution)
}

// optional .SC2APIProtocol.Size2DI minimap_resolution = 3;
bool SpatialCameraSetup::has_minimap_resolution() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SpatialCameraSetup::set_has_minimap_resolution() {
  _has_bits_[0] |= 0x00000004u;
}
void SpatialCameraSetup::clear_has_minimap_resolution() {
  _has_bits_[0] &= ~0x00000004u;
}
void SpatialCameraSetup::clear_minimap_resolution() {
  if (minimap_resolution_ != NULL) minimap_resolution_->::SC2APIProtocol::Size2DI::Clear();
  clear_has_minimap_resolution();
}
const ::SC2APIProtocol::Size2DI& SpatialCameraSetup::minimap_resolution() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.SpatialCameraSetup.minimap_resolution)
  return minimap_resolution_ != NULL ? *minimap_resolution_ : *default_instance_->minimap_resolution_;
}
::SC2APIProtocol::Size2DI* SpatialCameraSetup::mutable_minimap_resolution() {
  set_has_minimap_resolution();
  if (minimap_resolution_ == NULL) {
    minimap_resolution_ = new ::SC2APIProtocol::Size2DI;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.SpatialCameraSetup.minimap_resolution)
  return minimap_resolution_;
}
::SC2APIProtocol::Size2DI* SpatialCameraSetup::release_minimap_resolution() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.SpatialCameraSetup.minimap_resolution)
  clear_has_minimap_resolution();
  ::SC2APIProtocol::Size2DI* temp = minimap_resolution_;
  minimap_resolution_ = NULL;
  return temp;
}
void SpatialCameraSetup::set_allocated_minimap_resolution(::SC2APIProtocol::Size2DI* minimap_resolution) {
  delete minimap_resolution_;
  minimap_resolution_ = minimap_resolution;
  if (minimap_resolution) {
    set_has_minimap_resolution();
  } else {
    clear_has_minimap_resolution();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.SpatialCameraSetup.minimap_resolution)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InterfaceOptions::kRawFieldNumber;
const int InterfaceOptions::kScoreFieldNumber;
const int InterfaceOptions::kFeatureLayerFieldNumber;
const int InterfaceOptions::kRenderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InterfaceOptions::InterfaceOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.InterfaceOptions)
}

void InterfaceOptions::InitAsDefaultInstance() {
  feature_layer_ = const_cast< ::SC2APIProtocol::SpatialCameraSetup*>(&::SC2APIProtocol::SpatialCameraSetup::default_instance());
  render_ = const_cast< ::SC2APIProtocol::SpatialCameraSetup*>(&::SC2APIProtocol::SpatialCameraSetup::default_instance());
}

InterfaceOptions::InterfaceOptions(const InterfaceOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.InterfaceOptions)
}

void InterfaceOptions::SharedCtor() {
  _cached_size_ = 0;
  raw_ = false;
  score_ = false;
  feature_layer_ = NULL;
  render_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InterfaceOptions::~InterfaceOptions() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.InterfaceOptions)
  SharedDtor();
}

void InterfaceOptions::SharedDtor() {
  if (this != default_instance_) {
    delete feature_layer_;
    delete render_;
  }
}

void InterfaceOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InterfaceOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InterfaceOptions_descriptor_;
}

const InterfaceOptions& InterfaceOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

InterfaceOptions* InterfaceOptions::default_instance_ = NULL;

InterfaceOptions* InterfaceOptions::New(::google::protobuf::Arena* arena) const {
  InterfaceOptions* n = new InterfaceOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InterfaceOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.InterfaceOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(InterfaceOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<InterfaceOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(raw_, score_);
    if (has_feature_layer()) {
      if (feature_layer_ != NULL) feature_layer_->::SC2APIProtocol::SpatialCameraSetup::Clear();
    }
    if (has_render()) {
      if (render_ != NULL) render_->::SC2APIProtocol::SpatialCameraSetup::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InterfaceOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.InterfaceOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool raw = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &raw_)));
          set_has_raw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional bool score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_feature_layer;
        break;
      }

      // optional .SC2APIProtocol.SpatialCameraSetup feature_layer = 3;
      case 3: {
        if (tag == 26) {
         parse_feature_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feature_layer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_render;
        break;
      }

      // optional .SC2APIProtocol.SpatialCameraSetup render = 4;
      case 4: {
        if (tag == 34) {
         parse_render:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_render()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.InterfaceOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.InterfaceOptions)
  return false;
#undef DO_
}

void InterfaceOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.InterfaceOptions)
  // optional bool raw = 1;
  if (has_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->raw(), output);
  }

  // optional bool score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->score(), output);
  }

  // optional .SC2APIProtocol.SpatialCameraSetup feature_layer = 3;
  if (has_feature_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->feature_layer_, output);
  }

  // optional .SC2APIProtocol.SpatialCameraSetup render = 4;
  if (has_render()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->render_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.InterfaceOptions)
}

::google::protobuf::uint8* InterfaceOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.InterfaceOptions)
  // optional bool raw = 1;
  if (has_raw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->raw(), target);
  }

  // optional bool score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->score(), target);
  }

  // optional .SC2APIProtocol.SpatialCameraSetup feature_layer = 3;
  if (has_feature_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->feature_layer_, false, target);
  }

  // optional .SC2APIProtocol.SpatialCameraSetup render = 4;
  if (has_render()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->render_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.InterfaceOptions)
  return target;
}

int InterfaceOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.InterfaceOptions)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional bool raw = 1;
    if (has_raw()) {
      total_size += 1 + 1;
    }

    // optional bool score = 2;
    if (has_score()) {
      total_size += 1 + 1;
    }

    // optional .SC2APIProtocol.SpatialCameraSetup feature_layer = 3;
    if (has_feature_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->feature_layer_);
    }

    // optional .SC2APIProtocol.SpatialCameraSetup render = 4;
    if (has_render()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->render_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InterfaceOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.InterfaceOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InterfaceOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InterfaceOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.InterfaceOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.InterfaceOptions)
    MergeFrom(*source);
  }
}

void InterfaceOptions::MergeFrom(const InterfaceOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.InterfaceOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raw()) {
      set_raw(from.raw());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_feature_layer()) {
      mutable_feature_layer()->::SC2APIProtocol::SpatialCameraSetup::MergeFrom(from.feature_layer());
    }
    if (from.has_render()) {
      mutable_render()->::SC2APIProtocol::SpatialCameraSetup::MergeFrom(from.render());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InterfaceOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.InterfaceOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterfaceOptions::CopyFrom(const InterfaceOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.InterfaceOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterfaceOptions::IsInitialized() const {

  return true;
}

void InterfaceOptions::Swap(InterfaceOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InterfaceOptions::InternalSwap(InterfaceOptions* other) {
  std::swap(raw_, other->raw_);
  std::swap(score_, other->score_);
  std::swap(feature_layer_, other->feature_layer_);
  std::swap(render_, other->render_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InterfaceOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InterfaceOptions_descriptor_;
  metadata.reflection = InterfaceOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InterfaceOptions

// optional bool raw = 1;
bool InterfaceOptions::has_raw() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InterfaceOptions::set_has_raw() {
  _has_bits_[0] |= 0x00000001u;
}
void InterfaceOptions::clear_has_raw() {
  _has_bits_[0] &= ~0x00000001u;
}
void InterfaceOptions::clear_raw() {
  raw_ = false;
  clear_has_raw();
}
 bool InterfaceOptions::raw() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.InterfaceOptions.raw)
  return raw_;
}
 void InterfaceOptions::set_raw(bool value) {
  set_has_raw();
  raw_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.InterfaceOptions.raw)
}

// optional bool score = 2;
bool InterfaceOptions::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InterfaceOptions::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
void InterfaceOptions::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
void InterfaceOptions::clear_score() {
  score_ = false;
  clear_has_score();
}
 bool InterfaceOptions::score() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.InterfaceOptions.score)
  return score_;
}
 void InterfaceOptions::set_score(bool value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.InterfaceOptions.score)
}

// optional .SC2APIProtocol.SpatialCameraSetup feature_layer = 3;
bool InterfaceOptions::has_feature_layer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void InterfaceOptions::set_has_feature_layer() {
  _has_bits_[0] |= 0x00000004u;
}
void InterfaceOptions::clear_has_feature_layer() {
  _has_bits_[0] &= ~0x00000004u;
}
void InterfaceOptions::clear_feature_layer() {
  if (feature_layer_ != NULL) feature_layer_->::SC2APIProtocol::SpatialCameraSetup::Clear();
  clear_has_feature_layer();
}
const ::SC2APIProtocol::SpatialCameraSetup& InterfaceOptions::feature_layer() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.InterfaceOptions.feature_layer)
  return feature_layer_ != NULL ? *feature_layer_ : *default_instance_->feature_layer_;
}
::SC2APIProtocol::SpatialCameraSetup* InterfaceOptions::mutable_feature_layer() {
  set_has_feature_layer();
  if (feature_layer_ == NULL) {
    feature_layer_ = new ::SC2APIProtocol::SpatialCameraSetup;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.InterfaceOptions.feature_layer)
  return feature_layer_;
}
::SC2APIProtocol::SpatialCameraSetup* InterfaceOptions::release_feature_layer() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.InterfaceOptions.feature_layer)
  clear_has_feature_layer();
  ::SC2APIProtocol::SpatialCameraSetup* temp = feature_layer_;
  feature_layer_ = NULL;
  return temp;
}
void InterfaceOptions::set_allocated_feature_layer(::SC2APIProtocol::SpatialCameraSetup* feature_layer) {
  delete feature_layer_;
  feature_layer_ = feature_layer;
  if (feature_layer) {
    set_has_feature_layer();
  } else {
    clear_has_feature_layer();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.InterfaceOptions.feature_layer)
}

// optional .SC2APIProtocol.SpatialCameraSetup render = 4;
bool InterfaceOptions::has_render() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void InterfaceOptions::set_has_render() {
  _has_bits_[0] |= 0x00000008u;
}
void InterfaceOptions::clear_has_render() {
  _has_bits_[0] &= ~0x00000008u;
}
void InterfaceOptions::clear_render() {
  if (render_ != NULL) render_->::SC2APIProtocol::SpatialCameraSetup::Clear();
  clear_has_render();
}
const ::SC2APIProtocol::SpatialCameraSetup& InterfaceOptions::render() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.InterfaceOptions.render)
  return render_ != NULL ? *render_ : *default_instance_->render_;
}
::SC2APIProtocol::SpatialCameraSetup* InterfaceOptions::mutable_render() {
  set_has_render();
  if (render_ == NULL) {
    render_ = new ::SC2APIProtocol::SpatialCameraSetup;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.InterfaceOptions.render)
  return render_;
}
::SC2APIProtocol::SpatialCameraSetup* InterfaceOptions::release_render() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.InterfaceOptions.render)
  clear_has_render();
  ::SC2APIProtocol::SpatialCameraSetup* temp = render_;
  render_ = NULL;
  return temp;
}
void InterfaceOptions::set_allocated_render(::SC2APIProtocol::SpatialCameraSetup* render) {
  delete render_;
  render_ = render;
  if (render) {
    set_has_render();
  } else {
    clear_has_render();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.InterfaceOptions.render)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerInfo::kPlayerIdFieldNumber;
const int PlayerInfo::kTypeFieldNumber;
const int PlayerInfo::kRaceRequestedFieldNumber;
const int PlayerInfo::kRaceActualFieldNumber;
const int PlayerInfo::kDifficultyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.PlayerInfo)
}

void PlayerInfo::InitAsDefaultInstance() {
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PlayerInfo)
}

void PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  type_ = 1;
  race_requested_ = 0;
  race_actual_ = 0;
  difficulty_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PlayerInfo)
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New(::google::protobuf::Arena* arena) const {
  PlayerInfo* n = new PlayerInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PlayerInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(race_requested_, race_actual_);
    player_id_ = 0u;
    type_ = 1;
    difficulty_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.PlayerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .SC2APIProtocol.PlayerType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::PlayerType_IsValid(value)) {
            set_type(static_cast< ::SC2APIProtocol::PlayerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_race_requested;
        break;
      }

      // optional .SC2APIProtocol.Race race_requested = 3;
      case 3: {
        if (tag == 24) {
         parse_race_requested:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Race_IsValid(value)) {
            set_race_requested(static_cast< ::SC2APIProtocol::Race >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_race_actual;
        break;
      }

      // optional .SC2APIProtocol.Race race_actual = 4;
      case 4: {
        if (tag == 32) {
         parse_race_actual:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Race_IsValid(value)) {
            set_race_actual(static_cast< ::SC2APIProtocol::Race >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_difficulty;
        break;
      }

      // optional .SC2APIProtocol.Difficulty difficulty = 5;
      case 5: {
        if (tag == 40) {
         parse_difficulty:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Difficulty_IsValid(value)) {
            set_difficulty(static_cast< ::SC2APIProtocol::Difficulty >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.PlayerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.PlayerInfo)
  return false;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.PlayerInfo)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional .SC2APIProtocol.PlayerType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .SC2APIProtocol.Race race_requested = 3;
  if (has_race_requested()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->race_requested(), output);
  }

  // optional .SC2APIProtocol.Race race_actual = 4;
  if (has_race_actual()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->race_actual(), output);
  }

  // optional .SC2APIProtocol.Difficulty difficulty = 5;
  if (has_difficulty()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->difficulty(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.PlayerInfo)
}

::google::protobuf::uint8* PlayerInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PlayerInfo)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional .SC2APIProtocol.PlayerType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .SC2APIProtocol.Race race_requested = 3;
  if (has_race_requested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->race_requested(), target);
  }

  // optional .SC2APIProtocol.Race race_actual = 4;
  if (has_race_actual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->race_actual(), target);
  }

  // optional .SC2APIProtocol.Difficulty difficulty = 5;
  if (has_difficulty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->difficulty(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PlayerInfo)
  return target;
}

int PlayerInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PlayerInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional .SC2APIProtocol.PlayerType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .SC2APIProtocol.Race race_requested = 3;
    if (has_race_requested()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->race_requested());
    }

    // optional .SC2APIProtocol.Race race_actual = 4;
    if (has_race_actual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->race_actual());
    }

    // optional .SC2APIProtocol.Difficulty difficulty = 5;
    if (has_difficulty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->difficulty());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.PlayerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.PlayerInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.PlayerInfo)
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PlayerInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_race_requested()) {
      set_race_requested(from.race_requested());
    }
    if (from.has_race_actual()) {
      set_race_actual(from.race_actual());
    }
    if (from.has_difficulty()) {
      set_difficulty(from.difficulty());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {

  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerInfo::InternalSwap(PlayerInfo* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(type_, other->type_);
  std::swap(race_requested_, other->race_requested_);
  std::swap(race_actual_, other->race_actual_);
  std::swap(difficulty_, other->difficulty_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerInfo

// optional uint32 player_id = 1;
bool PlayerInfo::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerInfo::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerInfo::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerInfo::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
 ::google::protobuf::uint32 PlayerInfo::player_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerInfo.player_id)
  return player_id_;
}
 void PlayerInfo::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerInfo.player_id)
}

// optional .SC2APIProtocol.PlayerType type = 2;
bool PlayerInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerInfo::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::SC2APIProtocol::PlayerType PlayerInfo::type() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerInfo.type)
  return static_cast< ::SC2APIProtocol::PlayerType >(type_);
}
 void PlayerInfo::set_type(::SC2APIProtocol::PlayerType value) {
  assert(::SC2APIProtocol::PlayerType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerInfo.type)
}

// optional .SC2APIProtocol.Race race_requested = 3;
bool PlayerInfo::has_race_requested() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerInfo::set_has_race_requested() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerInfo::clear_has_race_requested() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerInfo::clear_race_requested() {
  race_requested_ = 0;
  clear_has_race_requested();
}
 ::SC2APIProtocol::Race PlayerInfo::race_requested() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerInfo.race_requested)
  return static_cast< ::SC2APIProtocol::Race >(race_requested_);
}
 void PlayerInfo::set_race_requested(::SC2APIProtocol::Race value) {
  assert(::SC2APIProtocol::Race_IsValid(value));
  set_has_race_requested();
  race_requested_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerInfo.race_requested)
}

// optional .SC2APIProtocol.Race race_actual = 4;
bool PlayerInfo::has_race_actual() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayerInfo::set_has_race_actual() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayerInfo::clear_has_race_actual() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayerInfo::clear_race_actual() {
  race_actual_ = 0;
  clear_has_race_actual();
}
 ::SC2APIProtocol::Race PlayerInfo::race_actual() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerInfo.race_actual)
  return static_cast< ::SC2APIProtocol::Race >(race_actual_);
}
 void PlayerInfo::set_race_actual(::SC2APIProtocol::Race value) {
  assert(::SC2APIProtocol::Race_IsValid(value));
  set_has_race_actual();
  race_actual_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerInfo.race_actual)
}

// optional .SC2APIProtocol.Difficulty difficulty = 5;
bool PlayerInfo::has_difficulty() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlayerInfo::set_has_difficulty() {
  _has_bits_[0] |= 0x00000010u;
}
void PlayerInfo::clear_has_difficulty() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlayerInfo::clear_difficulty() {
  difficulty_ = 1;
  clear_has_difficulty();
}
 ::SC2APIProtocol::Difficulty PlayerInfo::difficulty() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerInfo.difficulty)
  return static_cast< ::SC2APIProtocol::Difficulty >(difficulty_);
}
 void PlayerInfo::set_difficulty(::SC2APIProtocol::Difficulty value) {
  assert(::SC2APIProtocol::Difficulty_IsValid(value));
  set_has_difficulty();
  difficulty_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerInfo.difficulty)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerCommon::kPlayerIdFieldNumber;
const int PlayerCommon::kMineralsFieldNumber;
const int PlayerCommon::kVespeneFieldNumber;
const int PlayerCommon::kFoodCapFieldNumber;
const int PlayerCommon::kFoodUsedFieldNumber;
const int PlayerCommon::kFoodArmyFieldNumber;
const int PlayerCommon::kFoodWorkersFieldNumber;
const int PlayerCommon::kIdleWorkerCountFieldNumber;
const int PlayerCommon::kArmyCountFieldNumber;
const int PlayerCommon::kWarpGateCountFieldNumber;
const int PlayerCommon::kLarvaCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerCommon::PlayerCommon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.PlayerCommon)
}

void PlayerCommon::InitAsDefaultInstance() {
}

PlayerCommon::PlayerCommon(const PlayerCommon& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PlayerCommon)
}

void PlayerCommon::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  minerals_ = 0u;
  vespene_ = 0u;
  food_cap_ = 0u;
  food_used_ = 0u;
  food_army_ = 0u;
  food_workers_ = 0u;
  idle_worker_count_ = 0u;
  army_count_ = 0u;
  warp_gate_count_ = 0u;
  larva_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerCommon::~PlayerCommon() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PlayerCommon)
  SharedDtor();
}

void PlayerCommon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerCommon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerCommon_descriptor_;
}

const PlayerCommon& PlayerCommon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

PlayerCommon* PlayerCommon::default_instance_ = NULL;

PlayerCommon* PlayerCommon::New(::google::protobuf::Arena* arena) const {
  PlayerCommon* n = new PlayerCommon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PlayerCommon)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PlayerCommon, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PlayerCommon*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(player_id_, idle_worker_count_);
  }
  ZR_(army_count_, larva_count_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayerCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.PlayerCommon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_minerals;
        break;
      }

      // optional uint32 minerals = 2;
      case 2: {
        if (tag == 16) {
         parse_minerals:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minerals_)));
          set_has_minerals();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_vespene;
        break;
      }

      // optional uint32 vespene = 3;
      case 3: {
        if (tag == 24) {
         parse_vespene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vespene_)));
          set_has_vespene();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_food_cap;
        break;
      }

      // optional uint32 food_cap = 4;
      case 4: {
        if (tag == 32) {
         parse_food_cap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_cap_)));
          set_has_food_cap();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_food_used;
        break;
      }

      // optional uint32 food_used = 5;
      case 5: {
        if (tag == 40) {
         parse_food_used:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_used_)));
          set_has_food_used();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_food_army;
        break;
      }

      // optional uint32 food_army = 6;
      case 6: {
        if (tag == 48) {
         parse_food_army:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_army_)));
          set_has_food_army();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_food_workers;
        break;
      }

      // optional uint32 food_workers = 7;
      case 7: {
        if (tag == 56) {
         parse_food_workers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &food_workers_)));
          set_has_food_workers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_idle_worker_count;
        break;
      }

      // optional uint32 idle_worker_count = 8;
      case 8: {
        if (tag == 64) {
         parse_idle_worker_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idle_worker_count_)));
          set_has_idle_worker_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_army_count;
        break;
      }

      // optional uint32 army_count = 9;
      case 9: {
        if (tag == 72) {
         parse_army_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &army_count_)));
          set_has_army_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_warp_gate_count;
        break;
      }

      // optional uint32 warp_gate_count = 10;
      case 10: {
        if (tag == 80) {
         parse_warp_gate_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warp_gate_count_)));
          set_has_warp_gate_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_larva_count;
        break;
      }

      // optional uint32 larva_count = 11;
      case 11: {
        if (tag == 88) {
         parse_larva_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &larva_count_)));
          set_has_larva_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.PlayerCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.PlayerCommon)
  return false;
#undef DO_
}

void PlayerCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.PlayerCommon)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional uint32 minerals = 2;
  if (has_minerals()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->minerals(), output);
  }

  // optional uint32 vespene = 3;
  if (has_vespene()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->vespene(), output);
  }

  // optional uint32 food_cap = 4;
  if (has_food_cap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->food_cap(), output);
  }

  // optional uint32 food_used = 5;
  if (has_food_used()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->food_used(), output);
  }

  // optional uint32 food_army = 6;
  if (has_food_army()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->food_army(), output);
  }

  // optional uint32 food_workers = 7;
  if (has_food_workers()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->food_workers(), output);
  }

  // optional uint32 idle_worker_count = 8;
  if (has_idle_worker_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->idle_worker_count(), output);
  }

  // optional uint32 army_count = 9;
  if (has_army_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->army_count(), output);
  }

  // optional uint32 warp_gate_count = 10;
  if (has_warp_gate_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->warp_gate_count(), output);
  }

  // optional uint32 larva_count = 11;
  if (has_larva_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->larva_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.PlayerCommon)
}

::google::protobuf::uint8* PlayerCommon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PlayerCommon)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional uint32 minerals = 2;
  if (has_minerals()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->minerals(), target);
  }

  // optional uint32 vespene = 3;
  if (has_vespene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->vespene(), target);
  }

  // optional uint32 food_cap = 4;
  if (has_food_cap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->food_cap(), target);
  }

  // optional uint32 food_used = 5;
  if (has_food_used()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->food_used(), target);
  }

  // optional uint32 food_army = 6;
  if (has_food_army()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->food_army(), target);
  }

  // optional uint32 food_workers = 7;
  if (has_food_workers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->food_workers(), target);
  }

  // optional uint32 idle_worker_count = 8;
  if (has_idle_worker_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->idle_worker_count(), target);
  }

  // optional uint32 army_count = 9;
  if (has_army_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->army_count(), target);
  }

  // optional uint32 warp_gate_count = 10;
  if (has_warp_gate_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->warp_gate_count(), target);
  }

  // optional uint32 larva_count = 11;
  if (has_larva_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->larva_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PlayerCommon)
  return target;
}

int PlayerCommon::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PlayerCommon)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional uint32 minerals = 2;
    if (has_minerals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minerals());
    }

    // optional uint32 vespene = 3;
    if (has_vespene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vespene());
    }

    // optional uint32 food_cap = 4;
    if (has_food_cap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food_cap());
    }

    // optional uint32 food_used = 5;
    if (has_food_used()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food_used());
    }

    // optional uint32 food_army = 6;
    if (has_food_army()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food_army());
    }

    // optional uint32 food_workers = 7;
    if (has_food_workers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->food_workers());
    }

    // optional uint32 idle_worker_count = 8;
    if (has_idle_worker_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idle_worker_count());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional uint32 army_count = 9;
    if (has_army_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->army_count());
    }

    // optional uint32 warp_gate_count = 10;
    if (has_warp_gate_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warp_gate_count());
    }

    // optional uint32 larva_count = 11;
    if (has_larva_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->larva_count());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCommon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.PlayerCommon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerCommon* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerCommon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.PlayerCommon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.PlayerCommon)
    MergeFrom(*source);
  }
}

void PlayerCommon::MergeFrom(const PlayerCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PlayerCommon)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_minerals()) {
      set_minerals(from.minerals());
    }
    if (from.has_vespene()) {
      set_vespene(from.vespene());
    }
    if (from.has_food_cap()) {
      set_food_cap(from.food_cap());
    }
    if (from.has_food_used()) {
      set_food_used(from.food_used());
    }
    if (from.has_food_army()) {
      set_food_army(from.food_army());
    }
    if (from.has_food_workers()) {
      set_food_workers(from.food_workers());
    }
    if (from.has_idle_worker_count()) {
      set_idle_worker_count(from.idle_worker_count());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_army_count()) {
      set_army_count(from.army_count());
    }
    if (from.has_warp_gate_count()) {
      set_warp_gate_count(from.warp_gate_count());
    }
    if (from.has_larva_count()) {
      set_larva_count(from.larva_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayerCommon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.PlayerCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCommon::CopyFrom(const PlayerCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PlayerCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCommon::IsInitialized() const {

  return true;
}

void PlayerCommon::Swap(PlayerCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerCommon::InternalSwap(PlayerCommon* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(minerals_, other->minerals_);
  std::swap(vespene_, other->vespene_);
  std::swap(food_cap_, other->food_cap_);
  std::swap(food_used_, other->food_used_);
  std::swap(food_army_, other->food_army_);
  std::swap(food_workers_, other->food_workers_);
  std::swap(idle_worker_count_, other->idle_worker_count_);
  std::swap(army_count_, other->army_count_);
  std::swap(warp_gate_count_, other->warp_gate_count_);
  std::swap(larva_count_, other->larva_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerCommon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerCommon_descriptor_;
  metadata.reflection = PlayerCommon_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerCommon

// optional uint32 player_id = 1;
bool PlayerCommon::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerCommon::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerCommon::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerCommon::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
 ::google::protobuf::uint32 PlayerCommon::player_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerCommon.player_id)
  return player_id_;
}
 void PlayerCommon::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerCommon.player_id)
}

// optional uint32 minerals = 2;
bool PlayerCommon::has_minerals() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerCommon::set_has_minerals() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerCommon::clear_has_minerals() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerCommon::clear_minerals() {
  minerals_ = 0u;
  clear_has_minerals();
}
 ::google::protobuf::uint32 PlayerCommon::minerals() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerCommon.minerals)
  return minerals_;
}
 void PlayerCommon::set_minerals(::google::protobuf::uint32 value) {
  set_has_minerals();
  minerals_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerCommon.minerals)
}

// optional uint32 vespene = 3;
bool PlayerCommon::has_vespene() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PlayerCommon::set_has_vespene() {
  _has_bits_[0] |= 0x00000004u;
}
void PlayerCommon::clear_has_vespene() {
  _has_bits_[0] &= ~0x00000004u;
}
void PlayerCommon::clear_vespene() {
  vespene_ = 0u;
  clear_has_vespene();
}
 ::google::protobuf::uint32 PlayerCommon::vespene() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerCommon.vespene)
  return vespene_;
}
 void PlayerCommon::set_vespene(::google::protobuf::uint32 value) {
  set_has_vespene();
  vespene_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerCommon.vespene)
}

// optional uint32 food_cap = 4;
bool PlayerCommon::has_food_cap() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PlayerCommon::set_has_food_cap() {
  _has_bits_[0] |= 0x00000008u;
}
void PlayerCommon::clear_has_food_cap() {
  _has_bits_[0] &= ~0x00000008u;
}
void PlayerCommon::clear_food_cap() {
  food_cap_ = 0u;
  clear_has_food_cap();
}
 ::google::protobuf::uint32 PlayerCommon::food_cap() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerCommon.food_cap)
  return food_cap_;
}
 void PlayerCommon::set_food_cap(::google::protobuf::uint32 value) {
  set_has_food_cap();
  food_cap_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerCommon.food_cap)
}

// optional uint32 food_used = 5;
bool PlayerCommon::has_food_used() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PlayerCommon::set_has_food_used() {
  _has_bits_[0] |= 0x00000010u;
}
void PlayerCommon::clear_has_food_used() {
  _has_bits_[0] &= ~0x00000010u;
}
void PlayerCommon::clear_food_used() {
  food_used_ = 0u;
  clear_has_food_used();
}
 ::google::protobuf::uint32 PlayerCommon::food_used() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerCommon.food_used)
  return food_used_;
}
 void PlayerCommon::set_food_used(::google::protobuf::uint32 value) {
  set_has_food_used();
  food_used_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerCommon.food_used)
}

// optional uint32 food_army = 6;
bool PlayerCommon::has_food_army() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PlayerCommon::set_has_food_army() {
  _has_bits_[0] |= 0x00000020u;
}
void PlayerCommon::clear_has_food_army() {
  _has_bits_[0] &= ~0x00000020u;
}
void PlayerCommon::clear_food_army() {
  food_army_ = 0u;
  clear_has_food_army();
}
 ::google::protobuf::uint32 PlayerCommon::food_army() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerCommon.food_army)
  return food_army_;
}
 void PlayerCommon::set_food_army(::google::protobuf::uint32 value) {
  set_has_food_army();
  food_army_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerCommon.food_army)
}

// optional uint32 food_workers = 7;
bool PlayerCommon::has_food_workers() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PlayerCommon::set_has_food_workers() {
  _has_bits_[0] |= 0x00000040u;
}
void PlayerCommon::clear_has_food_workers() {
  _has_bits_[0] &= ~0x00000040u;
}
void PlayerCommon::clear_food_workers() {
  food_workers_ = 0u;
  clear_has_food_workers();
}
 ::google::protobuf::uint32 PlayerCommon::food_workers() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerCommon.food_workers)
  return food_workers_;
}
 void PlayerCommon::set_food_workers(::google::protobuf::uint32 value) {
  set_has_food_workers();
  food_workers_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerCommon.food_workers)
}

// optional uint32 idle_worker_count = 8;
bool PlayerCommon::has_idle_worker_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PlayerCommon::set_has_idle_worker_count() {
  _has_bits_[0] |= 0x00000080u;
}
void PlayerCommon::clear_has_idle_worker_count() {
  _has_bits_[0] &= ~0x00000080u;
}
void PlayerCommon::clear_idle_worker_count() {
  idle_worker_count_ = 0u;
  clear_has_idle_worker_count();
}
 ::google::protobuf::uint32 PlayerCommon::idle_worker_count() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerCommon.idle_worker_count)
  return idle_worker_count_;
}
 void PlayerCommon::set_idle_worker_count(::google::protobuf::uint32 value) {
  set_has_idle_worker_count();
  idle_worker_count_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerCommon.idle_worker_count)
}

// optional uint32 army_count = 9;
bool PlayerCommon::has_army_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PlayerCommon::set_has_army_count() {
  _has_bits_[0] |= 0x00000100u;
}
void PlayerCommon::clear_has_army_count() {
  _has_bits_[0] &= ~0x00000100u;
}
void PlayerCommon::clear_army_count() {
  army_count_ = 0u;
  clear_has_army_count();
}
 ::google::protobuf::uint32 PlayerCommon::army_count() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerCommon.army_count)
  return army_count_;
}
 void PlayerCommon::set_army_count(::google::protobuf::uint32 value) {
  set_has_army_count();
  army_count_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerCommon.army_count)
}

// optional uint32 warp_gate_count = 10;
bool PlayerCommon::has_warp_gate_count() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PlayerCommon::set_has_warp_gate_count() {
  _has_bits_[0] |= 0x00000200u;
}
void PlayerCommon::clear_has_warp_gate_count() {
  _has_bits_[0] &= ~0x00000200u;
}
void PlayerCommon::clear_warp_gate_count() {
  warp_gate_count_ = 0u;
  clear_has_warp_gate_count();
}
 ::google::protobuf::uint32 PlayerCommon::warp_gate_count() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerCommon.warp_gate_count)
  return warp_gate_count_;
}
 void PlayerCommon::set_warp_gate_count(::google::protobuf::uint32 value) {
  set_has_warp_gate_count();
  warp_gate_count_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerCommon.warp_gate_count)
}

// optional uint32 larva_count = 11;
bool PlayerCommon::has_larva_count() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PlayerCommon::set_has_larva_count() {
  _has_bits_[0] |= 0x00000400u;
}
void PlayerCommon::clear_has_larva_count() {
  _has_bits_[0] &= ~0x00000400u;
}
void PlayerCommon::clear_larva_count() {
  larva_count_ = 0u;
  clear_has_larva_count();
}
 ::google::protobuf::uint32 PlayerCommon::larva_count() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerCommon.larva_count)
  return larva_count_;
}
 void PlayerCommon::set_larva_count(::google::protobuf::uint32 value) {
  set_has_larva_count();
  larva_count_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerCommon.larva_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Observation::kGameLoopFieldNumber;
const int Observation::kPlayerCommonFieldNumber;
const int Observation::kAlertsFieldNumber;
const int Observation::kAbilitiesFieldNumber;
const int Observation::kScoreFieldNumber;
const int Observation::kRawDataFieldNumber;
const int Observation::kFeatureLayerDataFieldNumber;
const int Observation::kRenderDataFieldNumber;
const int Observation::kUiDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Observation::Observation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.Observation)
}

void Observation::InitAsDefaultInstance() {
  player_common_ = const_cast< ::SC2APIProtocol::PlayerCommon*>(&::SC2APIProtocol::PlayerCommon::default_instance());
  score_ = const_cast< ::SC2APIProtocol::Score*>(&::SC2APIProtocol::Score::default_instance());
  raw_data_ = const_cast< ::SC2APIProtocol::ObservationRaw*>(&::SC2APIProtocol::ObservationRaw::default_instance());
  feature_layer_data_ = const_cast< ::SC2APIProtocol::ObservationFeatureLayer*>(&::SC2APIProtocol::ObservationFeatureLayer::default_instance());
  render_data_ = const_cast< ::SC2APIProtocol::ObservationRender*>(&::SC2APIProtocol::ObservationRender::default_instance());
  ui_data_ = const_cast< ::SC2APIProtocol::ObservationUI*>(&::SC2APIProtocol::ObservationUI::default_instance());
}

Observation::Observation(const Observation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Observation)
}

void Observation::SharedCtor() {
  _cached_size_ = 0;
  game_loop_ = 0u;
  player_common_ = NULL;
  score_ = NULL;
  raw_data_ = NULL;
  feature_layer_data_ = NULL;
  render_data_ = NULL;
  ui_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Observation::~Observation() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Observation)
  SharedDtor();
}

void Observation::SharedDtor() {
  if (this != default_instance_) {
    delete player_common_;
    delete score_;
    delete raw_data_;
    delete feature_layer_data_;
    delete render_data_;
    delete ui_data_;
  }
}

void Observation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Observation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Observation_descriptor_;
}

const Observation& Observation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

Observation* Observation::default_instance_ = NULL;

Observation* Observation::New(::google::protobuf::Arena* arena) const {
  Observation* n = new Observation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Observation::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Observation)
  if (_has_bits_[0 / 32] & 243u) {
    game_loop_ = 0u;
    if (has_player_common()) {
      if (player_common_ != NULL) player_common_->::SC2APIProtocol::PlayerCommon::Clear();
    }
    if (has_score()) {
      if (score_ != NULL) score_->::SC2APIProtocol::Score::Clear();
    }
    if (has_raw_data()) {
      if (raw_data_ != NULL) raw_data_->::SC2APIProtocol::ObservationRaw::Clear();
    }
    if (has_feature_layer_data()) {
      if (feature_layer_data_ != NULL) feature_layer_data_->::SC2APIProtocol::ObservationFeatureLayer::Clear();
    }
    if (has_render_data()) {
      if (render_data_ != NULL) render_data_->::SC2APIProtocol::ObservationRender::Clear();
    }
  }
  if (has_ui_data()) {
    if (ui_data_ != NULL) ui_data_->::SC2APIProtocol::ObservationUI::Clear();
  }
  alerts_.Clear();
  abilities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Observation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.Observation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.PlayerCommon player_common = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_common()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_abilities;
        break;
      }

      // repeated .SC2APIProtocol.AvailableAbility abilities = 3;
      case 3: {
        if (tag == 26) {
         parse_abilities:
          DO_(input->IncrementRecursionDepth());
         parse_loop_abilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_abilities()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_abilities;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(34)) goto parse_score;
        break;
      }

      // optional .SC2APIProtocol.Score score = 4;
      case 4: {
        if (tag == 34) {
         parse_score:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_score()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_raw_data;
        break;
      }

      // optional .SC2APIProtocol.ObservationRaw raw_data = 5;
      case 5: {
        if (tag == 42) {
         parse_raw_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raw_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_feature_layer_data;
        break;
      }

      // optional .SC2APIProtocol.ObservationFeatureLayer feature_layer_data = 6;
      case 6: {
        if (tag == 50) {
         parse_feature_layer_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_feature_layer_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_render_data;
        break;
      }

      // optional .SC2APIProtocol.ObservationRender render_data = 7;
      case 7: {
        if (tag == 58) {
         parse_render_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_render_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ui_data;
        break;
      }

      // optional .SC2APIProtocol.ObservationUI ui_data = 8;
      case 8: {
        if (tag == 66) {
         parse_ui_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ui_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_game_loop;
        break;
      }

      // optional uint32 game_loop = 9;
      case 9: {
        if (tag == 72) {
         parse_game_loop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_loop_)));
          set_has_game_loop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_alerts;
        break;
      }

      // repeated .SC2APIProtocol.Alert alerts = 10;
      case 10: {
        if (tag == 80) {
         parse_alerts:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Alert_IsValid(value)) {
            add_alerts(static_cast< ::SC2APIProtocol::Alert >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 10,
                 ::SC2APIProtocol::Alert_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_alerts())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_alerts;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.Observation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.Observation)
  return false;
#undef DO_
}

void Observation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.Observation)
  // optional .SC2APIProtocol.PlayerCommon player_common = 1;
  if (has_player_common()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_common_, output);
  }

  // repeated .SC2APIProtocol.AvailableAbility abilities = 3;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->abilities(i), output);
  }

  // optional .SC2APIProtocol.Score score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->score_, output);
  }

  // optional .SC2APIProtocol.ObservationRaw raw_data = 5;
  if (has_raw_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->raw_data_, output);
  }

  // optional .SC2APIProtocol.ObservationFeatureLayer feature_layer_data = 6;
  if (has_feature_layer_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->feature_layer_data_, output);
  }

  // optional .SC2APIProtocol.ObservationRender render_data = 7;
  if (has_render_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->render_data_, output);
  }

  // optional .SC2APIProtocol.ObservationUI ui_data = 8;
  if (has_ui_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->ui_data_, output);
  }

  // optional uint32 game_loop = 9;
  if (has_game_loop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->game_loop(), output);
  }

  // repeated .SC2APIProtocol.Alert alerts = 10;
  for (int i = 0; i < this->alerts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->alerts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.Observation)
}

::google::protobuf::uint8* Observation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Observation)
  // optional .SC2APIProtocol.PlayerCommon player_common = 1;
  if (has_player_common()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_common_, false, target);
  }

  // repeated .SC2APIProtocol.AvailableAbility abilities = 3;
  for (unsigned int i = 0, n = this->abilities_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->abilities(i), false, target);
  }

  // optional .SC2APIProtocol.Score score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->score_, false, target);
  }

  // optional .SC2APIProtocol.ObservationRaw raw_data = 5;
  if (has_raw_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->raw_data_, false, target);
  }

  // optional .SC2APIProtocol.ObservationFeatureLayer feature_layer_data = 6;
  if (has_feature_layer_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->feature_layer_data_, false, target);
  }

  // optional .SC2APIProtocol.ObservationRender render_data = 7;
  if (has_render_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->render_data_, false, target);
  }

  // optional .SC2APIProtocol.ObservationUI ui_data = 8;
  if (has_ui_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->ui_data_, false, target);
  }

  // optional uint32 game_loop = 9;
  if (has_game_loop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->game_loop(), target);
  }

  // repeated .SC2APIProtocol.Alert alerts = 10;
  for (int i = 0; i < this->alerts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->alerts(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Observation)
  return target;
}

int Observation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Observation)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 243u) {
    // optional uint32 game_loop = 9;
    if (has_game_loop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_loop());
    }

    // optional .SC2APIProtocol.PlayerCommon player_common = 1;
    if (has_player_common()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->player_common_);
    }

    // optional .SC2APIProtocol.Score score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->score_);
    }

    // optional .SC2APIProtocol.ObservationRaw raw_data = 5;
    if (has_raw_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->raw_data_);
    }

    // optional .SC2APIProtocol.ObservationFeatureLayer feature_layer_data = 6;
    if (has_feature_layer_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->feature_layer_data_);
    }

    // optional .SC2APIProtocol.ObservationRender render_data = 7;
    if (has_render_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->render_data_);
    }

  }
  // optional .SC2APIProtocol.ObservationUI ui_data = 8;
  if (has_ui_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ui_data_);
  }

  // repeated .SC2APIProtocol.Alert alerts = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->alerts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->alerts(i));
    }
    total_size += 1 * this->alerts_size() + data_size;
  }

  // repeated .SC2APIProtocol.AvailableAbility abilities = 3;
  total_size += 1 * this->abilities_size();
  for (int i = 0; i < this->abilities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->abilities(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Observation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.Observation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Observation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Observation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.Observation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.Observation)
    MergeFrom(*source);
  }
}

void Observation::MergeFrom(const Observation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Observation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  alerts_.MergeFrom(from.alerts_);
  abilities_.MergeFrom(from.abilities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_game_loop()) {
      set_game_loop(from.game_loop());
    }
    if (from.has_player_common()) {
      mutable_player_common()->::SC2APIProtocol::PlayerCommon::MergeFrom(from.player_common());
    }
    if (from.has_score()) {
      mutable_score()->::SC2APIProtocol::Score::MergeFrom(from.score());
    }
    if (from.has_raw_data()) {
      mutable_raw_data()->::SC2APIProtocol::ObservationRaw::MergeFrom(from.raw_data());
    }
    if (from.has_feature_layer_data()) {
      mutable_feature_layer_data()->::SC2APIProtocol::ObservationFeatureLayer::MergeFrom(from.feature_layer_data());
    }
    if (from.has_render_data()) {
      mutable_render_data()->::SC2APIProtocol::ObservationRender::MergeFrom(from.render_data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ui_data()) {
      mutable_ui_data()->::SC2APIProtocol::ObservationUI::MergeFrom(from.ui_data());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Observation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.Observation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Observation::CopyFrom(const Observation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Observation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Observation::IsInitialized() const {

  return true;
}

void Observation::Swap(Observation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Observation::InternalSwap(Observation* other) {
  std::swap(game_loop_, other->game_loop_);
  std::swap(player_common_, other->player_common_);
  alerts_.UnsafeArenaSwap(&other->alerts_);
  abilities_.UnsafeArenaSwap(&other->abilities_);
  std::swap(score_, other->score_);
  std::swap(raw_data_, other->raw_data_);
  std::swap(feature_layer_data_, other->feature_layer_data_);
  std::swap(render_data_, other->render_data_);
  std::swap(ui_data_, other->ui_data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Observation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Observation_descriptor_;
  metadata.reflection = Observation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Observation

// optional uint32 game_loop = 9;
bool Observation::has_game_loop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Observation::set_has_game_loop() {
  _has_bits_[0] |= 0x00000001u;
}
void Observation::clear_has_game_loop() {
  _has_bits_[0] &= ~0x00000001u;
}
void Observation::clear_game_loop() {
  game_loop_ = 0u;
  clear_has_game_loop();
}
 ::google::protobuf::uint32 Observation::game_loop() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Observation.game_loop)
  return game_loop_;
}
 void Observation::set_game_loop(::google::protobuf::uint32 value) {
  set_has_game_loop();
  game_loop_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Observation.game_loop)
}

// optional .SC2APIProtocol.PlayerCommon player_common = 1;
bool Observation::has_player_common() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Observation::set_has_player_common() {
  _has_bits_[0] |= 0x00000002u;
}
void Observation::clear_has_player_common() {
  _has_bits_[0] &= ~0x00000002u;
}
void Observation::clear_player_common() {
  if (player_common_ != NULL) player_common_->::SC2APIProtocol::PlayerCommon::Clear();
  clear_has_player_common();
}
const ::SC2APIProtocol::PlayerCommon& Observation::player_common() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Observation.player_common)
  return player_common_ != NULL ? *player_common_ : *default_instance_->player_common_;
}
::SC2APIProtocol::PlayerCommon* Observation::mutable_player_common() {
  set_has_player_common();
  if (player_common_ == NULL) {
    player_common_ = new ::SC2APIProtocol::PlayerCommon;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Observation.player_common)
  return player_common_;
}
::SC2APIProtocol::PlayerCommon* Observation::release_player_common() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Observation.player_common)
  clear_has_player_common();
  ::SC2APIProtocol::PlayerCommon* temp = player_common_;
  player_common_ = NULL;
  return temp;
}
void Observation::set_allocated_player_common(::SC2APIProtocol::PlayerCommon* player_common) {
  delete player_common_;
  player_common_ = player_common;
  if (player_common) {
    set_has_player_common();
  } else {
    clear_has_player_common();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Observation.player_common)
}

// repeated .SC2APIProtocol.Alert alerts = 10;
int Observation::alerts_size() const {
  return alerts_.size();
}
void Observation::clear_alerts() {
  alerts_.Clear();
}
 ::SC2APIProtocol::Alert Observation::alerts(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Observation.alerts)
  return static_cast< ::SC2APIProtocol::Alert >(alerts_.Get(index));
}
 void Observation::set_alerts(int index, ::SC2APIProtocol::Alert value) {
  assert(::SC2APIProtocol::Alert_IsValid(value));
  alerts_.Set(index, value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Observation.alerts)
}
 void Observation::add_alerts(::SC2APIProtocol::Alert value) {
  assert(::SC2APIProtocol::Alert_IsValid(value));
  alerts_.Add(value);
  // @@protoc_insertion_point(field_add:SC2APIProtocol.Observation.alerts)
}
 const ::google::protobuf::RepeatedField<int>&
Observation::alerts() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.Observation.alerts)
  return alerts_;
}
 ::google::protobuf::RepeatedField<int>*
Observation::mutable_alerts() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.Observation.alerts)
  return &alerts_;
}

// repeated .SC2APIProtocol.AvailableAbility abilities = 3;
int Observation::abilities_size() const {
  return abilities_.size();
}
void Observation::clear_abilities() {
  abilities_.Clear();
}
const ::SC2APIProtocol::AvailableAbility& Observation::abilities(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Observation.abilities)
  return abilities_.Get(index);
}
::SC2APIProtocol::AvailableAbility* Observation::mutable_abilities(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Observation.abilities)
  return abilities_.Mutable(index);
}
::SC2APIProtocol::AvailableAbility* Observation::add_abilities() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.Observation.abilities)
  return abilities_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::AvailableAbility >*
Observation::mutable_abilities() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.Observation.abilities)
  return &abilities_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::AvailableAbility >&
Observation::abilities() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.Observation.abilities)
  return abilities_;
}

// optional .SC2APIProtocol.Score score = 4;
bool Observation::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Observation::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
void Observation::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
void Observation::clear_score() {
  if (score_ != NULL) score_->::SC2APIProtocol::Score::Clear();
  clear_has_score();
}
const ::SC2APIProtocol::Score& Observation::score() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Observation.score)
  return score_ != NULL ? *score_ : *default_instance_->score_;
}
::SC2APIProtocol::Score* Observation::mutable_score() {
  set_has_score();
  if (score_ == NULL) {
    score_ = new ::SC2APIProtocol::Score;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Observation.score)
  return score_;
}
::SC2APIProtocol::Score* Observation::release_score() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Observation.score)
  clear_has_score();
  ::SC2APIProtocol::Score* temp = score_;
  score_ = NULL;
  return temp;
}
void Observation::set_allocated_score(::SC2APIProtocol::Score* score) {
  delete score_;
  score_ = score;
  if (score) {
    set_has_score();
  } else {
    clear_has_score();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Observation.score)
}

// optional .SC2APIProtocol.ObservationRaw raw_data = 5;
bool Observation::has_raw_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Observation::set_has_raw_data() {
  _has_bits_[0] |= 0x00000020u;
}
void Observation::clear_has_raw_data() {
  _has_bits_[0] &= ~0x00000020u;
}
void Observation::clear_raw_data() {
  if (raw_data_ != NULL) raw_data_->::SC2APIProtocol::ObservationRaw::Clear();
  clear_has_raw_data();
}
const ::SC2APIProtocol::ObservationRaw& Observation::raw_data() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Observation.raw_data)
  return raw_data_ != NULL ? *raw_data_ : *default_instance_->raw_data_;
}
::SC2APIProtocol::ObservationRaw* Observation::mutable_raw_data() {
  set_has_raw_data();
  if (raw_data_ == NULL) {
    raw_data_ = new ::SC2APIProtocol::ObservationRaw;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Observation.raw_data)
  return raw_data_;
}
::SC2APIProtocol::ObservationRaw* Observation::release_raw_data() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Observation.raw_data)
  clear_has_raw_data();
  ::SC2APIProtocol::ObservationRaw* temp = raw_data_;
  raw_data_ = NULL;
  return temp;
}
void Observation::set_allocated_raw_data(::SC2APIProtocol::ObservationRaw* raw_data) {
  delete raw_data_;
  raw_data_ = raw_data;
  if (raw_data) {
    set_has_raw_data();
  } else {
    clear_has_raw_data();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Observation.raw_data)
}

// optional .SC2APIProtocol.ObservationFeatureLayer feature_layer_data = 6;
bool Observation::has_feature_layer_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Observation::set_has_feature_layer_data() {
  _has_bits_[0] |= 0x00000040u;
}
void Observation::clear_has_feature_layer_data() {
  _has_bits_[0] &= ~0x00000040u;
}
void Observation::clear_feature_layer_data() {
  if (feature_layer_data_ != NULL) feature_layer_data_->::SC2APIProtocol::ObservationFeatureLayer::Clear();
  clear_has_feature_layer_data();
}
const ::SC2APIProtocol::ObservationFeatureLayer& Observation::feature_layer_data() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Observation.feature_layer_data)
  return feature_layer_data_ != NULL ? *feature_layer_data_ : *default_instance_->feature_layer_data_;
}
::SC2APIProtocol::ObservationFeatureLayer* Observation::mutable_feature_layer_data() {
  set_has_feature_layer_data();
  if (feature_layer_data_ == NULL) {
    feature_layer_data_ = new ::SC2APIProtocol::ObservationFeatureLayer;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Observation.feature_layer_data)
  return feature_layer_data_;
}
::SC2APIProtocol::ObservationFeatureLayer* Observation::release_feature_layer_data() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Observation.feature_layer_data)
  clear_has_feature_layer_data();
  ::SC2APIProtocol::ObservationFeatureLayer* temp = feature_layer_data_;
  feature_layer_data_ = NULL;
  return temp;
}
void Observation::set_allocated_feature_layer_data(::SC2APIProtocol::ObservationFeatureLayer* feature_layer_data) {
  delete feature_layer_data_;
  feature_layer_data_ = feature_layer_data;
  if (feature_layer_data) {
    set_has_feature_layer_data();
  } else {
    clear_has_feature_layer_data();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Observation.feature_layer_data)
}

// optional .SC2APIProtocol.ObservationRender render_data = 7;
bool Observation::has_render_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Observation::set_has_render_data() {
  _has_bits_[0] |= 0x00000080u;
}
void Observation::clear_has_render_data() {
  _has_bits_[0] &= ~0x00000080u;
}
void Observation::clear_render_data() {
  if (render_data_ != NULL) render_data_->::SC2APIProtocol::ObservationRender::Clear();
  clear_has_render_data();
}
const ::SC2APIProtocol::ObservationRender& Observation::render_data() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Observation.render_data)
  return render_data_ != NULL ? *render_data_ : *default_instance_->render_data_;
}
::SC2APIProtocol::ObservationRender* Observation::mutable_render_data() {
  set_has_render_data();
  if (render_data_ == NULL) {
    render_data_ = new ::SC2APIProtocol::ObservationRender;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Observation.render_data)
  return render_data_;
}
::SC2APIProtocol::ObservationRender* Observation::release_render_data() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Observation.render_data)
  clear_has_render_data();
  ::SC2APIProtocol::ObservationRender* temp = render_data_;
  render_data_ = NULL;
  return temp;
}
void Observation::set_allocated_render_data(::SC2APIProtocol::ObservationRender* render_data) {
  delete render_data_;
  render_data_ = render_data;
  if (render_data) {
    set_has_render_data();
  } else {
    clear_has_render_data();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Observation.render_data)
}

// optional .SC2APIProtocol.ObservationUI ui_data = 8;
bool Observation::has_ui_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Observation::set_has_ui_data() {
  _has_bits_[0] |= 0x00000100u;
}
void Observation::clear_has_ui_data() {
  _has_bits_[0] &= ~0x00000100u;
}
void Observation::clear_ui_data() {
  if (ui_data_ != NULL) ui_data_->::SC2APIProtocol::ObservationUI::Clear();
  clear_has_ui_data();
}
const ::SC2APIProtocol::ObservationUI& Observation::ui_data() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Observation.ui_data)
  return ui_data_ != NULL ? *ui_data_ : *default_instance_->ui_data_;
}
::SC2APIProtocol::ObservationUI* Observation::mutable_ui_data() {
  set_has_ui_data();
  if (ui_data_ == NULL) {
    ui_data_ = new ::SC2APIProtocol::ObservationUI;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Observation.ui_data)
  return ui_data_;
}
::SC2APIProtocol::ObservationUI* Observation::release_ui_data() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Observation.ui_data)
  clear_has_ui_data();
  ::SC2APIProtocol::ObservationUI* temp = ui_data_;
  ui_data_ = NULL;
  return temp;
}
void Observation::set_allocated_ui_data(::SC2APIProtocol::ObservationUI* ui_data) {
  delete ui_data_;
  ui_data_ = ui_data;
  if (ui_data) {
    set_has_ui_data();
  } else {
    clear_has_ui_data();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Observation.ui_data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Action::kActionRawFieldNumber;
const int Action::kActionFeatureLayerFieldNumber;
const int Action::kActionRenderFieldNumber;
const int Action::kActionUiFieldNumber;
const int Action::kChatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action::Action()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.Action)
}

void Action::InitAsDefaultInstance() {
  action_raw_ = const_cast< ::SC2APIProtocol::ActionRaw*>(&::SC2APIProtocol::ActionRaw::default_instance());
  action_feature_layer_ = const_cast< ::SC2APIProtocol::ActionSpatial*>(&::SC2APIProtocol::ActionSpatial::default_instance());
  action_render_ = const_cast< ::SC2APIProtocol::ActionSpatial*>(&::SC2APIProtocol::ActionSpatial::default_instance());
  action_ui_ = const_cast< ::SC2APIProtocol::ActionUI*>(&::SC2APIProtocol::ActionUI::default_instance());
}

Action::Action(const Action& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.Action)
}

void Action::SharedCtor() {
  _cached_size_ = 0;
  action_raw_ = NULL;
  action_feature_layer_ = NULL;
  action_render_ = NULL;
  action_ui_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.Action)
  SharedDtor();
}

void Action::SharedDtor() {
  if (this != default_instance_) {
    delete action_raw_;
    delete action_feature_layer_;
    delete action_render_;
    delete action_ui_;
  }
}

void Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_descriptor_;
}

const Action& Action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

Action* Action::default_instance_ = NULL;

Action* Action::New(::google::protobuf::Arena* arena) const {
  Action* n = new Action;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.Action)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_action_raw()) {
      if (action_raw_ != NULL) action_raw_->::SC2APIProtocol::ActionRaw::Clear();
    }
    if (has_action_feature_layer()) {
      if (action_feature_layer_ != NULL) action_feature_layer_->::SC2APIProtocol::ActionSpatial::Clear();
    }
    if (has_action_render()) {
      if (action_render_ != NULL) action_render_->::SC2APIProtocol::ActionSpatial::Clear();
    }
    if (has_action_ui()) {
      if (action_ui_ != NULL) action_ui_->::SC2APIProtocol::ActionUI::Clear();
    }
  }
  chat_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.Action)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ActionRaw action_raw = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action_raw()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_action_feature_layer;
        break;
      }

      // optional .SC2APIProtocol.ActionSpatial action_feature_layer = 2;
      case 2: {
        if (tag == 18) {
         parse_action_feature_layer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action_feature_layer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_action_render;
        break;
      }

      // optional .SC2APIProtocol.ActionSpatial action_render = 3;
      case 3: {
        if (tag == 26) {
         parse_action_render:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action_render()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_action_ui;
        break;
      }

      // optional .SC2APIProtocol.ActionUI action_ui = 4;
      case 4: {
        if (tag == 34) {
         parse_action_ui:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action_ui()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_chat;
        break;
      }

      // repeated .SC2APIProtocol.ActionChat chat = 5;
      case 5: {
        if (tag == 42) {
         parse_chat:
          DO_(input->IncrementRecursionDepth());
         parse_loop_chat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_chat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_chat;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.Action)
  return false;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.Action)
  // optional .SC2APIProtocol.ActionRaw action_raw = 1;
  if (has_action_raw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->action_raw_, output);
  }

  // optional .SC2APIProtocol.ActionSpatial action_feature_layer = 2;
  if (has_action_feature_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->action_feature_layer_, output);
  }

  // optional .SC2APIProtocol.ActionSpatial action_render = 3;
  if (has_action_render()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->action_render_, output);
  }

  // optional .SC2APIProtocol.ActionUI action_ui = 4;
  if (has_action_ui()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->action_ui_, output);
  }

  // repeated .SC2APIProtocol.ActionChat chat = 5;
  for (unsigned int i = 0, n = this->chat_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->chat(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.Action)
}

::google::protobuf::uint8* Action::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.Action)
  // optional .SC2APIProtocol.ActionRaw action_raw = 1;
  if (has_action_raw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->action_raw_, false, target);
  }

  // optional .SC2APIProtocol.ActionSpatial action_feature_layer = 2;
  if (has_action_feature_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->action_feature_layer_, false, target);
  }

  // optional .SC2APIProtocol.ActionSpatial action_render = 3;
  if (has_action_render()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->action_render_, false, target);
  }

  // optional .SC2APIProtocol.ActionUI action_ui = 4;
  if (has_action_ui()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->action_ui_, false, target);
  }

  // repeated .SC2APIProtocol.ActionChat chat = 5;
  for (unsigned int i = 0, n = this->chat_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->chat(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.Action)
  return target;
}

int Action::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.Action)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .SC2APIProtocol.ActionRaw action_raw = 1;
    if (has_action_raw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->action_raw_);
    }

    // optional .SC2APIProtocol.ActionSpatial action_feature_layer = 2;
    if (has_action_feature_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->action_feature_layer_);
    }

    // optional .SC2APIProtocol.ActionSpatial action_render = 3;
    if (has_action_render()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->action_render_);
    }

    // optional .SC2APIProtocol.ActionUI action_ui = 4;
    if (has_action_ui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->action_ui_);
    }

  }
  // repeated .SC2APIProtocol.ActionChat chat = 5;
  total_size += 1 * this->chat_size();
  for (int i = 0; i < this->chat_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chat(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.Action)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Action* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Action>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.Action)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.Action)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  chat_.MergeFrom(from.chat_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action_raw()) {
      mutable_action_raw()->::SC2APIProtocol::ActionRaw::MergeFrom(from.action_raw());
    }
    if (from.has_action_feature_layer()) {
      mutable_action_feature_layer()->::SC2APIProtocol::ActionSpatial::MergeFrom(from.action_feature_layer());
    }
    if (from.has_action_render()) {
      mutable_action_render()->::SC2APIProtocol::ActionSpatial::MergeFrom(from.action_render());
    }
    if (from.has_action_ui()) {
      mutable_action_ui()->::SC2APIProtocol::ActionUI::MergeFrom(from.action_ui());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {

  return true;
}

void Action::Swap(Action* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action::InternalSwap(Action* other) {
  std::swap(action_raw_, other->action_raw_);
  std::swap(action_feature_layer_, other->action_feature_layer_);
  std::swap(action_render_, other->action_render_);
  std::swap(action_ui_, other->action_ui_);
  chat_.UnsafeArenaSwap(&other->chat_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Action_descriptor_;
  metadata.reflection = Action_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Action

// optional .SC2APIProtocol.ActionRaw action_raw = 1;
bool Action::has_action_raw() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Action::set_has_action_raw() {
  _has_bits_[0] |= 0x00000001u;
}
void Action::clear_has_action_raw() {
  _has_bits_[0] &= ~0x00000001u;
}
void Action::clear_action_raw() {
  if (action_raw_ != NULL) action_raw_->::SC2APIProtocol::ActionRaw::Clear();
  clear_has_action_raw();
}
const ::SC2APIProtocol::ActionRaw& Action::action_raw() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Action.action_raw)
  return action_raw_ != NULL ? *action_raw_ : *default_instance_->action_raw_;
}
::SC2APIProtocol::ActionRaw* Action::mutable_action_raw() {
  set_has_action_raw();
  if (action_raw_ == NULL) {
    action_raw_ = new ::SC2APIProtocol::ActionRaw;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Action.action_raw)
  return action_raw_;
}
::SC2APIProtocol::ActionRaw* Action::release_action_raw() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Action.action_raw)
  clear_has_action_raw();
  ::SC2APIProtocol::ActionRaw* temp = action_raw_;
  action_raw_ = NULL;
  return temp;
}
void Action::set_allocated_action_raw(::SC2APIProtocol::ActionRaw* action_raw) {
  delete action_raw_;
  action_raw_ = action_raw;
  if (action_raw) {
    set_has_action_raw();
  } else {
    clear_has_action_raw();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Action.action_raw)
}

// optional .SC2APIProtocol.ActionSpatial action_feature_layer = 2;
bool Action::has_action_feature_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Action::set_has_action_feature_layer() {
  _has_bits_[0] |= 0x00000002u;
}
void Action::clear_has_action_feature_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
void Action::clear_action_feature_layer() {
  if (action_feature_layer_ != NULL) action_feature_layer_->::SC2APIProtocol::ActionSpatial::Clear();
  clear_has_action_feature_layer();
}
const ::SC2APIProtocol::ActionSpatial& Action::action_feature_layer() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Action.action_feature_layer)
  return action_feature_layer_ != NULL ? *action_feature_layer_ : *default_instance_->action_feature_layer_;
}
::SC2APIProtocol::ActionSpatial* Action::mutable_action_feature_layer() {
  set_has_action_feature_layer();
  if (action_feature_layer_ == NULL) {
    action_feature_layer_ = new ::SC2APIProtocol::ActionSpatial;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Action.action_feature_layer)
  return action_feature_layer_;
}
::SC2APIProtocol::ActionSpatial* Action::release_action_feature_layer() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Action.action_feature_layer)
  clear_has_action_feature_layer();
  ::SC2APIProtocol::ActionSpatial* temp = action_feature_layer_;
  action_feature_layer_ = NULL;
  return temp;
}
void Action::set_allocated_action_feature_layer(::SC2APIProtocol::ActionSpatial* action_feature_layer) {
  delete action_feature_layer_;
  action_feature_layer_ = action_feature_layer;
  if (action_feature_layer) {
    set_has_action_feature_layer();
  } else {
    clear_has_action_feature_layer();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Action.action_feature_layer)
}

// optional .SC2APIProtocol.ActionSpatial action_render = 3;
bool Action::has_action_render() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Action::set_has_action_render() {
  _has_bits_[0] |= 0x00000004u;
}
void Action::clear_has_action_render() {
  _has_bits_[0] &= ~0x00000004u;
}
void Action::clear_action_render() {
  if (action_render_ != NULL) action_render_->::SC2APIProtocol::ActionSpatial::Clear();
  clear_has_action_render();
}
const ::SC2APIProtocol::ActionSpatial& Action::action_render() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Action.action_render)
  return action_render_ != NULL ? *action_render_ : *default_instance_->action_render_;
}
::SC2APIProtocol::ActionSpatial* Action::mutable_action_render() {
  set_has_action_render();
  if (action_render_ == NULL) {
    action_render_ = new ::SC2APIProtocol::ActionSpatial;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Action.action_render)
  return action_render_;
}
::SC2APIProtocol::ActionSpatial* Action::release_action_render() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Action.action_render)
  clear_has_action_render();
  ::SC2APIProtocol::ActionSpatial* temp = action_render_;
  action_render_ = NULL;
  return temp;
}
void Action::set_allocated_action_render(::SC2APIProtocol::ActionSpatial* action_render) {
  delete action_render_;
  action_render_ = action_render;
  if (action_render) {
    set_has_action_render();
  } else {
    clear_has_action_render();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Action.action_render)
}

// optional .SC2APIProtocol.ActionUI action_ui = 4;
bool Action::has_action_ui() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Action::set_has_action_ui() {
  _has_bits_[0] |= 0x00000008u;
}
void Action::clear_has_action_ui() {
  _has_bits_[0] &= ~0x00000008u;
}
void Action::clear_action_ui() {
  if (action_ui_ != NULL) action_ui_->::SC2APIProtocol::ActionUI::Clear();
  clear_has_action_ui();
}
const ::SC2APIProtocol::ActionUI& Action::action_ui() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Action.action_ui)
  return action_ui_ != NULL ? *action_ui_ : *default_instance_->action_ui_;
}
::SC2APIProtocol::ActionUI* Action::mutable_action_ui() {
  set_has_action_ui();
  if (action_ui_ == NULL) {
    action_ui_ = new ::SC2APIProtocol::ActionUI;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Action.action_ui)
  return action_ui_;
}
::SC2APIProtocol::ActionUI* Action::release_action_ui() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.Action.action_ui)
  clear_has_action_ui();
  ::SC2APIProtocol::ActionUI* temp = action_ui_;
  action_ui_ = NULL;
  return temp;
}
void Action::set_allocated_action_ui(::SC2APIProtocol::ActionUI* action_ui) {
  delete action_ui_;
  action_ui_ = action_ui;
  if (action_ui) {
    set_has_action_ui();
  } else {
    clear_has_action_ui();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.Action.action_ui)
}

// repeated .SC2APIProtocol.ActionChat chat = 5;
int Action::chat_size() const {
  return chat_.size();
}
void Action::clear_chat() {
  chat_.Clear();
}
const ::SC2APIProtocol::ActionChat& Action::chat(int index) const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Action.chat)
  return chat_.Get(index);
}
::SC2APIProtocol::ActionChat* Action::mutable_chat(int index) {
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.Action.chat)
  return chat_.Mutable(index);
}
::SC2APIProtocol::ActionChat* Action::add_chat() {
  // @@protoc_insertion_point(field_add:SC2APIProtocol.Action.chat)
  return chat_.Add();
}
::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::ActionChat >*
Action::mutable_chat() {
  // @@protoc_insertion_point(field_mutable_list:SC2APIProtocol.Action.chat)
  return &chat_;
}
const ::google::protobuf::RepeatedPtrField< ::SC2APIProtocol::ActionChat >&
Action::chat() const {
  // @@protoc_insertion_point(field_list:SC2APIProtocol.Action.chat)
  return chat_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* ActionChat_Channel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionChat_Channel_descriptor_;
}
bool ActionChat_Channel_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ActionChat_Channel ActionChat::Broadcast;
const ActionChat_Channel ActionChat::Team;
const ActionChat_Channel ActionChat::Channel_MIN;
const ActionChat_Channel ActionChat::Channel_MAX;
const int ActionChat::Channel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionChat::kChannelFieldNumber;
const int ActionChat::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionChat::ActionChat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionChat)
}

void ActionChat::InitAsDefaultInstance() {
}

ActionChat::ActionChat(const ActionChat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionChat)
}

void ActionChat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  channel_ = 1;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionChat::~ActionChat() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionChat)
  SharedDtor();
}

void ActionChat::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ActionChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionChat_descriptor_;
}

const ActionChat& ActionChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ActionChat* ActionChat::default_instance_ = NULL;

ActionChat* ActionChat::New(::google::protobuf::Arena* arena) const {
  ActionChat* n = new ActionChat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionChat::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionChat)
  if (_has_bits_[0 / 32] & 3u) {
    channel_ = 1;
    if (has_message()) {
      message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SC2APIProtocol.ActionChat.Channel channel = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ActionChat_Channel_IsValid(value)) {
            set_channel(static_cast< ::SC2APIProtocol::ActionChat_Channel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_message;
        break;
      }

      // optional string message = 2;
      case 2: {
        if (tag == 18) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SC2APIProtocol.ActionChat.message");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionChat)
  return false;
#undef DO_
}

void ActionChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionChat)
  // optional .SC2APIProtocol.ActionChat.Channel channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ActionChat.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionChat)
}

::google::protobuf::uint8* ActionChat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionChat)
  // optional .SC2APIProtocol.ActionChat.Channel channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }

  // optional string message = 2;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SC2APIProtocol.ActionChat.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionChat)
  return target;
}

int ActionChat::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionChat)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .SC2APIProtocol.ActionChat.Channel channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // optional string message = 2;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionChat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionChat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionChat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionChat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionChat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionChat)
    MergeFrom(*source);
  }
}

void ActionChat::MergeFrom(const ActionChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionChat)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_message()) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionChat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionChat::CopyFrom(const ActionChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionChat::IsInitialized() const {

  return true;
}

void ActionChat::Swap(ActionChat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionChat::InternalSwap(ActionChat* other) {
  std::swap(channel_, other->channel_);
  message_.Swap(&other->message_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionChat_descriptor_;
  metadata.reflection = ActionChat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionChat

// optional .SC2APIProtocol.ActionChat.Channel channel = 1;
bool ActionChat::has_channel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActionChat::set_has_channel() {
  _has_bits_[0] |= 0x00000001u;
}
void ActionChat::clear_has_channel() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActionChat::clear_channel() {
  channel_ = 1;
  clear_has_channel();
}
 ::SC2APIProtocol::ActionChat_Channel ActionChat::channel() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionChat.channel)
  return static_cast< ::SC2APIProtocol::ActionChat_Channel >(channel_);
}
 void ActionChat::set_channel(::SC2APIProtocol::ActionChat_Channel value) {
  assert(::SC2APIProtocol::ActionChat_Channel_IsValid(value));
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionChat.channel)
}

// optional string message = 2;
bool ActionChat::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActionChat::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
void ActionChat::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActionChat::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
 const ::std::string& ActionChat::message() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionChat.message)
  return message_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ActionChat::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionChat.message)
}
 void ActionChat::set_message(const char* value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ActionChat.message)
}
 void ActionChat::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ActionChat.message)
}
 ::std::string* ActionChat::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ActionChat.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ActionChat::release_message() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ActionChat.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ActionChat::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ActionChat.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionError::kUnitTagFieldNumber;
const int ActionError::kAbilityIdFieldNumber;
const int ActionError::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionError::ActionError()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.ActionError)
}

void ActionError::InitAsDefaultInstance() {
}

ActionError::ActionError(const ActionError& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.ActionError)
}

void ActionError::SharedCtor() {
  _cached_size_ = 0;
  unit_tag_ = GOOGLE_ULONGLONG(0);
  ability_id_ = GOOGLE_ULONGLONG(0);
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActionError::~ActionError() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.ActionError)
  SharedDtor();
}

void ActionError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActionError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActionError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActionError_descriptor_;
}

const ActionError& ActionError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

ActionError* ActionError::default_instance_ = NULL;

ActionError* ActionError::New(::google::protobuf::Arena* arena) const {
  ActionError* n = new ActionError;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ActionError::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.ActionError)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ActionError, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ActionError*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(unit_tag_, ability_id_);
    result_ = 1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ActionError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.ActionError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 unit_tag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unit_tag_)));
          set_has_unit_tag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ability_id;
        break;
      }

      // optional uint64 ability_id = 2;
      case 2: {
        if (tag == 16) {
         parse_ability_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ability_id_)));
          set_has_ability_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .SC2APIProtocol.ActionResult result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::ActionResult_IsValid(value)) {
            set_result(static_cast< ::SC2APIProtocol::ActionResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.ActionError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.ActionError)
  return false;
#undef DO_
}

void ActionError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.ActionError)
  // optional uint64 unit_tag = 1;
  if (has_unit_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->unit_tag(), output);
  }

  // optional uint64 ability_id = 2;
  if (has_ability_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ability_id(), output);
  }

  // optional .SC2APIProtocol.ActionResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.ActionError)
}

::google::protobuf::uint8* ActionError::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.ActionError)
  // optional uint64 unit_tag = 1;
  if (has_unit_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->unit_tag(), target);
  }

  // optional uint64 ability_id = 2;
  if (has_ability_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ability_id(), target);
  }

  // optional .SC2APIProtocol.ActionResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.ActionError)
  return target;
}

int ActionError::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.ActionError)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 unit_tag = 1;
    if (has_unit_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unit_tag());
    }

    // optional uint64 ability_id = 2;
    if (has_ability_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ability_id());
    }

    // optional .SC2APIProtocol.ActionResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActionError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.ActionError)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ActionError* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionError>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.ActionError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.ActionError)
    MergeFrom(*source);
  }
}

void ActionError::MergeFrom(const ActionError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.ActionError)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit_tag()) {
      set_unit_tag(from.unit_tag());
    }
    if (from.has_ability_id()) {
      set_ability_id(from.ability_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ActionError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.ActionError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionError::CopyFrom(const ActionError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.ActionError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionError::IsInitialized() const {

  return true;
}

void ActionError::Swap(ActionError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionError::InternalSwap(ActionError* other) {
  std::swap(unit_tag_, other->unit_tag_);
  std::swap(ability_id_, other->ability_id_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ActionError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActionError_descriptor_;
  metadata.reflection = ActionError_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ActionError

// optional uint64 unit_tag = 1;
bool ActionError::has_unit_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ActionError::set_has_unit_tag() {
  _has_bits_[0] |= 0x00000001u;
}
void ActionError::clear_has_unit_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
void ActionError::clear_unit_tag() {
  unit_tag_ = GOOGLE_ULONGLONG(0);
  clear_has_unit_tag();
}
 ::google::protobuf::uint64 ActionError::unit_tag() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionError.unit_tag)
  return unit_tag_;
}
 void ActionError::set_unit_tag(::google::protobuf::uint64 value) {
  set_has_unit_tag();
  unit_tag_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionError.unit_tag)
}

// optional uint64 ability_id = 2;
bool ActionError::has_ability_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ActionError::set_has_ability_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ActionError::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ActionError::clear_ability_id() {
  ability_id_ = GOOGLE_ULONGLONG(0);
  clear_has_ability_id();
}
 ::google::protobuf::uint64 ActionError::ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionError.ability_id)
  return ability_id_;
}
 void ActionError::set_ability_id(::google::protobuf::uint64 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionError.ability_id)
}

// optional .SC2APIProtocol.ActionResult result = 3;
bool ActionError::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ActionError::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
void ActionError::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
void ActionError::clear_result() {
  result_ = 1;
  clear_has_result();
}
 ::SC2APIProtocol::ActionResult ActionError::result() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ActionError.result)
  return static_cast< ::SC2APIProtocol::ActionResult >(result_);
}
 void ActionError::set_result(::SC2APIProtocol::ActionResult value) {
  assert(::SC2APIProtocol::ActionResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ActionError.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlayerResult::kPlayerIdFieldNumber;
const int PlayerResult::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlayerResult::PlayerResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SC2APIProtocol.PlayerResult)
}

void PlayerResult::InitAsDefaultInstance() {
}

PlayerResult::PlayerResult(const PlayerResult& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:SC2APIProtocol.PlayerResult)
}

void PlayerResult::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerResult::~PlayerResult() {
  // @@protoc_insertion_point(destructor:SC2APIProtocol.PlayerResult)
  SharedDtor();
}

void PlayerResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerResult_descriptor_;
}

const PlayerResult& PlayerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_s2clientprotocol_2fsc2api_2eproto();
  return *default_instance_;
}

PlayerResult* PlayerResult::default_instance_ = NULL;

PlayerResult* PlayerResult::New(::google::protobuf::Arena* arena) const {
  PlayerResult* n = new PlayerResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlayerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:SC2APIProtocol.PlayerResult)
  if (_has_bits_[0 / 32] & 3u) {
    player_id_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PlayerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SC2APIProtocol.PlayerResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .SC2APIProtocol.Result result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SC2APIProtocol::Result_IsValid(value)) {
            set_result(static_cast< ::SC2APIProtocol::Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SC2APIProtocol.PlayerResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SC2APIProtocol.PlayerResult)
  return false;
#undef DO_
}

void PlayerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SC2APIProtocol.PlayerResult)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }

  // optional .SC2APIProtocol.Result result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SC2APIProtocol.PlayerResult)
}

::google::protobuf::uint8* PlayerResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SC2APIProtocol.PlayerResult)
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }

  // optional .SC2APIProtocol.Result result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SC2APIProtocol.PlayerResult)
  return target;
}

int PlayerResult::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:SC2APIProtocol.PlayerResult)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }

    // optional .SC2APIProtocol.Result result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SC2APIProtocol.PlayerResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const PlayerResult* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const PlayerResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SC2APIProtocol.PlayerResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SC2APIProtocol.PlayerResult)
    MergeFrom(*source);
  }
}

void PlayerResult::MergeFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SC2APIProtocol.PlayerResult)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void PlayerResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SC2APIProtocol.PlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerResult::CopyFrom(const PlayerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SC2APIProtocol.PlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerResult::IsInitialized() const {

  return true;
}

void PlayerResult::Swap(PlayerResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlayerResult::InternalSwap(PlayerResult* other) {
  std::swap(player_id_, other->player_id_);
  std::swap(result_, other->result_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlayerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerResult_descriptor_;
  metadata.reflection = PlayerResult_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlayerResult

// optional uint32 player_id = 1;
bool PlayerResult::has_player_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PlayerResult::set_has_player_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PlayerResult::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PlayerResult::clear_player_id() {
  player_id_ = 0u;
  clear_has_player_id();
}
 ::google::protobuf::uint32 PlayerResult::player_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerResult.player_id)
  return player_id_;
}
 void PlayerResult::set_player_id(::google::protobuf::uint32 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerResult.player_id)
}

// optional .SC2APIProtocol.Result result = 2;
bool PlayerResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PlayerResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
void PlayerResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
void PlayerResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
 ::SC2APIProtocol::Result PlayerResult::result() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PlayerResult.result)
  return static_cast< ::SC2APIProtocol::Result >(result_);
}
 void PlayerResult::set_result(::SC2APIProtocol::Result value) {
  assert(::SC2APIProtocol::Result_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PlayerResult.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace SC2APIProtocol

// @@protoc_insertion_point(global_scope)
