// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s2clientprotocol/common.proto

#ifndef PROTOBUF_s2clientprotocol_2fcommon_2eproto__INCLUDED
#define PROTOBUF_s2clientprotocol_2fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2007000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SC2APIProtocol {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
void protobuf_AssignDesc_s2clientprotocol_2fcommon_2eproto();
void protobuf_ShutdownFile_s2clientprotocol_2fcommon_2eproto();

class AvailableAbility;
class ImageData;
class Point;
class Point2D;
class PointI;
class RectangleI;
class Size2DI;

enum Race {
  NoRace = 0,
  Terran = 1,
  Zerg = 2,
  Protoss = 3,
  Random = 4
};
bool Race_IsValid(int value);
const Race Race_MIN = NoRace;
const Race Race_MAX = Random;
const int Race_ARRAYSIZE = Race_MAX + 1;

const ::google::protobuf::EnumDescriptor* Race_descriptor();
inline const ::std::string& Race_Name(Race value) {
  return ::google::protobuf::internal::NameOfEnum(
    Race_descriptor(), value);
}
inline bool Race_Parse(
    const ::std::string& name, Race* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Race>(
    Race_descriptor(), name, value);
}
// ===================================================================

class AvailableAbility : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.AvailableAbility) */ {
 public:
  AvailableAbility();
  virtual ~AvailableAbility();

  AvailableAbility(const AvailableAbility& from);

  inline AvailableAbility& operator=(const AvailableAbility& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AvailableAbility& default_instance();

  void Swap(AvailableAbility* other);

  // implements Message ----------------------------------------------

  inline AvailableAbility* New() const { return New(NULL); }

  AvailableAbility* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AvailableAbility& from);
  void MergeFrom(const AvailableAbility& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AvailableAbility* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ability_id = 1;
  bool has_ability_id() const;
  void clear_ability_id();
  static const int kAbilityIdFieldNumber = 1;
  ::google::protobuf::int32 ability_id() const;
  void set_ability_id(::google::protobuf::int32 value);

  // optional bool requires_point = 2;
  bool has_requires_point() const;
  void clear_requires_point();
  static const int kRequiresPointFieldNumber = 2;
  bool requires_point() const;
  void set_requires_point(bool value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.AvailableAbility)
 private:
  inline void set_has_ability_id();
  inline void clear_has_ability_id();
  inline void set_has_requires_point();
  inline void clear_has_requires_point();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 ability_id_;
  bool requires_point_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fcommon_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fcommon_2eproto();

  void InitAsDefaultInstance();
  static AvailableAbility* default_instance_;
};
// -------------------------------------------------------------------

class ImageData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.ImageData) */ {
 public:
  ImageData();
  virtual ~ImageData();

  ImageData(const ImageData& from);

  inline ImageData& operator=(const ImageData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImageData& default_instance();

  void Swap(ImageData* other);

  // implements Message ----------------------------------------------

  inline ImageData* New() const { return New(NULL); }

  ImageData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ImageData& from);
  void MergeFrom(const ImageData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImageData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bits_per_pixel = 1;
  bool has_bits_per_pixel() const;
  void clear_bits_per_pixel();
  static const int kBitsPerPixelFieldNumber = 1;
  ::google::protobuf::int32 bits_per_pixel() const;
  void set_bits_per_pixel(::google::protobuf::int32 value);

  // optional .SC2APIProtocol.Size2DI size = 2;
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 2;
  const ::SC2APIProtocol::Size2DI& size() const;
  ::SC2APIProtocol::Size2DI* mutable_size();
  ::SC2APIProtocol::Size2DI* release_size();
  void set_allocated_size(::SC2APIProtocol::Size2DI* size);

  // optional bytes data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.ImageData)
 private:
  inline void set_has_bits_per_pixel();
  inline void clear_has_bits_per_pixel();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SC2APIProtocol::Size2DI* size_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 bits_per_pixel_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fcommon_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fcommon_2eproto();

  void InitAsDefaultInstance();
  static ImageData* default_instance_;
};
// -------------------------------------------------------------------

class PointI : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.PointI) */ {
 public:
  PointI();
  virtual ~PointI();

  PointI(const PointI& from);

  inline PointI& operator=(const PointI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointI& default_instance();

  void Swap(PointI* other);

  // implements Message ----------------------------------------------

  inline PointI* New() const { return New(NULL); }

  PointI* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointI& from);
  void MergeFrom(const PointI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PointI* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.PointI)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fcommon_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fcommon_2eproto();

  void InitAsDefaultInstance();
  static PointI* default_instance_;
};
// -------------------------------------------------------------------

class RectangleI : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.RectangleI) */ {
 public:
  RectangleI();
  virtual ~RectangleI();

  RectangleI(const RectangleI& from);

  inline RectangleI& operator=(const RectangleI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RectangleI& default_instance();

  void Swap(RectangleI* other);

  // implements Message ----------------------------------------------

  inline RectangleI* New() const { return New(NULL); }

  RectangleI* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RectangleI& from);
  void MergeFrom(const RectangleI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RectangleI* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SC2APIProtocol.PointI p0 = 1;
  bool has_p0() const;
  void clear_p0();
  static const int kP0FieldNumber = 1;
  const ::SC2APIProtocol::PointI& p0() const;
  ::SC2APIProtocol::PointI* mutable_p0();
  ::SC2APIProtocol::PointI* release_p0();
  void set_allocated_p0(::SC2APIProtocol::PointI* p0);

  // optional .SC2APIProtocol.PointI p1 = 2;
  bool has_p1() const;
  void clear_p1();
  static const int kP1FieldNumber = 2;
  const ::SC2APIProtocol::PointI& p1() const;
  ::SC2APIProtocol::PointI* mutable_p1();
  ::SC2APIProtocol::PointI* release_p1();
  void set_allocated_p1(::SC2APIProtocol::PointI* p1);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.RectangleI)
 private:
  inline void set_has_p0();
  inline void clear_has_p0();
  inline void set_has_p1();
  inline void clear_has_p1();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::SC2APIProtocol::PointI* p0_;
  ::SC2APIProtocol::PointI* p1_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fcommon_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fcommon_2eproto();

  void InitAsDefaultInstance();
  static RectangleI* default_instance_;
};
// -------------------------------------------------------------------

class Point2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.Point2D) */ {
 public:
  Point2D();
  virtual ~Point2D();

  Point2D(const Point2D& from);

  inline Point2D& operator=(const Point2D& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point2D& default_instance();

  void Swap(Point2D* other);

  // implements Message ----------------------------------------------

  inline Point2D* New() const { return New(NULL); }

  Point2D* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point2D& from);
  void MergeFrom(const Point2D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.Point2D)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fcommon_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fcommon_2eproto();

  void InitAsDefaultInstance();
  static Point2D* default_instance_;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  inline Point* New() const { return New(NULL); }

  Point* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fcommon_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fcommon_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class Size2DI : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SC2APIProtocol.Size2DI) */ {
 public:
  Size2DI();
  virtual ~Size2DI();

  Size2DI(const Size2DI& from);

  inline Size2DI& operator=(const Size2DI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Size2DI& default_instance();

  void Swap(Size2DI* other);

  // implements Message ----------------------------------------------

  inline Size2DI* New() const { return New(NULL); }

  Size2DI* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Size2DI& from);
  void MergeFrom(const Size2DI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Size2DI* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SC2APIProtocol.Size2DI)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  friend void  protobuf_AddDesc_s2clientprotocol_2fcommon_2eproto();
  friend void protobuf_AssignDesc_s2clientprotocol_2fcommon_2eproto();
  friend void protobuf_ShutdownFile_s2clientprotocol_2fcommon_2eproto();

  void InitAsDefaultInstance();
  static Size2DI* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// AvailableAbility

// optional int32 ability_id = 1;
inline bool AvailableAbility::has_ability_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AvailableAbility::set_has_ability_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AvailableAbility::clear_has_ability_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AvailableAbility::clear_ability_id() {
  ability_id_ = 0;
  clear_has_ability_id();
}
inline ::google::protobuf::int32 AvailableAbility::ability_id() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AvailableAbility.ability_id)
  return ability_id_;
}
inline void AvailableAbility::set_ability_id(::google::protobuf::int32 value) {
  set_has_ability_id();
  ability_id_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AvailableAbility.ability_id)
}

// optional bool requires_point = 2;
inline bool AvailableAbility::has_requires_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AvailableAbility::set_has_requires_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AvailableAbility::clear_has_requires_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AvailableAbility::clear_requires_point() {
  requires_point_ = false;
  clear_has_requires_point();
}
inline bool AvailableAbility::requires_point() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.AvailableAbility.requires_point)
  return requires_point_;
}
inline void AvailableAbility::set_requires_point(bool value) {
  set_has_requires_point();
  requires_point_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.AvailableAbility.requires_point)
}

// -------------------------------------------------------------------

// ImageData

// optional int32 bits_per_pixel = 1;
inline bool ImageData::has_bits_per_pixel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImageData::set_has_bits_per_pixel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImageData::clear_has_bits_per_pixel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImageData::clear_bits_per_pixel() {
  bits_per_pixel_ = 0;
  clear_has_bits_per_pixel();
}
inline ::google::protobuf::int32 ImageData::bits_per_pixel() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ImageData.bits_per_pixel)
  return bits_per_pixel_;
}
inline void ImageData::set_bits_per_pixel(::google::protobuf::int32 value) {
  set_has_bits_per_pixel();
  bits_per_pixel_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ImageData.bits_per_pixel)
}

// optional .SC2APIProtocol.Size2DI size = 2;
inline bool ImageData::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImageData::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImageData::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImageData::clear_size() {
  if (size_ != NULL) size_->::SC2APIProtocol::Size2DI::Clear();
  clear_has_size();
}
inline const ::SC2APIProtocol::Size2DI& ImageData::size() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ImageData.size)
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
inline ::SC2APIProtocol::Size2DI* ImageData::mutable_size() {
  set_has_size();
  if (size_ == NULL) {
    size_ = new ::SC2APIProtocol::Size2DI;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ImageData.size)
  return size_;
}
inline ::SC2APIProtocol::Size2DI* ImageData::release_size() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ImageData.size)
  clear_has_size();
  ::SC2APIProtocol::Size2DI* temp = size_;
  size_ = NULL;
  return temp;
}
inline void ImageData::set_allocated_size(::SC2APIProtocol::Size2DI* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ImageData.size)
}

// optional bytes data = 3;
inline bool ImageData::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImageData::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImageData::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImageData::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& ImageData::data() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.ImageData.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageData::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SC2APIProtocol.ImageData.data)
}
inline void ImageData::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SC2APIProtocol.ImageData.data)
}
inline void ImageData::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SC2APIProtocol.ImageData.data)
}
inline ::std::string* ImageData::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.ImageData.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImageData::release_data() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.ImageData.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImageData::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.ImageData.data)
}

// -------------------------------------------------------------------

// PointI

// optional int32 x = 1;
inline bool PointI::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointI::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointI::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointI::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 PointI::x() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PointI.x)
  return x_;
}
inline void PointI::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PointI.x)
}

// optional int32 y = 2;
inline bool PointI::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointI::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PointI::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PointI::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 PointI::y() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.PointI.y)
  return y_;
}
inline void PointI::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.PointI.y)
}

// -------------------------------------------------------------------

// RectangleI

// optional .SC2APIProtocol.PointI p0 = 1;
inline bool RectangleI::has_p0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RectangleI::set_has_p0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RectangleI::clear_has_p0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RectangleI::clear_p0() {
  if (p0_ != NULL) p0_->::SC2APIProtocol::PointI::Clear();
  clear_has_p0();
}
inline const ::SC2APIProtocol::PointI& RectangleI::p0() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RectangleI.p0)
  return p0_ != NULL ? *p0_ : *default_instance_->p0_;
}
inline ::SC2APIProtocol::PointI* RectangleI::mutable_p0() {
  set_has_p0();
  if (p0_ == NULL) {
    p0_ = new ::SC2APIProtocol::PointI;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RectangleI.p0)
  return p0_;
}
inline ::SC2APIProtocol::PointI* RectangleI::release_p0() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RectangleI.p0)
  clear_has_p0();
  ::SC2APIProtocol::PointI* temp = p0_;
  p0_ = NULL;
  return temp;
}
inline void RectangleI::set_allocated_p0(::SC2APIProtocol::PointI* p0) {
  delete p0_;
  p0_ = p0;
  if (p0) {
    set_has_p0();
  } else {
    clear_has_p0();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RectangleI.p0)
}

// optional .SC2APIProtocol.PointI p1 = 2;
inline bool RectangleI::has_p1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RectangleI::set_has_p1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RectangleI::clear_has_p1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RectangleI::clear_p1() {
  if (p1_ != NULL) p1_->::SC2APIProtocol::PointI::Clear();
  clear_has_p1();
}
inline const ::SC2APIProtocol::PointI& RectangleI::p1() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.RectangleI.p1)
  return p1_ != NULL ? *p1_ : *default_instance_->p1_;
}
inline ::SC2APIProtocol::PointI* RectangleI::mutable_p1() {
  set_has_p1();
  if (p1_ == NULL) {
    p1_ = new ::SC2APIProtocol::PointI;
  }
  // @@protoc_insertion_point(field_mutable:SC2APIProtocol.RectangleI.p1)
  return p1_;
}
inline ::SC2APIProtocol::PointI* RectangleI::release_p1() {
  // @@protoc_insertion_point(field_release:SC2APIProtocol.RectangleI.p1)
  clear_has_p1();
  ::SC2APIProtocol::PointI* temp = p1_;
  p1_ = NULL;
  return temp;
}
inline void RectangleI::set_allocated_p1(::SC2APIProtocol::PointI* p1) {
  delete p1_;
  p1_ = p1;
  if (p1) {
    set_has_p1();
  } else {
    clear_has_p1();
  }
  // @@protoc_insertion_point(field_set_allocated:SC2APIProtocol.RectangleI.p1)
}

// -------------------------------------------------------------------

// Point2D

// optional float x = 1;
inline bool Point2D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point2D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point2D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point2D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Point2D::x() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Point2D.x)
  return x_;
}
inline void Point2D::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Point2D.x)
}

// optional float y = 2;
inline bool Point2D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point2D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point2D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point2D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Point2D::y() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Point2D.y)
  return y_;
}
inline void Point2D::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Point2D.y)
}

// -------------------------------------------------------------------

// Point

// optional float x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Point.x)
  return x_;
}
inline void Point::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Point.x)
}

// optional float y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Point.y)
  return y_;
}
inline void Point::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Point.y)
}

// optional float z = 3;
inline bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Point::z() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Point.z)
  return z_;
}
inline void Point::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Point.z)
}

// -------------------------------------------------------------------

// Size2DI

// optional int32 x = 1;
inline bool Size2DI::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Size2DI::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Size2DI::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Size2DI::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Size2DI::x() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Size2DI.x)
  return x_;
}
inline void Size2DI::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Size2DI.x)
}

// optional int32 y = 2;
inline bool Size2DI::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Size2DI::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Size2DI::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Size2DI::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Size2DI::y() const {
  // @@protoc_insertion_point(field_get:SC2APIProtocol.Size2DI.y)
  return y_;
}
inline void Size2DI::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:SC2APIProtocol.Size2DI.y)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace SC2APIProtocol

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::SC2APIProtocol::Race> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SC2APIProtocol::Race>() {
  return ::SC2APIProtocol::Race_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_s2clientprotocol_2fcommon_2eproto__INCLUDED
